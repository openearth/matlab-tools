function OPT = nc_cf_stationtimeseries2kmloverview(metadatadatabase,varargin)
%NC_CF_STATIONTIMESERIES2KMLOVERVIEW   kml file with links to timeseries folder on OPeNDAP server
%
%     timeseries2kmloverview(metadatadatabase,<keyword,value>)
%
%  where metadatadatabase is the excel file generated by
%  NC_CF_STATIONTIMESERIES2META.
%  where you can use the following to see the <keyword,value> pairs:
%
%     OPT = timeseries2kmloverview()
%
%See also: vaklodingen_overview, jarkus_grids_overview

% 2009-10-07: Routine changed to allow for numeric station IDs and station names [Yann Friocourt]
% TO DO: allow for multiple parameters in one kml file instead of one per kml
% TO DO: allow for more types of metadatadatabase:
%        mysql, netcdf file in opendap itself, csv file, opendap catalog.xml

%% set options

   OPT.fileName           = [];
   OPT.kmlName            = 'tst.kml';
   OPT.THREDDSbase        = 'http://opendap.deltares.nl:8080/thredds/catalog/opendap/';
   OPT.HYRAXbase          = 'http://opendap.deltares.nl:8080/opendap/';
   OPT.ftpbase            = [];
   OPT.description        = 'test kml generated by OpenEarth';
   
   OPT.lineWidth          = 1;
   OPT.lineColor          = [0 0 0];
   OPT.lineAlpha          = 1;
   OPT.openInGE           = false;
   OPT.reversePoly        = false;
   OPT.text               = '';
   OPT.name               = [];
   
   OPT.lon                = [];
   OPT.lat                = [];
   OPT.z                  = [];

   OPT.iconnormalState    = 'http://maps.google.com/mapfiles/kml/shapes/placemark_square.png';
   OPT.iconhighlightState = 'http://maps.google.com/mapfiles/kml/shapes/placemark_square.png';
   
   if nargin==0
      return
   end
   
   OPT = setProperty(OPT,varargin{:});

%% get meta data

   if strcmpi(fileext(metadatadatabase),'.xls')
     [D,units] = xls2struct(metadatadatabase);
     if isnumeric(D.station_id)
         D.station_id = cellstr(num2str(D.station_id));
     else
       for i = 1:length(D.station_id)
           if isnumeric(D.station_id{i})
               D.station_id{i} = num2str(D.station_id{i});
           end
       end
       for i = 1:length(D.station_name)
           if isnumeric(D.station_name{i})
               D.station_name{i} = num2str(D.station_name{i});
           end
       end
     end
   else
      error('database type not implemented, only xls for now')
      % * opendap_folder_contents etc
      % * matroos type mysql database
      % * catalog.nc on opendap server ?
   end

%% start KML

   OPT.fid=fopen(OPT.fileName,'w');

%% HEADER

   if isempty(OPT.lon);OPT.lon = mean(D.longitude);end
   if isempty(OPT.lat);OPT.lat = mean(D.latitude); end
   if isempty(OPT.z  );OPT.z   = 100e4;            end

   OPT_header = struct(...
         'name',OPT.kmlName,...
         'open',0,...
          'lon',OPT.lon,...
          'lat',OPT.lat,...
            'z',OPT.z,...
       'timeIn',min(udunits2datenum(D.datenummin,units.datenummin)),...
      'timeOut',max(udunits2datenum(D.datenummax,units.datenummax)));
   output = KML_header(OPT_header);

%% STYLE

   OPT_style = struct(...
       'name'     ,['style' num2str(1)],...
       'lineColor',OPT.lineColor(1,:) ,...
       'lineAlpha',OPT.lineAlpha(1),...
       'lineWidth',OPT.lineWidth(1));
   output = [output KML_style(OPT_style)];

%% marker BallonStyle

   output = [output ...
    '<Style id="normalState">\n'...
    '  <IconStyle><scale>0.7</scale><Icon><href>\n'...
    '  ' OPT.iconnormalState '\n'...
    '  </href></Icon></IconStyle>\n'...
    '  <LabelStyle><scale>0</scale></LabelStyle>\n'...
    '  </Style>\n'...
    '<Style id="highlightState">\n'...
    '  <IconStyle><Icon><href>\n'...
    '  ' OPT.iconhighlightState '\n'...
    '  </href></Icon></IconStyle>\n'...
    '  <BalloonStyle>\n'...
    '  <text><![CDATA[<h3>$[name]</h3>\n'...
    '  $[description]<hr /><br />Provided by:\n'...
    '  <img src="https://public.deltares.nl/download/attachments/16876019/OET?version=1" align="right" width="100"/>]]></text>\n'...
    '  </BalloonStyle></Style>\n'...
    '<StyleMap id="MarkerBalloonStyle">\n'...
    '  <Pair><key>normal</key><styleUrl>#normalState</styleUrl></Pair> \n'...
    '  <Pair><key>highlight</key><styleUrl>#highlightState</styleUrl></Pair> \n'...
    '  </StyleMap>\n'];

%% labels

   output = [output, '<Folder>'];
   output = [output, '<Name>Outlines</Name>'];

%% generate markers

   %tableContents

   for ii=1:length(D.latitude)
    %disp(sprintf('writing coordinates: % 2d / %d',ii,length(D.latitude)));

    % generate table with data info
    tableContents = [];
    
    if ~isempty(OPT.name)
    
       tableContents = [tableContents sprintf([...
        '<tr><td>station name:</td><td>%s</td></tr>'...
        '<tr><td>station code:</td><td>%s</td></tr>'...
        '<tr><td>longitude:   </td><td>%g</td></tr>'...
        '<tr><td>latitude:    </td><td>%g</td></tr>'...
        '<tr><td># times:     </td><td>%g</td></tr>'...
        '<tr><td>1st time:    </td><td>%s</td></tr>'...
        '<tr><td>last time:   </td><td>%s</td></tr>',...
        '<tr><td>min:         </td><td>%s</td></tr>'...
        '<tr><td>mean:        </td><td>%s</td></tr>',...
        '<tr><td>max:         </td><td>%s</td></tr>'...
        '<tr><td>std:         </td><td>%s</td></tr>',...
        '<tr><td>meta-info:   </td><td><a href="%s">THREDDS server</a></td></tr>'...%link to timeseries
        '<tr><td>meta-info:   </td><td><a href="%s">HYRAX   server</a></td></tr>'...%link to timeseries
        '<tr><td>data:        </td><td><a href="%s">ftp server    </a></td></tr>\n'...%link to timeseries
        ],...
        strtrim(D.station_name{ii}),...
        upper(strtrim(D.station_id{ii})),...
        D.longitude(ii),...
        D.latitude(ii),...
        D.number_of_observations(ii),...
        datestr(udunits2datenum(D.datenummin(ii),units.datenummin),31),...
        datestr(udunits2datenum(D.datenummax(ii),units.datenummax),31),...
       [num2str(D.([OPT.name,'_min' ])(ii),'%g'),' ',units.([OPT.name,'_min' ])],...
       [num2str(D.([OPT.name,'_mean'])(ii),'%g'),' ',units.([OPT.name,'_mean'])],...
       [num2str(D.([OPT.name,'_max' ])(ii),'%g'),' ',units.([OPT.name,'_max' ])],...
       [num2str(D.([OPT.name,'_std' ])(ii),'%g'),' ',units.([OPT.name,'_std' ])],...
       [OPT.THREDDSbase,'/',strtrim(D.filename{ii}),'.html'],...
       [OPT.HYRAXbase  ,'/',strtrim(D.filename{ii}),'.html'],...
       [OPT.ftpbase    ,'/',strtrim(D.filename{ii})])];
       
    else
    
       tableContents = [tableContents sprintf([...
        '<tr><td>station name:</td><td>%s</td></tr>'...
        '<tr><td>station code:</td><td>%s</td></tr>'...
        '<tr><td>longitude:   </td><td>%g</td></tr>'...
        '<tr><td>latitude:    </td><td>%g</td></tr>'...
        '<tr><td># times:     </td><td>%g</td></tr>'...
        '<tr><td>1st time:    </td><td>%s</td></tr>'...
        '<tr><td>last time:   </td><td>%s</td></tr>',...
        '<tr><td>meta-info:   </td><td><a href="%s">THREDDS server</a></td></tr>'...%link to timeseries
        '<tr><td>meta-info:   </td><td><a href="%s">HYRAX   server</a></td></tr>'...%link to timeseries
        '<tr><td>data:        </td><td><a href="%s">ftp server    </a></td></tr>\n'...%link to timeseries
        ],...
        strtrim(D.station_name{ii}),...
        upper(strtrim(D.station_id{ii})),...
        D.longitude(ii),...
        D.latitude(ii),...
        D.number_of_observations(ii),...
        datestr(udunits2datenum(D.datenummin(ii),units.datenummin),31),...
        datestr(udunits2datenum(D.datenummax(ii),units.datenummax),31),...
       [OPT.THREDDSbase,'/',strtrim(D.filename{ii}),'.html'],...
       [OPT.HYRAXbase  ,'/',strtrim(D.filename{ii}),'.html'],...
       [OPT.ftpbase    ,'/',strtrim(D.filename{ii})])];
       
    end
    
    table = [...
        '<h3>Meta information</h3>\n'...
        '<table border="0" padding="0" width="200">'...
        tableContents...
        '</table>'];
        
   %% preproces timespan
   %  http://code.google.com/apis/kml/documentation/kmlreference.html#timespan
   
      if  ~isnan(D.datenummin(ii))
          OPT.timeSpan = sprintf([...
              '<TimeSpan>\n'...
              '<begin>%s</begin>\n'... % OPT.timeIn
              '<end>%s</end>\n'...     % OPT.timeOut
              '</TimeSpan>\n'],...
              datestr(udunits2datenum(D.datenummin(ii),units.datenummin),'yyyy-mm-ddTHH:MM:SS'),...
              datestr(udunits2datenum(D.datenummax(ii),units.datenummax),'yyyy-mm-ddTHH:MM:SS'));
      else
          OPT.timeSpan ='';
      end

    % generate description
    output = [output, sprintf([...
        '<Placemark>\n'...
        '<name>%s</name>\n'...                                         % 1 name
        '%s' ...                                                       % 2 timeSpan
        '<snippet></snippet>\n'...
        '<description><![CDATA[<hr/>\ncoordinates:  <br>\n'...
        '(%7.5f N,%7.5f E) <br>\n'...                                  % 3 lat lon
        '%s \n'...                                                     % 4 description
        '<hr/>\n'...
        '%s'...                                                        % 5 table with links
        ']]></description>\n'...
        '<styleUrl>#MarkerBalloonStyle</styleUrl>\n'...
        '<Point><coordinates>%3.8f,%3.8f,0</coordinates></Point>\n'... % 6 lon lat
        '</Placemark>\n'],...
         strtrim(D.station_name{ii}),... % strtrim(D.station_id{ii}),...
         OPT.timeSpan,...
         [D.latitude(ii) D.longitude(ii)],...
         [str2line(OPT.description,'s','<br>')],...
         table,...
         [D.longitude(ii) D.latitude(ii)])];
   end
   
%% FOOTER

   output = [output '</Folder>' KML_footer];
   fprintf(OPT.fid,output);

%% close KML

   fclose(OPT.fid);
