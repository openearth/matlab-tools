function nc_cf_standard_names(varargin)
%NC_CF_STANDARD_NAMES  Routine facilitates adding variables that are part of standard-name glossaries (CF-1.4, OE-1.0, VO-1.0)
%
%   Routine facilitates adding variables that are part of standard-name glossaries (CF-1.4, OE-1.0, VO-1.0).
%
%   Syntax:
%      nc_cf_standard_names(varargin)
%
%   Example:
%
%      nc_cf_standard_names('outputfile', outputfile, ...
%                           'varname',   {'x'}, ...
%                           'cf_standard_name', {'projection_x_coordinate'}, ...
%                           'dimension', {'time'})
%
%   Standard names supported:
%        (CF-1.4) 'altitude'
%        (CF-1.4) 'depth'
%        (CF-1.4) 'latitude'
%        (CF-1.4) 'longitude'
%        (CF-1.4) 'projection_x_coordinate'
%        (CF-1.4) 'projection_y_coordinate'
%        (CF-1.4) 'sea_surface_swell_wave_mean_period_from_variance_spectral_density_first_frequency_moment'
%        (CF-1.4) 'sea_surface_swell_wave_significant_height'
%        (CF-1.4) 'sea_surface_swell_wave_to_direction'
%        (CF-1.4) 'sea_surface_wave_mean_period_from_variance_spectral_density_first_frequency_moment'
%        (CF-1.4) 'sea_surface_wave_mean_period_from_variance_spectral_density_first_frequency_moment'
%        (CF-1.4) 'sea_surface_wave_mean_period_from_variance_spectral_density_second_frequency_moment'
%        (CF-1.4) 'sea_surface_wave_significant_height'
%        (CF-1.4) 'sea_surface_wave_to_direction'
%        (CF-1.4) 'sea_surface_wind_wave_mean_period_from_variance_spectral_density_first_frequency_moment'
%        (CF-1.4) 'sea_surface_wind_wave_significant_height'
%        (CF-1.4) 'sea_surface_wind_wave_to_direction'
%        (CF-1.4) 'wind_speed'
%        (CF-1.4) 'wind_to_direction'
%
%   See also nc_cf_standard_names_generate

%% Copyright notice
%   --------------------------------------------------------------------
%   Copyright (C) 2009 Van Oord
%       Mark van Koningsveld
%
%       mrv@vanoord.com
%
%       Watermanweg 64
%       POBox 8574
%       3009 AN Rotterdam
%       Netherlands
%
%   This library is free software: you can redistribute it and/or
%   modify it under the terms of the GNU Lesser General Public
%   License as published by the Free Software Foundation, either
%   version 2.1 of the License, or (at your option) any later version.
%
%   This library is distributed in the hope that it will be useful,
%   but WITHOUT ANY WARRANTY; without even the implied warranty of
%   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
%   Lesser General Public License for more details.
%
%   You should have received a copy of the GNU Lesser General Public
%   License along with this library. If not, see <http://www.gnu.org/licenses/>.
%   --------------------------------------------------------------------

% This tools is part of VOTools which is the internal clone of <a href="http://OpenEarth.Deltares.nl">OpenEarthTools</a>.
% OpenEarthTools is an online collaboration to share and manage data and
% programming tools in an open source, version controlled environment.
% Sign up to recieve regular updates of this function, and to contribute
% your own tools.

%% Version <http://svnbook.red-bean.com/en/1.5/svn.advanced.props.special.keywords.html>
% Created: 13 Nov 2009
% Created with Matlab version: 7.7.0.471 (R2008b)

% $Id$
% $Date$
% $Author$
% $Revision$
% $HeadURL$
% $Keywords: $

%% settings
% defaults
OPT = struct(...
    'outputfile',       {[]}, ...                            % description of input argument 1
    'varname',          {{{'test1'};{'test2'}}}, ...         % description of input argument 2
    'cf_standard_name', {{{'test1'};{'test2'}}}, ...         % description of input argument 3
    'dimension',        {{{'time'};{'x' ,'y', 'time'}}}, ... % description of input argument 4
    'timezone',        '+00:00' ...  			     % description of input argument 5
    );

% overrule default settings by property pairs, given in varargin
OPT = setProperty(OPT, varargin{:});

%% check some basic input properties
if size(OPT.cf_standard_name,1) ~= size(OPT.dimension,1)
    error('nc_cf_standard_names:argChk', 'Input arguments not of equal length')
end
if isempty(OPT.outputfile)
    error('nc_cf_standard_names:outputChk',  'No outputfilename indicated')
end

%% one by one add each variable
for i = 1:size(OPT.cf_standard_name,1)
    switch OPT.cf_standard_name{i}
        case 'altitude'
            % add variable: altitude
            Variable = struct(...
               'Name',       OPT.varname{i} , ...
               'Nctype',    'double', ... 
               'Dimension', {{OPT.dimension{i,:}}}, ... 
               'Attribute', struct( ... 
                   'Name', ... 
                   {'standard_name', 'long_name', 'units', 'fill_value'}, ...
                   'Value', ... 
                   {'altitude', 'altitude', 'm', NaN} ...
                   ) ...
                );
 
        case 'depth'
            % add variable: depth
            Variable = struct(...
               'Name',       OPT.varname{i} , ...
               'Nctype',    'double', ... 
               'Dimension', {{OPT.dimension{i,:}}}, ... 
               'Attribute', struct( ... 
                   'Name', ... 
                   {'standard_name', 'long_name', 'units', 'fill_value'}, ...
                   'Value', ... 
                   {'depth', 'depth', 'm', NaN} ...
                   ) ...
                );
 
        case 'latitude'
            % add variable: latitude
            Variable = struct(...
               'Name',       OPT.varname{i} , ...
               'Nctype',    'float', ... 
               'Dimension', {{OPT.dimension{i,:}}}, ... 
               'Attribute', struct( ... 
                   'Name', ... 
                   {'standard_name', 'long_name', 'units', 'fill_value'}, ...
                   'Value', ... 
                   {'latitude', 'latitude', 'degree_north', NaN} ...
                   ) ...
                );
 
        case 'longitude'
            % add variable: longitude
            Variable = struct(...
               'Name',       OPT.varname{i} , ...
               'Nctype',    'float', ... 
               'Dimension', {{OPT.dimension{i,:}}}, ... 
               'Attribute', struct( ... 
                   'Name', ... 
                   {'standard_name', 'long_name', 'units', 'fill_value'}, ...
                   'Value', ... 
                   {'longitude', 'longitude', 'degree_east', NaN} ...
                   ) ...
                );
 
        case 'projection_x_coordinate'
            % add variable: projection_x_coordinate
            Variable = struct(...
               'Name',       OPT.varname{i} , ...
               'Nctype',    'float', ... 
               'Dimension', {{OPT.dimension{i,:}}}, ... 
               'Attribute', struct( ... 
                   'Name', ... 
                   {'standard_name', 'long_name', 'units', 'fill_value'}, ...
                   'Value', ... 
                   {'projection_x_coordinate', 'x-coordinate', 'm', NaN} ...
                   ) ...
                );
 
        case 'projection_y_coordinate'
            % add variable: projection_y_coordinate
            Variable = struct(...
               'Name',       OPT.varname{i} , ...
               'Nctype',    'float', ... 
               'Dimension', {{OPT.dimension{i,:}}}, ... 
               'Attribute', struct( ... 
                   'Name', ... 
                   {'standard_name', 'long_name', 'units', 'fill_value'}, ...
                   'Value', ... 
                   {'projection_y_coordinate', 'y-coordinate', 'm', NaN} ...
                   ) ...
                );
 
        case 'sea_surface_swell_wave_mean_period_from_variance_spectral_density_first_frequency_moment'
            % add variable: sea_surface_swell_wave_mean_period_from_variance_spectral_density_first_frequency_moment
            Variable = struct(...
               'Name',       OPT.varname{i} , ...
               'Nctype',    'double', ... 
               'Dimension', {{OPT.dimension{i,:}}}, ... 
               'Attribute', struct( ... 
                   'Name', ... 
                   {'standard_name', 'long_name', 'units', 'fill_value'}, ...
                   'Value', ... 
                   {'sea_surface_swell_wave_mean_period_from_variance_spectral_density_first_frequency_moment', 'Mean wave period T-10 (Swell)', 's', NaN} ...
                   ) ...
                );
 
        case 'sea_surface_swell_wave_significant_height'
            % add variable: sea_surface_swell_wave_significant_height
            Variable = struct(...
               'Name',       OPT.varname{i} , ...
               'Nctype',    'double', ... 
               'Dimension', {{OPT.dimension{i,:}}}, ... 
               'Attribute', struct( ... 
                   'Name', ... 
                   {'standard_name', 'long_name', 'units', 'fill_value'}, ...
                   'Value', ... 
                   {'sea_surface_swell_wave_significant_height', 'Significant wave height (Swell)', 'm', NaN} ...
                   ) ...
                );
 
        case 'sea_surface_swell_wave_to_direction'
            % add variable: sea_surface_swell_wave_to_direction
            Variable = struct(...
               'Name',       OPT.varname{i} , ...
               'Nctype',    'double', ... 
               'Dimension', {{OPT.dimension{i,:}}}, ... 
               'Attribute', struct( ... 
                   'Name', ... 
                   {'standard_name', 'long_name', 'units', 'fill_value'}, ...
                   'Value', ... 
                   {'sea_surface_swell_wave_to_direction', 'Mean wave direction Theta (Swell)', 'degree', NaN} ...
                   ) ...
                );
 
        case 'sea_surface_wave_mean_period_from_variance_spectral_density_first_frequency_moment'
            % add variable: sea_surface_wave_mean_period_from_variance_spectral_density_first_frequency_moment
            Variable = struct(...
               'Name',       OPT.varname{i} , ...
               'Nctype',    'double', ... 
               'Dimension', {{OPT.dimension{i,:}}}, ... 
               'Attribute', struct( ... 
                   'Name', ... 
                   {'standard_name', 'long_name', 'units', 'fill_value'}, ...
                   'Value', ... 
                   {'sea_surface_wave_mean_period_from_variance_spectral_density_first_frequency_moment', 'Mean wave period T-10 (Sea and Swell)', 's', NaN} ...
                   ) ...
                );
 
        case 'sea_surface_wave_mean_period_from_variance_spectral_density_first_frequency_moment'
            % add variable: sea_surface_wave_mean_period_from_variance_spectral_density_first_frequency_moment
            Variable = struct(...
               'Name',       OPT.varname{i} , ...
               'Nctype',    'double', ... 
               'Dimension', {{OPT.dimension{i,:}}}, ... 
               'Attribute', struct( ... 
                   'Name', ... 
                   {'standard_name', 'long_name', 'units', 'fill_value'}, ...
                   'Value', ... 
                   {'sea_surface_wave_mean_period_from_variance_spectral_density_first_frequency_moment', 'Mean wave period (1st frequency moment)', 's', NaN} ...
                   ) ...
                );
 
        case 'sea_surface_wave_mean_period_from_variance_spectral_density_second_frequency_moment'
            % add variable: sea_surface_wave_mean_period_from_variance_spectral_density_second_frequency_moment
            Variable = struct(...
               'Name',       OPT.varname{i} , ...
               'Nctype',    'double', ... 
               'Dimension', {{OPT.dimension{i,:}}}, ... 
               'Attribute', struct( ... 
                   'Name', ... 
                   {'standard_name', 'long_name', 'units', 'fill_value'}, ...
                   'Value', ... 
                   {'sea_surface_wave_mean_period_from_variance_spectral_density_second_frequency_moment', 'Mean wave period (2nd frequency moment)', 's', NaN} ...
                   ) ...
                );
 
        case 'sea_surface_wave_significant_height'
            % add variable: sea_surface_wave_significant_height
            Variable = struct(...
               'Name',       OPT.varname{i} , ...
               'Nctype',    'double', ... 
               'Dimension', {{OPT.dimension{i,:}}}, ... 
               'Attribute', struct( ... 
                   'Name', ... 
                   {'standard_name', 'long_name', 'units', 'fill_value'}, ...
                   'Value', ... 
                   {'sea_surface_wave_significant_height', 'Significant wave height (Sea and Swell)', 'm', NaN} ...
                   ) ...
                );
 
        case 'sea_surface_wave_to_direction'
            % add variable: sea_surface_wave_to_direction
            Variable = struct(...
               'Name',       OPT.varname{i} , ...
               'Nctype',    'double', ... 
               'Dimension', {{OPT.dimension{i,:}}}, ... 
               'Attribute', struct( ... 
                   'Name', ... 
                   {'standard_name', 'long_name', 'units', 'fill_value'}, ...
                   'Value', ... 
                   {'sea_surface_wave_to_direction', 'Mean wave direction Theta (Sea and Swell)', 'degree', NaN} ...
                   ) ...
                );
 
        case 'sea_surface_wind_wave_mean_period_from_variance_spectral_density_first_frequency_moment'
            % add variable: sea_surface_wind_wave_mean_period_from_variance_spectral_density_first_frequency_moment
            Variable = struct(...
               'Name',       OPT.varname{i} , ...
               'Nctype',    'double', ... 
               'Dimension', {{OPT.dimension{i,:}}}, ... 
               'Attribute', struct( ... 
                   'Name', ... 
                   {'standard_name', 'long_name', 'units', 'fill_value'}, ...
                   'Value', ... 
                   {'sea_surface_wind_wave_mean_period_from_variance_spectral_density_first_frequency_moment', 'Mean wave period T-10 (Sea)', 's', NaN} ...
                   ) ...
                );
 
        case 'sea_surface_wind_wave_significant_height'
            % add variable: sea_surface_wind_wave_significant_height
            Variable = struct(...
               'Name',       OPT.varname{i} , ...
               'Nctype',    'double', ... 
               'Dimension', {{OPT.dimension{i,:}}}, ... 
               'Attribute', struct( ... 
                   'Name', ... 
                   {'standard_name', 'long_name', 'units', 'fill_value'}, ...
                   'Value', ... 
                   {'sea_surface_wind_wave_significant_height', 'Significant wave height (Sea)', 'm', NaN} ...
                   ) ...
                );
 
        case 'sea_surface_wind_wave_to_direction'
            % add variable: sea_surface_wind_wave_to_direction
            Variable = struct(...
               'Name',       OPT.varname{i} , ...
               'Nctype',    'double', ... 
               'Dimension', {{OPT.dimension{i,:}}}, ... 
               'Attribute', struct( ... 
                   'Name', ... 
                   {'standard_name', 'long_name', 'units', 'fill_value'}, ...
                   'Value', ... 
                   {'sea_surface_wind_wave_to_direction', 'Mean wave direction Theta (Sea)', 'degree', NaN} ...
                   ) ...
                );
 
        case 'wind_speed'
            % add variable: wind_speed
            Variable = struct(...
               'Name',       OPT.varname{i} , ...
               'Nctype',    'double', ... 
               'Dimension', {{OPT.dimension{i,:}}}, ... 
               'Attribute', struct( ... 
                   'Name', ... 
                   {'standard_name', 'long_name', 'units', 'fill_value'}, ...
                   'Value', ... 
                   {'wind_speed', 'Wind speed', 'm/s', NaN} ...
                   ) ...
                );
 
        case 'wind_to_direction'
            % add variable: wind_to_direction
            Variable = struct(...
               'Name',       OPT.varname{i} , ...
               'Nctype',    'double', ... 
               'Dimension', {{OPT.dimension{i,:}}}, ... 
               'Attribute', struct( ... 
                   'Name', ... 
                   {'standard_name', 'long_name', 'units', 'fill_value'}, ...
                   'Value', ... 
                   {'wind_to_direction', 'Wind direction', 'degree', NaN} ...
                   ) ...
                );
 
    end
    
    % add variable to output file
    nc_addvar(OPT.outputfile, Variable);
end

