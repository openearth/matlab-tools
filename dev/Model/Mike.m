%Class with a template to make new Classes
%
% @author ABR
% @author SEO
% @version
%

classdef Mike < handle
    %Public properties
    properties
        Property1;
    end

    %Dependand properties
    properties (Dependent = true, SetAccess = private)

    end

    %Private properties
    properties(SetAccess = private)

    end

    %Default constructor
    methods
        function obj = Template(property1)
            if nargin > 0
                obj.Property1 = property1;
            end
        end
    end

    %Set methods
    methods
        function set.Property1(obj,property1)
            obj.Property1 = property1;
        end
    end

    %Get methods
    methods
        function property1 = get.Property1(obj)
            property1 = obj.Property1;
        end
    end

    %Public methods
    methods

    end

    %Private methods
    methods (Access = 'private')

    end

    %Stactic methods
    methods (Static)
        
            function data = readProfile(aFile)
                % reads crossetion ascii file from Mike 11
                % data = Mike.readProfile(aFile)
                %
                % INPUT: aFile: string wioth the 
                % output data: a structure with the fields
                %    data.topoID      : Nx1 cellArray with the source of
                %    the bathymetry data
                %    data.riverName   : Nx1 cellAray with the names of a sectionthe name
                %    data.chainage    : Nx1 the distance
                %    data.coordinates : Nx5 matrix the x and y coordinates
                %    of a point (in 2nd and 3rd colums)
                %    data.prof        : Nx1 cell each containing a table with the profiles
                %
                % written by LWA
                % modified by ABR
                
                fid = fopen(aFile);
                tLine = fgetl(fid);
                i = 1;
                
                % preallocate
                nrCell = 10000;
                data.topoID = cell(nrCell,1);
                data.riverName = cell(nrCell,1);
                data.chainage = zeros(nrCell,1);
                data.coordinates = nan(nrCell,5);
                data.prof = cell(nrCell,1);
                
                % read blocks of data
                while ischar(tLine)
                    % read header
                    data.topoID {i}= tLine;
                    data.riverName{i} = fgetl(fid);
                    tLine = fgetl(fid);
                    data.chainage(i,:) = str2double(tLine);
                    tLine = fgetl(fid);
                    tLine = fgetl(fid);
                    data.coordinates(i,:) = str2num(tLine);
                    

                    while tLine(1) ~= '*'
                        tLine = fgetl(fid);
                    end
                    % read unused lines
                    for j=1:14
                        tLine = fgetl(fid);
                    end

                    % read the profiles
                    tLine = fgetl(fid);
                    pID = textscan(tLine,'%s %f');
                    nrPts = pID{2};
                    
                    data.prof{i} = textscan(tLine,'%f %f %f %s %f %f %f',nrPts);
                   
                    
                    while tLine(1) ~= '*'
                        tLine = fgetl(fid);
                    end
                    
                    i = i+1;
                    tLine = fgetl(fid);
                    if mod(i,500)==0
                        disp([num2str(i),'lines read']);
                    end
                end
                % delete unnecessary data
                i = i - 1;
                if i<nrCell
                    data.topoID      = data.topoID(1:i,:);
                    data.riverName   = data.riverName(1:i,:);
                    data.chainage    = data.chainage(1:i,:);
                    data.coordinates = data.coordinates(1:i,:);
                    data.prof        = data.prof(1:i,:);
                end
            end
        
        function mikeData = readMike(mikeData,mikeFile,varName)
            % reads mike ascii file
            %
            % mikeData = Mike.readMike(mikeFile,varName)
            %
            % INPUT: mikeData: strructure with data from previous
            %        variables. Can be empty. Note that time is
            %        overwritten.
            %        mikeFile: path of an ascii file generated by Mike
            %        varName:  string with the name of the variable in the
            %        file
            % OUTPUT: mikeData: structure to which the following fields are
            % added: 'time', reach, stat, ind and (varName)
            
            delim = ';';
            
            fid = fopen(mikeFile);
            
            % read header
            
            % first line
            aLine = fgetl(fid);
            
            % delete double delimiters
            mask = aLine==delim;
            nrDouble = sum(mask(1:end-1)&mask(2:end));
            
            nrCol = sum(aLine==delim)-nrDouble;
            
            % second line with reaches
            format = [repmat('%s ',1,nrCol),'%s'];
            cellLine = textscan(fid,format,1,'delimiter',delim);
            nrCell = length(cellLine);
            reach = cell(nrCell-1,1);
            stat  = cell(nrCell-1,1);
            ind   = zeros(nrCell-1,1);
            for i = 2:nrCell
                nrP      =  strfind(cellLine{i}{1},'(');
                nrP2     =  strfind(cellLine{i}{1},')');
                reach{i-1} = cellLine{i}{1}(1:nrP-1);
                stat{i-1} = cellLine{i}{1}(1:nrP2);
                ind(i-1)   = str2double(cellLine{i}{1}(nrP+1:nrP2-1));
            end
            
            % read data
            %format = ['%f-%f-%f %f:%f:%f ',repmat('%f ',1,nrCol-1)];
            format = ['%s ',repmat('%f ',1,nrCol)];
            cellData = textscan(fid,format,'delimiter',delim);
            fclose(fid);
            
            % parse data
            if isfield(mikeData,'time')
                warning('Time data are overwritten');
            end
            mikeData.time = datenum(cell2mat(cellData{1}),'dd/mm/yy HH:MM:SS');
            data = cell2mat(cellData(:,2:end));
            mikeData.(varName) = data;
            
            % add data from header
            mikeData.reach    = reach;
            mikeData.chainage = ind;
            mikeData.station  = stat;
            
            % add name of the run form the filename
            [~,mikeData.name] = fileparts(mikeFile);
            
        end
        
        
    end
end