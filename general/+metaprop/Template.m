function Template(object)
% basic template for creating code
mc = metaclass(object);

propnames = {mc.PropertyList(~[mc.PropertyList.Hidden]).Name};
str = '';
for ii = 1:length(propnames)
    switch class(object.(propnames{ii}))
        case 'logical'
            if numel(object.(propnames{ii})) == 1
                suggestedMetaprop = 'logicalScalar';
            else
                suggestedMetaprop = 'logicalArray';
            end            
        case 'double'
            if numel(object.(propnames{ii})) == 1
                if abs(object.(propnames{ii})-now())<10000
                    suggestedMetaprop = 'date';
                else
                    suggestedMetaprop = 'doubleScalar';
                end
            elseif size(object.(propnames{ii}),1) == 1
                suggestedMetaprop = 'doubleRow';
            else
                suggestedMetaprop = 'doubleArray';
            end
        case 'char'
            if exist(object.(propnames{ii}),'file')
                suggestedMetaprop = 'file';
            elseif exist(object.(propnames{ii}),'dir')
                suggestedMetaprop = 'folder';
            else
                suggestedMetaprop = 'char';
            end
        otherwise
            suggestedMetaprop = 'doubleScalar';
    end
    str = [str sprintf('\t\t\t''%s'',@metaprop.%s,{\n\t\t\t\t''Category'',''Add a category''\n\t\t\t\t''Description'',''Add a description''\n\t\t\t\t}\n',propnames{ii},suggestedMetaprop)];
end
fprintf(1,'\tproperties (Constant,Hidden)\n\t\t%% Code template generated by calling metaprop.Template(%s)\n\t\tmetaprops = metaprop.Construct(?%s,{\n%s        });\n\tend\n',mc.Name,mc.Name,str);
