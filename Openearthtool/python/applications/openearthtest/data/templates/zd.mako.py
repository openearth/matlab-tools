# -*- encoding:utf-8 -*-
from mako import runtime, filters, cache
UNDEFINED = runtime.UNDEFINED
__M_dict_builtin = dict
__M_locals_builtin = locals
_magic_number = 5
_modified_time = 1291021934.8099999
_template_filename='d:\\Repositories\\oetools\\python\\applications\\openearthtest\\openearthtest\\templates/zd.mako'
_template_uri='/zd.mako'
_template_cache=cache.Cache(__name__, _modified_time)
_source_encoding='utf-8'
from webhelpers.html import escape
_exports = []


def render_body(context,**pageargs):
    context.caller_stack._push_frame()
    try:
        __M_locals = __M_dict_builtin(pageargs=pageargs)
        __M_writer = context.writer()
        # SOURCE LINE 1
        __M_writer(u'<html>\r\n\r\n<head>\r\n\r\n\t<<!-- script to generate GoogleEarth plugin -->\r\n\t<script src="https://www.google.com/jsapi?key=ABQIAAAAVqCseOYylEg-Mc5u6LZD9xQChx54JYdgbPKio935j7RDK0bGdhSP7HZfiWq_54SIgjJ1e136ihOhBw"></script>\r\n\r\n\t<script src="http://dtvirt13/bwn/optie_python/js/loadxmldoc.js" type="text/javascript"> </script>\r\n\t<script src="http://dtvirt13/bwn/optie_python/js/soapclient.js" type="text/javascript"> </script>\r\n\t<script src="http://dtvirt13/bwn/optie_python/js/polydraw.js" type="text/javascript"> </script>\r\n\t<script type="text/javascript">\r\n\t\tvar ge = null;\r\n\t\tvar pm = null;\r\n\t\tvar kml = null;\r\n\t\tvar casexml = "http://127.0.0.1:5000/zd_data.xml";\r\n\r\n\t\tgoogle.load("earth", "1", {\'other_params\': \'sensor=false\' });\r\n\r\n\t\t// Initialize called on HTML body load\r\n\t\tfunction init() {\r\n\t\t\tgoogle.earth.setLanguage(\'en\');\r\n\t\t\tgoogle.earth.createInstance("map3d", initCallback, failureCallback);\r\n\t\t}\r\n\r\n\t\tfunction initCallback(object) {\r\n\t\t\tge = object;\r\n\t\t\tge.getWindow().setVisibility(true);\r\n\r\n\t\t\t<!-- *** Modify to suit your application *** -->\r\n\t\t\tvar cam = ge.getView().copyAsCamera(ge.ALTITUDE_ABSOLUTE);\r\n\t\t\tcam.setAltitude(120000);\r\n\t\t\tcam.setLatitude(51.6);\r\n\t\t\tcam.setLongitude(4.0);\r\n\t\t\tge.getView().setAbstractView(cam);\r\n\t\t\tge.getNavigationControl().setVisibility(ge.VISIBILITY_SHOW);\r\n\t\t    // Polygon used for drawing the shape in Google Earth\r\n\t\t    pm = new Polygon(0,0,0,0,document.getElementById(\'polygonselect\').value);\r\n\t\t    // Load the desired KML on start\r\n\t\t\tloadKML(\'http://dtvirt13/test/ahn100.kmz\');\r\n        \t}\r\n\r\n        \tfunction failureCallback(object) {\r\n        \t}\r\n\r\n\t\t// If Google Earth fails to load this function captures the Error Code\r\n\t\tfunction failureCB(errorCode){}\r\n\r\n\t\t// Initialize KMLs to be shown in Google Earth (needed for export to MathLab)\r\n\t\tfunction loadKML(kmlLocation)\r\n\t\t{\r\n\t\t\t// If a previous KML has been loaded, unload it.\r\n\t\t\tif (kml != null)\r\n\t\t\t{\r\n\t\t\t\tge.getFeatures().removeChild(kml);\r\n\t\t\t}\r\n\t\t\t// Load the KML from location\r\n\t\t\tgoogle.earth.fetchKml(ge, kmlLocation,  function(kmlObject)\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (kmlObject)\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tkml = kmlObject;\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tge.getFeatures().appendChild(kmlObject);\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\tfunction loadWMS(wmsLocation)\r\n\t\t{\r\n\t\t\tvar groundOverlay = ge.createGroundOverlay(\'\');\r\n\t\t\tgroundOverlay.setIcon(ge.createIcon(\'\'));\r\n\t\t\tgroundOverlay.getIcon().setHref(wmsLocation);\r\n\t\t\tgroundOverlay.setLatLonBox(ge.createLatLonBox(\'\'));\r\n\t\t\tvar center = ge.getView().copyAsLookAt(ge.ALTITUDE_RELATIVE_TO_GROUND);\r\n\t\t\tvar north = center.getLatitude() + .75;\r\n\t\t\tvar south = center.getLatitude() - .75;\r\n\t\t\tvar east = center.getLongitude() + 1.00;\r\n\t\t\tvar west = center.getLongitude() - 1.00;\r\n\t\t\tvar rotation = 0;\r\n\t\t\tvar latLonBox = groundOverlay.getLatLonBox();\r\n\t\t\tlatLonBox.setBox(north, south, east, west, rotation);\r\n\t\t\tge.getFeatures().appendChild(groundOverlay);\r\n\t\t}\r\n\r\n\t\t// Call Matlab Interpolate function\r\n\t\tfunction CallMatLabInterpolate()\r\n        {\r\n        if(pm != 0)\r\n        {\r\n        //document.getElementById("inter_image").src = data;\r\n        vertex = new Array(2);\r\n        centre = new Array(2);\r\n        vertex[0]=pm.rad.lat.toDeg();vertex[1]=pm.rad.lon.toDeg();\r\n        centre[0]=pm.cent.lat.toDeg();centre[1]=pm.cent.lon.toDeg();\r\n        v1 = vertex[0].toString();\r\n        v2 = vertex[1].toString();\r\n        c1 = centre[0].toString();\r\n        c2 = centre[1].toString();\r\n        temp = location.href;\r\n        temp = temp.replace("zd/map", "");\r\n        test = (temp + \'interpolate/interpolate?v1=\'+v1+\'&v2=\'+v2+\'&c1=\'+c1+\'&c2=\'+c2);\r\n        window.open(test,\'Interpolate\',\'width=961,height=620,scrollbars=yes,toolbar=yes,location=yes\');\r\n\r\n\t\t//location.href = (location.href + \'interpolate/interpolate?v1=\'+v1+\'&v2=\'+v2+\'&c1=\'+c1+\'&c2=\'+c2);\r\n\t\t//location.href = (location.href + \'/interpolate/interpolate/\'+KMLfile+\'/\'+vertex+\'/\'+centre);\r\n\t\t//location.href = (location.href + \'interpolate/interpolate/\'+vertex+\'/\'+centre);\r\n\t\t//interpolate/interpolate?v1=51.99&v2=4.68&c1=52.15&c2=4.76\r\n        }\r\n\t\t}\r\n\r\n\t</script>\r\n\r\n\t<style type="text/css">\r\n\t\tselect.s {font-size: 10px;}\r\n\t\tinput.vs {font-size: 8px;}\r\n\t\tinput.s {font-size: 9px;}\r\n\t</style>\r\n\r\n</head>\r\n\r\n<body onload=\'init()\' id=\'body\'>\r\n\r\n<div style=\'float:left; width:250px; height:550px; overflow:auto\'>\r\n  <table style=\'font-size:small\'>\r\n\t<tr>\r\n\t\t<td>\r\n\t\t<form name="caseSelect" action=\'javascript:void(0);\'>\r\n\t\t<p>\r\n\t\t<h3>Select case</h3>\r\n\t\t<select name="case" id="caseSelect" onchange="location.href=this.options[this.selectedIndex].value" class="s">\r\n\t\t<option value="/zd/map" class="vs">Zuidwestelijke Delta</option>\r\n\t\t<option value="/hk/map" class="vs">Hollandse Kust</option>\r\n\t\t<option value="/my/map" class="vs">Markermeer/IJselmeer</option>\r\n\t\t<option value="/si/map" class="vs">Singapore</option>\r\n\t\t</select>\r\n\t\t</p>\r\n\t\t</form>\r\n\t\t</td>\r\n\t</tr>\r\n\r\n\t<tr>\r\n\t\t<td>\r\n        <form name="kmlSelect" action=\'javascript:void(0);\'>\r\n\t\t<p>\r\n\t\t<h3>Select data</h3>\r\n\t\t<select name="kmlSelect" onchange=\'loadKML(this.value)\' class="s">\r\n\t\t<option value="" class="vs">Select data type</option>\r\n\t\t// Fill in the listbox with datasources on the basis of the selected case\r\n\t\t<script type="text/javascript">\r\n\t\txmlDoc=loadXMLDoc(casexml);\r\n\t\tnumOfData=xmlDoc.getElementsByTagName("kml").length;\r\n\t\tfor (i=0;i<numOfData;i=i+1)\r\n\t\t{\r\n\t\tdocument.write("<option value=\'" + xmlDoc.getElementsByTagName("kml")[i].childNodes[0].nodeValue + "\' class=\'vs\'>" + xmlDoc.getElementsByTagName("title")[i].childNodes[0].nodeValue + "</option>");\r\n\t\t}\r\n\t\t</script>\r\n\t\t</select>\r\n\t\t</p>\r\n\t\t</form>\r\n\t\t</td>\r\n\t</tr>\r\n\r\n \t<tr>\r\n\t\t<td>\r\n\t\t<form id="polyShape" action=\'javascript:void(0);\'>\r\n\t\t<p>\r\n\t\t<h3>Actions</h3>\r\n\t\t<select name="polygon" id="polygonselect" onchange=\'pm.numsides = this.value; pm.drawPolygon()\' class="s">\r\n\t\t\t<option value="2" class="vs">Line</option>\r\n\t\t\t<option value="3" class="vs">Triangle</option>\r\n\t\t\t<option value="4" class="vs">Square</option>\r\n\t\t\t<option value="5" class="vs">Pentagon</option>\r\n\t\t\t<option value="6" class="vs">Hexagon</option>\r\n\t\t\t<option value="7" class="vs">Heptagon</option>\r\n\t\t\t<option value="8" class="vs">Octagon</option>\r\n\t\t\t<option value="9" class="vs">Nonagon</option>\r\n\t\t\t<option value="10" class="vs">Decagon</option>\r\n\t\t\t<option value="11" class="vs">Hendecagon</option>\r\n\t\t\t<option value="12" class="vs">Dodecagon</option>\r\n\t\t\t<option value="25" class="vs">Circle</option>\r\n\t\t</select></p>\r\n\t\t</form>\r\n\t\t</td>\r\n\t</tr>\r\n\r\n\t<tr><td>Centre: </td><td><span id=\'centre\'></span></td></tr>\r\n\t<tr><td>Vertex: </td><td><span id=\'outer\'></span></td></tr>\r\n\t<tr><td>Radius: </td><td><span id=\'rad\'></span></td></tr>\r\n\t<tr><td>Bearing: </td><td><span id=\'bear\'></span></td></tr>\r\n\t<tr><td>perimeter: </td><td><span id=\'per\'></span></td></tr>\r\n\t<tr><td>Area: </td><td><span id=\'are\'></span></td></tr>\r\n\r\n\t<tr>\r\n\t\t<td>\r\n\t\t\t<form id="interpoleButton" action=\'javascript:void(0);\'>\r\n\t\t\t\t<input type="submit" name="Interpoleer" value="Interpoleer" onClick="javascript:CallMatLabInterpolate();">\r\n\t\t\t</form>\r\n\t\t</td>\r\n\t</tr>\r\n</table>\r\n<hr/>\r\n  Drag pushpins to size, locate and rotate,<br><br>\r\n  Crtl + mouse, moves the polygon to a new location.\r\n</div>\r\n\r\n<div id=\'map3d_container\' style=\'border: 1px solid silver; height: 900px; margin-left:250px;\'>\r\n\t<div id=\'map3d\' style=\'height: 100%;\'></div>\r\n</div>\r\n\r\n</body>\r\n\r\n</html>')
        return ''
    finally:
        context.caller_stack._pop_frame()


