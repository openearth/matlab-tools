#   Copyright notice
#   --------------------------------------------------------------------
#   Copyright (C) 2017 Witteveen+Bos
#
#       Jochem Boersma
#
#       jochem.boersma@witteveenbos.com
#
#       Van Twickelostraat 2
#       7411 SC Deventer
#       The Netherlands
#
#   This library is free software: you can redistribute it and/or modify
#   it under the terms of the GNU Lesser General Public License as published by
#   the Free Software Foundation, either version 3 of the License, or
#   (at your option) any later version.
#
#   This library is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this library.  If not, see <http://www.gnu.org/licenses/>.
#   --------------------------------------------------------------------
import numpy as np
import math

import Scripts.WavePenetration as wp
import Scripts.GeneralData as gd
import Scripts.LinearWaveTheory as lwt

from Scripts.GeneralData.Entities import Scenario
from Scripts.GeneralData.Entities import Waves
from Scripts.GeneralData.Entities import WaveClimate
import Scripts.GeneralData.Utilities as myUtils 

## Daarnaast, om te testen de CornuSpiraal
from Scripts.WavePenetration.CornuSpiral import CornuSpiral as _CornuSpiral

from Libraries.StandardFunctions import *
from Libraries.ChartFunctions import *

## generating of scenario and some Nearshore WaveClimates.
myScen = Scenario();
myScen.GenericData.NearshoreWaves = Waves();
klots = WaveClimate(1, 8, 225, 0.2);
klots2 = WaveClimate(3, 8, 340, 0.2);
klotsArray = WaveClimate(np.array([3,4]), np.array([8, 4]), np.array([270, 108]), np.array([0.2, 0.8]));


##Assumption
#Two heads of Breakwater available.

#Heads of BW's (in X, Y)
#(Zou eigelijk in CivilStructure moeten)
bwHeadNorth = np.array([100, 140]);
bwHeadSouth = np.array([20, 80]);
BWopenWidth = np.sqrt(np.sum((bwHeadNorth - bwHeadSouth) ** 2))

#Transform towards grid with 'breakwaterbase'.


##Assumption: Nearshore-waves present
#(Otherwise, transform from Offshore to nearshore, with LinWaveTheory)


##Assumption: Nearshore-wave climate is located in mid of Breakwaters heads. This becomes the center of all coordinates afterwards
oldOrigin = (bwHeadNorth - bwHeadSouth)/2 + bwHeadSouth;
#print(oldOrigin)

#Transpose WaveDirection such that +y is inside harbor
harborEntryNormal = 320 #Northing
[theta0, ixD] = lwt.calcRelativeDirection(klots2.Dir, harborEntryNormal)
[theta0, ixD] = lwt.calcRelativeDirection(klots2.Dir, harborEntryNormal)


#Assumption: waves are incoming?? (ixD == true)
#print(ixD)

#Further: the references works with radians, from x-axis, counterclockwise. 
#Reason: the discontinuity on theta = 0 and theta is pi.
beta0 = (theta0 + 90) * (math.pi/180)
print(beta0)


#Setup for harbor coordinates:
xRange = np.arange(-50, 50, 1);
yRange = np.arange(0, 1000, 1);
xx, yy = np.meshgrid(xRange, yRange);
harborDepth = 15;


f = np.arange(0, 4, 0.1);
#Setup for polar domain: Not needed: domain will be generated by the 'real' occurence of wave-array.

# Mitsayasu frequency spectrum (according to Goda, 1978) [m^2s] (N.B. divide by 2*pi !!!) 
Sf = wp.MitsayasuFreqSpectrum(klots.Hs, klots.Tp, f)


##Assumption: Directional spreading of waves
S = wp.SpreadingFunction(10, 8, f)
#print(S)

#Generate a (local) polar coordinate-system, based on Cartesian coords
r = np.hypot(xx, yy);  
theta = np.arctan2(yy, xx);

#Since all harbor is at positive y, no negative theta is given.
#print(np.any(theta < 0)) 

#print(np.size(theta))
#print(np.size(r))

print(_CornuSpiral[4])

#check strict increasing of sigma in CornuSpiral
print(np.all(np.diff(_CornuSpiral[:,0]) > 0))

"""henk = np.arange(0,5,1.01);
toos = np.arange(10, 17, 0.8);
print(henk)
print(toos)"""
#compl = [0  1+1j  2j  5+4j  4];
#test = np.interp(2, henk, compl)

L = lwt.calcWaveLength(klots.Tp, harborDepth) 
print(L)
Field = wp.SommerfeldPenneyPrice(xx, yy, bwHeadNorth[0], bwHeadNorth[1], L, theta0)

#print(Field)

#test = np.interp(2, henk, toos)
#test = np.interp(henk)
#sc.interpolate.interp1d(2, henk, toos)
test = myUtils.Interp(2, henk, toos)
print(test)

#print(BWwidth)
