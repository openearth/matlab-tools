from datetime import datetime
from netCDF4 import Dataset
import numpy as np


class Script(object):
    start = 0
    contents = ''
    filename = 'netcdfreadersguide'
    ext = ''
    comment_prefix = '#'
    variables = ''
    line_ending = '\n'
    url = ''

    def __init__(self, **kwargs):
        for key, val in kwargs.iteritems():
            setattr(self, key, val)
        print self.dimensions
        self.variables = self.variables.strip()
        if self.variables is u'':
            self.variables = []
        else:
            self.variables = self.variables.split(',')

    def get_contents(self):
        return self.contents

    def add_header(self):
        self.add_comment('%s script generated by netCDF readers guide' % self.__class__.__name__)
        self.add_comment('at %s' % datetime.strftime(datetime.utcnow(), '%Y-%m-%dT%H:%MZ'))
        self.add_empty()

    def add_url(self):
        self._add_line('url = \'%s\'' % self.url)

    def open_dataset(self):
        pass

    def close_dataset(self):
        pass

    def add_footer(self):
        pass

    def add_comment(self, comment, indent=''):
        self._add_line('%s%s %s' % (indent, self.comment_prefix, comment))

    def add_cell(self, comment):
        self._add_line('%s%s %s' % (self.comment_prefix, self.comment_prefix, comment))

    def read_variable(self, name):
        pass

    def add_empty(self):
        self._add_line()

    def _add_line(self, line='', indent=''):
        self.contents = ''.join([self.contents, indent, line, self.line_ending])

    def get_ssc(self, start, stop, step=1):
        series = np.arange(start, stop, step)
        return start+self.start, step, len(series)


class Python(Script):
    __label__ = 'Python'
    __islang__ = True
    ext = '.py'

    def write(self):
        self.add_header()
        self.add_empty()
        self.add_comment('define url')
        self.add_url()
        self.add_empty()
        self.open_dataset()
        self.add_empty()
        self.add_comment('read variables', indent='    ')
        for varname in self.variables:
            self.read_variable(varname, indent='    ')
        self.add_empty()
        self.close_dataset()
        return self.contents

    def add_header(self):
        super(Python, self).add_header()

        self.add_comment('import package')
        self._add_line('from netCDF4 import Dataset')
        self._add_line()

    def open_dataset(self):
        self.add_comment('open dataset')
        self._add_line('with Dataset(url) as ds:')

    def read_variable(self, name, indent='    '):
        ds = Dataset(self.url)
        vardims = ds.variables[name].dimensions
        ds.close()
        confdims = self.dimensions.keys()
        dimsel = []
        for vardim in vardims:
            if vardim in confdims:
                dims = [self.dimensions[vardim.strip()][0], self.dimensions[vardim.strip()][-1]]
                dimsel.append(':'.join(map(str, dims)))
            else:
                dimsel.append(':')
        dimsel_str = ','.join(dimsel)
        self._add_line('%s = ds.variables[\'%s\'][%s]' % (name, name, dimsel_str), indent=indent)

    def close_dataset(self):
        pass
        # self.add_comment('close dataset')
        # self._add_line('ds.close()')


class Matlab(Script):
    __label__ = 'Matlab (native)'
    __islang__ = True
    ext = '.m'
    start = 1
    count = 'Inf'
    stride = 1

    def write(self):
        self.comment_prefix = '%'
        self.add_header()
        self.add_comment('define url')
        self.add_url()
        self.add_empty()
        self.add_comment('confine dimensions')
        self._add_line('[start, count, stride] = deal(%i, %s, %i);' % (self.start, str(self.count), self.stride))
        for dim in self.dimensions.keys():
            self.define_dimension(dim.strip())
        self.add_empty()
        self.add_comment('read variables')
        for varname in self.variables:
            self.read_variable(varname)
        return self.contents

    def add_url(self):
        self._add_line('url = \'%s\';' % self.url)

    def add_header(self):
        super(Matlab, self).add_header()

        self._add_line()

    def define_dimension(self, dim):
        diminfo = self.dimensions[dim]
        if diminfo[0] != self.start:
            self._add_line("%s_start = %i;" % (dim, diminfo[0]+self.start))
        ds = Dataset(self.url)
        dimlen = ds.dimensions[dim].__len__()
        ds.close()
        if diminfo[-1] != dimlen:
            count = np.arange(diminfo[0], diminfo[-1], diminfo[1]).shape[0]
            self._add_line("%s_count = %i;" % (dim, count))
        if diminfo[1] != self.stride:
            self._add_line("%s_stride = %i;" % (dim, diminfo[1]))

    def read_variable(self, name):
        ds = Dataset(self.url)
        vardims = ds.variables[name].dimensions
        ds.close()
        confdims = self.dimensions.keys()
        dimsta, dimstr, dimcnt = [], [], []
        for vardim in vardims:
            if vardim in confdims:
                diminfo = self.dimensions[vardim]
                if diminfo[0] == self.start:
                    dimsta.append('start')
                else:
                    dimsta.append('%s_start' % vardim)
                ds = Dataset(self.url)
                dimlen = ds.dimensions[vardim].__len__()
                ds.close()
                if diminfo[-1] == dimlen:
                    dimcnt.append('count')
                else:
                    dimcnt.append('%s_count' % vardim)
                if diminfo[1] == self.stride:
                    dimstr.append('stride')
                else:
                    dimstr.append('%s_stride' % vardim)
            else:
                dimsta.append('start')
                dimstr.append('stride')
                dimcnt.append('count')
        start = "[%s]" % " ".join(map(str, dimsta[::-1]))
        count = "[%s]" % " ".join(map(str, dimcnt[::-1]))
        stride = "[%s]" % " ".join(map(str, dimstr[::-1]))
        self._add_line("%s = ncread(url, '%s', %s, %s, %s);" % (name, name, start, count, stride))


class Matlab_oet(Script):
    __label__ = 'Matlab (OET)'
    __islang__ = True
    ext = '.m'
    start = 0
    count = 'Inf'
    stride = 1

    def write(self):
        self.comment_prefix = '%'
        self.add_header()
        self.add_comment('This script uses OpenEarthTools. Make sure that this toolbox is activated by running oetsettings.m.')
        self.add_empty()
        self.add_comment('define url')
        self.add_url()
        self.add_empty()
        self.add_comment('confine dimensions')
        self._add_line('[start, count, stride] = deal(%i, %s, %i);' % (self.start, str(self.count), self.stride))
        for dim in self.dimensions.keys():
            self.define_dimension(dim)
        self.add_empty()
        self.add_comment('read variables')
        for varname in self.variables:
            self.read_variable(varname)
        return self.contents

    def add_url(self):
        self._add_line('url = \'%s\';' % self.url)

    def add_header(self):
        super(Matlab_oet, self).add_header()

        self._add_line()

    def define_dimension(self, dim):
        diminfo = self.dimensions[dim]
        if diminfo[0] != self.start:
            self._add_line("%s_start = %i;" % (dim, diminfo[0]+self.start))
        ds = Dataset(self.url)
        dimlen = ds.dimensions[dim.strip()].__len__()
        ds.close()
        if diminfo[-1] != dimlen:
            count = np.arange(diminfo[0], diminfo[-1], diminfo[1]).shape[0]
            self._add_line("%s_count = %i;" % (dim, count))
        if diminfo[1] != self.stride:
            self._add_line("%s_stride = %i;" % (dim, diminfo[1]))

    def read_variable(self, name):
        ds = Dataset(self.url)
        vardims = ds.variables[name].dimensions
        ds.close()
        confdims = self.dimensions.keys()
        dimsta, dimstr, dimcnt = [], [], []
        for vardim in vardims:
            if vardim in confdims:
                diminfo = self.dimensions[vardim]
                if diminfo[0] == self.start:
                    dimsta.append('start')
                else:
                    dimsta.append('%s_start' % vardim)
                ds = Dataset(self.url)
                dimlen = ds.dimensions[vardim].__len__()
                ds.close()
                if diminfo[-1] == dimlen:
                    dimcnt.append('count')
                else:
                    dimcnt.append('%s_count' % vardim)
                if diminfo[1] == self.stride:
                    dimstr.append('stride')
                else:
                    dimstr.append('%s_stride' % vardim)
            else:
                dimsta.append('start')
                dimstr.append('stride')
                dimcnt.append('count')
        start = "[%s]" % " ".join(map(str, dimsta))
        count = "[%s]" % " ".join(map(str, dimcnt))
        stride = "[%s]" % " ".join(map(str, dimstr))
        self._add_line("%s = nc_varget(url, '%s', %s, %s, %s);" % (name, name, start, count, stride))
