# DO NOT EDIT THIS FILE. This file will be overwritten when re-running go-raml.

"""
Auto-generated class for Parameter
"""
from .datetime - only import datetime - only
from six import string_types

from . import client_support


class Parameter(object):
    """
    auto-generated. don't touch.
    """

    @staticmethod
    def create(**kwargs):
        """
        :type authors: string_types
        :type changedate: datetime-only
        :type code: string_types
        :type name: string_types
        :type taxongroup: string_types
        :type taxontype: string_types
        :type type: string_types
        :rtype: Parameter
        """

        return Parameter(**kwargs)

    def __init__(self, json=None, **kwargs):
        if json is None and not kwargs:
            raise ValueError('No data or kwargs present')

        class_name = 'Parameter'
        data = json or kwargs

        # set attributes
        data_types = [string_types]
        self.authors = client_support.set_property('authors', data, data_types, False, [], False, False, class_name)
        data_types = [datetime - only]
        self.changedate = client_support.set_property(
            'changedate', data, data_types, False, [], False, False, class_name)
        data_types = [string_types]
        self.code = client_support.set_property('code', data, data_types, False, [], False, True, class_name)
        data_types = [string_types]
        self.name = client_support.set_property('name', data, data_types, False, [], False, True, class_name)
        data_types = [string_types]
        self.taxongroup = client_support.set_property(
            'taxongroup', data, data_types, False, [], False, False, class_name)
        data_types = [string_types]
        self.taxontype = client_support.set_property('taxontype', data, data_types, False, [], False, False, class_name)
        data_types = [string_types]
        self.type = client_support.set_property('type', data, data_types, False, [], False, True, class_name)

    def __str__(self):
        return self.as_json(indent=4)

    def as_json(self, indent=0):
        return client_support.to_json(self, indent=indent)

    def as_dict(self):
        return client_support.to_dict(self)
