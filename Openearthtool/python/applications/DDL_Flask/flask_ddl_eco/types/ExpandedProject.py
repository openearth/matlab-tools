# DO NOT EDIT THIS FILE. This file will be overwritten when re-running go-raml.

"""
Auto-generated class for ExpandedProject
"""
from .ExpandEntityBase import ExpandEntityBase
from .date - only import date - only
from six import string_types

from . import client_support


class ExpandedProject(object):
    """
    auto-generated. don't touch.
    """

    @staticmethod
    def create(**kwargs):
        """
        :type code: string_types
        :type definition: ExpandEntityBase
        :type end: date-only
        :type name: string_types
        :type organisation: string_types
        :type start: date-only
        :rtype: ExpandedProject
        """

        return ExpandedProject(**kwargs)

    def __init__(self, json=None, **kwargs):
        if json is None and not kwargs:
            raise ValueError('No data or kwargs present')

        class_name = 'ExpandedProject'
        data = json or kwargs

        # set attributes
        data_types = [string_types]
        self.code = client_support.set_property('code', data, data_types, False, [], False, True, class_name)
        data_types = [ExpandEntityBase]
        self.definition = client_support.set_property(
            'definition', data, data_types, False, [], False, True, class_name)
        data_types = [date - only]
        self.end = client_support.set_property('end', data, data_types, False, [], False, True, class_name)
        data_types = [string_types]
        self.name = client_support.set_property('name', data, data_types, False, [], False, True, class_name)
        data_types = [string_types]
        self.organisation = client_support.set_property(
            'organisation', data, data_types, False, [], False, True, class_name)
        data_types = [date - only]
        self.start = client_support.set_property('start', data, data_types, False, [], False, True, class_name)

    def __str__(self):
        return self.as_json(indent=4)

    def as_json(self, indent=0):
        return client_support.to_json(self, indent=indent)

    def as_dict(self):
        return client_support.to_dict(self)
