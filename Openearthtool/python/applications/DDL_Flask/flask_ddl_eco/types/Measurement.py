# DO NOT EDIT THIS FILE. This file will be overwritten when re-running go-raml.

"""
Auto-generated class for Measurement
"""
from .GeoJSON import GeoJSON
from .datetime - only import datetime - only
from six import string_types

from . import client_support


class Measurement(object):
    """
    auto-generated. don't touch.
    """

    @staticmethod
    def create(**kwargs):
        """
        :type calculatedUnit: string_types
        :type calculatedValue: float
        :type changedate: datetime-only
        :type classifiedValue: string_types
        :type collectionDate: datetime-only
        :type compartment: string_types
        :type limitSymbol: string_types
        :type locationgeography: GeoJSON
        :type measuredUnit: string_types
        :type measuredValue: float
        :type measurementAttributes: list[string_types]
        :type measurementDate: datetime-only
        :type measurementObject: string_types
        :type measurementPackage: string_types
        :type measurementPurpose: string_types
        :type measurementgeography: GeoJSON
        :type methods: list[string_types]
        :type note: string_types
        :type organisation: string_types
        :type parameter: string_types
        :type parameterGroup: string_types
        :type parameterType: string_types
        :type projects: list[string_types]
        :type quantity: string_types
        :type status: string_types
        :type taxonType: string_types
        :rtype: Measurement
        """

        return Measurement(**kwargs)

    def __init__(self, json=None, **kwargs):
        if json is None and not kwargs:
            raise ValueError('No data or kwargs present')

        class_name = 'Measurement'
        data = json or kwargs

        # set attributes
        data_types = [string_types]
        self.calculatedUnit = client_support.set_property(
            'calculatedUnit', data, data_types, False, [], False, False, class_name)
        data_types = [float]
        self.calculatedValue = client_support.set_property(
            'calculatedValue', data, data_types, False, [], False, False, class_name)
        data_types = [datetime - only]
        self.changedate = client_support.set_property(
            'changedate', data, data_types, False, [], False, True, class_name)
        data_types = [string_types]
        self.classifiedValue = client_support.set_property(
            'classifiedValue', data, data_types, False, [], False, False, class_name)
        data_types = [datetime - only]
        self.collectionDate = client_support.set_property(
            'collectionDate', data, data_types, False, [], False, True, class_name)
        data_types = [string_types]
        self.compartment = client_support.set_property(
            'compartment', data, data_types, False, [], False, True, class_name)
        data_types = [string_types]
        self.limitSymbol = client_support.set_property(
            'limitSymbol', data, data_types, False, [], False, False, class_name)
        data_types = [GeoJSON]
        self.locationgeography = client_support.set_property(
            'locationgeography', data, data_types, False, [], False, False, class_name)
        data_types = [string_types]
        self.measuredUnit = client_support.set_property(
            'measuredUnit', data, data_types, False, [], False, True, class_name)
        data_types = [float]
        self.measuredValue = client_support.set_property(
            'measuredValue', data, data_types, False, [], False, False, class_name)
        data_types = [string_types]
        self.measurementAttributes = client_support.set_property(
            'measurementAttributes', data, data_types, False, [], True, False, class_name)
        data_types = [datetime - only]
        self.measurementDate = client_support.set_property(
            'measurementDate', data, data_types, False, [], False, True, class_name)
        data_types = [string_types]
        self.measurementObject = client_support.set_property(
            'measurementObject', data, data_types, False, [], False, True, class_name)
        data_types = [string_types]
        self.measurementPackage = client_support.set_property(
            'measurementPackage', data, data_types, False, [], False, False, class_name)
        data_types = [string_types]
        self.measurementPurpose = client_support.set_property(
            'measurementPurpose', data, data_types, False, [], False, False, class_name)
        data_types = [GeoJSON]
        self.measurementgeography = client_support.set_property(
            'measurementgeography', data, data_types, False, [], False, False, class_name)
        data_types = [string_types]
        self.methods = client_support.set_property('methods', data, data_types, False, [], True, False, class_name)
        data_types = [string_types]
        self.note = client_support.set_property('note', data, data_types, False, [], False, False, class_name)
        data_types = [string_types]
        self.organisation = client_support.set_property(
            'organisation', data, data_types, False, [], False, True, class_name)
        data_types = [string_types]
        self.parameter = client_support.set_property('parameter', data, data_types, False, [], False, False, class_name)
        data_types = [string_types]
        self.parameterGroup = client_support.set_property(
            'parameterGroup', data, data_types, False, [], False, False, class_name)
        data_types = [string_types]
        self.parameterType = client_support.set_property(
            'parameterType', data, data_types, False, [], False, False, class_name)
        data_types = [string_types]
        self.projects = client_support.set_property('projects', data, data_types, False, [], True, False, class_name)
        data_types = [string_types]
        self.quantity = client_support.set_property('quantity', data, data_types, False, [], False, True, class_name)
        data_types = [string_types]
        self.status = client_support.set_property('status', data, data_types, False, [], False, True, class_name)
        data_types = [string_types]
        self.taxonType = client_support.set_property('taxonType', data, data_types, False, [], False, False, class_name)

    def __str__(self):
        return self.as_json(indent=4)

    def as_json(self, indent=0):
        return client_support.to_json(self, indent=indent)

    def as_dict(self):
        return client_support.to_dict(self)
