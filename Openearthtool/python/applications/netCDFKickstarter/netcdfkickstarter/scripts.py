from datetime import datetime


class Script(object):

    contents = ''
    filename = 'kickstarter.nc'
    url = 'http://publicwiki.deltares.nl/display/OET/netCDF%20kickstarter'
    order = ['create', 'dimensions', 'variables', 'attributes_global', 'data']
    indent = ''
    compresion_level = 5
    shuffle = True

    def __init__(self, filename=None, url=None):
        if filename is not None:
            self.filename = filename
        if url is not None:
            self.url = url

    def get_contents(self):
        return self.contents

    def add_header(self):

        self.add_comment('%s script generated by netCDF kickstarter' % self.__class__.__name__)
        self.add_comment('at %s' % datetime.utcnow().strftime('%Y-%m-%dT%H:%MZ'))
        self.add_comment(self.url)
        self.add_empty()

    def add_create(self):
        pass

    def add_footer(self):
        pass

    def add_comment(self, comment):
        self._add_line('# %s' % comment)

    def add_cell(self, comment):
        self._add_line('## %s' % comment)

    def add_dimension(self, name, length):
        pass

    def add_dimensionfunction(self):
        pass

    def add_variable(self, name, dtype, dimensions):
        pass

    def add_attribute(self, name, value, variable=None):
        if variable == None:
            self.add_attribute_global(name, value)
        else:
            self.add_attribute_var(name, value, variable)

    def add_attribute_global(self, name, value):
        pass

    def add_attribute_var(self, name, value, variable):
        pass

    def add_empty(self):
        self._add_line()

    def _add_line(self, line='', indent=''):
        self.contents = self.contents + indent + line + '\n'

    def _istext(self, value):
        if type(value) is str or type(value) is unicode:
            return True
        else:
            return False


class Python(Script):

    def add_header(self):
        super(Python, self).add_header()

        self._add_line('import netCDF4')
        self._add_line()

    def _add_line(self, line=''):
        self.contents = self.contents + self.indent + line + '\n'

    def add_create(self):
        self._add_line('with netCDF4.Dataset(\'%s\', mode=\'w\') as nc:' % self.filename)
        # override self.indent to make all following lines indented
        self.indent = '    '

    def add_dimension(self, name, length):
        self._add_line('nc.createDimension(\'%s\', %d)' % (name, length))

    def add_variable(self, name, dtype, dimensions):
        # Switch on compression by default.
        self._add_line('nc.createVariable(\'%s\', \'%s\', %s, zlib=True, complevel=%i, shuffle=%s)'
                       % (name, str(dtype), repr(dimensions), self.compresion_level, str(self.shuffle)))

    def add_attribute_global(self, name, value):
        if self._istext(value):
            self._add_line('nc.%s = \'%s\'' % (name, value))
        else:
            self._add_line('nc.%s = %s' % (name, value))

    def add_attribute_var(self, name, value, variable):
        if self._istext(value):
            self._add_line('nc.variables[\'%s\'].%s = \'%s\'' % (variable, name, value))
        else:
            self._add_line('nc.variables[\'%s\'].%s = %s' % (variable, name, value))


class Matlab(Script):
    def __init__(self, *args, **kwargs):
        super(Matlab, self).__init__(*args, **kwargs)
        self.order = ['dimensions', 'variables', 'attributes_global', 'create', 'data']

    def add_header(self):
        super(Matlab, self).add_header()

        self._add_line("ncfile = '%s';" % self.filename)
        self.add_empty()
        self.add_cell('PRE-ALLOCATE EMPTY STRUCTURES')
        self._add_line("dims = struct('Name', {}, 'Length', {}); ")
        self._add_line("atts = struct('Name', {}, 'Value', {});")
        self._add_line("vars = struct('Name', {}, 'Datatype', {}, 'Dimensions', {}, 'DeflateLevel', {}, 'Shuffle', {}, 'Attributes', {});")
        self.add_empty()

    def add_create(self):
        self.add_cell('CREATE SCHEMA')
        self._add_line("schema = struct( ...")
        self._add_line("    'Filename', ncfile, ...")
        self._add_line("    'Format', 'netcdf4', ... choose from {'classic', '64bit', 'netcdf4_classic', 'netcdf4'}")
        self._add_line("    'Name', '/', ...")
        self._add_line("    'Dimensions', dims, ...")
        self._add_line("    'Variables', vars, ...")
        self._add_line("    'Attributes', atts);")
        self.add_cell('WRITE SCHEMA')
        self._add_line('ncwriteschema(ncfile, schema);')

    def add_footer(self):
        super(Matlab, self).add_footer()
        self.add_empty()

    def add_comment(self, comment):
        self._add_line('%% %s' % comment)

    def add_cell(self, comment):
        self._add_line('%%%% %s' % comment)

    def add_dimension(self, name, length):
        self._add_line("dims(end+1) = struct('Name', '%s', 'Length', %d);" % (name, length))

    def add_dimensionfunction(self):
        self.add_empty()
        self.add_comment('inline function to adopt dimensions to variable dimensions')
        self._add_line('dims2vardims = @(dimname) dims(ismember({dims.Name}, dimname));')

    def add_variable(self, name, dtype, dimensions):
        self._add_line('vars(end+1) = struct(...')
        self._add_line("    'Name', '%s',..." % name)
        self._add_line("    'Datatype', '%s',..." % self._convert_dtype(dtype))
        self._add_line("    'Dimensions', cellfun(dims2vardims, {%s}),..." % ','.join(["'%s'" % d for d in dimensions]))
        self._add_line("    'DeflateLevel', %s,..." % self.compresion_level)
        self._add_line("    'Shuffle', %s,..." % str(self.shuffle).lower())
        self._add_line("    'Attributes', struct('Name', {}, 'Value', {}));")

    def add_attribute_global(self, name, value):
        if self._istext(value):
            self._add_line("atts(end+1) = struct('Name', '%s', 'Value', '%s');" % (name, value))
        else:
            self._add_line("atts(end+1) = struct('Name', '%s', 'Value', %s);" % (name, value))

    def add_attribute_var(self, name, value, variable):
        if self._istext(value):
            self._add_line("vars(end).Attributes(end+1) = struct('Name', '%s', 'Value', '%s');" % (name, value))
        else:
            self._add_line("vars(end).Attributes(end+1) = struct('Name', '%s', 'Value', %s);" % (name, value))

    def _convert_dtype(self, dtype):
        if dtype.startswith('float'):
            return 'double'
        else:
            return dtype


class RNcdf4(Script):
    def __init__(self, *args, **kwargs):
        super(RNcdf4, self).__init__(*args, **kwargs)
        self.dimensions = []
        self.variables = []
        self.order = ['header', 'dimensions', 'variables', 'create', 'attributes_global', 'footer']

    def add_header(self):
        super(RNcdf4, self).add_header()

        self._add_line('library("ncdf4")')
        self._add_line()
        self._add_line('filename <- "%s"' % self.filename)
        self._add_line()

    def add_footer(self):
        super(RNcdf4, self).add_footer()
        self._add_line('nc_close(ncnew)')

    def add_dimension(self, name, length):
        if length == 0:
            self._add_line('%s_dim <- ncdim_def("%s", "", 1:1, unlim=TRUE, create_dimvar=FALSE)' % (name, name))
            self.add_comment('the ncdf4 api does not support 0 length dimension. Make sure you reuse the first element')

        else:
            self._add_line('%s_dim <- ncdim_def("%s", "", 1:%d, unlim=FALSE, create_dimvar=FALSE)' % (name, name, length))

    def add_attribute_global(self, name, value):
        if isinstance(value, (str, unicode)):
            self._add_line('ncatt_put(ncnew, 0, "%s", "%s")' % (name, value))
        else:
            self._add_line('ncatt_put(ncnew, 0, "%s", %s, prec="short")' % (name, value))

    def add_variable(self, name, dtype, dimensions):
        dimlist = ','.join(reversed(['%s_dim' % d for d in dimensions]))
        self._add_line('%s_var <- ncvar_def("%s", "", list(%s))' % (name, name, dimlist))
        self.variables.append("%s_var" % (name, ))

    def add_create(self):
        vars = ", ".join(self.variables)
        vars = "list(%s)" % (vars, )
        self._add_line('ncnew <- nc_create(filename, %s)' % vars)
