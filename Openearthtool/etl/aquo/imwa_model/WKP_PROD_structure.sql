--
-- PostgreSQL database dump
--

-- Dumped from database version 9.5.4
-- Dumped by pg_dump version 9.5.4

SET statement_timeout = 0;
SET lock_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SET check_function_bodies = false;
SET client_min_messages = warning;
-- SET row_security = off;

--
-- Name: WKP_PROD; Type: DATABASE; Schema: -; Owner: -
--

-- CREATE DATABASE "WKP_PROD" WITH TEMPLATE = template0 ENCODING = 'UTF8' LC_COLLATE = 'en_US.UTF-8' LC_CTYPE = 'en_US.UTF-8';


--\connect "oet_data"

SET statement_timeout = 0;
SET lock_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SET check_function_bodies = false;
SET client_min_messages = warning;
-- SET row_security = off;

--
-- Name: aquo_formaten; Type: SCHEMA; Schema: -; Owner: -
--

CREATE SCHEMA aquo_formaten;


--
-- Name: beheer; Type: SCHEMA; Schema: -; Owner: -
--

CREATE SCHEMA beheer;


--
-- Name: SCHEMA beheer; Type: COMMENT; Schema: -; Owner: -
--

COMMENT ON SCHEMA beheer IS 'Views en functies voor functioneel beheer. Het systeem draait ook zonder deze views.';


--
-- Name: domains; Type: SCHEMA; Schema: -; Owner: -
--

CREATE SCHEMA domains;


--
-- Name: eu_state_of_environment; Type: SCHEMA; Schema: -; Owner: -
--

CREATE SCHEMA eu_state_of_environment;


--
-- Name: factsheets; Type: SCHEMA; Schema: -; Owner: -
--

CREATE SCHEMA factsheets;


--
-- Name: SCHEMA factsheets; Type: COMMENT; Schema: -; Owner: -
--

COMMENT ON SCHEMA factsheets IS 'Speciaal schema voor factsheet. Hierin komen alleen de views die door de factsheets worden gebruikt';


--
-- Name: krm; Type: SCHEMA; Schema: -; Owner: -
--

CREATE SCHEMA krm;


--
-- Name: monprog; Type: SCHEMA; Schema: -; Owner: -
--

CREATE SCHEMA monprog;


--
-- Name: sgbp_dgrw; Type: SCHEMA; Schema: -; Owner: -
--

CREATE SCHEMA sgbp_dgrw;


--
-- Name: topology; Type: SCHEMA; Schema: -; Owner: -
--

CREATE SCHEMA topology;


--
-- Name: wfd_reporting; Type: SCHEMA; Schema: -; Owner: -
--

CREATE SCHEMA wfd_reporting;


--
-- Name: plpgsql; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS plpgsql WITH SCHEMA pg_catalog;


--
-- Name: EXTENSION plpgsql; Type: COMMENT; Schema: -; Owner: -
--

COMMENT ON EXTENSION plpgsql IS 'PL/pgSQL procedural language';


--
-- Name: adminpack; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS adminpack WITH SCHEMA pg_catalog;


--
-- Name: EXTENSION adminpack; Type: COMMENT; Schema: -; Owner: -
--

COMMENT ON EXTENSION adminpack IS 'administrative functions for PostgreSQL';


--
-- Name: postgis; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS postgis WITH SCHEMA public;


--
-- Name: EXTENSION postgis; Type: COMMENT; Schema: -; Owner: -
--

COMMENT ON EXTENSION postgis IS 'PostGIS geometry, geography, and raster spatial types and functions';


--
-- Name: postgis_topology; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS postgis_topology WITH SCHEMA topology;


--
-- Name: EXTENSION postgis_topology; Type: COMMENT; Schema: -; Owner: -
--

COMMENT ON EXTENSION postgis_topology IS 'PostGIS topology spatial types and functions';


--
-- Name: tablefunc; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS tablefunc WITH SCHEMA public;


--
-- Name: EXTENSION tablefunc; Type: COMMENT; Schema: -; Owner: -
--

COMMENT ON EXTENSION tablefunc IS 'functions that manipulate whole tables, including crosstab';


SET search_path = beheer, pg_catalog;

--
-- Name: RefreshAllMaterializedViews(text, boolean); Type: FUNCTION; Schema: beheer; Owner: -
--

CREATE FUNCTION "RefreshAllMaterializedViews"(_schema text DEFAULT '*'::text, _concurrently boolean DEFAULT false) RETURNS integer
    LANGUAGE plpgsql
    AS $$
DECLARE
    r RECORD;
  BEGIN
    RAISE NOTICE 'Refreshing materialized view(s) in % %', CASE WHEN _schema = '*' THEN ' all schemas' ELSE 'schema "'|| _schema || '"' END, CASE WHEN _concurrently THEN 'concurrently' ELSE '' END;
    IF pg_is_in_recovery() THEN 
      RETURN 1;
    ELSE    
      FOR r IN SELECT schemaname, matviewname FROM pg_matviews WHERE schemaname = _schema OR _schema = '*' 
      LOOP
        RAISE NOTICE 'Refreshing %.%', r.schemaname, r.matviewname;
        EXECUTE 'REFRESH MATERIALIZED VIEW ' || CASE WHEN _concurrently THEN 'CONCURRENTLY ' ELSE '' END || '"' || r.schemaname || '"."' || r.matviewname || '"'; 
      END LOOP;
    END IF;
    RETURN 0;
  END
$$;


--
-- Name: sp_missing_links(); Type: FUNCTION; Schema: beheer; Owner: -
--

CREATE FUNCTION sp_missing_links() RETURNS TABLE(table_schema text, table_name text, id integer, reltab_schema text, reltab_name text, rid integer, table_record text, reltab_record text)
    LANGUAGE plpgsql
    AS $$
BEGIN

--osc Monitoringprogramma/bundel
--observing_capability_observation
--Monprog zonder waarnemingen.
RETURN QUERY SELECT 'public'::text, 'osc'::text, NULL::integer
, 'public'::text, 'oco'::text, NULL::integer
, 'osc - observing_capability zonder waarnemingen oco - observing_capability_observation'::text, NULL::text;
RETURN QUERY SELECT 'public'::text, 'osc'::text, osc.osc_id::integer
, 'public'::text, 'oco'::text, oco.ocbs_id::integer
, osc::text, oco::text
FROM observing_capability osc
LEFT JOIN observing_capability_observation oco
  ON osc.osc_id = oco.osc_id
WHERE oco.ocbs_id IS NULL
ORDER BY osc.osc_id;
--14

--observing_capability_observation
--Waarnemingen zonder monprog
RETURN QUERY SELECT 'public'::text, 'obs'::text, NULL::integer
, 'public'::text, 'oco'::text, NULL::integer
, 'obs - observation zonder waarnemingen oco - observing_capability_observation'::text, NULL::text;
RETURN QUERY SELECT 'public'::text, 'obs'::text, obs.obs_id::integer
, 'public'::text, 'oco'::text, oco.ocbs_id::integer
, obs::text, oco::text
FROM observation obs
LEFT JOIN observing_capability_observation oco
  ON obs.obs_id = oco.obs_id
WHERE oco.ocbs_id IS NULL
ORDER BY obs.obs_id;
--14


--observing_capability_responsible_party
--Monprog zonder uitvoerder.
RETURN QUERY SELECT 'public'::text, 'osc'::text, NULL::integer
, 'public'::text, 'ocrp'::text, NULL::integer
, 'osc - observing_capability zonder uitvoerder ocrp - observing_capability_responsible_party'::text, NULL::text;
RETURN QUERY SELECT 'public'::text, 'osc'::text, osc.osc_id::integer
, 'public'::text, 'ocrp'::text, ocrp.ocrp_id::integer
, osc::text, ocrp::text
FROM observing_capability osc
LEFT JOIN observing_capability_responsible_party ocrp 
  ON osc.osc_id = ocrp.osc_id
WHERE ocrp.ocrp_id IS NULL
ORDER BY osc.osc_id;
--4

--Organisatie/uitvoerder zonder Monprog
RETURN QUERY SELECT 'public'::text, 'ore'::text, NULL::integer
, 'public'::text, 'ocrp'::text, NULL::integer
, 'ore - organisatorisch eenheid zonder monprog ocrp - observing_capability_responsible_party'::text, NULL::text;
RETURN QUERY SELECT 'public'::text, 'ore'::text, ore.ore_id::integer
, 'public'::text, 'ocrp'::text, ocrp.ocrp_id::integer
, ore::text, ocrp::text
FROM organisatorische_eenheid ore
LEFT JOIN observing_capability_responsible_party ocrp 
  ON ore.ore_id = ocrp.ore_id
WHERE ocrp.ocrp_id IS NULL
ORDER BY ore.ore_id;
--4


--observing_capability_sample
--Monprog zonder monster.
RETURN QUERY SELECT 'public'::text, 'osc'::text, NULL::integer
, 'public'::text, 'ocs'::text, NULL::integer
, 'osc - observing_capability zonder monster ocs - observing_capability_sample'::text, NULL::text;
RETURN QUERY SELECT 'public'::text, 'osc'::text, osc.osc_id::integer
, 'public'::text, 'ocs'::text, ocs.ocsa_id::integer
, osc::text, ocs::text
FROM observing_capability osc
LEFT JOIN observing_capability_sample ocs
  ON osc.osc_id = ocs.osc_id
WHERE osc.is_sample = TRUE 
AND ocs.ocsa_id IS NULL
ORDER BY osc.osc_id;
--26

--qem
--quality_element_observation
--Monprog-regel zonder waarnemingen
RETURN QUERY SELECT 'public'::text, 'qem'::text, NULL::integer
, 'public'::text, 'qeo'::text, NULL::integer
, 'qem - quality_element (mp.regel) zonder waarnemingen qeo - quality_element_observation'::text, NULL::text;
RETURN QUERY SELECT 'public'::text, 'qem'::text, qem.qem_id::integer
, 'public'::text, 'qeo'::text, qeo.qeo_id::integer
, qem::text, qeo::text
FROM quality_element qem
LEFT JOIN quality_element_observation qeo
  ON qem.qem_id = qeo.qem_id
WHERE qeo.qeo_id IS NULL
ORDER BY qem.qem_id;
--142 maar dit kan

--quality_element_sample
--Monprog-regel zonder monster
RETURN QUERY SELECT 'public'::text, 'qem'::text, NULL::integer
, 'public'::text, 'qes'::text, NULL::integer
, 'qem - quality_element (mp.regel) zonder monster qes - quality_element_sample'::text, NULL::text;
RETURN QUERY SELECT 'public'::text, 'qem'::text, qem.qem_id::integer
, 'public'::text, 'qes'::text, qes.qes_id::integer
, qem::text, qes::text
FROM quality_element qem
JOIN observing_capability osc
  ON (qem.osc_id = osc.osc_id AND osc.is_sample = TRUE)
LEFT JOIN quality_element_sample qes
  ON qem.qem_id = qes.qem_id
WHERE qes.qes_id IS NULL
ORDER BY qem.qem_id;
--212 maar dit kan

--monprog.quality_element_indicator_descriptor
--Monprog-regel zonder indicator
RETURN QUERY SELECT 'public'::text, 'qem'::text, NULL::integer
, 'monprog'::text, 'qeid'::text, NULL::integer
, 'qem - quality_element (mp.regel) zonder monster qeid - quality_element_indicator_desrciptor'::text, NULL::text;
RETURN QUERY SELECT 'public'::text, 'qem'::text, qem.qem_id::integer
, 'monprog'::text, 'qeid'::text, NULL::integer
, qem::text, qeid::text
FROM quality_element qem
LEFT JOIN monprog.quality_element_indicator_descriptor qeid
  ON qem.qem_id = qeid.qem_id
WHERE qeid.qem_id IS NULL
ORDER BY qem.qem_id;
--0

--monitoring_object_quality_element
--Monprog-regel zonder meetlocatie
RETURN QUERY SELECT 'public'::text, 'qem'::text, NULL::integer
, 'public'::text, 'moqe'::text, NULL::integer
, 'qem - quality_element (mp.regel) zonder meetlocatie moqe - monitoring_object_quality_element'::text, NULL::text;
RETURN QUERY SELECT 'public'::text, 'qem'::text, qem.qem_id::integer
, 'public'::text, 'moqe'::text, moqe.moqe_id::integer
, qem::text, moqe::text
FROM quality_element qem
LEFT JOIN monitoring_object_quality_element moqe
  ON qem.qem_id = moqe.qem_id
WHERE moqe.qem_id IS NULL
ORDER BY qem.qem_id;
--0

--pot
--geen

--opt
--geen

--obj
--object_group_element
--Object zonder groep G
RETURN QUERY SELECT 'public'::text, 'obj'::text, NULL::integer
, 'public'::text, 'ogeG'::text, NULL::integer
, 'obj - object_type zonder groep G oge/ojg - object_group_element (ojg type G)'::text, NULL::text;
RETURN QUERY SELECT 'public'::text, 'obj'::text, obj.obj_id::integer
, 'public'::text, 'ogeG'::text, oge.ojg_id::integer
, obj::text, oge::text
FROM object_type obj
LEFT JOIN object_group_element oge
  ON obj.obj_id = oge.obj_id
LEFT JOIN object_group ojg
  ON (oge.ojg_id = ojg.ojg_id AND ojg.group_type = 'G')
WHERE oge.obj_id IS NULL
ORDER BY obj.obj_id;
--0

--Object zonder groep I
RETURN QUERY SELECT 'public'::text, 'obj'::text, NULL::integer
, 'public'::text, 'ogeI'::text, NULL::integer
, 'obj - object_type zonder groep I oge/ojg - object_group_element (ojg type I)'::text, NULL::text;
RETURN QUERY SELECT 'public'::text, 'obj'::text, obj.obj_id::integer
, 'public'::text, 'ogeI'::text, oge.ojg_id::integer
, obj::text, oge.ojg_id::text
FROM object_type obj
LEFT JOIN object_group_element oge
  ON obj.obj_id = oge.obj_id
LEFT JOIN object_group ojg
  ON (oge.ojg_id = ojg.ojg_id AND ojg.group_type = 'I')
WHERE oge.obj_id IS NULL
ORDER BY obj.obj_id;
--0

--ojg zonder element
RETURN QUERY SELECT 'public'::text, 'ojg'::text, NULL::integer
, 'public'::text, 'oge'::text, NULL::integer
, 'obj - object_group zonder oge - object_group_element (oge)'::text, NULL::text;
RETURN QUERY SELECT 'public'::text, 'ojg'::text, ojg.ojg_id::integer
, 'public'::text, 'oge'::text, oge.ojg_id::integer
, ojg::text, oge::text
FROM object_group ojg
LEFT JOIN object_group_element oge
  ON ojg.ojg_id = oge.ojg_id
WHERE oge.ojg_id IS NULL
ORDER BY ojg.ojg_id;
--0

--chs
--substance_group_element
--Chemische stof zonder groep G
RETURN QUERY SELECT 'public'::text, 'chs'::text, NULL::integer
, 'public'::text, 'ssgeG'::text, NULL::integer
, 'chs - chemische_stof_type zonder groep G ssge/ssg - substance_group_element (type G)'::text, NULL::text;
RETURN QUERY SELECT 'public'::text, 'chs'::text, ssge.chs_id::integer
, 'public'::text, 'ssgeG'::text, ssge.ssge_id::integer
, chs::text, ssge::text
FROM chemische_stof_type chs
LEFT JOIN substance_group_element ssge
  ON chs.chs_id = ssge.chs_id
LEFT JOIN substance_group ssg
  --ssge has wrong column name ssge_id, should be ssg_id without e)
  ON (ssge.ssge_id = ssg.ssg_id AND ssg.group_type = 'G')
WHERE ssge.chs_id IS NULL
ORDER BY chs.chs_id;
--0

--Chemische stof zonder groep I
RETURN QUERY SELECT 'public'::text, 'chs'::text, NULL::integer
, 'public'::text, 'ssgeI'::text, NULL::integer
, 'chs - chemische_stof_type zonder groep I ssge/ssg - substance_group_element (type I)'::text, NULL::text;
RETURN QUERY SELECT 'public'::text, 'chs'::text, ssge.chs_id::integer
, 'public'::text, 'ssgeI'::text, ssge.ssge_id::integer
, chs::text, ssge::text
FROM chemische_stof_type chs
LEFT JOIN substance_group_element ssge
  ON chs.chs_id = ssge.chs_id
LEFT JOIN substance_group ssg
  --ssge has wrong column name ssge_id, should be ssg_id without e)
  ON (ssge.ssge_id = ssg.ssg_id AND ssg.group_type = 'I')
WHERE ssge.chs_id IS NULL
ORDER BY chs.chs_id;
--0

--ssg
--substance_group_element
--groep chemische stof zonder element
RETURN QUERY SELECT 'public'::text, 'ssg'::text, NULL::integer
, 'public'::text, 'ssge'::text, NULL::integer
, 'ssg - substance_group zonder element ssge - substance_group_element'::text, NULL::text;
RETURN QUERY SELECT 'public'::text, 'ssg'::text, ssg.ssg_id::integer
, 'public'::text, 'ssge'::text, ssge.ssge_id::integer
, ssg::text, ssge::text 
FROM substance_group ssg
LEFT JOIN substance_group_element ssge
  --ssge has wrong column name ssge_id, should be ssg_id without e)
  ON ssg.ssg_id = ssge.ssge_id
WHERE ssge.ssge_id IS NULL
ORDER BY ssg.ssg_id;
--0

--txn
--taxa_group_element
--Taxa zonder groep G
RETURN QUERY SELECT 'public'::text, 'txn'::text, NULL::integer
, 'public'::text, 'tgeG'::text, NULL::integer
, 'txn - taxon_type zonder groep G tge/txg - taxa_group_element (type G)'::text, NULL::text;
RETURN QUERY SELECT 'public'::text, 'txn'::text, txn.txn_id::integer
, 'public'::text, 'tgeG'::text, tge.txg_id::integer
, txn::text, tge::text 
FROM taxon_type txn
LEFT JOIN taxa_group_element tge
  ON txn.txn_id = tge.txn_id
LEFT JOIN taxa_group txg
  ON (tge.txg_id = txg.txg_id AND txg.group_type = 'G')
WHERE tge.txn_id IS NULL
ORDER BY txn.txn_id;
--313

--Taxa zonder groep I
RETURN QUERY SELECT 'public'::text, 'txn'::text, NULL::integer
, 'public'::text, 'tgeI'::text, NULL::integer
, 'txn - taxon_type zonder groep I tge/txg - taxa_group_element (type I)'::text, NULL::text;
RETURN QUERY SELECT 'public'::text, 'txn'::text, txn.txn_id::integer
, 'public'::text, 'tgeI'::text, tge.txg_id::integer
, txn::text, tge::text
FROM taxon_type txn
LEFT JOIN taxa_group_element tge
  ON txn.txn_id = tge.txn_id
LEFT JOIN taxa_group txg
  ON (tge.txg_id = txg.txg_id AND txg.group_type = 'I')
WHERE tge.txn_id IS NULL
ORDER BY txn.txn_id;
--313

--txg
--taxa_group_element
--Taxagroep zonder element.
RETURN QUERY SELECT 'public'::text, 'txg'::text, NULL::integer
, 'public'::text, 'tge'::text, NULL::integer
, 'txg - taxon_group zonder element - taxa_group_element'::text, NULL::text;
RETURN QUERY SELECT 'public'::text, 'txg'::text, txg.txg_id::integer
, 'public'::text, 'tge'::text, tge.txg_id::integer
, txg::text, tge::text 
FROM taxa_group txg
LEFT JOIN taxa_group_element tge
  ON txg.txg_id = tge.txg_id
WHERE tge.txg_id IS NULL
ORDER BY txg.txg_id;
--73

--smp
--zie qem

--obs
--zie qem

--mno
--zie qem

--Groepen G waarvan er elementen zijn zonder groep I.
--Groepen I waarvan het element niet in een groep G zit.

--objecten in G-groep, zonder I-groep
RETURN QUERY SELECT 'public'::text, 'ojgG'::text, NULL::integer
, 'public'::text, 'ogeI'::text, NULL::integer
, 'ojgG - object_group (type G) zonder groep I ogeI - object_group_element (type I)'::text, NULL::text;
RETURN QUERY SELECT 'public'::text, 'ojgG'::text, ojgG.ojg_id::integer
, 'public'::text, 'ogeI'::text, ogeI.ojg_id::integer 
, ojgG::text, ogeI::text 
FROM object_group_element as ogeG
JOIN object_group as ojgG              ON (ojgG.ojg_id = ogeG.ojg_id AND ojgG.group_type = 'G')
LEFT JOIN object_group_element as ogeI ON (ogeI.obj_id = ogeG.obj_id)
JOIN object_group ojgI                 ON (ojgI.ojg_id = ogeI.ojg_id AND ojgI.group_type = 'I')
WHERE ogeI.ojg_id IS NULL 
ORDER BY ojgG.ojg_id;
--0

--objecten in I-groep, zonder G-groep. 
--Niet per se onnuttig, ze kunnen ook als I-groep in een opt.
RETURN QUERY SELECT 'public'::text, 'ojgI'::text, NULL::integer
, 'public'::text, 'ogeG'::text, NULL::integer
, 'ojgI - object_group (type I) zonder groep G ogeG - object_group_element (type G)'::text, NULL::text;
RETURN QUERY SELECT 'public'::text, 'ojgI'::text, ojgI.ojg_id::integer
, 'public'::text, 'ogeG'::text, ogeG.ojg_id::integer 
, ojgI::text, ogeG::text
FROM object_group_element as ogeI
JOIN object_group as ojgI              ON (ojgI.ojg_id = ogeI.ojg_id AND ojgI.group_type = 'I')
LEFT JOIN object_group_element as ogeG ON (ogeG.obj_id = ogeI.obj_id)
JOIN object_group ojgG                 ON (ojgG.ojg_id = ogeG.ojg_id AND ojgG.group_type = 'G')
WHERE ogeG.ojg_id IS NULL 
ORDER BY ojgI.ojg_id;
--0

--chemische stoffen in G-groep, zonder I-groep
RETURN QUERY SELECT 'public'::text, 'ssgG'::text, NULL::integer
, 'public'::text, 'ssgeI'::text, NULL::integer
, 'ssgG - substance_group (type G) zonder groep I ssgeI - substance_group_element (type I)'::text, NULL::text;
RETURN QUERY SELECT 'public'::text, 'ssgG'::text, ssgG.ssg_id::integer
, 'public'::text, 'ssgeI'::text, ssgeI.ssge_id::integer
, ssgG::text, ssgeI::text
FROM substance_group_element as ssgeG
JOIN substance_group as ssgG               ON (ssgG.ssg_id = ssgeG.ssge_id AND ssgG.group_type = 'G')
LEFT JOIN substance_group_element as ssgeI ON (ssgeI.chs_id = ssgeG.chs_id)
JOIN substance_group ssgI                  ON (ssgI.ssg_id = ssgeI.ssge_id AND ssgI.group_type = 'I')
--ssge has wrong foreign key ssge_id, should be ssg_id (without e)
WHERE ssgeI.ssge_id IS NULL 
ORDER BY ssgG.ssg_id;
--0

--chemische stoffen in I-groep, zonder G-groep. 
--Niet per se onnuttig, ze kunnen ook als I-groep in een opt.
RETURN QUERY SELECT 'public'::text, 'ssgI'::text, NULL::integer
, 'public'::text, 'ssgeG'::text, NULL::integer
, 'ssgG - substance_group (type G) zonder groep I ssgeI - substance_group_element (type G)'::text, NULL::text;
RETURN QUERY SELECT 'public'::text, 'ssgI'::text, ssgI.ssg_id::integer
, 'public'::text, 'ssgeG'::text, ssgG.ssg_id::integer
, ssgI::text, ssgG::text
FROM substance_group_element as ssgeI
JOIN substance_group as ssgI               ON (ssgI.ssg_id = ssgeI.ssge_id AND ssgI.group_type = 'I')
LEFT JOIN substance_group_element as ssgeG ON (ssgeG.chs_id = ssgeI.chs_id)
JOIN substance_group ssgG                  ON (ssgG.ssg_id = ssgeG.ssge_id AND ssgG.group_type = 'G')
WHERE ssgG.ssg_id IS NULL 
ORDER BY ssgI.ssg_id;
--0

--taxons in G-groep, zonder I-groep
--RETURN QUERY SELECT 'public'::text, 'txgG'::text, NULL::integer, 'public'::text, 'tgeI'::text,
-- 'txgG - taxa_group (type G) zonder groep I tgeI - taxa_group_element (type I)'::text;
--RETURN QUERY SELECT 'public'::text, 'txgG'::text, NULL::integer, 'public'::text, 'tgeI'::text,
-- 'De KRM- en LEW-importfuncties kunnen deze G groepen niet importeren.'::text;
RETURN QUERY SELECT 'public'::text, 'txgG'::text, NULL::integer
, 'public'::text, 'tgeI'::text, NULL::integer
, 'txgG - taxa_group (type G) zonder groep I tgeI - taxa_group_element (type I)'::text, NULL::text;
RETURN QUERY SELECT 'public'::text, 'txgG'::text, txgG.txg_id::integer
, 'public'::text, 'tgeI'::text, tgeI.txg_id::integer
, txgG::text, tgeI::text
FROM taxa_group_element as tgeG
JOIN taxa_group as txgG              ON (txgG.txg_id = tgeG.txg_id AND txgG.group_type = 'G')
LEFT JOIN taxa_group_element as tgeI ON tgeI.txn_id = tgeG.txn_id
JOIN taxa_group txgI                 ON (txgI.txg_id = tgeI.txg_id AND txgI.group_type = 'I')
WHERE txgI.txg_id IS NULL 
ORDER BY txgG.txg_id;
--0

--taxons in I-groep, zonder G-groep. 
--Niet per se onnuttig, taxons kunnen ook als I-groep in een opt.
RETURN QUERY SELECT 'public'::text, 'txgI'::text, NULL::integer
, 'public'::text, 'tgeG'::text, NULL::integer
, 'txgI - taxa_group (type I) zonder groep G tgeG - taxa_group_element (type G)'::text, NULL::text;
RETURN QUERY SELECT 'public'::text, 'txgI'::text, txgI.txg_id::integer
, 'public'::text, 'tgeG'::text, tgeG.txg_id::integer
, txgI::text, txgG::text
FROM taxa_group_element as tgeI
JOIN taxa_group as txgI              ON (txgI.txg_id = tgeI.txg_id AND txgI.group_type = 'I')
LEFT JOIN taxa_group_element as tgeG ON tgeG.txn_id = tgeI.txn_id
JOIN taxa_group txgG                 ON (txgG.txg_id = tgeG.txg_id AND txgG.group_type = 'G')
WHERE txgG.txg_id IS NULL 
ORDER BY txgI.txg_id;
--0


--Groepen G zonder opt
--Groepen I zonder opt
--niet gemaakt -- not implemented

--Groepen G waarvan er elementen zijn met ontbrekende opt's (via hun groep I).
--Groepen I waarvan het element in een groep G zit met ontbrekende opt's.

--controleer of voor een taxa_group type G, er element's zijn met missende hoedanigheid en/of grootheid
--this one is slow
RETURN QUERY SELECT 'public'::text, 'txgG'::text, NULL::integer
, 'public'::text, 'txgI'::text, NULL::integer
, 'taxa_group (type G) met missende opt voor gerelateerde taxa_group I'::text, NULL::text;
RETURN QUERY SELECT 'public'::text, 'txgG'::text, txgG.txg_id::integer
, 'public'::text, 'txgI'::text, txgI.txg_id::integer
, txgG::text, txgI::text
FROM observed_property_type optG
JOIN taxa_group_element as tgeG       ON (tgeG.txg_id = optG.taxa_group_id)
JOIN taxa_group as txgG               ON (txgG.txg_id = optG.taxa_group_id AND txgG.group_type = 'G')
JOIN taxa_group_element as tgeI       ON (tgeI.txn_id = tgeG.txn_id AND tgeI.txg_id <> tgeG.txg_id)
JOIN taxa_group txgI                  ON (txgI.txg_id = tgeI.txg_id AND txgI.group_type = 'I')
LEFT JOIN observed_property_type optI 
  ON (optI.taxa_group_id = txgI.txg_id 
     AND (  (optI.observed_property_type_class IS NULL AND optG.observed_property_type_class IS NULL) 
         OR optI.observed_property_type_class = optG.observed_property_type_class
         )
     AND (  (optI.result_type IS NULL AND optG.result_type IS NULL) 
         OR optI.result_type = optG.result_type
         )
     AND (  (optI.hoedanigheid_id IS NULL AND optG.hoedanigheid_id IS NULL) 
         OR optI.hoedanigheid_id = optG.hoedanigheid_id
         )
     AND (  (optI.quantity_id IS NULL AND optG.quantity_id IS NULL) 
         OR optI.quantity_id = optG.quantity_id
         )
     )
WHERE optI.opt_id IS NULL 
--AND optG.taxa_group_id = 26500
ORDER BY txgG.txg_id;
--1: Benthos Noordzee en Crassostrea gigas

--andersom: I-groepen die onnutte koppelingen hebben: 
--bijbehorende G-groep zonder opt, of met opt met afwijkende grootheid en/of hoedanigheid
--alleen G en I omgewisseld
--Op 18 juni 2016:
--  745 x afwijkende grootheid = 2977 (deze komen in scherm monprog-reg voor onder 2977=AANTL)
--  en 1 x 3076
RETURN QUERY SELECT 'public'::text, 'txgG'::text, NULL::integer
, 'public'::text, 'txgI'::text, NULL::integer
, 'taxa_group (type I) met missende opt voor gerelateerde taxa_group G'::text, NULL::text;
RETURN QUERY SELECT 'public'::text, 'txgG'::text, txgG.txg_id::integer
, 'public'::text, 'txgI'::text, txgI.txg_id::integer
, txgG::text, txgI::text
FROM observed_property_type optI
JOIN taxa_group_element as tgeI      ON (tgeI.txg_id = optI.taxa_group_id)
JOIN taxa_group as txgI              ON (txgI.txg_id = optI.taxa_group_id AND txgI.group_type = 'I')
JOIN taxa_group_element as tgeG      ON (tgeG.txn_id = tgeI.txn_id AND tgeI.txg_id <> tgeG.txg_id)
JOIN taxa_group txgG                 ON (txgG.txg_id = tgeG.txg_id AND txgG.group_type = 'G')
LEFT JOIN observed_property_type optG  
  ON (optG.taxa_group_id = txgG.txg_id 
     AND (  (optI.observed_property_type_class IS NULL AND optG.observed_property_type_class IS NULL) 
         OR optI.observed_property_type_class = optG.observed_property_type_class
         )
     AND (  (optI.result_type IS NULL AND optG.result_type IS NULL) 
         OR optI.result_type = optG.result_type
         )
     AND (  (optI.hoedanigheid_id IS NULL AND optG.hoedanigheid_id IS NULL) 
         OR optI.hoedanigheid_id = optG.hoedanigheid_id
         )
     AND (  (optI.quantity_id IS NULL AND optG.quantity_id IS NULL) 
         OR optI.quantity_id = optG.quantity_id
         )
     )
WHERE optG.opt_id IS NULL 
ORDER BY txgI.txg_id;




END
$$;


--
-- Name: test123(integer, integer); Type: FUNCTION; Schema: beheer; Owner: -
--

CREATE FUNCTION test123(min integer, max integer) RETURNS integer
    LANGUAGE plpgsql
    AS $$
DECLARE
   cnt integer;
BEGIN
    FOR i IN min .. max
    LOOP
      WITH a AS (
           DELETE
           FROM observation obs
           WHERE date_trunc('minute', obs.last_change_time) = make_timestamp(2016, 11, 3, 18, i, 0)
           RETURNING 1
           ) 
      SELECT count(*) INTO cnt FROM a;
      RAISE NOTICE 'minuut %: %', i, cnt;
    END LOOP;
    RETURN 0;
END;
$$;


SET search_path = public, pg_catalog;

--
-- Name: aanmaken_observed_property_type_bio(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION aanmaken_observed_property_type_bio() RETURNS character varying
    LANGUAGE plpgsql
    AS $$
DECLARE
  c_rij cursor FOR SELECT * FROM public._vw_aquo_kit_voor_opt_id ORDER BY tgr_name; 
  v_aantal integer;
  v_teller_totaal integer:= 0;
  v_teller_nieuw integer:= 0;
  v_teller_bestaand integer:= 0;
  v_currval integer;
  v_hoedanigheid hoedanigheid_type.hdh_id%TYPE;
  v_grootheid grootheid_type.grh_id%TYPE;
BEGIN
  FOR r_rij IN c_rij 
  LOOP
    v_teller_totaal :=  v_teller_totaal + 1;
    SELECT ophalen_hoedanigheid_type_id(r_rij.aoi_hoedanigheid_code) INTO v_hoedanigheid;
    SELECT ophalen_grootheid_type_id(r_rij.aoi_grootheid_code) INTO v_grootheid;
    IF v_hoedanigheid IS NULL
    THEN
      RAISE NOTICE 'Hoedanigheid % bestaat niet.',r_rij.aoi_hoedanigheid_code;
    ELSIF v_grootheid IS NULL
    THEN
      RAISE NOTICE 'Grootheid % bestaat niet.',r_rij.aoi_grootheid_code;
    ELSE
      SELECT COUNT(*) INTO v_aantal 
        FROM observed_property_type 
       WHERE taxa_group_id   = r_rij.tgr_txg_id
        AND hoedanigheid_id  = ophalen_hoedanigheid_type_id(r_rij.aoi_hoedanigheid_code)
        AND quantity_id      = ophalen_grootheid_type_id(r_rij.aoi_grootheid_code);  
      IF v_aantal = 0
      THEN
        v_teller_nieuw := v_teller_nieuw + 1;
       --RAISE NOTICE 'Biotaxon % heeft nog geen Observed Property voor hoedanigheid % en grootheid %. Daarom toevoegen.',
       --  	    r_rij.tgr_name,r_rij.aoi_hoedanigheid_code,r_rij.aoi_grootheid_code;
        INSERT INTO public.observed_property_type(opt_id, observed_property_type_class, result_type, hoedanigheid_id, 
						object_group_id, quantity_id, taxa_group_id, substance_group_id, 
						indicator_id, classification_group_id, remarks, d_begin, d_eind,last_changed_date, d_status)
        VALUES (nextval('observed_property_type_opt_id_seq'), 'BioObservation', 'MeasureResult', ophalen_hoedanigheid_type_id(r_rij.aoi_hoedanigheid_code ), 
                NULL, ophalen_grootheid_type_id(r_rij.aoi_grootheid_code), r_rij.tgr_txg_id, NULL, 
	        NULL, NULL, 'Implementatie Biologische gegevens WKP 2016', now(), NULL, now(), 'Gepubliceerd');
        v_currval := currval('observed_property_type_opt_id_seq');
        RAISE NOTICE 'Biotaxon % met txg_id % en hoedanigheid % en grootheid % is toegevoegd met opt_id %.',
		    r_rij.tgr_name,r_rij.tgr_txg_id,r_rij.aoi_hoedanigheid_code,r_rij.aoi_grootheid_code,v_currval;
      ELSE
        v_teller_bestaand := v_teller_bestaand + 1;
        RAISE NOTICE 'Aantal van % gevonden. Biotaxon % heeft reeds Observed Property voor hoedanigheid % en grootheid %.',
		      v_aantal, r_rij.tgr_name, r_rij.aoi_hoedanigheid_code, r_rij.aoi_grootheid_code;
      END IF;
    END IF;
  END LOOP;
  RAISE NOTICE 'Er zijn in totaal % Observed Properties gecheckt waarvan % nieuw en % reeds bestaand.',v_teller_totaal,v_teller_nieuw,v_teller_bestaand;
  RAISE NOTICE 'Er zijn dus % nieuwe Observed Properties toegevoegd.',v_teller_nieuw;
  RAISE NOTICE 'Er zijn dus % reeds bestaande Observed Properties gevonden.',v_teller_bestaand;
   RETURN 'Procedure is klaar';
END;
$$;


--
-- Name: copy_bronnen(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION copy_bronnen() RETURNS integer
    LANGUAGE plpgsql
    AS $$
DECLARE
hydroobjects RECORD;
bronrecord RECORD;
num integer;
hdoid integer;
BEGIN
num := 0;
FOR hydroobjects IN
-- nu ingesteld om wkrv_id 6 naar wkrv_id 4 te kopieren
select h.inspire_id_local_id, h.hdo_id hdoold, vw.db_id_v4 hdoNew, bron.chs_id, bron.wbpm_id, bron.eenh_id, bron.year, bron.is_significant_wbm, bron.is_significant_factsheet 
from hydro_object h
join bronnen bron on bron.hdo_id = h.hdo_id 
join vw_hydro_object_was_wordt_versies_geometrisch vw on vw.db_id_v6 = h.hdo_id
where h.wkrv_id = 6 AND h.hydro_object_type = 'SurfaceWaterBody'
LOOP
	
	RAISE NOTICE 'hdo_id %', hydroobjects.hdoNew;
	EXECUTE 'INSERT INTO public.bronnen(
		    hdo_id, chs_id, wbpm_id, eenh_id, year, is_significant_wbm, 
		    is_significant_factsheet)
	    VALUES (' || hydroobjects.hdoNew || ' ,' ||  hydroobjects.chs_id ||' ,' || hydroobjects.wbpm_id ||' ,' || hydroobjects.eenh_id ||' ,' ||
		hydroobjects.year ||' ,' || hydroobjects.is_significant_wbm ||' ,' || hydroobjects.is_significant_factsheet || ')';
	num := num + 1;
END LOOP;
RETURN num;
END;
$$;


--
-- Name: count_rows(text, text); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION count_rows(schema text, tablename text) RETURNS integer
    LANGUAGE plpgsql
    AS $$
declare
  result integer;
  query varchar;
begin
  query := 'SELECT count(1) FROM ' || chr(34) || schema || chr(34) || 
  '.' || chr(34) || tablename || chr(34);
  execute query into result;
  return result;
end;
$$;


--
-- Name: fn_fixsequences(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION fn_fixsequences() RETURNS integer
    LANGUAGE plpgsql
    AS $$
DECLARE
themax BIGINT;
mytables RECORD;
num integer;
BEGIN
num := 0;
FOR mytables IN
 select relname, ns.nspname, a.attname,a.attnum, a.attisdropped,a.atttypid, CASE WHEN c.relname ~ '[[:upper:]]'
THEN pg_get_serial_sequence('"'::text || c.relname || '"'::text, a.attname)
ELSE pg_get_serial_sequence(c.relname, a.attname)
END  as seq
FROM pg_catalog.pg_attribute a
INNER JOIN pg_catalog.pg_class c ON c.oid=a.attrelid
inner join pg_catalog.pg_attrdef d on d.adrelid = a.attrelid AND d.adnum = a.attnum AND a.atthasdef
LEFT JOIN pg_catalog.pg_namespace ns ON ns.oid = c.relnamespace

 WHERE
   pg_catalog.pg_table_is_visible(c.oid)
  and a.attnum > 0 AND NOT (a.attisdropped and atttypid=20)
  and relname not like 'pg_%'
  and ns.nspname not in ('information_schema', 'pg_catalog', 'topology')
  and c.relkind='r'
  and not CASE WHEN c.relname ~ '[[:upper:]]'
THEN pg_get_serial_sequence('"'::text || c.relname || '"'::text, a.attname)
ELSE pg_get_serial_sequence(c.relname, a.attname)
END is null
LOOP
     EXECUTE 'SELECT MAX('||mytables.attname||') FROM '||mytables.nspname||'."'||mytables.relname||'";' INTO themax;
     IF (themax is null OR themax < 0) THEN
      themax := 0;
     END IF;
     themax := themax +1;
     EXECUTE 'ALTER SEQUENCE ' || mytables.seq || ' RESTART WITH '||themax;
     num := num + 1;
 END LOOP;

 RETURN num;

END;
$$;


--
-- Name: missing_links(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION missing_links() RETURNS TABLE(table_schema text, table_name text, id integer, reltab_schema text, reltab_name text, table_record text)
    LANGUAGE plpgsql
    AS $$
BEGIN

--osc Monitoringprogramma/bundel
--observing_capability_observation
--Monprog zonder waarnemingen.
RETURN QUERY SELECT 'public'::text, 'osc'::text, NULL::integer, 'public'::text, 'oco'::text
, 'osc - observing_capability (monprog) zonder waarnemingen oco - observing_capability_observation'::text;
RETURN QUERY SELECT 'public'::text, 'osc'::text, osc.osc_id::integer, 'public'::text, 'oco'::text
, osc::text
FROM observing_capability osc
LEFT JOIN observing_capability_observation oco
  ON osc.osc_id = oco.osc_id
WHERE oco.ocbs_id IS NULL
ORDER BY osc.osc_id;
--14

--observing_capability_responsible_party
--Monprog zonder uitvoerder.
RETURN QUERY SELECT 'public'::text, 'osc'::text, NULL::integer, 'public'::text, 'ocrp'::text
, 'osc - observing_capability (monprog) zonder uitvoerder ocrp - observing_capability_responsible_party'::text;
RETURN QUERY SELECT 'public'::text, 'osc'::text, osc.osc_id::integer, 'public'::text, 'ocrp'::text
, osc.*::text
FROM observing_capability osc
LEFT JOIN observing_capability_responsible_party ocrp 
  ON osc.osc_id = ocrp.osc_id
WHERE ocrp.ocrp_id IS NULL
ORDER BY osc.osc_id;
--4

--observing_capability_sample
--Monprog zonder monster.
RETURN QUERY SELECT 'public'::text, 'osc'::text, NULL::integer, 'public'::text, 'ocs'::text,
'osc - observing_capability (monprog) zonder monster ocs - observing_capability_sample'::text;
RETURN QUERY SELECT 'public'::text, 'osc'::text, osc.osc_id::integer, 'public'::text, 'ocs'::text,
osc.*::text
FROM observing_capability osc
LEFT JOIN observing_capability_sample ocs
  ON osc.osc_id = ocs.osc_id
WHERE osc.is_sample = TRUE 
AND ocs.ocsa_id IS NULL
ORDER BY osc.osc_id;
--26

--qem
--quality_element_observation
--Monprog-regel zonder waarnemingen
RETURN QUERY SELECT 'public'::text, 'qem'::text, NULL::integer, 'public'::text, 'qeo'::text,
 'qem - quality_element (mp.regel) zonder waarnemingen qeo - quality_element_observation'::text;
RETURN QUERY SELECT 'public'::text, 'qem'::text, qem.qem_id::integer, 'public'::text, 'qeo'::text,
 qem.*::text
FROM quality_element qem
LEFT JOIN quality_element_observation qeo
  ON qem.qem_id = qeo.qem_id
WHERE qeo.qeo_id IS NULL
ORDER BY qem.qem_id;
--142 maar dit kan

--quality_element_sample
--Monprog-regel zonder monster
RETURN QUERY SELECT 'public'::text, 'qem'::text, NULL::integer, 'public'::text, 'qes'::text,
 'qem - quality_element (mp.regel) zonder monster qes - quality_element_sample'::text;
RETURN QUERY SELECT 'public'::text, 'qem'::text, qem.qem_id::integer, 'public'::text, 'qes'::text,
 qem.*::text
FROM quality_element qem
JOIN observing_capability osc
  ON (qem.osc_id = osc.osc_id AND osc.is_sample = TRUE)
LEFT JOIN quality_element_sample qes
  ON qem.qem_id = qes.qem_id
WHERE qes.qes_id IS NULL
ORDER BY qem.qem_id;
--212 maar dit kan

--monprog.quality_element_indicator_descriptor
--Monprog-regel zonder indicator
RETURN QUERY SELECT 'public'::text, 'qem'::text, NULL::integer, 'monprog'::text, 'qeid'::text,
 'qem - quality_element (mp.regel) zonder monster qeid - quality_element_indicator_desrciptor'::text;
RETURN QUERY SELECT 'public'::text, 'qem'::text, qem.qem_id::integer, 'monprog'::text, 'qeid'::text,
 qem.*::text
FROM quality_element qem
LEFT JOIN monprog.quality_element_indicator_descriptor qeid
  ON qem.qem_id = qeid.qem_id
WHERE qeid.qem_id IS NULL
ORDER BY qem.qem_id;
--0

--monitoring_object_quality_element
--Monprog-regel zonder meetlocatie
RETURN QUERY SELECT 'public'::text, 'qem'::text, NULL::integer, 'public'::text, 'moqe'::text,
 'qem - quality_element (mp.regel) zonder monster moqe - monitoring_object_quality_element'::text;
RETURN QUERY SELECT 'public'::text, 'qem'::text, qem.qem_id::integer, 'public'::text, 'moqe'::text,
 qem.*::text
FROM quality_element qem
LEFT JOIN monitoring_object_quality_element moqe
  ON qem.qem_id = moqe.qem_id
WHERE moqe.qem_id IS NULL
ORDER BY qem.qem_id;
--0

--pot
--geen

--opt
--geen

--obj
--object_group_element
--Object zonder groep G
RETURN QUERY SELECT 'public'::text, 'obj'::text, NULL::integer, 'public'::text, 'ogeG'::text,
 'obj - object_type (object) zonder groep G oge/ojg - object_group_element (ojg type G)'::text;
RETURN QUERY SELECT 'public'::text, 'obj'::text, obj.obj_id::integer, 'public'::text, 'ogeG'::text,
 obj.*::text
FROM object_type obj
LEFT JOIN object_group_element oge
  ON obj.obj_id = oge.obj_id
LEFT JOIN object_group ojg
  ON (oge.ojg_id = ojg.ojg_id AND ojg.group_type = 'G')
WHERE oge.obj_id IS NULL
ORDER BY obj.obj_id;
--0

--Object zonder groep I
RETURN QUERY SELECT 'public'::text, 'obj'::text, NULL::integer, 'public'::text, 'ogeI'::text,
 'obj - object_type (object) zonder groep I oge/ojg - object_group_element (ojg type I)'::text;
RETURN QUERY SELECT 'public'::text, 'obj'::text, obj.obj_id::integer, 'public'::text, 'ogeI'::text,
 obj.*::text
FROM object_type obj
LEFT JOIN object_group_element oge
  ON obj.obj_id = oge.obj_id
LEFT JOIN object_group ojg
  ON (oge.ojg_id = ojg.ojg_id AND ojg.group_type = 'I')
WHERE oge.obj_id IS NULL
ORDER BY obj.obj_id;
--0

--ojg zonder element
RETURN QUERY SELECT 'public'::text, 'ojg'::text, NULL::integer, 'public'::text, 'oge'::text,
 'obj - object_group (object_group) zonder oge - object_group_element (oge)'::text;
RETURN QUERY SELECT 'public'::text, 'ojg'::text, oge.obj_id::integer, 'public'::text, 'ogeI'::text,
 ojg.*::text
FROM object_group ojg
LEFT JOIN object_group_element oge
  ON ojg.ojg_id = oge.ojg_id
WHERE oge.ojg_id IS NULL
ORDER BY ojg.ojg_id;
--0

--chs
--substance_group_element
--Chemische stof zonder groep G
RETURN QUERY SELECT 'public'::text, 'chs'::text, NULL::integer, 'public'::text, 'ssge'::text,
 'chs - chemische_stof_type (chemische stof) zonder groep G ssge/ssg - substance_group_element (type G)'::text;
RETURN QUERY SELECT 'public'::text, 'chs'::text, ssge.chs_id::integer, 'public'::text, 'ssgeG'::text,
 chs.*::text
FROM chemische_stof_type chs
LEFT JOIN substance_group_element ssge
  ON chs.chs_id = ssge.chs_id
LEFT JOIN substance_group ssg
  --ssge has wrong column name ssge_id, should be ssg_id without e)
  ON (ssge.ssge_id = ssg.ssg_id AND ssg.group_type = 'G')
WHERE ssge.chs_id IS NULL
ORDER BY chs.chs_id;
--0

--Chemische stof zonder groep I
RETURN QUERY SELECT 'public'::text, 'chs'::text, NULL::integer, 'public'::text, 'ssge'::text,
 'chs - chemische_stof_type (chemische stof) zonder groep I ssge/ssg - substance_group_element (type I)'::text;
RETURN QUERY SELECT 'public'::text, 'chs'::text, ssge.chs_id::integer, 'public'::text, 'ssgeG'::text,
 chs.*::text
FROM chemische_stof_type chs
LEFT JOIN substance_group_element ssge
  ON chs.chs_id = ssge.chs_id
LEFT JOIN substance_group ssg
  --ssge has wrong column name ssge_id, should be ssg_id without e)
  ON (ssge.ssge_id = ssg.ssg_id AND ssg.group_type = 'I')
WHERE ssge.chs_id IS NULL
ORDER BY chs.chs_id;
--0

--ssg
--substance_group_element
--groep chemische stof zonder element
RETURN QUERY SELECT 'public'::text, 'ssg'::text, NULL::integer, 'public'::text, 'ssge'::text,
 'ssg - substance_group (groep chemische stof) zonder element ssge - substance_group_element'::text;
RETURN QUERY SELECT 'public'::text, 'ssg'::text, ssg.ssg_id::integer, 'public'::text, 'ssge'::text,
 ssg.*::text
FROM substance_group ssg
LEFT JOIN substance_group_element ssge
  --ssge has wrong column name ssge_id, should be ssg_id without e)
  ON ssg.ssg_id = ssge.ssge_id
WHERE ssge.ssge_id IS NULL
ORDER BY ssg.ssg_id;
--0

--txn
--taxa_group_element
--Taxa zonder groep G
RETURN QUERY SELECT 'public'::text, 'txn'::text, NULL::integer, 'public'::text, 'tge'::text,
 'txn - taxon_type (taxon) zonder groep G tge/txg - taxa_group_element (type G)'::text;
RETURN QUERY SELECT 'public'::text, 'txn'::text, txn.txn_id::integer, 'public'::text, 'tge'::text,
 txn.*::text
FROM taxon_type txn
LEFT JOIN taxa_group_element tge
  ON txn.txn_id = tge.txn_id
LEFT JOIN taxa_group txg
  ON (tge.txg_id = txg.txg_id AND txg.group_type = 'G')
WHERE tge.txn_id IS NULL
ORDER BY txn.txn_id;
--313

--Taxa zonder groep I
RETURN QUERY SELECT 'public'::text, 'txn'::text, NULL::integer, 'public'::text, 'tge'::text,
 'txn - taxon_type (taxon) zonder groep I tge/txg - taxa_group_element (type I)'::text;
RETURN QUERY SELECT 'public'::text, 'txn'::text, txn.txn_id::integer, 'public'::text, 'tge'::text,
 txn.*::text
FROM taxon_type txn
LEFT JOIN taxa_group_element tge
  ON txn.txn_id = tge.txn_id
LEFT JOIN taxa_group txg
  ON (tge.txg_id = txg.txg_id AND txg.group_type = 'I')
WHERE tge.txn_id IS NULL
ORDER BY txn.txn_id;
--313

--txg
--taxa_group_element
--Taxagroep zonder element.
RETURN QUERY SELECT 'public'::text, 'txg'::text, NULL::integer, 'public'::text, 'tge'::text,
 'txg - taxon_group (taxon groep) zonder element - taxa_group_element'::text;
RETURN QUERY SELECT 'public'::text, 'txg'::text, txg.txg_id::integer, 'public'::text, 'tge'::text,
 txg.*::text
FROM taxa_group txg
LEFT JOIN taxa_group_element tge
  ON txg.txg_id = tge.txg_id
WHERE tge.txg_id IS NULL
ORDER BY txg.txg_id;
--73

--smp
--zie qem

--obs
--zie qem

--mno
--zie qem

--Groepen G waarvan er elementen zijn zonder groep I.
--Groepen I waarvan het element niet in een groep G zit.

--objecten in G-groep, zonder I-groep
RETURN QUERY SELECT 'public'::text, 'ojgG'::text, NULL::integer, 'public'::text, 'ogeI'::text,
 'ojgG - object_group (type G) zonder groep I ogeI - object_group_element (type I)'::text;
RETURN QUERY SELECT 'public'::text, 'ojgG'::text, ojgG.ojg_id::integer, 'public'::text, 'ogeI'::text,
 ojgG.*::text
FROM object_group_element as ogeG
JOIN object_group as ojgG              ON (ojgG.ojg_id = ogeG.ojg_id AND ojgG.group_type = 'G')
LEFT JOIN object_group_element as ogeI ON (ogeI.obj_id = ogeG.obj_id)
JOIN object_group ojgI                 ON (ojgI.ojg_id = ogeI.ojg_id AND ojgI.group_type = 'I')
WHERE ogeI.ojg_id IS NULL 
ORDER BY ojgG.ojg_id;
--0

--objecten in I-groep, zonder G-groep. 
--Niet per se onnuttig, ze kunnen ook als I-groep in een opt.
RETURN QUERY SELECT 'public'::text, 'ojgI'::text, NULL::integer, 'public'::text, 'ogeG'::text,
 'ojgI - object_group (type I) zonder groep G ogeG - object_group_element (type G)'::text;
RETURN QUERY SELECT 'public'::text, 'ojgI'::text, ojgI.ojg_id::integer, 'public'::text, 'ogeG'::text,
 ojgI.*::text
FROM object_group_element as ogeI
JOIN object_group as ojgI              ON (ojgI.ojg_id = ogeI.ojg_id AND ojgI.group_type = 'I')
LEFT JOIN object_group_element as ogeG ON (ogeG.obj_id = ogeI.obj_id)
JOIN object_group ojgG                 ON (ojgG.ojg_id = ogeG.ojg_id AND ojgG.group_type = 'G')
WHERE ogeG.ojg_id IS NULL 
ORDER BY ojgI.ojg_id;
--0

--chemische stoffen in G-groep, zonder I-groep
RETURN QUERY SELECT 'public'::text, 'ssgG'::text, NULL::integer, 'public'::text, 'ssgeI'::text,
 'ssgG - substance_group (type G) zonder groep I ssgeI - substance_group_element (type I)'::text;
RETURN QUERY SELECT 'public'::text, 'ssgG'::text, ssgG.ssg_id::integer, 'public'::text, 'ssgeI'::text,
 ssgG.*::text
FROM substance_group_element as ssgeG
JOIN substance_group as ssgG               ON (ssgG.ssg_id = ssgeG.ssge_id AND ssgG.group_type = 'G')
LEFT JOIN substance_group_element as ssgeI ON (ssgeI.chs_id = ssgeG.chs_id)
JOIN substance_group ssgI                  ON (ssgI.ssg_id = ssgeI.ssge_id AND ssgI.group_type = 'I')
--ssge has wrong foreign key ssge_id, should be ssg_id (without e)
WHERE ssgeI.ssge_id IS NULL 
ORDER BY ssgG.ssg_id;
--0

--chemische stoffen in I-groep, zonder G-groep. 
--Niet per se onnuttig, ze kunnen ook als I-groep in een opt.
RETURN QUERY SELECT 'public'::text, 'ssgI'::text, NULL::integer, 'public'::text, 'ssgeG'::text,
 'ssgG - substance_group (type G) zonder groep I ssgeI - substance_group_element (type G)'::text;
RETURN QUERY SELECT 'public'::text, 'ssgI'::text, ssgI.ssg_id::integer, 'public'::text, 'ssgeG'::text,
 ssgI.*::text
FROM substance_group_element as ssgeI
JOIN substance_group as ssgI               ON (ssgI.ssg_id = ssgeI.ssge_id AND ssgI.group_type = 'I')
LEFT JOIN substance_group_element as ssgeG ON (ssgeG.chs_id = ssgeI.chs_id)
JOIN substance_group ssgG                  ON (ssgG.ssg_id = ssgeG.ssge_id AND ssgG.group_type = 'G')
WHERE ssgG.ssg_id IS NULL 
ORDER BY ssgI.ssg_id;
--0

--taxons in G-groep, zonder I-groep
--RETURN QUERY SELECT 'public'::text, 'txgG'::text, NULL::integer, 'public'::text, 'tgeI'::text,
-- 'txgG - taxa_group (type G) zonder groep I tgeI - taxa_group_element (type I)'::text;
--RETURN QUERY SELECT 'public'::text, 'txgG'::text, NULL::integer, 'public'::text, 'tgeI'::text,
-- 'De KRM- en LEW-importfuncties kunnen deze G groepen niet importeren.'::text;
RETURN QUERY SELECT 'public'::text, 'txgG'::text, txgG.txg_id::integer, 'public'::text, 'tgeI'::text,
 txgG.*::text
FROM taxa_group_element as tgeG
JOIN taxa_group as txgG              ON (txgG.txg_id = tgeG.txg_id AND txgG.group_type = 'G')
LEFT JOIN taxa_group_element as tgeI ON tgeI.txn_id = tgeG.txn_id
JOIN taxa_group txgI                 ON (txgI.txg_id = tgeI.txg_id AND txgI.group_type = 'I')
WHERE txgI.txg_id IS NULL 
ORDER BY txgG.txg_id;
--0

--taxons in I-groep, zonder G-groep. 
--Niet per se onnuttig, taxons kunnen ook als I-groep in een opt.
RETURN QUERY SELECT 'public'::text, 'txgI'::text, NULL::integer, 'public'::text, 'tgeG'::text,
 'txgI - taxa_group (type I) zonder groep G tgeG - taxa_group_element (type G)'::text;
RETURN QUERY SELECT 'public'::text, 'txgI'::text, txgI.txg_id::integer, 'public'::text, 'tgeG'::text,
 txgI.*::text
FROM taxa_group_element as tgeI
JOIN taxa_group as txgI              ON (txgI.txg_id = tgeI.txg_id AND txgI.group_type = 'I')
LEFT JOIN taxa_group_element as tgeG ON tgeG.txn_id = tgeI.txn_id
JOIN taxa_group txgG                 ON (txgG.txg_id = tgeG.txg_id AND txgG.group_type = 'G')
WHERE txgG.txg_id IS NULL 
ORDER BY txgI.txg_id;
--0


--Groepen G zonder opt
--Groepen I zonder opt
--niet gemaakt -- not implemented

--Groepen G waarvan er elementen zijn met ontbrekende opt's (via hun groep I).
--Groepen I waarvan het element in een groep G zit met ontbrekende opt's.

--controleer of voor een taxa_group type G, er element's zijn met missende hoedanigheid en/of grootheid
--this one is slow
RETURN QUERY SELECT 'public'::text, 'txgG'::text, NULL::integer, 'public'::text, 'txgI'::text,
 'taxa_group (type G) met missende opt voor gerelateerde taxa_group I'::text;
RETURN QUERY SELECT 'public'::text, 'txgG'::text, txgG.txg_id::integer, 'public'::text, 'txgI'::text,
 txgG.*::text
FROM observed_property_type optG
JOIN taxa_group_element as tgeG       ON (tgeG.txg_id = optG.taxa_group_id)
JOIN taxa_group as txgG               ON (txgG.txg_id = optG.taxa_group_id AND txgG.group_type = 'G')
JOIN taxa_group_element as tgeI       ON (tgeI.txn_id = tgeG.txn_id AND tgeI.txg_id <> tgeG.txg_id)
JOIN taxa_group txgI                  ON (txgI.txg_id = tgeI.txg_id AND txgI.group_type = 'I')
LEFT JOIN observed_property_type optI 
  ON (optI.taxa_group_id = txgI.txg_id 
     AND (  (optI.observed_property_type_class IS NULL AND optG.observed_property_type_class IS NULL) 
         OR optI.observed_property_type_class = optG.observed_property_type_class
         )
     AND (  (optI.result_type IS NULL AND optG.result_type IS NULL) 
         OR optI.result_type = optG.result_type
         )
     AND (  (optI.hoedanigheid_id IS NULL AND optG.hoedanigheid_id IS NULL) 
         OR optI.hoedanigheid_id = optG.hoedanigheid_id
         )
     AND (  (optI.quantity_id IS NULL AND optG.quantity_id IS NULL) 
         OR optI.quantity_id = optG.quantity_id
         )
     )
WHERE optI.opt_id IS NULL 
--AND optG.taxa_group_id = 26500
ORDER BY txgG.txg_id;
--1: Benthos Noordzee en Crassostrea gigas

--andersom: I-groepen die onnutte koppelingen hebben: 
--bijbehorende G-groep zonder opt, of met opt met afwijkende grootheid en/of hoedanigheid
--alleen G en I omgewisseld
--Op 18 juni 2016:
--  745 x afwijkende grootheid = 2977 (deze komen in scherm monprog-reg voor onder 2977=AANTL)
--  en 1 x 3076
RETURN QUERY SELECT 'public'::text, 'txgG'::text, NULL::integer, 'public'::text, 'txgI'::text,
 'taxa_group (type G) met missende opt voor gerelateerde taxa_group I'::text;
RETURN QUERY SELECT 'public'::text, 'txgG'::text, txgG.txg_id::integer, 'public'::text, 'txgI'::text,
 txgG.*::text
FROM observed_property_type optI
JOIN taxa_group_element as tgeI      ON (tgeI.txg_id = optI.taxa_group_id)
JOIN taxa_group as txgI              ON (txgI.txg_id = optI.taxa_group_id AND txgI.group_type = 'I')
JOIN taxa_group_element as tgeG      ON (tgeG.txn_id = tgeI.txn_id AND tgeI.txg_id <> tgeG.txg_id)
JOIN taxa_group txgG                 ON (txgG.txg_id = tgeG.txg_id AND txgG.group_type = 'G')
LEFT JOIN observed_property_type optG  
  ON (optG.taxa_group_id = txgG.txg_id 
     AND (  (optI.observed_property_type_class IS NULL AND optG.observed_property_type_class IS NULL) 
         OR optI.observed_property_type_class = optG.observed_property_type_class
         )
     AND (  (optI.result_type IS NULL AND optG.result_type IS NULL) 
         OR optI.result_type = optG.result_type
         )
     AND (  (optI.hoedanigheid_id IS NULL AND optG.hoedanigheid_id IS NULL) 
         OR optI.hoedanigheid_id = optG.hoedanigheid_id
         )
     AND (  (optI.quantity_id IS NULL AND optG.quantity_id IS NULL) 
         OR optI.quantity_id = optG.quantity_id
         )
     )
WHERE optG.opt_id IS NULL 
ORDER BY txgI.txg_id;




END
$$;


--
-- Name: ophalen_foreign_key_tabel(character varying); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION ophalen_foreign_key_tabel(v_constraint_name character varying) RETURNS character varying
    LANGUAGE plpgsql IMMUTABLE
    AS $_$
DECLARE
  v_fk_tabel 		character varying;
  v_lengte_tabel 	integer;
  v_tabelnaam 		character varying;
BEGIN
  SELECT constraint_name, table_name, length(table_name) INTO v_fk_tabel, v_tabelnaam, v_lengte_tabel
    FROM information_schema.key_column_usage 
   WHERE constraint_name = $1;
   --
   IF substr(v_fk_tabel,4,v_lengte_tabel) =  v_tabelnaam AND substr(v_fk_tabel,1,2) =  'fk'
   THEN
     v_fk_tabel:= substr(v_fk_tabel,4 + v_lengte_tabel + 1);
   ELSIF
     substr(v_fk_tabel,1,2) =  'pk'
   THEN
     v_fk_tabel:= '(primary key van '||v_tabelnaam||')';
   ELSE
     v_fk_tabel:= '(fk tabel opzoeken bij basistabel)';
   END IF;
   --
  RETURN v_fk_tabel;
  --
END;
$_$;


--
-- Name: FUNCTION ophalen_foreign_key_tabel(v_constraint_name character varying); Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON FUNCTION ophalen_foreign_key_tabel(v_constraint_name character varying) IS 'Opzoeken van mastertabellen bij een gegeven detailtabel.';


--
-- Name: ophalen_grootheid_type_id(character); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION ophalen_grootheid_type_id(grootheid character) RETURNS integer
    LANGUAGE plpgsql IMMUTABLE
    AS $_$
DECLARE
  v_id integer;
BEGIN
  SELECT grh_id INTO v_id FROM grootheid_type WHERE code = upper($1);
  RETURN v_id;
END;
$_$;


--
-- Name: ophalen_hoedanigheid_type_id(character); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION ophalen_hoedanigheid_type_id(grootheid character) RETURNS integer
    LANGUAGE plpgsql IMMUTABLE
    AS $_$
DECLARE
  v_id integer;
BEGIN
  SELECT hdh_id INTO v_id FROM hoedanigheid_type WHERE code = $1;
  RETURN v_id;
END;
$_$;


--
-- Name: ophalen_taxa_group_id(character); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION ophalen_taxa_group_id(grootheid character) RETURNS integer
    LANGUAGE plpgsql IMMUTABLE
    AS $_$
DECLARE
  v_id integer;
BEGIN
  SELECT txg_id INTO v_id FROM taxa_group WHERE upper(name) = upper($1);
  IF v_id IS NULL 
  THEN  
    RAISE NOTICE 'Er is geen txg_id gevonden voor %.',grootheid;
    RETURN v_id;
  ELSE
    RETURN v_id;
  END IF;
END;
$_$;


--
-- Name: rel_description(character varying, character varying); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION rel_description(p_relname character varying, p_schemaname character varying DEFAULT NULL::character varying) RETURNS text
    LANGUAGE sql
    AS $_$
    SELECT obj_description((CASE 
       WHEN strpos($1, '.') > 0 THEN $1
       WHEN $2 IS NULL THEN 'public.'||$1
       ELSE $2||'.'||$1
            END)::regclass, 'pg_class');
 $_$;


--
-- Name: FUNCTION rel_description(p_relname character varying, p_schemaname character varying); Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON FUNCTION rel_description(p_relname character varying, p_schemaname character varying) IS 'Samengesteld door John hofsté om commentaar bij tabel of view te kunnen vinden.';


--
-- Name: search_columns(text, name[], name[]); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION search_columns(needle text, haystack_tables name[] DEFAULT '{}'::name[], haystack_schema name[] DEFAULT '{public}'::name[]) RETURNS TABLE(schemaname text, tablename text, columnname text, rowctid text)
    LANGUAGE plpgsql
    AS $$ 
begin 
  FOR schemaname,tablename,columnname IN 
      SELECT c.table_schema,c.table_name,c.column_name 
      FROM information_schema.columns c 
      JOIN information_schema.tables t ON 
        (t.table_name=c.table_name AND t.table_schema=c.table_schema) 
      WHERE (c.table_name=ANY(haystack_tables) OR haystack_tables='{}') 
        AND c.table_schema=ANY(haystack_schema) 
        AND t.table_type='BASE TABLE' 
  LOOP 
    EXECUTE format('SELECT ctid FROM %I.%I WHERE cast(%I as text)=%L', 
       schemaname, 
       tablename, 
       columnname, 
       needle 
    ) INTO rowctid; 
    IF rowctid is not null THEN 
      RETURN NEXT; 
    END IF; 
 END LOOP; 
END; 
$$;


--
-- Name: sp_copy_monprog(integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION sp_copy_monprog(cur_osc_id integer) RETURNS integer
    LANGUAGE plpgsql
    AS $$ 
DECLARE
   cpy_osc_id integer;
   cur_qem_id integer;
   cpy_qem_id integer;
BEGIN
   --1. copy the osc
   INSERT INTO observing_capability
   ( --osc_id
     observing_time_begin
   , observing_time_end
   , online_resource
   , process_type_id
   , last_change_time
   , "name"
   , is_sample
   , wkrv_id
   )
   SELECT --osc.osc_id
     osc.observing_time_begin + interval '1 year'
   , osc.observing_time_end + interval '1 year'
   , osc.online_resource
   , osc.process_type_id
   , now()
   , osc."name"
   , osc.is_sample
   , osc.wkrv_id
   FROM observing_capability osc
   WHERE osc.osc_id = cur_osc_id
   RETURNING osc_id INTO cpy_osc_id
   ;

   --1b. copy the osc's ocrp
   INSERT INTO observing_capability_responsible_party
   (--  ocrp_id  serial NOT NULL,
     osc_id,
     ore_id
   )
   SELECT
   --ocrp.ocrp_id
     cpy_osc_id
   , ocrp.ore_id
   FROM observing_capability_responsible_party ocrp 
   WHERE ocrp.osc_id = cur_osc_id;
   
   --here comes the FOR loop 
    FOR cur_qem_id IN
       SELECT qem_id 
       FROM quality_element qem
       WHERE qem.osc_id = cur_osc_id
    LOOP
       --1a/2. copy the qem
       INSERT INTO quality_element
        (  --  qem_id                    serial NOT NULL,
          osc_id,
          opt_id,
          parameter_use_id,
          cycle_value,
          cycle_uom_id,
          cycle_description,
          frequency_value,
          frequency_uom_id,
          reason_deviation_program,
          last_change_time,
          sampling_method_id,
          sampling_device_id,
          deviation_program_jn,
          opt_uom_id,
          wbm_id,
          remark
        )
        SELECT      
        --  qem_id                    serial NOT NULL,
        cpy_osc_id, --  osc_id         integer NOT NULL,
        opt_id,
        parameter_use_id,
        cycle_value,
        cycle_uom_id,
        cycle_description,
        frequency_value,
        frequency_uom_id,
        reason_deviation_program,
        last_change_time,
        sampling_method_id,
        sampling_device_id,
        deviation_program_jn,
        opt_uom_id,
        wbm_id,
        remark
        FROM quality_element
        WHERE qem_id = cur_qem_id
        RETURNING qem_id
        INTO cpy_qem_id
        ;
       --2a/3. copy it's pot's
       --pot has no referencing tables, otherwise we would need another loop
       INSERT INTO monprog.planned_observation_time
       (--pot_id, 
        qem_id, start_date, end_date, noof_samples, samples_bepalingsgrens_id, last_change_time
        )
       SELECT --pot.pot_id,
         cpy_qem_id
       , pot.start_date
       , pot.end_date
       , pot.noof_samples
       , pot.samples_bepalingsgrens_id
       , now() 
       FROM monprog.planned_observation_time pot
       WHERE pot.qem_id = cur_qem_id;

       --2b. copy it's moqe's
       INSERT INTO monitoring_object_quality_element
       (--moqe_id, 
         mno_id
       , qem_id
       )
       SELECT --moqe.moqe_id 
         moqe.mno_id
       , cpy_qem_id
       FROM monitoring_object_quality_element moqe
       WHERE moqe.qem_id = cur_qem_id;
       
       --2c. copy it's qeid's
       INSERT INTO monprog.quality_element_indicator_descriptor
       (qem_id, idd_id, last_change_time)
       SELECT cpy_qem_id, qeid.idd_id , now()
       FROM monprog.quality_element_indicator_descriptor qeid
       WHERE qeid.qem_id = cur_qem_id;
       
    END LOOP;
   RETURN cpy_osc_id; -- return whichever was used.
END; 
$$;


--
-- Name: sp_create_new_wkr_version(integer, integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION sp_create_new_wkr_version(old_wkrv_id integer, new_wkrv_id integer) RETURNS boolean
    LANGUAGE sql
    AS $$
	
INSERT INTO public.hydro_object(inspire_id_local_id, inspire_id_namespace, wkrv_id, hydro_object_type, related_hdo_id, last_change_time, fromhdo_id) 
select  ho.inspire_id_local_id, ho.inspire_id_namespace, new_wkrv_id, ho.hydro_object_type, ho.related_hdo_id , LOCALTIMESTAMP,ho.hdo_id 
from hydro_object ho where ho.wkrv_id = old_wkrv_id and ho.hydro_object_type <> 'Watercourse' ;

INSERT INTO related_hydro_object (from_hdo, to_hdo, rrt_id, last_change_time)
select  fromhdo_id,ho.hdo_id,1,LOCALTIMESTAMP
from hydro_object ho where ho.wkrv_id = new_wkrv_id;
	
INSERT INTO public.hydro_object(inspire_id_local_id, inspire_id_namespace, wkrv_id, hydro_object_type, related_hdo_id, last_change_time, fromhdo_id) 
select ho.inspire_id_local_id, ho.inspire_id_namespace, new_wkrv_id, ho.hydro_object_type, rho.to_hdo , LOCALTIMESTAMP,ho.hdo_id from hydro_object ho 
join related_hydro_object rho on ho.related_hdo_id = rho.from_hdo
join hydro_object ho1 on ho1.hdo_id = rho.to_hdo
where ho.wkrv_id = old_wkrv_id and ho.hydro_object_type = 'Watercourse' and rho.rrt_id = 1 and ho1.wkrv_id = new_wkrv_id;

INSERT INTO related_hydro_object (from_hdo, to_hdo, rrt_id, last_change_time)
select  fromhdo_id,ho.hdo_id,1,LOCALTIMESTAMP
from hydro_object ho where ho.wkrv_id = new_wkrv_id and ho.hydro_object_type = 'Watercourse';
	
INSERT INTO related_hydro_object (from_hdo, to_hdo, rrt_id, last_change_time)
select hdo_id, to_hdo, rrt_id,LOCALTIMESTAMP from hydro_object ho 
join related_hydro_object rho on ho.fromhdo_id = rho.from_hdo
where wkrv_id = new_wkrv_id
and rho.rrt_id in (select rrt_id from rel_hdo_role_type where rrt_id not in (1,3,4));

INSERT INTO related_hydro_object (from_hdo, to_hdo, rrt_id, last_change_time)
select from_hdo, hdo_id, rrt_id,LOCALTIMESTAMP from hydro_object ho 
join related_hydro_object rho on ho.fromhdo_id = rho.to_hdo
where wkrv_id = new_wkrv_id
and rho.rrt_id in (select rrt_id from rel_hdo_role_type where rrt_id not in (1,3,4));

INSERT INTO public.hdo_names(hdo_id, name, language, last_change_time)
select ho2.hdo_id, hn.name, hn.language, LOCALTIMESTAMP from hydro_object ho1
join related_hydro_object rho on ho1.hdo_id = rho.from_hdo
join hydro_object ho2 on rho.to_hdo = ho2.hdo_id
join hdo_names hn on hn.hdo_id = ho1.hdo_id
where ho1.wkrv_id = old_wkrv_id and ho2.wkrv_id = new_wkrv_id and rho.rrt_id = 1;

-- hdo_identfiers bestaat niet voor andere wkrv_id's dan 4

INSERT INTO public.watercourse(wtc_id, neighbour_id, length, width_lower, width_upper, "geometryLine", last_change_time, "geometrySurface")
select ho2.hdo_id, wc.neighbour_id, wc.length,wc.width_lower, wc.width_upper,wc."geometryLine", LOCALTIMESTAMP, wc."geometrySurface" from hydro_object ho1
join related_hydro_object rho on ho1.hdo_id = rho.from_hdo
join hydro_object ho2 on rho.to_hdo = ho2.hdo_id
join watercourse wc on wc.wtc_id = ho1.hdo_id
where ho1.wkrv_id = old_wkrv_id and ho2.wkrv_id = new_wkrv_id and rho.rrt_id = 1;

INSERT INTO public.related_hydro_object(
			from_hdo, to_hdo, rrt_id, last_change_time)
select hdo_id, related_hdo_id,4,LOCALTIMESTAMP from hydro_object where hydro_object_type = 'Watercourse' and wkrv_id= new_wkrv_id;

INSERT INTO public.management_regulation_or_restriction_zone(mrz_id, mrz_type, geometry, environmental_domain_id, mrz_collection_id, specialised_zone_type_id, begin_designation, end_designation, indeterminate_end_position, related_mrz_id, last_change_time)
select ho2.hdo_id, mrz.mrz_type, mrz.geometry,mrz.environmental_domain_id, mrz.mrz_collection_id,mrz.specialised_zone_type_id, mrz.begin_designation, mrz.end_designation, mrz.indeterminate_end_position, mrz.related_mrz_id, LOCALTIMESTAMP from hydro_object ho1
join related_hydro_object rho on ho1.hdo_id = rho.from_hdo
join hydro_object ho2 on rho.to_hdo = ho2.hdo_id
join management_regulation_or_restriction_zone mrz on mrz.mrz_id = ho1.hdo_id
where ho1.wkrv_id = old_wkrv_id and ho2.wkrv_id = new_wkrv_id and rho.rrt_id = 1;

INSERT INTO public.river_basin_disrict(rbd_id, area_value, area_uom_id, international_rbd, part_of_district, last_change_time, area_ex_cw_value)
select ho2.hdo_id, rbd.area_value, rbd.area_uom_id,ho3.hdo_id, ho4.hdo_id, LOCALTIMESTAMP, rbd.area_ex_cw_value from hydro_object ho1
join related_hydro_object rho on ho1.hdo_id = rho.from_hdo
join hydro_object ho2 on rho.to_hdo = ho2.hdo_id
join river_basin_disrict rbd on rbd.rbd_id = ho1.hdo_id
left join hydro_object ho3 on rbd.international_rbd = ho3.fromhdo_id
left join hydro_object ho4 on rbd.part_of_district = ho4.fromhdo_id
where ho1.wkrv_id = old_wkrv_id and ho2.wkrv_id = new_wkrv_id and rho.rrt_id = 1;

INSERT INTO public.water_body(wbd_id, level_of_detail, water_body_subtype, rbd_id, last_change_time, description, is_article_7, measure_comment, excemption_remarks, doelen_toestand_remarks)
select ho2.hdo_id, wb.level_of_detail, wb.water_body_subtype, ho3.hdo_id,LOCALTIMESTAMP, wb.description, wb.is_article_7, wb.measure_comment, wb.excemption_remarks, wb.doelen_toestand_remarks from hydro_object ho1
join related_hydro_object rho on ho1.hdo_id = rho.from_hdo
join hydro_object ho2 on rho.to_hdo = ho2.hdo_id
join water_body wb on wb.wbd_id = ho1.hdo_id
join hydro_object ho3 on ho3.fromhdo_id = wb.rbd_id
where ho1.wkrv_id = old_wkrv_id and ho2.wkrv_id = new_wkrv_id and rho.rrt_id = 1;

INSERT INTO public.surface_water_body(swb_id, is_artificial, sw_typology_id, waterbody_description, is_heaviliy_modified, representative_point, area_value, area_uom_id, large, length_value, length_uom_id, main, other_pressure_description, other_impact_description, last_change_time, sw_target_typology_id, article_43_comment, article_43_litref, article_43_url, article_43b_motivation, significantlychanged, reason_change_old, is_reservoir, is_transboundary)
select ho2.hdo_id, swb.is_artificial, swb.sw_typology_id, swb.waterbody_description, swb.is_heaviliy_modified, swb.representative_point, swb.area_value, swb.area_uom_id, swb.large, swb.length_value, swb.length_uom_id, swb.main, swb.other_pressure_description, swb.other_impact_description, LOCALTIMESTAMP, swb.sw_target_typology_id, swb.article_43_comment, swb.article_43_litref, swb.article_43_url, swb.article_43b_motivation, swb.significantlychanged, swb.reason_change_old, swb.is_reservoir, swb.is_transboundary from hydro_object ho1
join related_hydro_object rho on ho1.hdo_id = rho.from_hdo
join hydro_object ho2 on rho.to_hdo = ho2.hdo_id
join surface_water_body swb on swb.swb_id = ho1.hdo_id
where ho1.wkrv_id = old_wkrv_id and ho2.wkrv_id = new_wkrv_id and rho.rrt_id = 1;

INSERT INTO public.ground_water_body(gwb_id, area, centroid, is_out_of_rbd, is_transboundary, average_depth_value, average_depth_uom_id, average_thickness_value, average_thickness_uom_id, capacity_value, capacity_uom_id, depth_range_id, geological_formation_id, vertical_orientation_id, horizon_id, substrate_id, is_layered, is_linked_to_terrestrial_ecosystems, other_pressure_description, other_impact_description, last_change_time, significantlychanged, reason_change_old)
select ho2.hdo_id, gwb.area, gwb.centroid, gwb.is_out_of_rbd, gwb.is_transboundary, gwb.average_depth_value, gwb.average_depth_uom_id, gwb.average_thickness_value, gwb.average_thickness_uom_id, gwb.capacity_value, gwb.capacity_uom_id, gwb.depth_range_id, gwb.geological_formation_id, gwb.vertical_orientation_id, gwb.horizon_id, gwb.substrate_id, gwb.is_layered, gwb.is_linked_to_terrestrial_ecosystems, gwb.other_pressure_description, gwb.other_impact_description, LOCALTIMESTAMP, significantlychanged, reason_change_old from hydro_object ho1
join related_hydro_object rho on ho1.hdo_id = rho.from_hdo
join hydro_object ho2 on rho.to_hdo = ho2.hdo_id
join ground_water_body gwb on gwb.gwb_id = ho1.hdo_id
where ho1.wkrv_id = old_wkrv_id and ho2.wkrv_id = new_wkrv_id and rho.rrt_id = 1;





INSERT INTO public.abstraction_point(asp_id, wbd_id, geometry, last_change_time, asp_type)
select ho3.hdo_id, ho2.hdo_id, ap.geometry, LOCALTIMESTAMP,ap.asp_type from hydro_object ho1
join related_hydro_object rho on ho1.hdo_id = rho.from_hdo
join hydro_object ho2 on rho.to_hdo = ho2.hdo_id
join abstraction_point ap on ap.wbd_id = ho1.hdo_id
join abstraction_point ap1 on ap.asp_id = ap1.asp_id 
join related_hydro_object rho1 on ap1.asp_id = rho1.from_hdo
join hydro_object ho3 on ho3.hdo_id = rho1.to_hdo
where ho1.wkrv_id = old_wkrv_id and ho2.wkrv_id = new_wkrv_id and ho3.wkrv_id = new_wkrv_id and rho.rrt_id = 1;


INSERT INTO public.gw_abstraction_point(gasp_id, company, rewab_code, rewab_id, last_change_time)
select ho2.hdo_id, gap.company, gap.rewab_code, gap.rewab_id, LOCALTIMESTAMP from hydro_object ho1
join related_hydro_object rho on ho1.hdo_id = rho.from_hdo
join hydro_object ho2 on rho.to_hdo = ho2.hdo_id
join gw_abstraction_point gap on gap.gasp_id = ho1.hdo_id
where ho1.wkrv_id = old_wkrv_id and ho2.wkrv_id = new_wkrv_id and rho.rrt_id = 1;


INSERT INTO public.sw_abstraction_point(sasp_id, rewab_id, swat_id, waterabstraction_from, last_change_time)
select ho2.hdo_id, gap.rewab_id, gap.swat_id, gap.waterabstraction_from, LOCALTIMESTAMP from hydro_object ho1
join related_hydro_object rho on ho1.hdo_id = rho.from_hdo
join hydro_object ho2 on rho.to_hdo = ho2.hdo_id
join sw_abstraction_point gap on gap.sasp_id = ho1.hdo_id
where ho1.wkrv_id = old_wkrv_id and ho2.wkrv_id = new_wkrv_id and rho.rrt_id = 1;

INSERT INTO public.wfd_protected_area(wpa_id, geometry, comment_value_status_prot_area, protected_area_type_id, protected_area_status_id, swb_art7_id, gwb_art7_id, last_change_time)
select ho2.hdo_id, wfd.geometry, wfd.comment_value_status_prot_area, wfd.protected_area_type_id, wfd.protected_area_status_id, wfd.swb_art7_id, wfd.gwb_art7_id, LOCALTIMESTAMP from hydro_object ho1
join related_hydro_object rho on ho1.hdo_id = rho.from_hdo
join hydro_object ho2 on rho.to_hdo = ho2.hdo_id
join wfd_protected_area wfd on wfd.wpa_id = ho1.hdo_id
where ho1.wkrv_id = old_wkrv_id and ho2.wkrv_id = new_wkrv_id  and rho.rrt_id = 1;

INSERT INTO public.gwb_pressure(gwb_id, gprs_id, is_significant, last_change_time, remark, function, effect, prr_id, from_gwbp_id)
select ho2.hdo_id, wfd.gprs_id, wfd.is_significant, LOCALTIMESTAMP, wfd.remark, wfd.function, wfd.effect, wfd.prr_id, wfd.gwbp_id from hydro_object ho1
join related_hydro_object rho on ho1.hdo_id = rho.from_hdo
join hydro_object ho2 on rho.to_hdo = ho2.hdo_id
join gwb_pressure wfd on wfd.gwb_id = ho1.hdo_id
where ho1.wkrv_id = old_wkrv_id and ho2.wkrv_id = new_wkrv_id and rho.rrt_id = 1;

INSERT INTO public.swb_pressure(swb_id, sprs_id, is_significant, last_change_time, remark, function, effect, from_swbp_id)
select ho2.hdo_id, wfd.sprs_id, wfd.is_significant, LOCALTIMESTAMP, wfd.remark, wfd.function, wfd.effect, wfd.swbp_id from hydro_object ho1
join related_hydro_object rho on ho1.hdo_id = rho.from_hdo
join hydro_object ho2 on rho.to_hdo = ho2.hdo_id
join swb_pressure wfd on wfd.swb_id = ho1.hdo_id
where ho1.wkrv_id = old_wkrv_id and ho2.wkrv_id = new_wkrv_id and rho.rrt_id = 1;

INSERT INTO public.wb_prognosis(year, opt_id, cls_id, last_change_time, swb_id)
select wfd.year, wfd.opt_id, wfd.cls_id, LOCALTIMESTAMP, ho2.hdo_id from hydro_object ho1
join related_hydro_object rho on ho1.hdo_id = rho.from_hdo
join hydro_object ho2 on rho.to_hdo = ho2.hdo_id
join wb_prognosis wfd on wfd.swb_id = ho1.hdo_id
where ho1.wkrv_id = old_wkrv_id and ho2.wkrv_id = new_wkrv_id and rho.rrt_id = 1;

INSERT INTO public.relation_ore_wbd(ore_id, wbd_id, last_change_time)
select wfd.ore_id, ho2.hdo_id, LOCALTIMESTAMP from hydro_object ho1
join related_hydro_object rho on ho1.hdo_id = rho.from_hdo
join hydro_object ho2 on rho.to_hdo = ho2.hdo_id
join relation_ore_wbd wfd on wfd.wbd_id = ho1.hdo_id
where ho1.wkrv_id = old_wkrv_id and ho2.wkrv_id = new_wkrv_id and rho.rrt_id = 1; 


INSERT INTO public.norm(naam_namespace_id, lokale_naam, observed_property, opmerking, 
			uri, defined_at_level_id, norm_groep_id, wkrv_id, last_change_time, from_nrm_id)
SELECT naam_namespace_id, lokale_naam, observed_property, opmerking, 
	   uri, defined_at_level_id, norm_groep_id, new_wkrv_id, last_change_time, nrm_id
FROM public.norm no
where no.wkrv_id = old_wkrv_id;


INSERT INTO public.norm_feature(nrm_id, hdo_id, last_change_time)
select no.nrm_id, ho.hdo_id, LOCALTIMESTAMP from hydro_object ho
join norm_feature nf on nf.hdo_id = ho.fromhdo_id
join norm no on nf.nrm_id = no.from_nrm_id
where ho.wkrv_id = new_wkrv_id and ho.wkrv_id = new_wkrv_id; 


INSERT INTO public.norm_value(nrm_id, value_processing_method, cptm_id, lowerbound_value, 
			lowerbound_uom_id, upperbound_value, upperbound_uom_id, begin_lifespan_version, 
			end_lifespan_version, opmerking, uri, opname_datum, norm_klasse_id, 
			lowerbound_limit_symbol_id, upperbound_limit_symbol_id)
SELECT no.nrm_id, value_processing_method, cptm_id, lowerbound_value, 
	   lowerbound_uom_id, upperbound_value, upperbound_uom_id, begin_lifespan_version, 
	   end_lifespan_version, nv.opmerking, nv.uri, opname_datum, norm_klasse_id, 
	   lowerbound_limit_symbol_id, upperbound_limit_symbol_id
  FROM public.norm_value nv
join norm no on nv.nrm_id = no.from_nrm_id
where no.wkrv_id = new_wkrv_id;


INSERT INTO public.natural_background_levels(gwb_id, opt_id, priority, concentration_value, concentration_uom_id, last_change_time)
select ho2.hdo_id, wfd.opt_id, wfd.priority, wfd.concentration_value, wfd.concentration_uom_id, LOCALTIMESTAMP from hydro_object ho1
join related_hydro_object rho on ho1.hdo_id = rho.from_hdo
join hydro_object ho2 on rho.to_hdo = ho2.hdo_id
join natural_background_levels wfd on wfd.gwb_id = ho1.hdo_id
where ho1.wkrv_id = old_wkrv_id and ho2.wkrv_id = new_wkrv_id and rho.rrt_id = 1; 

INSERT INTO public.swb_art43b_excemption(swb_id, a43b_id, last_change_time)
select ho2.hdo_id, wfd.a43b_id, LOCALTIMESTAMP from hydro_object ho1
join related_hydro_object rho on ho1.hdo_id = rho.from_hdo
join hydro_object ho2 on rho.to_hdo = ho2.hdo_id
join swb_art43b_excemption wfd on wfd.swb_id = ho1.hdo_id
where ho1.wkrv_id = old_wkrv_id and ho2.wkrv_id = new_wkrv_id and rho.rrt_id = 1; 

INSERT INTO public.bronnen(hdo_id, chs_id, wbpm_id, eenh_id, year, is_significant_wbm, is_significant_factsheet)
select ho2.hdo_id, br.chs_id, br.wbpm_id, br.eenh_id, br.year, br.is_significant_wbm, br.is_significant_factsheet from hydro_object ho1
join related_hydro_object rho on ho1.hdo_id = rho.from_hdo
join hydro_object ho2 on rho.to_hdo = ho2.hdo_id
join bronnen br on br.hdo_id = ho1.hdo_id
where ho1.wkrv_id = old_wkrv_id and ho2.wkrv_id = new_wkrv_id and rho.rrt_id = 1;

INSERT INTO public.gwb_conceptual_model(gwb_id, volgnr, omschrijving, afbeelding, extentie, last_change_time)
select ho2.hdo_id, gcm.volgnr, gcm.omschrijving, gcm.afbeelding, gcm.extentie, LOCALTIMESTAMP from hydro_object ho1
join related_hydro_object rho on rho.from_hdo = ho1.hdo_id
join hydro_object ho2 on rho.to_hdo = ho2.hdo_id
join gwb_conceptual_model gcm on gcm.gwb_id = ho1.hdo_id
where ho1.wkrv_id = old_wkrv_id and ho2.wkrv_id = new_wkrv_id and rho.rrt_id = 1;


-- Koppelen hydro_objects
INSERT INTO public.relation_gwb_swb(gwb_id, swb_id, relation_type_id, last_change_time)
select ho2.hdo_id, ho3.hdo_id, rgs1.relation_type_id, LOCALTIMESTAMP from hydro_object ho1
join related_hydro_object rho on ho1.hdo_id = rho.from_hdo
join hydro_object ho2 on rho.to_hdo = ho2.hdo_id
join relation_gwb_swb rgs1 on rgs1.gwb_id = ho1.hdo_id
join relation_gwb_swb rgs2 on rgs1.gwsw_id = rgs2.gwsw_id
join related_hydro_object rho1 on rgs2.swb_id = rho1.from_hdo
join hydro_object ho3 on ho3.hdo_id = rho1.to_hdo
where ho1.wkrv_id = old_wkrv_id and ho2.wkrv_id = new_wkrv_id and ho3.wkrv_id = new_wkrv_id and rho.rrt_id = 1;

INSERT INTO public.waterbody_protected_area_intersection(wbd_id, wpa_id, relation_type, geometry, last_change_time)
select ho2.hdo_id, ho3.hdo_id, wpai1.relation_type, wpai1.geometry,LOCALTIMESTAMP from hydro_object ho1
join related_hydro_object rho on ho1.hdo_id = rho.from_hdo
join hydro_object ho2 on rho.to_hdo = ho2.hdo_id
join waterbody_protected_area_intersection wpai1 on wpai1.wbd_id = ho1.hdo_id
join waterbody_protected_area_intersection wpai2 on wpai2.wbpa_id = wpai1.wbpa_id
join related_hydro_object rho1 on wpai2.wpa_id = rho1.from_hdo
join hydro_object ho3 on ho3.hdo_id = rho1.to_hdo
where ho1.wkrv_id = old_wkrv_id and ho2.wkrv_id = new_wkrv_id and ho3.wkrv_id = new_wkrv_id and rho.rrt_id = 1 and rho1.rrt_id = 1;

-- maatregelen
INSERT INTO public.river_basin_management_plan(rbd_id, wkrv_id, databases_and_repositories_description, general_supporting_documents, name, summary_of_programmes, summary_preparation_first_update, summary_processes_and_procedures, table_of_contents, pom_general_additional_comments, last_change_time, pom_reference)
select ho2.hdo_id, new_wkrv_id, rbmp.databases_and_repositories_description, rbmp.general_supporting_documents, rbmp.name, rbmp.summary_of_programmes, rbmp.summary_preparation_first_update, rbmp.summary_processes_and_procedures, rbmp.table_of_contents, rbmp.pom_general_additional_comments,LOCALTIMESTAMP ,rbmp.pom_reference from hydro_object ho1
join related_hydro_object rho on ho1.hdo_id = rho.from_hdo
join hydro_object ho2 on rho.to_hdo = ho2.hdo_id
join river_basin_management_plan rbmp on rbmp.rbd_id = ho1.hdo_id
where ho1.wkrv_id = old_wkrv_id and ho2.wkrv_id = new_wkrv_id and rho.rrt_id = 1; 

-- de rpv_id laten we staan. Dit is misschien dan wel een verkeerde. Maar deze wordt gebruikt voor de uitvoeringIn en daar ga je altijd voor naar de rpp_id en dan kom je bij de goede uit.
INSERT INTO public.monitored_measure(
			monitored_measure_type, level_of_measure_id, prime_competent_authority_id, 
			derived_from_measure_id, last_change_time, rpv_id, frommtm_id)
select mm.monitored_measure_type, mm.level_of_measure_id, mm.prime_competent_authority_id, mm.derived_from_measure_id,LOCALTIMESTAMP, mm.rpv_id, mm.mtm_id  from hydro_object ho1
join related_hydro_object rho on ho1.hdo_id = rho.from_hdo
join hydro_object ho2 on rho.to_hdo = ho2.hdo_id
join river_basin_management_plan rbmp on rbmp.rbd_id = ho1.hdo_id
join supp_add_measure_type samt on samt.rbmp_id = rbmp.rbmp_id
join monitored_measure mm on mm.mtm_id = samt.smnl_id
where ho1.wkrv_id = old_wkrv_id and ho2.wkrv_id = new_wkrv_id and rho.rrt_id = 1;


INSERT INTO public.supp_add_measure_type(
			smnl_id, rbmp_id, namespace_id, local_id, measure_name, measure_description, comment, associated_link_desc, associated_link_uri, is_additional_measure, 
			legislation_ref_id, amount_value, amount_uom_id, initiative_party, 
			smeu_id, last_change_time, initiative_party_ocat_id, "is_N2000_relevant", 
			is_abstraction_relevant, process_info)
select mm.mtm_id, rbmp1.rbmp_id, samt.namespace_id, samt.local_id, samt.measure_name, samt.measure_description, samt.comment, samt.associated_link_desc, samt.associated_link_uri, 
samt.is_additional_measure, samt.legislation_ref_id, samt.amount_value, samt.amount_uom_id, samt.initiative_party, samt.smeu_id, LOCALTIMESTAMP, samt.initiative_party_ocat_id, 
samt."is_N2000_relevant", samt.is_abstraction_relevant, samt.process_info from monitored_measure mm
join supp_add_measure_type samt on samt.smnl_id = mm.frommtm_id
join river_basin_management_plan rbmp on rbmp.rbmp_id = samt.rbmp_id
join related_hydro_object rho on rho.from_hdo = rbmp.rbd_id
join hydro_object ho on ho.hdo_id = rho.to_hdo
join river_basin_management_plan rbmp1 on rbmp1.rbd_id = ho.hdo_id
where mm.frommtm_id is not null and ho.wkrv_id = new_wkrv_id and rho.rrt_id = 1;

update monitored_measure set derived_from_measure_id = frommtm_id;


INSERT INTO public.measure_finance(
			mtm_id, last_change_time, sum, mft_id)
select mm.mtm_id,LOCALTIMESTAMP,mf.sum,mf.mft_id from monitored_measure mm
join measure_finance mf on mf.mtm_id = mm.frommtm_id;

INSERT INTO public.measure_progress(
			mtm_id, mst_id, reason_substanstial_delay, amount_value, last_change_time, 
			year)
select mm.mtm_id,mp.mst_id,mp.reason_substanstial_delay, mp.amount_value, LOCALTIMESTAMP, mp.year from monitored_measure mm
join measure_progress mp on mp.mtm_id = mm.frommtm_id;

INSERT INTO public.measure_progress_completed(mtm_id, year_completed, completed)
select mm.mtm_id, mpc.year_completed, mpc.completed from monitored_measure mm
join measure_progress_completed mpc on mpc.mtm_id = mm.frommtm_id;

INSERT INTO public.monitored_measure_eu_fund(mtm_id, euf_id, last_change_time)
select mm.mtm_id, mp.euf_id, LOCALTIMESTAMP from monitored_measure mm
join monitored_measure_eu_fund mp on mp.mtm_id = mm.frommtm_id;

INSERT INTO public.measure_per_abstraction_point(
			mtm_id, asp_id, last_change_time)
select mm.mtm_id, ho.hdo_id,LOCALTIMESTAMP  from measure_per_abstraction_point mpap
join monitored_measure mm on mm.frommtm_id = mpap.mtm_id
join hydro_object ho on ho.fromhdo_id = mpap.asp_id;


INSERT INTO public.measure_per_man_reg_or_restr_zone(
			mtm_id, mrz_id, last_change_time)
select mm.mtm_id, ho.hdo_id,LOCALTIMESTAMP  from measure_per_man_reg_or_restr_zone mpap
join monitored_measure mm on mm.frommtm_id = mpap.mtm_id
join hydro_object ho on ho.fromhdo_id = mpap.mrz_id;

INSERT INTO public.measure_per_man_protected_area(
			mtm_id, wpa_id, last_change_time)
select mm.mtm_id, ho.hdo_id,LOCALTIMESTAMP  from measure_per_man_protected_area mpap
join monitored_measure mm on mm.frommtm_id = mpap.mtm_id
join hydro_object ho on ho.fromhdo_id = mpap.wpa_id;


-- versie doorzetten / kopieeren oordelen
-----------------

INSERT INTO public.gwb_yearly_status(
			gwb_id, year_of_status, comment_on_chemical_status, comment_on_quantity_status, 
			motivation_4no_chemical_status, motivation_4no_quantity_status, 
			last_change_time, additional_purification, motivation_4no_chemical_trends, 
			exceeds_drinkingwater, from_gys_id)
select ho2.hdo_id, gys.year_of_status, gys.comment_on_chemical_status, gys.comment_on_quantity_status, gys.motivation_4no_chemical_status, gys.motivation_4no_quantity_status, LOCALTIMESTAMP, 
gys.additional_purification, gys.motivation_4no_chemical_trends, gys.exceeds_drinkingwater,gys.gys_id  from hydro_object ho1
join related_hydro_object rho on ho1.hdo_id = rho.from_hdo
join hydro_object ho2 on rho.to_hdo = ho2.hdo_id
join gwb_yearly_status gys on gys.gwb_id = ho1.hdo_id
where ho1.wkrv_id = old_wkrv_id and ho2.wkrv_id = new_wkrv_id and rho.rrt_id = 1; 

INSERT INTO public.swb_yearly_status(
			swb_id, year_of_status, comment_on_chemical_status, comment_on_ecological_status, 
			motivation_4no_chemical_status, motivation_4no_ecological_status, 
			last_change_time, additional_purification, exceeds_drinkingwater, from_sys_id)
select ho2.hdo_id, gys.year_of_status, gys.comment_on_chemical_status, gys.comment_on_ecological_status, 
gys.motivation_4no_chemical_status, gys.motivation_4no_ecological_status, LOCALTIMESTAMP, 
gys.additional_purification,  gys.exceeds_drinkingwater, gys.sys_id from hydro_object ho1
join related_hydro_object rho on ho1.hdo_id = rho.from_hdo
join hydro_object ho2 on rho.to_hdo = ho2.hdo_id
join swb_yearly_status gys on gys.swb_id = ho1.hdo_id
where ho1.wkrv_id = old_wkrv_id and ho2.wkrv_id = new_wkrv_id and rho.rrt_id = 1; 



INSERT INTO public.observation(
			phenomenon_time_begin, phenomenon_time_end, result_time, 
			valid_time_begin, valid_time_end, observed_property_type, quality_indicator_id, 
			numeric_value_uom_id, value_processing_method_id, limit_symbol_id, 
			description, classified_result_id, remarks, result_nature_id, 
			start_depth, end_depth, obs_parm_parent_id, mno_id, last_change_time, 
			numeric_value, numeric_value_significance, from_obs_id)
select phenomenon_time_begin, phenomenon_time_end, result_time, 
			valid_time_begin, valid_time_end, observed_property_type, quality_indicator_id, 
			numeric_value_uom_id, value_processing_method_id, limit_symbol_id, 
			description, classified_result_id, remarks, result_nature_id, 
			start_depth, end_depth, obs_parm_parent_id, mno_id, LOCALTIMESTAMP, 
			numeric_value, numeric_value_significance, obs_id
from swb_yearly_status sys 
join sw_testing_conclusion stc on sys.from_sys_id = stc.sys_id
join observation obs on obs.obs_id = stc.stcc_id
where sys.from_sys_id is not null; -- we kunnen er vanuit gaan dit alleen de nieuw toegevoegde swb_yearly_status zijn


INSERT INTO public.observation(
			phenomenon_time_begin, phenomenon_time_end, result_time, 
			valid_time_begin, valid_time_end, observed_property_type, quality_indicator_id, 
			numeric_value_uom_id, value_processing_method_id, limit_symbol_id, 
			description, classified_result_id, remarks, result_nature_id, 
			start_depth, end_depth, obs_parm_parent_id, mno_id, last_change_time, 
			numeric_value, numeric_value_significance, from_obs_id)
select phenomenon_time_begin, phenomenon_time_end, result_time, 
			valid_time_begin, valid_time_end, observed_property_type, quality_indicator_id, 
			numeric_value_uom_id, value_processing_method_id, limit_symbol_id, 
			description, classified_result_id, remarks, result_nature_id, 
			start_depth, end_depth, obs_parm_parent_id, mno_id, LOCALTIMESTAMP, 
			numeric_value, numeric_value_significance, obs_id
from gwb_yearly_status gys 
join gw_testing_conclusion gtc on gys.from_gys_id = gtc.gys_id
join observation obs on obs.obs_id = gtc.gtcc_id
where gys.from_gys_id is not null; -- we kunnen er vanuit gaan dit alleen de nieuw toegevoegde gwb_yearly_status zijn

-- insert observed_feature voor opp en grond water
INSERT INTO public.observed_feature(
			hdo_id, obs_id, last_change_time)
select ho1.hdo_id, obs.obs_id, LOCALTIMESTAMP from observed_feature of
join observation obs on of.obs_id = obs.from_obs_id
join hydro_object ho on ho.hdo_id = of.hdo_id
join related_hydro_object rho on rho.from_hdo = ho.hdo_id
join hydro_object ho1 on ho1.hdo_id = rho.to_hdo
where ho.wkrv_id = old_wkrv_id and ho1.wkrv_id = new_wkrv_id and rho.rrt_id =1;

INSERT INTO public.gw_chemical_status(
			gys_id, clst_id, last_change_time, eumg_id, wbpm_id, opt_id, observation_start_date, observation_end_date, clt_id)
select gwb.gys_id, gw.clst_id,LOCALTIMESTAMP, gw.eumg_id, gw.wbpm_id, gw.opt_id, gw.observation_start_date, gw.observation_end_date, gw.clt_id from gw_chemical_status gw
join gwb_yearly_status gwb on gwb.from_gys_id = gw.gys_id;


INSERT INTO public.gw_quantity_status(
			gys_id, gwst_id, last_change_time, wbpm_id, eumg_id, opt_id, clt_id)
select gwb.gys_id, gw.gwst_id,LOCALTIMESTAMP, gw.wbpm_id, gw.eumg_id, gw.opt_id, gw.clt_id from gw_quantity_status gw
join gwb_yearly_status gwb on gwb.from_gys_id = gw.gys_id;

  
INSERT INTO public.gw_testing_conclusion(
			gtcc_id, gys_id, last_change_time, eumg_id)
select obs.obs_id, gwb.gys_id, LOCALTIMESTAMP, gw.eumg_id from gw_testing_conclusion gw
join observation obs on obs.from_obs_id = gw.gtcc_id
join gwb_yearly_status gwb on gwb.from_gys_id = gw.gys_id;

  
INSERT INTO public.sw_testing_conclusion(
			stcc_id, sys_id, last_change_time, eumg_id)
select obs.obs_id, sys.sys_id, LOCALTIMESTAMP, sw.eumg_id from sw_testing_conclusion sw
join observation obs on obs.from_obs_id = sw.stcc_id
join swb_yearly_status sys on sys.from_sys_id = sw.sys_id;

INSERT INTO public.sw_ecological_status(
			sys_id, opt_id, swes_id, last_change_time, eumg_id, wbpm_id, observation_start_date, observation_end_date, clt_id)
select swb.sys_id, sw.opt_id, sw.swes_id, LOCALTIMESTAMP, sw.eumg_id, sw.wbpm_id, sw.observation_start_date, sw.observation_end_date, sw.clt_id from sw_ecological_status sw
join swb_yearly_status swb on swb.from_sys_id = sw.sys_id;

  
INSERT INTO public.sw_chemical_substance_status(
			sys_id, opt_id, swcs_id, last_change_time, eumg_id, wbpm_id, observation_start_date, observation_end_date, clt_id)
select swb.sys_id, sw.opt_id, sw.swcs_id, LOCALTIMESTAMP, sw.eumg_id, sw.wbpm_id, sw.observation_start_date, sw.observation_end_date, sw.clt_id from sw_chemical_substance_status sw
join swb_yearly_status swb on swb.from_sys_id = sw.sys_id;

INSERT INTO public.pollutant_trend(
			gwys_id, opt_id, comment, last_change_time, depth_m, 
			cls_id)
select gys.gys_id,  pt.opt_id, pt.comment,LOCALTIMESTAMP, pt.depth_m, pt.cls_id
 from gwb_yearly_status gys
join pollutant_trend pt on gys.from_gys_id = pt.gwys_id;

-- koppelen aan hydro_objects
INSERT INTO public.gw_abstraction_point_status(
			asp_id, gwsy_id, gwst_id, last_change_time, remarks)
select ho2.hdo_id, gwb.gys_id, gaps.gwst_id, LOCALTIMESTAMP, gaps.remarks from hydro_object ho1
join related_hydro_object rho on ho1.hdo_id = rho.from_hdo
join hydro_object ho2 on rho.to_hdo = ho2.hdo_id
join gw_abstraction_point_status gaps on gaps.asp_id = ho1.hdo_id
join gwb_yearly_status gwb on gwb.from_gys_id = gaps.gwsy_id
where ho1.wkrv_id = old_wkrv_id and ho2.wkrv_id = new_wkrv_id and rho.rrt_id = 1; 

  
INSERT INTO public.gw_n2000_status(
			wpa_id, gwsy, cls_id, last_change_time, opt_id, remark)
select ho2.hdo_id, gwb.gys_id, gns.cls_id, LOCALTIMESTAMP, gns.opt_id, gns.remark from hydro_object ho1
join related_hydro_object rho on ho1.hdo_id = rho.from_hdo
join hydro_object ho2 on rho.to_hdo = ho2.hdo_id
join gw_n2000_status gns on gns.wpa_id = ho1.hdo_id
join gwb_yearly_status gwb on gwb.from_gys_id = gns.gwsy
where ho1.wkrv_id = old_wkrv_id and ho2.wkrv_id = new_wkrv_id and rho.rrt_id = 1; 

INSERT INTO public.gw_swb_status(
			swb_id, gwsy, cls_id, last_change_time, opt_id, remark)
select ho2.hdo_id, gwb.gys_id, gss.cls_id, LOCALTIMESTAMP, gss.opt_id, gss.remark from hydro_object ho1
join related_hydro_object rho on ho1.hdo_id = rho.from_hdo
join hydro_object ho2 on rho.to_hdo = ho2.hdo_id
join gw_swb_status gss on gss.swb_id = ho1.hdo_id
join gwb_yearly_status gwb on gwb.from_gys_id = gss.gwsy
where ho1.wkrv_id = old_wkrv_id and ho2.wkrv_id = new_wkrv_id and rho.rrt_id = 1; 

-- uitzonderingen
INSERT INTO public.swb_exemption(
			swb_id, obex_id, comment, last_change_time, from_swce_id)
select ho2.hdo_id, swbe.obex_id, swbe.comment, LOCALTIMESTAMP, swbe.swce_id from hydro_object ho1
join related_hydro_object rho on ho1.hdo_id = rho.from_hdo
join hydro_object ho2 on rho.to_hdo = ho2.hdo_id
join swb_exemption swbe on swbe.swb_id = ho1.hdo_id
where ho1.wkrv_id = old_wkrv_id and ho2.wkrv_id = new_wkrv_id and rho.rrt_id = 1; 

INSERT INTO public.swb_chem_exemp_pollutant(
			swce_id, chs_id, last_change_time)
select swbe.swce_id, scep.chs_id,LOCALTIMESTAMP  from swb_chem_exemp_pollutant scep
join swb_exemption swbe on swbe.from_swce_id = scep.swce_id;

INSERT INTO public.swb_ecol_exemp_qe(
			swce_id, opt_id, last_change_time)
select swbe.swce_id, scep.opt_id,LOCALTIMESTAMP  from swb_ecol_exemp_qe scep
join swb_exemption swbe on swbe.from_swce_id = scep.swce_id;

INSERT INTO public.swb_excemption_mechanism_44(
			swce_id, exme_id, last_change_time)
select swbe.swce_id, scep.exme_id,LOCALTIMESTAMP  from swb_excemption_mechanism_44 scep
join swb_exemption swbe on swbe.from_swce_id = scep.swce_id;



INSERT INTO public.gwb_chemical_exemption(
			gwb_id, obex_id, comment, last_change_time, from_gwce_id)
select ho2.hdo_id, gwbe.obex_id, gwbe.comment, LOCALTIMESTAMP, gwbe.gwce_id from hydro_object ho1
join related_hydro_object rho on ho1.hdo_id = rho.from_hdo
join hydro_object ho2 on rho.to_hdo = ho2.hdo_id
join gwb_chemical_exemption gwbe on gwbe.gwb_id = ho1.hdo_id
where ho1.wkrv_id = old_wkrv_id and ho2.wkrv_id = new_wkrv_id and rho.rrt_id = 1;

INSERT INTO public.gwb_chem_exemp_pollutant(
			gwce_id, opt_id, is_causing_exemption, last_change_time)
select gwbe.gwce_id, gcep.opt_id,gcep.is_causing_exemption, LOCALTIMESTAMP  from gwb_chem_exemp_pollutant gcep
join gwb_chemical_exemption gwbe on gwbe.from_gwce_id = gcep.gwce_id;

INSERT INTO public.gwb_quantitative_exemption(
			gwb_id, obex_id, comment, last_change_time)
select ho2.hdo_id, gwbe.obex_id, gwbe.comment, LOCALTIMESTAMP from hydro_object ho1
join related_hydro_object rho on ho1.hdo_id = rho.from_hdo
join hydro_object ho2 on rho.to_hdo = ho2.hdo_id
join gwb_quantitative_exemption gwbe on gwbe.gwb_id = ho1.hdo_id
where ho1.wkrv_id = old_wkrv_id and ho2.wkrv_id = new_wkrv_id and rho.rrt_id = 1;



  
INSERT INTO public.swb_measures_43a(
			swb_id, fu43_id, motivation, last_change_time, from_swee_id)
select ho2.hdo_id, sm.fu43_id, sm.motivation, LOCALTIMESTAMP, sm.swee_id from hydro_object ho1
join related_hydro_object rho on ho1.hdo_id = rho.from_hdo
join hydro_object ho2 on rho.to_hdo = ho2.hdo_id
join swb_measures_43a sm on sm.swb_id = ho1.hdo_id
where ho1.wkrv_id = old_wkrv_id and ho2.wkrv_id = new_wkrv_id and rho.rrt_id = 1;


INSERT INTO public.sw_measure43_function(
			me43_id, smee_id, last_change_time)
select gcep.me43_id, swbe.swee_id, LOCALTIMESTAMP from sw_measure43_function gcep
join swb_measures_43a swbe on swbe.from_swee_id = gcep.smee_id;

-- Meetpunten
INSERT INTO public.monitoring_object(inspire_id_local_id, inspire_id_namespace_id, wkrv_id,
			monitoring_object_type, name, additional_description, geometry, 
			last_change_time, geometry_etrs89, begin_lifespan_version, end_lifespan_version, 
			primary_geo_column, reason_change, primary_geodetic_reference_id, from_mno_id)
select inspire_id_local_id, inspire_id_namespace_id, new_wkrv_id, 
			monitoring_object_type, name, additional_description, geometry, 
			LOCALTIMESTAMP, geometry_etrs89, begin_lifespan_version, end_lifespan_version, 
			primary_geo_column, reason_change, primary_geodetic_reference_id, mno_id from monitoring_object where wkrv_id = old_wkrv_id;

INSERT INTO public.monitoring_object_other_ids(
			mno_id, hydro_id_local_id, hydro_id_ore_id)
select mo.mno_id, mooi.hydro_id_local_id, mooi.hydro_id_ore_id from monitoring_object_other_ids mooi
join monitoring_object mo on mo.from_mno_id = mooi.mno_id
where mo.wkrv_id = new_wkrv_id;
			
INSERT INTO public.related_monitoring_object(
			from_mno, to_mno, rrt_id, last_change_time)
select from_mno_id, mno_id, 1,LOCALTIMESTAMP from monitoring_object where wkrv_id = new_wkrv_id;

INSERT INTO public.monitoring_feature(
			mnf_id, monitoring_feature_type, pos_accuracy_horizontal_value, 
			pos_accuracy_horizontal_uom_id, pos_accuracy_vertical_value, 
			pos_accuracy_vertical_uom_id, last_change_time)
select  mo.mno_id, mf.monitoring_feature_type, mf.pos_accuracy_horizontal_value, 
			mf.pos_accuracy_horizontal_uom_id, mf.pos_accuracy_vertical_value, 
			mf.pos_accuracy_vertical_uom_id, LOCALTIMESTAMP from monitoring_feature mf
join monitoring_object mo on mo.from_mno_id = mf.mnf_id
where mo.wkrv_id = new_wkrv_id;

INSERT INTO public.environmental_monitoring_facility(
			emf_id,measurement_regime_id, representative_point, is_mobile, 
			result_acquisition_source_id, speciallised_emf_type_id, ligt_in_mrz_id, 
			last_change_time)
select mo.mno_id, emf.measurement_regime_id, emf.representative_point, emf.is_mobile, 
			emf.result_acquisition_source_id, emf.speciallised_emf_type_id, emf.ligt_in_mrz_id, 
			LOCALTIMESTAMP from environmental_monitoring_facility emf 
join monitoring_object mo on mo.from_mno_id = emf.emf_id
where mo.wkrv_id = new_wkrv_id;

select mo.mno_id, ho2.hdo_id, LOCALTIMESTAMP
  FROM public.env_mon_facil_in_mngmt_reg_or_restr_zone emfmr
join environmental_monitoring_facility emf on emf.emf_id = emfmr.emf_id
join monitoring_object mo on mo.from_mno_id = emf.emf_id
join management_regulation_or_restriction_zone mrz on mrz.mrz_id = emfmr.mrz_id
join hydro_object ho1 on ho1.hdo_id = mrz.mrz_id
join related_hydro_object rho on ho1.hdo_id = rho.from_hdo
join hydro_object ho2 on rho.to_hdo = ho2.hdo_id
where ho1.wkrv_id = old_wkrv_id and ho2.wkrv_id = new_wkrv_id and rho.rrt_id = 1;
			
			
INSERT INTO public.environmental_monitoring_network(emn_id, organization_level_id, last_change_time)
SELECT mo.mno_id, organization_level_id, LOCALTIMESTAMP  FROM public.environmental_monitoring_network emn
JOIN monitoring_object mo on mo.from_mno_id = emn.emn_id
WHERE mo.wkrv_id = new_wkrv_id;

INSERT INTO public.network_facility(
			emf_id, emn_id, linking_time_begin, linking_time_end, last_change_time)
select mo.mno_id, mo1.mno_id, ef.linking_time_begin, ef.linking_time_end, LOCALTIMESTAMP from network_facility ef
join monitoring_object mo on mo.from_mno_id = ef.emf_id
join monitoring_object mo1 on mo1.from_mno_id = ef.emn_id
where mo.wkrv_id = new_wkrv_id and mo1.wkrv_id = new_wkrv_id;


INSERT INTO public.monitored_compartiment(
			mno_id, cptm_id, last_change_time)
select mo.mno_id, mc.cptm_id, LOCALTIMESTAMP from monitored_compartiment mc
join monitoring_object mo on mo.from_mno_id = mc.mno_id
where mo.wkrv_id = new_wkrv_id;

INSERT INTO public.monitoring_station(
			mts_id, monitoring_station_type, number_of_points_in_subsite, 
			subsite_type_id, last_change_time)
select emf.emf_id, ms.monitoring_station_type, ms.number_of_points_in_subsite, 
			ms.subsite_type_id, LOCALTIMESTAMP from monitoring_station ms
join environmental_monitoring_facility emf on emf.emf_id = ms.mts_id
join monitoring_object mo on mo.from_mno_id = emf.emf_id
where mo.wkrv_id = new_wkrv_id;

INSERT INTO public.observing_capability(
			observing_time_begin, observing_time_end, online_resource, 
			process_type_id, last_change_time, name, is_sample, wkrv_id, from_osc_id)
SELECT observing_time_begin, observing_time_end, online_resource, 
	   process_type_id, LOCALTIMESTAMP, name, is_sample, new_wkrv_id, osc_id
FROM public.observing_capability
where wkrv_id = old_wkrv_id;

INSERT INTO public.quality_element(
			osc_id, opt_id, parameter_use_id, cycle_value, cycle_uom_id, 
			cycle_description, frequency_value, frequency_uom_id, reason_deviation_program, 
			last_change_time, sampling_method_id, sampling_device_id, deviation_program_jn, 
			opt_uom_id, wbm_id, remark, from_qem_id)
SELECT oc.osc_id, qe.opt_id, qe.parameter_use_id, qe.cycle_value, qe.cycle_uom_id, 
	   qe.cycle_description, qe.frequency_value, qe.frequency_uom_id, qe.reason_deviation_program, 
	   LOCALTIMESTAMP, qe.sampling_method_id, qe.sampling_device_id, qe.deviation_program_jn, 
	   qe.opt_uom_id, qe.wbm_id, qe.remark, qe.qem_id
FROM public.quality_element qe
JOIN public.observing_capability oc on oc.from_osc_id = qe.osc_id;

INSERT INTO monprog.quality_element_indicator_descriptor(qem_id, idd_id, last_change_time)
SELECT qe.qem_id, qeid.idd_id, LOCALTIMESTAMP FROM monprog.quality_element_indicator_descriptor qeid
JOIN quality_element qe on qe.from_qem_id = qeid.qem_id;

INSERT INTO monprog.planned_observation_time(
			qem_id, start_date, end_date, noof_samples, samples_bepalingsgrens_id, 
			last_change_time)
SELECT qem.qem_id, pot.start_date, pot.end_date, pot.noof_samples, pot.samples_bepalingsgrens_id, LOCALTIMESTAMP
FROM monprog.planned_observation_time pot
JOIN public.quality_element qem on qem.from_qem_id = pot.qem_id;

INSERT INTO public.observing_capability_responsible_party(osc_id, ore_id)
SELECT oc.osc_id, ocrp.ore_id
FROM public.observing_capability_responsible_party ocrp
JOIN observing_capability oc on oc.from_osc_id = ocrp.osc_id;

INSERT INTO public.monitoring_object_quality_element(mno_id, qem_id)
SELECT mo.mno_id, qe.qem_id FROM public.monitoring_object_quality_element moqe
join monitoring_object mo on mo.from_mno_id = moqe.mno_id 
join quality_element qe on qe.from_qem_id = moqe.qem_id;

INSERT INTO public.swb_physical_alteration(swb_id, pat_id)
SELECT ho2.hdo_id, spa.pat_id FROM public.swb_physical_alteration spa
join surface_water_body swb on swb.swb_id = spa.swb_id
join hydro_object ho1 on ho1.hdo_id = swb.swb_id
join related_hydro_object rho on ho1.hdo_id = rho.from_hdo
join hydro_object ho2 on rho.to_hdo = ho2.hdo_id
where ho1.wkrv_id = old_wkrv_id and ho2.wkrv_id = new_wkrv_id and rho.rrt_id = 1;

INSERT INTO public.planned_feature_monitoring(hdo_id, qem_id, last_change_time, from_pmf_id)
SELECT ho2.hdo_id, qe.qem_id, LOCALTIMESTAMP, pfm.pmf_id
  FROM public.planned_feature_monitoring pfm
JOIN hydro_object ho1 on ho1.hdo_id = pfm.hdo_id
join related_hydro_object rho on ho1.hdo_id = rho.from_hdo
join hydro_object ho2 on rho.to_hdo = ho2.hdo_id
join quality_element qe on qe.from_qem_id = pfm.qem_id
where ho1.wkrv_id = old_wkrv_id and ho2.wkrv_id = new_wkrv_id and rho.rrt_id = 1;
  
INSERT INTO public.program_monitoring_object(
			 object_mno_id, last_change_time)
SELECT mo.mno_id, LOCALTIMESTAMP FROM public.program_monitoring_object pmo
JOIN monitoring_object mo on mo.from_mno_id = pmo.object_mno_id;

INSERT INTO public.projection(
			pmf_id, monitoring_goal_id, last_change_time)
SELECT pfm.pmf_id, pr.monitoring_goal_id, LOCALTIMESTAMP
  FROM public.projection pr
JOIN planned_feature_monitoring pfm on pfm.from_pmf_id = pr.pmf_id;

INSERT INTO public.wb_status_change_motivation(
			wbd_id, scm_id, opt_id, year_initial, year_status, last_change_time)
SELECT ho2.hdo_id, wscm.scm_id, wscm.opt_id, wscm.year_initial, wscm.year_status, LOCALTIMESTAMP
  FROM public.wb_status_change_motivation wscm
join water_body wb on wb.wbd_id = wscm.wbd_id
join hydro_object ho1 on ho1.hdo_id = wb.wbd_id
join related_hydro_object rho on ho1.hdo_id = rho.from_hdo
join hydro_object ho2 on rho.to_hdo = ho2.hdo_id
where ho1.wkrv_id = old_wkrv_id and ho2.wkrv_id = new_wkrv_id and rho.rrt_id = 1;

INSERT INTO public.swb_pressure_impact(swbp_id, impact_id)
SELECT sp.swbp_id, spi.impact_id FROM public.swb_pressure_impact spi
JOIN swb_pressure sp on sp.from_swbp_id = spi.swbp_id; 

INSERT INTO public.gwb_pressure_impact(gwbp_id, impact_id)
SELECT gp.gwbp_id, gpi.impact_id FROM public.gwb_pressure_impact gpi
JOIN gwb_pressure gp on gp.from_gwbp_id = gpi.gwbp_id; 

select true;$$;


--
-- Name: sp_delete_monitoring_object(integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION sp_delete_monitoring_object(monitoring_object_id integer) RETURNS integer
    LANGUAGE plpgsql
    AS $$

BEGIN

delete from observation where mno_id = monitoring_object_id;
delete from monitoring_use where gms_id = monitoring_object_id;
delete from monitoring_station where mts_id = monitoring_object_id;
delete from network_facility where emf_id = monitoring_object_id;
delete from environmental_monitoring_facility where emf_id =monitoring_object_id;
delete from monitoring_feature where mnf_id =monitoring_object_id;
delete from monitored_compartiment where mno_id =monitoring_object_id;
delete from related_monitoring_object where from_mno = monitoring_object_id;
delete from related_monitoring_object where to_mno = monitoring_object_id;
delete from monitoring_object where mno_id = monitoring_object_id;


RETURN monitoring_object_id;
END;
$$;


--
-- Name: sp_delete_waterlichaam(integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION sp_delete_waterlichaam(hdoid integer) RETURNS integer
    LANGUAGE plpgsql
    AS $$
DECLARE
wb record;
wbn record;
BEGIN
	FOR wb IN select mtm_id from measure_per_man_reg_or_restr_zone where mrz_id = hdoId
	LOOP
		--RAISE NOTICE 'mtm_id: %', wb.mtm_id;
		
	   IF (select count(*) from measure_per_man_reg_or_restr_zone where mtm_id = wb.mtm_id) <= 1 THEN
		--RAISE NOTICE 'true';
		delete from measure_progress where mtm_id = wb.mtm_id;
		delete from measure_progress_completed where mtm_id = wb.mtm_id;
		delete from measure_finance where mtm_id = wb.mtm_id;
		delete from measure_per_man_reg_or_restr_zone where mtm_id = wb.mtm_id;
		delete from supp_add_measure_type where smnl_id = wb.mtm_id;
		delete from measure_per_abstraction_point where mtm_id = wb.mtm_id;
		delete from measure_per_man_protected_area where mtm_id = wb.mtm_id;
		delete from monitored_measure_eu_fund where mtm_id = wb.mtm_id;
		update monitored_measure set derived_from_measure_id = null where derived_from_measure_id = wb.mtm_id;
		delete from monitored_measure where mtm_id = wb.mtm_id;

		ELSE
		delete from measure_per_man_reg_or_restr_zone where mtm_id = wb.mtm_id;
		--RAISE NOTICE 'false';
	   END IF;
	   
	END LOOP;
	

delete from public.related_hydro_object where from_hdo = hdoId;
delete from public.related_hydro_object where to_hdo = hdoId;
delete from gw_swb_status where swb_id = hdoId;

delete from relation_gwb_swb where swb_id = hdoId;
delete from relation_gwb_swb where gwb_id = hdoId;
delete from swb_art43b_excemption where swb_id =hdoId;
delete from swb_excemption_mechanism_44 where swce_id in (select swce_id from swb_exemption where swb_id = hdoId);
delete from swb_chem_exemp_pollutant where swce_id in (select swce_id from swb_exemption where swb_id = hdoId);
delete from swb_ecol_exemp_qe where swce_id in (select swce_id from swb_exemption where swb_id = hdoId);
delete from swb_exemption where swb_id = hdoId;
delete from sw_measure43_function where smee_id in (select swee_id from swb_measures_43a where swb_id = hdoId);
delete from swb_measures_43a where swb_id = hdoId;
delete from swb_impact where swb_id = hdoId;
delete from swb_pressure where swb_id = hdoId;
delete from wb_prognosis where swb_id = hdoId;
delete from chemical_exceedance where sys_id in (select sys_id from swb_yearly_status where swb_id = hdoId);
delete from sw_chemical_substance_status where sys_id in (select sys_id from swb_yearly_status where swb_id = hdoId);
delete from sw_ecological_status where sys_id in (select sys_id from swb_yearly_status where swb_id = hdoId);
delete from sw_test_value where stcc_id in (select stcc_id from sw_testing_conclusion where sys_id in (select sys_id from swb_yearly_status where swb_id = hdoId));
delete from sw_testing_conclusion where sys_id in (select sys_id from swb_yearly_status where swb_id = hdoId);
delete from swb_yearly_status where sys_id in (select sys_id from swb_yearly_status where swb_id = hdoId);
delete from swb_yearly_status where swb_id = hdoId;
delete from surface_water_body where swb_id = hdoId;
delete from gwb_chem_exemp_pollutant where gwce_id in (select gwce_id from gwb_chemical_exemption where gwb_id = hdoId);
delete from gwb_chemical_exemption where gwb_id = hdoId;
delete from gwb_conceptual_model where gwb_id =  hdoId;
delete from gwb_impact where gwb_id = hdoId;
delete from gw_testing_conclusion where gys_id in (select gys_id from gwb_yearly_status where gwb_id = hdoId);
delete from gw_chemical_status where gys_id in (select gys_id from gwb_yearly_status where gwb_id = hdoId);
delete from gw_pollutants where gys_id in (select gys_id from gwb_yearly_status where gwb_id = hdoId);
delete from gw_quantity_status where gys_id in (select gys_id from gwb_yearly_status where gwb_id = hdoId);
delete from gw_testing_conclusion where gys_id in (select gys_id from gwb_yearly_status where gwb_id = hdoId);
delete from gwb_reason4chemical_failure where gys_id in (select gys_id from gwb_yearly_status where gwb_id = hdoId);
delete from gwb_reason4quantity_failure where gys_id in (select gys_id from gwb_yearly_status where gwb_id = hdoId);
delete from gw_n2000_status where gwsy in (select gys_id from gwb_yearly_status where gwb_id = hdoId);
delete from gw_abstraction_point_status where asp_id in (select asp_id from abstraction_point where wbd_id = hdoId);
delete from gw_abstraction_point_status where gwsy_id in (select gys_id from gwb_yearly_status where gwb_id = hdoId);
delete from gw_abstraction_point where gasp_id in (select asp_id from abstraction_point where wbd_id = hdoId);
delete from gw_swb_status where gwsy in (select gys_id from gwb_yearly_status where gwb_id = hdoId);
delete from pollutant_trend where gwys_id in (select gys_id from gwb_yearly_status where gwb_id = hdoId);
delete from gwb_yearly_status where gwb_id = hdoId;
delete from gwb_pressure where gwb_id = hdoId;
delete from measure_per_abstraction_point where asp_id in (select asp_id from abstraction_point where wbd_id = hdoId);
delete from sw_abstraction_point where sasp_id in (select asp_id from abstraction_point where wbd_id = hdoId);
delete from abstraction_point where wbd_id = hdoId;
delete from relation_ore_wbd where wbd_id = hdoId;
delete from waterbody_protected_area_intersection where wbd_id = hdoId;
delete from natural_background_levels where gwb_id = hdoId;
delete from ground_water_body where gwb_id = hdoId;
delete from water_body where wbd_id = hdoId;
delete from management_regulation_or_restriction_zone where mrz_id = hdoId;
delete from monitoring_use where gms_id in (select mts_id from monitoring_station where mts_id in (select emf_id from environmental_monitoring_facility where ligt_in_mrz_id = hdoId));
delete from monitoring_station where mts_id in (select emf_id from environmental_monitoring_facility where ligt_in_mrz_id = hdoId);
delete from wfd_protected_area where wpa_id = hdoId;
delete from environmental_monitoring_facility where ligt_in_mrz_id = hdoId;
delete from volumestroom_type_bronnen where volumestroom_type_bronnen.bronnen_id in (select bronnen.bronnen_id from bronnen where bronnen.hdo_id = hdoId);
delete from bronnen where bronnen.hdo_id = hdoId;
delete from competent_authority_roles where competent_authority_roles.hdo_id = hdoId;
delete from hdo_identfiers where hdo_identfiers.hdo_id = hdoId;
delete from gw_testing_conclusion where gtcc_id in (select gtcc_id from gw_test_value where nrmv_id in (select nrmv_id from norm_value where nrm_id in (select nrm_id from norm_feature where norm_feature.hdo_id = hdoId)));
delete from gw_test_value where nrmv_id in (select nrmv_id from norm_value where nrm_id in (select nrm_id from norm_feature where hdo_id = hdoId));
delete from sw_testing_conclusion where stcc_id in (select stcc_id from sw_test_value where nrmv_id in (select nrmv_id from norm_value where nrm_id in (select nrm_id from norm_feature where norm_feature.hdo_id = hdoId)));
delete from sw_test_value where nrmv_id in (select nrmv_id from norm_value where nrm_id in (select nrm_id from norm_feature where norm_feature.hdo_id = hdoId));

alter table norm add column isdelete bool default false;
alter table norm_feature add column isdelete bool default false;

	FOR wbn IN select nrm_id from norm_feature where norm_feature.hdo_id = hdoId
	LOOP
		--RAISE NOTICE 'wbn.nrm_id: %', wbn.nrm_id;
		IF (select count(*) from norm_feature where norm_feature.nrm_id = wbn.nrm_id) <= 1 THEN
			--RAISE NOTICE 'true';
			delete from norm_value where nrm_id = wbn.nrm_id;
			update norm_feature set isdelete = true where norm_feature.nrm_id = wbn.nrm_id;
			update norm set isdelete = true where norm.nrm_id = wbn.nrm_id;
		END IF;
	END LOOP;

delete from norm_feature where norm_feature.hdo_id = hdoId;
delete from norm_feature where isdelete = true;
delete from norm where isdelete = true;
alter table norm_feature drop column isdelete;
alter table norm drop column isdelete;


delete from observed_feature where observed_feature.hdo_id = hdoId;
delete from planned_feature_monitoring where planned_feature_monitoring.hdo_id = hdoId;
delete from sampled_feature where sampled_feature.hdo_id = hdoId;
delete from hdo_names where hdo_names.hdo_id = hdoId;
delete from watercourse where wtc_id = hdoId;

delete from hydro_object where hdo_id = hdoId;

RETURN hdoId;
END;
$$;


--
-- Name: sp_get_chemischestoffen(integer, integer, integer[], integer[], integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION sp_get_chemischestoffen(jaar integer, wbd integer, wbds integer[], jaren integer[], ssg integer) RETURNS TABLE(opt_id integer, css_id integer, cls_id integer, classificatie text, numeric_value double precision, eumg_id integer, eumgcode text, wbpm_id integer, wbpmcode text, code text, chemstoftype text, year_of_status integer, progyear integer, progcls integer, progclsdesc text, scm_id integer)
    LANGUAGE sql
    AS $$

	select opt.opt_id, scss.css_id, cst.cls_id, cst.description as classificatie, obs.numeric_value,scss.eumg_id,  
	eumg.code as eumgcode ,wbpm.wbpm_id, wbpm.code as wbpmcode, css.code,css.naam as chemstoftype, sys.year_of_status, 
	wp.year as progyear, wp.cls_id as progcls, cstwp.description as progclsdesc, wscm.scm_id from 
	(SELECT substance_group_element.chs_id,      substance_group_element.ssge_id, cst.naam     
	FROM substance_group_element join chemische_stof_type cst on cst.chs_id = substance_group_element.chs_id   
	WHERE substance_group_element.ssge_id = ssg) as sub 
	join chemische_stof_type css on css.chs_id = sub.chs_id 
	join substance_group_element sge on sge.chs_id = sub.chs_id 
	join substance_group sg on sge.ssge_id = sg.ssg_id and sg.group_type = 'I' 
	join observed_property_type opt on sge.ssge_id = opt.substance_group_id 
	left join sw_chemical_substance_status scss on scss.opt_id = opt.opt_id 
	left join swb_yearly_status sys on sys.sys_id = scss.sys_id 
	left join sw_testing_conclusion stc on stc.sys_id = sys.sys_id 
	left join observation obs on obs.obs_id = stc.stcc_id and obs.observed_property_type = scss.opt_id 
	left join eu_monitoring_goal_type eumg on eumg.eumg_id = scss.eumg_id 
	left join classification_type cst on cst.cls_id = scss.swcs_id 
	left join waarde_bepalings_methode_type wbpm on wbpm.wbpm_id = scss.wbpm_id 
	left join wb_prognosis wp on wp.opt_id = opt.opt_id and wp.swb_id = wbd
	left join classification_type cstwp on cstwp.cls_id = wp.cls_id 
	left join wb_status_change_motivation wscm on wscm.wbd_id = wbd and wscm.opt_id = opt.opt_id and wscm.year_status = jaar
	where sys.swb_id = ANY(wbds) and sys.year_of_status = ANY(jaren) 
	group by opt.opt_id, scss.css_id, cst.cls_id, cst.description , obs.numeric_value,scss.eumg_id,  eumg.code  ,wbpm.wbpm_id, wbpm.code , css.code,css.naam , sys.year_of_status, wp.year , wp.cls_id , cstwp.description, scss.clt_id, wscm.scm_id

$$;


--
-- Name: sp_get_krm_langjarig_rapport(integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION sp_get_krm_langjarig_rapport(maxyear integer) RETURNS TABLE(pot_id integer, end_date double precision, qem_id integer, deviation_program_jn boolean, osc_id integer, idd_id integer, name character varying, mno_id integer, observationsucceed boolean, samplesucceed boolean)
    LANGUAGE plpgsql COST 1
    AS $$
BEGIN
	return query
with monitoringobject as (
	select moqe.qem_id, mo.mno_id, mo.name from monitoring_object mo
	join monitoring_object_quality_element moqe on mo.mno_id = moqe.mno_id
	where monitoring_object_type = 'DataSource'
	)
select pot.pot_id, 
    EXTRACT(YEAR from pot.end_date) as end_date, 
    qe.qem_id, 
    qe.deviation_program_jn, 
    oc.osc_id, 
    id.idd_id,
    id.name, 
    mo.mno_id, 
    oco_grp.is_approved as observationsucceed, 
    ocs_grp.is_approved as samplesucceed
    from domains.indicator_descriptor id
	left join monprog.quality_element_indicator_descriptor qeid on id.idd_id = qeid.idd_id
	left join quality_element qe on qeid.qem_id = qe.qem_id
	left join monprog.planned_observation_time pot on pot.qem_id = qe.qem_id
	left join observing_capability oc on oc.osc_id = qe.osc_id
	left join 
         (select oco.osc_id, oco.is_approved 
         from observing_capability_observation oco
         group by oco.osc_id, oco.is_approved
         ) as oco_grp
         on oco_grp.osc_id = oc.osc_id
	left join 
         (select ocs.osc_id, ocs.is_approved 
         from observing_capability_sample ocs
         group by ocs.osc_id, ocs.is_approved
         ) as ocs_grp
         on ocs_grp.osc_id = oc.osc_id
	left join monitoringobject mo on mo.qem_id = qe.qem_id
where id.part_of_idd_id is not null 
and (id.end_lifespan_version is null 
    or id.end_lifespan_version is not null 
    and id.end_lifespan_version > localtimestamp
    ) 
and EXTRACT(YEAR from pot.end_date) <= maxYear
group by pot.pot_id, 
pot.end_date, 
qe.qem_id, 
qe.deviation_program_jn, 
oc.osc_id, 
id.idd_id,
oco_grp.is_approved,
ocs_grp.is_approved, 
mo.mno_id
order by id.idd_id, oc.osc_id, qe.qem_id;

END
$$;


--
-- Name: sp_get_krm_toeleverancier_rapport(integer, integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION sp_get_krm_toeleverancier_rapport(oreid integer, year integer) RETURNS TABLE(pot_id integer, noof_samples integer, end_date double precision, qem_id integer, opt_id integer, meetlocatie integer, deviation_program_jn boolean, reason_deviation_program text, osc_id integer, is_sample boolean, idd_id integer, name character varying, datasource integer, observationsucceed boolean, samplesucceed boolean, ore_id integer, amountobservations bigint, amountsamples bigint)
    LANGUAGE plpgsql COST 1
    AS $$
BEGIN
	return query
	with monitoringobject as (
		select moqe.qem_id, mo.mno_id, mo.name from monitoring_object mo
		join monitoring_object_quality_element moqe on mo.mno_id = moqe.mno_id
		where monitoring_object_type = 'DataSource'
		)
	select pot.pot_id, pot.noof_samples, EXTRACT(YEAR from pot.end_date) as end_date, qe.qem_id, qe.opt_id, moqe.mno_id as meetlocatie, qe.deviation_program_jn, qe.reason_deviation_program, oc.osc_id, oc.is_sample, id.idd_id,id.name, 
		mo.mno_id as datasource, 
        oco_grp.is_approved as observationsucceed, 
        ocs_grp.is_approved as samplesucceed, 
        ocrp.ore_id, 
		(select count(1) from quality_element_observation qeo where qeo.qem_id = qe.qem_id) as amountobservations, (select count(1) from quality_element_sample qes where qes.qem_id = qe.qem_id) as amountsamples
	from domains.indicator_descriptor id
	left join monprog.quality_element_indicator_descriptor qeid on id.idd_id = qeid.idd_id
	left join quality_element qe on qeid.qem_id = qe.qem_id
	left join monitoring_object_quality_element moqe on qe.qem_id = moqe.qem_id
	left join monprog.planned_observation_time pot on pot.qem_id = qe.qem_id
	left join observing_capability oc on oc.osc_id = qe.osc_id
	left join observing_capability_responsible_party ocrp on ocrp.osc_id = oc.osc_id 
--	left join observing_capability_observation oco on oco.osc_id = oc.osc_id
--	left join observing_capability_sample ocs on ocs.osc_id = oc.osc_id
	left join 
         (select oco.osc_id, oco.is_approved 
         from observing_capability_observation oco
         group by oco.osc_id, oco.is_approved
         ) as oco_grp
         on oco_grp.osc_id = oc.osc_id
	left join 
         (select ocs.osc_id, ocs.is_approved 
         from observing_capability_sample ocs
         group by ocs.osc_id, ocs.is_approved
         ) as ocs_grp
         on ocs_grp.osc_id = oc.osc_id	left join monitoringobject mo on mo.qem_id = qe.qem_id
	where id.part_of_idd_id is not null 
    and   (id.end_lifespan_version is null 
          or id.end_lifespan_version is not null 
          and id.end_lifespan_version > localtimestamp
          ) 
    and ocrp.ore_id = oreid 
    and EXTRACT(YEAR from pot.end_date) = year
	group by pot.pot_id, 
    pot.noof_samples, 
    pot.end_date, 
    qe.qem_id, 
    qe.opt_id, 
    moqe.mno_id, 
    qe.deviation_program_jn, 
    oc.osc_id,
    oc.is_sample, 
    id.idd_id, 
    oco_grp.is_approved, 
    ocs_grp.is_approved,  
    mo.mno_id, 
    ocrp.ore_id
	order by id.idd_id, oc.osc_id, qe.qem_id;
END
$$;


--
-- Name: sp_get_thema_overzicht_belastingen(integer, integer[], integer[]); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION sp_get_thema_overzicht_belastingen(jaar integer, rbdids integer[], oreids integer[]) RETURNS TABLE(themaid integer, soort text, regel text)
    LANGUAGE sql
    AS $_$
SELECT themaid "ThemaId", soort "Soort", regel "Regel" FROM
(
	SELECT
	2 themaid, 'informatief'::text soort,  
	format(E'%1$s bevat %2$s significante belastingen voor %3$s waterlichamen.'
	|| E'<ul><li>Van deze %2$s belastingen is %4$s keer een functie en effect opgegeven (%5$s %%)</li></ul>', 
	description, aantal_significant, aantal_waterlichamen, aantal_opgegeven, percentage)::text regel,
	description volgorde,
	0 volgorde1
	FROM 
	(
	       SELECT 
	       rpp.description,
	       COUNT(DISTINCT p.wbp_id) aantal_significant,
	       COUNT(DISTINCT ho.hdo_id) aantal_waterlichamen,
	       COUNT( opgegeven.aantal_opgegeven) aantal_opgegeven,
	       ROUND(COUNT( opgegeven.aantal_opgegeven) * 1.0 / COUNT(DISTINCT p.wbp_id) * 100, 1) percentage
	       FROM (
			SELECT swbp_id wbp_id, swb_id wbd_id, is_significant FROM swb_pressure
			UNION
			SELECT gwbp_id wbp_id, gwb_id wbd_id, is_significant FROM gwb_pressure
	       ) p
	       JOIN (
		       SELECT swbp_id wbp_id, 
		       CASE WHEN char_length("function") > 0  AND char_length(effect) > 0 THEN swb_id ELSE null END aantal_opgegeven
		       FROM swb_pressure
		       UNION
		       SELECT gwbp_id wbp_id, 
		       CASE WHEN char_length("function") > 0  AND char_length(effect) > 0 THEN gwb_id ELSE null END aantal_opgegeven
		       FROM gwb_pressure
	       ) opgegeven ON opgegeven.wbp_id = p.wbp_id
	       JOIN hydro_object ho ON ho.hdo_id = p.wbd_id
	       JOIN report_version rv ON rv.wkrv_id = ho.wkrv_id
	       JOIN reporting_period rpp ON rpp.rpp_id = rv.rpp_id AND (rv.begin_lifespan_version <= now() AND (rv.end_lifespan_version IS NULL OR (rv.end_lifespan_version IS NOT NULL AND rv.end_lifespan_version > now())))
	       JOIN namespace_type wb_nst ON wb_nst.ns_id = ho.inspire_id_namespace
	       JOIN competentauthority_namespacetype ON competentauthority_namespacetype.ns_id = wb_nst.ns_id
	       JOIN competent_authority ON competent_authority.ore_id = competentauthority_namespacetype.ore_id
	       --JOIN oreids ON oreids.ore_id = competent_authority.ore_id AND oreids.aggregratiesoort = $2
	       JOIN water_body ON water_body.wbd_id = ho.hdo_id
	       --JOIN rbdids ON rbdids.rbd_id = water_body.rbd_id AND rbdids.aggregratiesoort = $2		
	       WHERE p.is_significant and competent_authority.ore_id = ANY(oreids) and water_body.rbd_id = ANY (rbdids) AND rpp.leg_ref_id = 1
	       GROUP BY rpp.description
	) x
	UNION
	-- belastingen
	SELECT
	2 themaid, 'informatief'::text soort,  
	format('%1$s bevat %2$s waterlichamen zonder significante belastingen', 
	description, aantal_waterlichamen)::text regel,
	description volgorde,
	1 volgorde1
	FROM 
	(
	       SELECT 
	       rpp.description,
	       COUNT(DISTINCT ho.hdo_id) aantal_waterlichamen
	       FROM (
			SELECT swb_id wbd_id, 
			COUNT(DISTINCT CASE WHEN is_significant THEN swb_id ELSE NULL END) aantal_significant, 
			COUNT(DISTINCT CASE WHEN NOT(is_significant) THEN swb_id ELSE NULL END) aantal_niet_significant
			FROM swb_pressure
			GROUP BY swb_id
			UNION
			SELECT gwb_id wbd_id, 
			COUNT(DISTINCT CASE WHEN is_significant THEN gwb_id ELSE NULL END) aantal_significant, 
			COUNT(DISTINCT CASE WHEN NOT(is_significant) THEN gwb_id ELSE NULL END) aantal_niet_significant
			FROM gwb_pressure
			GROUP BY gwb_id
	       ) p
	       JOIN hydro_object ho ON ho.hdo_id = p.wbd_id
	       JOIN report_version rv ON rv.wkrv_id = ho.wkrv_id
	       JOIN reporting_period rpp ON rpp.rpp_id = rv.rpp_id AND (rv.begin_lifespan_version <= now() AND (rv.end_lifespan_version IS NULL OR (rv.end_lifespan_version IS NOT NULL AND rv.end_lifespan_version > now())))
	       JOIN namespace_type wb_nst ON wb_nst.ns_id = ho.inspire_id_namespace
	       JOIN competentauthority_namespacetype ON competentauthority_namespacetype.ns_id = wb_nst.ns_id
	       JOIN competent_authority ON competent_authority.ore_id = competentauthority_namespacetype.ore_id
	       JOIN water_body ON water_body.wbd_id = ho.hdo_id
	       WHERE p.aantal_niet_significant = 1 and competent_authority.ore_id = ANY(oreids) and water_body.rbd_id = ANY (rbdids) AND rpp.leg_ref_id = 1
	       GROUP BY rpp.description
	) x
	UNION
	-- belastingen
	SELECT
	2 themaid, 'informatief'::text soort,  
	format('%1$s bevat %2$s belastingen die aangemerkt zijn als belangrijk en %3$s belastingen die zijn aangemerkt als zeer belangrijk', 
	description, aantal_belangrijk, aantal_zeer_belangrijk)::text regel,
	description volgorde,
	2 volgorde1
	FROM 
	(
	       SELECT 
	       rpp.description,
	       COUNT(DISTINCT p.gwbp_id) aantal_belastingen,
	       SUM(belangrijk) aantal_belangrijk,
	       SUM(zeer_belangrijk) aantal_zeer_belangrijk
	       FROM gwb_pressure p
	       JOIN (
		       SELECT gwbp_id,
		       CASE WHEN omschrijving = 'Niet belangrijk' THEN 1 ELSE 0 END niet_belangrijk,
		       CASE WHEN omschrijving = 'Belangrijk' THEN 1 ELSE 0 END belangrijk,
		       CASE WHEN omschrijving = 'Zeer belangrijk' THEN 1 ELSE 0 END zeer_belangrijk
		       FROM gwb_pressure
		       JOIN pressure_relevance_type ON pressure_relevance_type.prr_id = gwb_pressure.prr_id
	       ) aantal ON aantal.gwbp_id = p.gwbp_id
	       JOIN hydro_object ho ON ho.hdo_id = p.gwb_id
	       JOIN report_version rv ON rv.wkrv_id = ho.wkrv_id
	       JOIN reporting_period rpp ON rpp.rpp_id = rv.rpp_id AND (rv.begin_lifespan_version <= now() AND (rv.end_lifespan_version IS NULL OR (rv.end_lifespan_version IS NOT NULL AND rv.end_lifespan_version > now())))
	       JOIN namespace_type wb_nst ON wb_nst.ns_id = ho.inspire_id_namespace
	       JOIN competentauthority_namespacetype ON competentauthority_namespacetype.ns_id = wb_nst.ns_id
	       JOIN competent_authority ON competent_authority.ore_id = competentauthority_namespacetype.ore_id
	       JOIN water_body ON water_body.wbd_id = ho.hdo_id
	       WHERE competent_authority.ore_id = ANY(oreids) and water_body.rbd_id = ANY (rbdids) AND rpp.leg_ref_id = 1
	       GROUP BY rpp.description
	) x
) z
ORDER BY jaar, themaid, volgorde, volgorde1, regel;
$_$;


--
-- Name: sp_get_thema_overzicht_maatregelen(integer, integer[], integer[]); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION sp_get_thema_overzicht_maatregelen(jaar integer, rbdids integer[], oreids integer[]) RETURNS TABLE(themaid integer, soort text, regel text)
    LANGUAGE sql
    AS $_$
SELECT themaid "ThemaId", soort "Soort", regel "Regel" FROM
(
	-- maatregelen
	SELECT 
	3 themaid, 'informatief'::text soort,  
	format('%1$s bevat %2$s SGBP-maatregelen met uitvoering in %3$s voor %4$s waterlichamen', 
	description, aantal_maatregelen, substring(uitvoeren_in, char_length(uitvoeren_in)-8), aantal_waterlichamen)::text regel,
	description||uitvoeren_in volgorde,
	0 volgorde1
	FROM 
	(
	       SELECT 
	       rpp.description,
	       rpp1.description uitvoeren_in,
	       COUNT(DISTINCT mm.mtm_id) aantal_maatregelen,
	       COUNT(DISTINCT ho.hdo_id) aantal_waterlichamen
	       FROM monitored_measure mm
	       JOIN report_version rv1 ON rv1.rpv_id = mm.rpv_id
	       JOIN reporting_period rpp1 ON rpp1.rpp_id = rv1.rpp_id
	       JOIN supp_add_measure_type samt ON samt.smnl_id = mm.mtm_id
	       JOIN river_basin_management_plan rbmp ON rbmp.rbmp_id = samt.rbmp_id
	       JOIN report_version rv ON rv.wkrv_id = rbmp.wkrv_id
	       JOIN reporting_period rpp ON rpp.rpp_id = rv.rpp_id AND (rv.begin_lifespan_version <= now() AND (rv.end_lifespan_version IS NULL OR (rv.end_lifespan_version IS NOT NULL AND rv.end_lifespan_version > now())))
	       JOIN namespace_type wb_nst ON wb_nst.ns_id = samt.namespace_id
	       JOIN competentauthority_namespacetype ON competentauthority_namespacetype.ns_id = wb_nst.ns_id
	       JOIN competent_authority ON competent_authority.ore_id = competentauthority_namespacetype.ore_id
	       JOIN measure_per_man_reg_or_restr_zone mz ON mz.mtm_id = mm.mtm_id
	       JOIN hydro_object ho ON ho.hdo_id = mz.mrz_id
	       JOIN water_body ON water_body.wbd_id = ho.hdo_id
	       WHERE samt.is_additional_measure AND rpp1.rpp_id >= 2 AND ho.hydro_object_type IN ('SurfaceWaterBody', 'GroundWaterBody') AND 
			((rpp.rpp_id = 2 AND rpp1.rpp_id = 2) OR (rpp.rpp_id > 2 AND rpp1.rpp_id > 2))
	and competent_authority.ore_id = ANY(oreids) and water_body.rbd_id = ANY(rbdids) AND rpp.leg_ref_id = 1
	       GROUP BY rpp.description, rpp1.rpp_id, rpp1.description
	       

	) x
) z
ORDER BY jaar, themaid, volgorde, volgorde1, regel;
$_$;


--
-- Name: sp_get_thema_overzicht_motiveringstatus(integer, integer[], integer[]); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION sp_get_thema_overzicht_motiveringstatus(jaar integer, rbdids integer[], oreids integer[]) RETURNS TABLE(themaid integer, soort text, regel text)
    LANGUAGE sql
    AS $_$
SELECT themaid "ThemaId", soort "Soort", regel "Regel" FROM
(
	-- motivering status
	SELECT
	5 themaid, 'informatief'::text soort, 
	format(E'%1$s bevat %2$s waterlichamen, waarvan %3$s met een status sterk veranderd.<ul>'
	 || E'<li>Voor %4$s van deze %3$s waterlichamen zijn geschade gebruiksfuncties opgegeven (%5$s%%)</li>'
	 || E'<li>Voor %6$s van deze %3$s waterlichamen zijn redenen opgegeven voor het verwerpen van beschouwde alternatieven (%7$s%%)</li>'
	 || E'<li>Voor %8$s van deze %3$s waterlichamen is een motivering ingevuld voor het verwerpen van beschouwde alternatieven (%9$s%%)</li></ul>', 
	description, aantal_waterlichamen, aantal_waterlichamen_sterk_veranderd, aantal_geschade_gebruiks_functies, percentage_geschade_gebruiks_functies,
	aantal_reden_opgegeven, percentage_reden_opgegeven, aantal_een_motivering_ingevuld, percentage_aantal_een_motivering_ingevuld)::text regel,	
	description volgorde,
	0 volgorde1
	FROM 
	(
		SELECT
		rpp.description,
		COUNT(DISTINCT ho.hdo_id) aantal_waterlichamen,
		COUNT(DISTINCT swb.swb_id)  aantal_waterlichamen_sterk_veranderd,
		COUNT(DISTINCT sm43.swb_id) aantal_geschade_gebruiks_functies,
		CASE WHEN COUNT(DISTINCT swb.swb_id) = 0 THEN 100.0 ELSE ROUND((COUNT(DISTINCT sm43.swb_id) * 1.0 / COUNT(DISTINCT swb.swb_id)) * 100, 1) END  percentage_geschade_gebruiks_functies,
		COUNT(DISTINCT sart43.swb_id) aantal_reden_opgegeven,
		CASE WHEN COUNT(DISTINCT swb.swb_id) = 0 THEN 100.0 ELSE ROUND((COUNT(DISTINCT sart43.swb_id) * 1.0 / COUNT(DISTINCT swb.swb_id)) * 100, 1) END  percentage_reden_opgegeven,
		COUNT(DISTINCT (CASE WHEN char_length(swb.article_43b_motivation) >= 1 THEN swb.swb_id ELSE NULL END)) aantal_een_motivering_ingevuld,
		CASE WHEN COUNT(DISTINCT swb.swb_id) = 0 THEN 100.0 ELSE ROUND(((COUNT(DISTINCT (CASE WHEN char_length(swb.article_43b_motivation) >= 1 THEN swb.swb_id ELSE NULL END))) * 1.0 / COUNT(DISTINCT swb.swb_id)) * 100, 1) END  percentage_aantal_een_motivering_ingevuld
		FROM hydro_object ho
		LEFT JOIN surface_water_body swb ON swb.swb_id = ho.hdo_id AND swb.is_heaviliy_modified
		LEFT JOIN swb_measures_43a sm43 ON sm43.swb_id = swb.swb_id
		LEFT JOIN swb_art43b_excemption sart43 ON sart43.swb_id = swb.swb_id
		JOIN report_version rv ON rv.wkrv_id = ho.wkrv_id
		JOIN reporting_period rpp ON rpp.rpp_id = rv.rpp_id AND (rv.begin_lifespan_version <= now() AND (rv.end_lifespan_version IS NULL OR (rv.end_lifespan_version IS NOT NULL AND rv.end_lifespan_version > now())))
		JOIN namespace_type wb_nst ON wb_nst.ns_id = ho.inspire_id_namespace
		JOIN competentauthority_namespacetype ON competentauthority_namespacetype.ns_id = wb_nst.ns_id
		JOIN competent_authority ON competent_authority.ore_id = competentauthority_namespacetype.ore_id
		JOIN water_body ON water_body.wbd_id = ho.hdo_id
		WHERE ho.hydro_object_type = 'SurfaceWaterBody' and water_body.rbd_id = ANY(rbdids) and competent_authority.ore_id = ANY(oreids) AND rpp.leg_ref_id = 1
		GROUP BY rpp.description		
	) x
) z
ORDER BY jaar, themaid, volgorde, volgorde1, regel;
$_$;


--
-- Name: sp_get_thema_overzicht_toestand(integer, integer[], integer[]); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION sp_get_thema_overzicht_toestand(jaar integer, rbdids integer[], oreids integer[]) RETURNS TABLE(themaid integer, soort text, regel text)
    LANGUAGE sql
    AS $_$
SELECT themaid "ThemaId", soort "Soort", regel "Regel" FROM
(
	-- toestand
	SELECT
	4 themaid, 'informatief'::text soort, 
	format('Op %1$s is de meest recente set toestandsoordelen vastgesteld in de Aquo-kit en ingelezen in het WKP.', 
		to_char(ingelezen_op, 'DD-MM-YYYY'))::text regel,
	'' volgorde,
	0 volgorde1
	FROM 
	(
		SELECT ingelezen_op
		FROM 
		(
			SELECT
			ys.last_change_time::date ingelezen_op
			FROM gwb_yearly_status ys
			JOIN hydro_object ho ON ho.hdo_id = ys.gwb_id
			JOIN namespace_type wb_nst ON wb_nst.ns_id = ho.inspire_id_namespace
			JOIN competentauthority_namespacetype ON competentauthority_namespacetype.ns_id = wb_nst.ns_id
			JOIN competent_authority ON competent_authority.ore_id = competentauthority_namespacetype.ore_id
			JOIN water_body ON water_body.wbd_id = ho.hdo_id
			WHERE ys.year_of_status = jaar and water_body.rbd_id = ANY(rbdids) and competent_authority.ore_id = ANY(oreids)
			UNION
			SELECT
			ys.last_change_time::date ingelezen_op
			FROM sw_testing_conclusion stc
			JOIN swb_yearly_status ys ON ys.sys_id = stc.sys_id
			JOIN hydro_object ho ON ho.hdo_id = ys.swb_id
			JOIN namespace_type wb_nst ON wb_nst.ns_id = ho.inspire_id_namespace
			JOIN competentauthority_namespacetype ON competentauthority_namespacetype.ns_id = wb_nst.ns_id
			JOIN competent_authority ON competent_authority.ore_id = competentauthority_namespacetype.ore_id
			JOIN water_body ON water_body.wbd_id = ho.hdo_id
			WHERE ys.year_of_status = jaar and water_body.rbd_id = ANY(rbdids) and competent_authority.ore_id = ANY(oreids) 
		) s
		ORDER BY ingelezen_op DESC LIMIT 1
	) x
	WHERE 1 = 1
	UNION
	-- toestand
	SELECT
	4 themaid, 'informatief'::text soort, 
	format('Van de %1$s waterlichamen in %2$s is er %3$s keer sprake van wateronttrekking voor menselijke consumptie. Van deze %3$s is<ul>'
	|| E'<li>%4$s keer opgegeven dat er sprake is van een normoverschrijding</li>'
	|| E'<li>%5$s keer opgegeven dat er sprake is van een aanvullende zuiveringsinspanning</li></ul>', 
	aantal_waterlichamen, description, aantal_water_ontrekkingen, aantal_normoverschrijdingen, aantal_aanvullende_zuiverings_inspanningen)::text regel,
	'' volgorde,
	1 volgorde1
	FROM 
	(
		SELECT
		rpp.description,
		COUNT(DISTINCT ho.hdo_id) aantal_waterlichamen,
		COUNT(DISTINCT wb.wbd_id) aantal_water_ontrekkingen,
		SUM(ys.exceeds_drinkingwater::int) aantal_normoverschrijdingen,
		SUM(ys.additional_purification::int) aantal_aanvullende_zuiverings_inspanningen
		FROM hydro_object ho
		LEFT JOIN water_body wb ON wb.wbd_id = ho.hdo_id AND wb.is_article_7
		LEFT JOIN swb_yearly_status ys ON ys.swb_id = ho.hdo_id
		JOIN report_version rv ON rv.wkrv_id = ho.wkrv_id
		JOIN reporting_period rpp ON rpp.rpp_id = rv.rpp_id AND (rv.begin_lifespan_version <= now() AND (rv.end_lifespan_version IS NULL OR (rv.end_lifespan_version IS NOT NULL AND rv.end_lifespan_version > now())))
		JOIN namespace_type wb_nst ON wb_nst.ns_id = ho.inspire_id_namespace
		JOIN competentauthority_namespacetype ON competentauthority_namespacetype.ns_id = wb_nst.ns_id
		JOIN competent_authority ON competent_authority.ore_id = competentauthority_namespacetype.ore_id
		JOIN water_body ON water_body.wbd_id = ho.hdo_id
		WHERE ho.hydro_object_type = 'SurfaceWaterBody' AND ys.year_of_status = jaar AND rpp.rpp_id = 3 /* SGBP2 */ 
		and water_body.rbd_id = ANY(rbdids) and competent_authority.ore_id = ANY(oreids) AND rpp.leg_ref_id = 1
		GROUP BY rpp.description	
		HAVING COUNT(DISTINCT ho.hdo_id) > 0
	) x
	WHERE aantal_water_ontrekkingen > 0
	UNION
	-- toestand
 	SELECT
 	4 themaid, 'status'::text thema, 
 	format('Voor %1$s van de %2$s waterlichamen is een toestandsoordeel aanwezig voor alle relevante biologische kwaliteitselementen (%3$s%%)<img alt="%4$s" title="%4$s" src="[CONTENT_URL]/%4$s.png" />', 
 	aantal_biologische_compleet, aantal_waterlichamen, percentage_biologische_compleet, tos.name)::text regel,
 	'' volgorde,
 	2 volgorde1
 	FROM 
 	(
		SELECT 
		COUNT(DISTINCT ho.hdo_id) aantal_waterlichamen,
		COUNT(DISTINCT iscompleet.compleet) aantal_biologische_compleet,
		ROUND((COUNT(DISTINCT iscompleet.compleet) * 1.0 / COUNT(DISTINCT ho.hdo_id)) * 100, 1)  percentage_biologische_compleet
		FROM hydro_object ho 
		LEFT JOIN
		(
			SELECT 
				surface_water_body.swb_id wbd_id,
				CASE WHEN COUNT(wfd_qe_swtype.opt_id) - COUNT(sw_ecological_status.sys_id) = 0 THEN surface_water_body.swb_id ELSE NULL END compleet
			FROM wfd_qe_swtype
			JOIN sw_typology_type ON sw_typology_type.styp_id = wfd_qe_swtype.swt_id
			JOIN vw_waargenomen_eigenschap ON vw_waargenomen_eigenschap."DB_ID" = wfd_qe_swtype.opt_id
			JOIN (
				SELECT DISTINCT "Waargenomen_Eigenschap_DB_ID" opt_id
				FROM vw_krw_kwaliteitselement
				WHERE "Onderdeel_van_Typering_Code" = 'BIOLT'
			) ke ON ke.opt_id = wfd_qe_swtype.opt_id
			JOIN surface_water_body ON surface_water_body.sw_typology_id = sw_typology_type.styp_id
			LEFT JOIN swb_yearly_status ON swb_yearly_status.swb_id = surface_water_body.swb_id
				AND swb_yearly_status.year_of_status = jaar
			LEFT JOIN sw_ecological_status ON sw_ecological_status.sys_id = swb_yearly_status.sys_id 
				AND sw_ecological_status.opt_id = vw_waargenomen_eigenschap."DB_ID"
			WHERE wfd_qe_swtype.is_applicable
			GROUP BY surface_water_body.swb_id
		) iscompleet ON iscompleet.wbd_id = ho.hdo_id
		JOIN report_version rv ON rv.wkrv_id = ho.wkrv_id
		JOIN reporting_period rpp ON rpp.rpp_id = rv.rpp_id AND (rv.begin_lifespan_version <= now() AND (rv.end_lifespan_version IS NULL OR (rv.end_lifespan_version IS NOT NULL AND rv.end_lifespan_version > now())))
		JOIN namespace_type wb_nst ON wb_nst.ns_id = ho.inspire_id_namespace
		JOIN competentauthority_namespacetype ON competentauthority_namespacetype.ns_id = wb_nst.ns_id
		JOIN competent_authority ON competent_authority.ore_id = competentauthority_namespacetype.ore_id
		JOIN water_body ON water_body.wbd_id = ho.hdo_id
		WHERE ho.hydro_object_type = 'SurfaceWaterBody' AND rpp.rpp_id = 3 /* SGBP2 */
		and water_body.rbd_id = ANY(rbdids) and competent_authority.ore_id = ANY(oreids) AND rpp.leg_ref_id = 1
		HAVING COUNT(DISTINCT ho.hdo_id) > 0
 	) x
	JOIN thema_overzicht_statussen tos ON tos.t_id = 4 AND tos.start_range <= x.percentage_biologische_compleet AND tos.end_range >= x.percentage_biologische_compleet
	UNION
	-- toestand
	SELECT
	4 themaid, 'status'::text thema, 
 	format('Voor %1$s van de %2$s waterlichamen zijn alle benodigde algemeen fysisch-chemische kwaliteitselementen aanwezig (%3$s%%)<img alt="%4$s" title="%4$s" src="[CONTENT_URL]/%4$s.png" />', 
 	aantal_biologische_compleet, aantal_waterlichamen, percentage_biologische_compleet, tos.name)::text regel,
	'' volgorde,
 	3 volgorde1
 	FROM 
 	(
		SELECT 
		COUNT(DISTINCT ho.hdo_id) aantal_waterlichamen,
		COUNT(DISTINCT iscompleet.compleet) aantal_biologische_compleet,
		ROUND((COUNT(DISTINCT iscompleet.compleet) * 1.0 / COUNT(DISTINCT ho.hdo_id)) * 100, 1)  percentage_biologische_compleet
		FROM hydro_object ho 
		LEFT JOIN
		(
			SELECT 
				surface_water_body.swb_id wbd_id,
				CASE WHEN COUNT(DISTINCT wfd_qe_swtype.opt_id) - COUNT(DISTINCT observation.observed_property_type) = 0 THEN surface_water_body.swb_id ELSE NULL END compleet
			FROM wfd_qe_swtype
			JOIN sw_typology_type ON sw_typology_type.styp_id = wfd_qe_swtype.swt_id
			JOIN (
				SELECT DISTINCT "Waargenomen_Eigenschap_DB_ID" opt_id
				FROM vw_krw_kwaliteitselement
				WHERE "Onderdeel_van_Typering_Code" IN ('FYSCHEM', 'NUTRIENT') AND "Tpering_Code" IS NULL
			) ke ON ke.opt_id = wfd_qe_swtype.opt_id
			JOIN surface_water_body ON surface_water_body.sw_typology_id = sw_typology_type.styp_id
			LEFT JOIN swb_yearly_status ON swb_yearly_status.swb_id = surface_water_body.swb_id
				AND swb_yearly_status.year_of_status = jaar
			LEFT JOIN sw_testing_conclusion ON sw_testing_conclusion.sys_id = swb_yearly_status.sys_id
			LEFT JOIN observation ON observation.obs_id = sw_testing_conclusion.stcc_id
				AND observation.observed_property_type = wfd_qe_swtype.opt_id
			WHERE wfd_qe_swtype.is_applicable 
			GROUP BY surface_water_body.swb_id
		) iscompleet ON iscompleet.wbd_id = ho.hdo_id
		JOIN report_version rv ON rv.wkrv_id = ho.wkrv_id
		JOIN reporting_period rpp ON rpp.rpp_id = rv.rpp_id AND (rv.begin_lifespan_version <= now() AND (rv.end_lifespan_version IS NULL OR (rv.end_lifespan_version IS NOT NULL AND rv.end_lifespan_version > now())))
		JOIN namespace_type wb_nst ON wb_nst.ns_id = ho.inspire_id_namespace
		JOIN competentauthority_namespacetype ON competentauthority_namespacetype.ns_id = wb_nst.ns_id
		JOIN competent_authority ON competent_authority.ore_id = competentauthority_namespacetype.ore_id
		JOIN water_body ON water_body.wbd_id = ho.hdo_id
		WHERE ho.hydro_object_type = 'SurfaceWaterBody' AND rpp.rpp_id = 3 /* SGBP2 */
		and water_body.rbd_id = ANY(rbdids) and competent_authority.ore_id = ANY(oreids) AND rpp.leg_ref_id = 1
		HAVING COUNT(DISTINCT ho.hdo_id) > 0
 	) x
	JOIN thema_overzicht_statussen tos ON tos.t_id = 4 AND tos.start_range <= x.percentage_biologische_compleet AND tos.end_range >= x.percentage_biologische_compleet
	UNION
	-- toestand
	SELECT
	4 themaid, 'status'::text thema, 
 	format('Voor %1$s van de %2$s waterlichamen zijn alle toetsen uitgevoerd (%3$s%%)<img alt="%4$s" title="%4$s" src="[CONTENT_URL]/%4$s.png" />', 
 	aantal_toetsen_compleet, aantal_waterlichamen, percentage_toetsen_compleet, tos.name)::text regel,
	'' volgorde,
 	4 volgorde1
 	FROM 
 	(
		SELECT 
		COUNT(DISTINCT ho.hdo_id) aantal_waterlichamen,
		COUNT(DISTINCT iscompleet.compleet) aantal_toetsen_compleet,
		ROUND((COUNT(DISTINCT iscompleet.compleet) * 1.0 / COUNT(DISTINCT ho.hdo_id)) * 100, 1)  percentage_toetsen_compleet
		FROM hydro_object ho 
		LEFT JOIN
		(
			SELECT 
			vw_oordeel_totaal_gwl."Waterlichaam_DB_ID" wbd_id,
			CASE WHEN (SELECT COUNT(vw_waargenomen_eigenschap."DB_ID")
			FROM wfd_qe_gwtype
			JOIN vw_waargenomen_eigenschap ON vw_waargenomen_eigenschap."DB_ID" = wfd_qe_gwtype.opt_id
				AND wfd_qe_gwtype.is_applicable AND wfd_qe_gwtype.is_excemption) - COUNT(vw_waargenomen_eigenschap."DB_ID") = 0
				THEN vw_oordeel_totaal_gwl."Waterlichaam_DB_ID"
				ELSE NULL
			END compleet

			FROM wfd_qe_gwtype
			JOIN vw_waargenomen_eigenschap ON vw_waargenomen_eigenschap."DB_ID" = wfd_qe_gwtype.opt_id
				AND wfd_qe_gwtype.is_applicable AND wfd_qe_gwtype.is_excemption	
			RIGHT OUTER JOIN vw_oordeel_totaal_gwl ON vw_oordeel_totaal_gwl."Rapportagejaar" = jaar
				AND vw_oordeel_totaal_gwl."Waargenomen_Eigenschap_DB_ID" = vw_waargenomen_eigenschap."DB_ID"
			JOIN ground_water_body ON ground_water_body.gwb_id = vw_oordeel_totaal_gwl."Waterlichaam_DB_ID"
			GROUP BY vw_oordeel_totaal_gwl."Waterlichaam_DB_ID"

		) iscompleet ON iscompleet.wbd_id = ho.hdo_id
		JOIN report_version rv ON rv.wkrv_id = ho.wkrv_id
		JOIN reporting_period rpp ON rpp.rpp_id = rv.rpp_id AND (rv.begin_lifespan_version <= now() AND (rv.end_lifespan_version IS NULL OR (rv.end_lifespan_version IS NOT NULL AND rv.end_lifespan_version > now())))
		JOIN namespace_type wb_nst ON wb_nst.ns_id = ho.inspire_id_namespace
		JOIN competentauthority_namespacetype ON competentauthority_namespacetype.ns_id = wb_nst.ns_id
		JOIN competent_authority ON competent_authority.ore_id = competentauthority_namespacetype.ore_id
		JOIN water_body ON water_body.wbd_id = ho.hdo_id
		WHERE ho.hydro_object_type = 'GroundWaterBody' AND rpp.rpp_id = 3 /* SGBP2 */
		and water_body.rbd_id = ANY(rbdids) and competent_authority.ore_id = ANY(oreids) AND rpp.leg_ref_id = 1
		HAVING COUNT(DISTINCT ho.hdo_id) > 0
 	) x
	JOIN thema_overzicht_statussen tos ON tos.t_id = 4 AND tos.start_range <= x.percentage_toetsen_compleet AND tos.end_range >= x.percentage_toetsen_compleet
	UNION
	-- toestand
 	SELECT
 	4 themaid, 'status'::text thema, 
 	format('Voor %1$s van de %2$s waterlichamen is prognose 2021 volledig ingevuld (%3$s%%)<img alt="%4$s" title="%4$s" src="[CONTENT_URL]/%4$s.png" />', 
 	aantal_prognoses_compleet, aantal_waterlichamen, percentage_prognoses_compleet, tos.name)::text regel,
	'' volgorde,
 	5 volgorde1
 	FROM 
 	(
		SELECT 
		COUNT(DISTINCT ho.hdo_id) aantal_waterlichamen,
		COUNT(DISTINCT iscompleet.compleet) aantal_prognoses_compleet,
		ROUND((COUNT(DISTINCT iscompleet.compleet) * 1.0 / (CASE WHEN(COUNT(DISTINCT ho.hdo_id)) = 0 THEN 1 ELSE (COUNT(DISTINCT ho.hdo_id))  END )) * 100, 1)  percentage_prognoses_compleet
		FROM hydro_object ho 
		LEFT JOIN
		(
			SELECT 
				surface_water_body.swb_id wbd_id,
				CASE WHEN COUNT(vw_waargenomen_eigenschap."DB_ID") - COUNT(wb_prognosis.swb_id) = 0 THEN surface_water_body.swb_id ELSE NULL END compleet
			FROM wfd_qe_swtype
			JOIN sw_typology_type ON sw_typology_type.styp_id = wfd_qe_swtype.swt_id
			JOIN vw_waargenomen_eigenschap ON vw_waargenomen_eigenschap."DB_ID" = wfd_qe_swtype.opt_id
				AND vw_waargenomen_eigenschap."DB_ID" NOT IN (4476, 4479, 4480, 4520)		
			JOIN surface_water_body ON surface_water_body.sw_typology_id = sw_typology_type.styp_id
			LEFT JOIN wb_prognosis ON wb_prognosis.swb_id = surface_water_body.swb_id 
				AND wb_prognosis.year = 2021 
				AND wb_prognosis.opt_id = vw_waargenomen_eigenschap."DB_ID"
			WHERE wfd_qe_swtype.is_applicable
			GROUP BY surface_water_body.swb_id

			UNION 

			SELECT 
			wb_prognosis.swb_id wbd_id,
			CASE WHEN (SELECT COUNT(vw_waargenomen_eigenschap."DB_ID")
			FROM wfd_qe_gwtype
			JOIN vw_waargenomen_eigenschap ON vw_waargenomen_eigenschap."DB_ID" = wfd_qe_gwtype.opt_id
				AND wfd_qe_gwtype.is_applicable AND wfd_qe_gwtype.is_excemption) - COUNT(vw_waargenomen_eigenschap."DB_ID") = 0
				THEN wb_prognosis.swb_id
				ELSE NULL
			END compleet

			FROM wfd_qe_gwtype
			JOIN vw_waargenomen_eigenschap ON vw_waargenomen_eigenschap."DB_ID" = wfd_qe_gwtype.opt_id
				AND wfd_qe_gwtype.is_applicable AND wfd_qe_gwtype.is_excemption	
			RIGHT OUTER JOIN wb_prognosis ON wb_prognosis.year = 2021 
				AND wb_prognosis.opt_id = vw_waargenomen_eigenschap."DB_ID"
			JOIN ground_water_body ON ground_water_body.gwb_id = wb_prognosis.swb_id
			GROUP BY wb_prognosis.swb_id

		) iscompleet ON iscompleet.wbd_id = ho.hdo_id
		JOIN report_version rv ON rv.wkrv_id = ho.wkrv_id
		JOIN reporting_period rpp ON rpp.rpp_id = rv.rpp_id AND (rv.begin_lifespan_version <= now() AND (rv.end_lifespan_version IS NULL OR (rv.end_lifespan_version IS NOT NULL AND rv.end_lifespan_version > now())))
		JOIN namespace_type wb_nst ON wb_nst.ns_id = ho.inspire_id_namespace
		JOIN competentauthority_namespacetype ON competentauthority_namespacetype.ns_id = wb_nst.ns_id
		JOIN competent_authority ON competent_authority.ore_id = competentauthority_namespacetype.ore_id
		JOIN water_body ON water_body.wbd_id = ho.hdo_id
		WHERE ho.hydro_object_type IN ('SurfaceWaterBody', 'GroundWaterBody') AND rpp.rpp_id = 3 /* SGBP2 */
		and water_body.rbd_id = ANY(rbdids) and competent_authority.ore_id = ANY(oreids) AND rpp.leg_ref_id = 1
		
 	) x
	JOIN thema_overzicht_statussen tos ON tos.t_id = 4 AND tos.start_range <= x.percentage_prognoses_compleet AND tos.end_range >= x.percentage_prognoses_compleet
) z
ORDER BY jaar, themaid, volgorde, volgorde1, regel;
$_$;


--
-- Name: sp_get_thema_overzicht_uitzonderingsbepalingen(integer, integer[], integer[]); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION sp_get_thema_overzicht_uitzonderingsbepalingen(jaar integer, rbdids integer[], oreids integer[]) RETURNS TABLE(themaid integer, soort text, regel text)
    LANGUAGE sql
    AS $_$
SELECT themaid "ThemaId", soort "Soort", regel "Regel" FROM
(
	-- uitzonderingsbepalingen
	SELECT
	6 themaid, 'informatief'::text soort, 
	format('Voor %1$s van de %2$s waterlichamen in %3$s zijn één of meer uitzonderingsbepalingen ingevoerd. Het betreft:<ul>'
	|| E'<li>%4$s keer artikel 4.4 (fasering)</li>'
	|| E'<li>%5$s keer artikel 4.6 (tijdelijke achteruitgang)</li>'
	|| E'<li>%6$s keer artikel 4.7 (nieuwe ontwikkelingen)</li></ul>', 
	aantal_uitzonderings_bepalingen, aantal_waterlichamen, description, aantal_artikel_44, aantal_artikel_46, aantal_artikel_47)::text regel,
	'' volgorde,
	0 volgorde1 
	FROM 
	(
		SELECT
		rpp.description,
		COUNT(DISTINCT ho.hdo_id) aantal_waterlichamen,
		COUNT(DISTINCT ub.wbd_id) aantal_uitzonderings_bepalingen,
		COUNT(DISTINCT ub.is_artikel_44) aantal_artikel_44,
		COUNT(DISTINCT ub.is_artikel_46) aantal_artikel_46,
		COUNT(DISTINCT ub.is_artikel_47) aantal_artikel_47
		FROM hydro_object ho
		LEFT JOIN
		(  
			SELECT wbd_id, MAX(is_artikel_44) is_artikel_44, MAX(is_artikel_46) is_artikel_46, MAX(is_artikel_47) is_artikel_47
			FROM
			(
				SELECT swb_id wbd_id, 
				CASE WHEN obex_id > 0 AND obex_id <= 3 THEN swb_id ELSE NULL END is_artikel_44,
				CASE WHEN obex_id > 3 AND obex_id <= 6 THEN swb_id ELSE NULL END is_artikel_46,
				CASE WHEN obex_id > 6 THEN swb_id ELSE NULL END is_artikel_47
				FROM swb_exemption
				UNION 
				SELECT gwb_id wbd_id, 
				CASE WHEN obex_id <= 3 THEN gwb_id ELSE NULL END is_artikel_44,
				CASE WHEN obex_id > 3 AND obex_id <= 6 THEN gwb_id ELSE NULL END is_artikel_46,
				CASE WHEN obex_id > 6 THEN gwb_id ELSE NULL END is_artikel_47
				FROM gwb_chemical_exemption
			) a
			JOIN hydro_object ON hydro_object.hdo_id = wbd_id
			GROUP BY wbd_id
		) ub ON ub.wbd_id = ho.hdo_id
		JOIN report_version rv ON rv.wkrv_id = ho.wkrv_id
		JOIN reporting_period rpp ON rpp.rpp_id = rv.rpp_id AND (rv.begin_lifespan_version <= now() OR (rv.end_lifespan_version > now() OR rv.end_lifespan_version = NULL::timestamp without time zone))
		JOIN namespace_type wb_nst ON wb_nst.ns_id = ho.inspire_id_namespace
		JOIN competentauthority_namespacetype ON competentauthority_namespacetype.ns_id = wb_nst.ns_id
		JOIN competent_authority ON competent_authority.ore_id = competentauthority_namespacetype.ore_id
		JOIN water_body ON water_body.wbd_id = ho.hdo_id
		WHERE ho.hydro_object_type IN ('SurfaceWaterBody', 'GroundWaterBody') AND rpp.rpp_id = 3 /* SGBP2 */
		and water_body.rbd_id = ANY(rbdids) and competent_authority.ore_id = ANY(oreids)  AND rpp.leg_ref_id = 1
		GROUP BY rpp.description		
	) x
	UNION
	-- uitzonderingsbepalingen
	SELECT
	6 themaid, 'status'::text soort, 
	format('Op basis van prognose 2021 dienen %1$s kwaliteitselementen opgenomen te worden onder artikel 4.4 (fasering). %2$s van deze %1$s kwaliteitselementen zijn opgenomen in artikel 4.4 (fasering) (%3$s%%).<img alt="%4$s" title="%4$s" src="[CONTENT_URL]/%4$s.png" />',
	aantal_kwaliteitselementen, aantal_kwaliteitselementen_onderbouwd, percentage_kwaliteitselementen_onderbouwd, tos.name)::text regel,
	'' volgorde,
	0 volgorde1
	FROM 
	(
		SELECT 
			COUNT(DISTINCT prognose) aantal_kwaliteitselementen, 
			COUNT(DISTINCT goed) aantal_kwaliteitselementen_onderbouwd,
			ROUND((COUNT(DISTINCT goed) * 1.0 / COUNT(DISTINCT prognose)) * 100, 1) percentage_kwaliteitselementen_onderbouwd
		FROM
		(

			SELECT DISTINCT wb_prognosis.swb_id, wb_prognosis.wbpr_id prognose, CASE WHEN (wb_prognosis.opt_id = u.opt_id OR wb_prognosis.opt_id = k.opt_id) THEN wb_prognosis.wbpr_id ELSE NULL END goed
			FROM wb_prognosis 
			JOIN classification_type ON classification_type.cls_id = wb_prognosis.cls_id
				AND lower(classification_type.description) IN ('matig', 'ontoereikend', 'slecht', 'voldoet niet')
			LEFT JOIN (

				SELECT swb_exemption.swb_id wbd_id, swb_ecol_exemp_qe.opt_id
				FROM swb_exemption
				JOIN swb_ecol_exemp_qe ON swb_ecol_exemp_qe.swce_id = swb_exemption.swce_id
				WHERE swb_exemption.obex_id IN(1,2,3)
				UNION
				SELECT gwb_chemical_exemption.gwb_id wbd_id, gwb_chem_exemp_pollutant.opt_id
				FROM gwb_chemical_exemption
				JOIN gwb_chem_exemp_pollutant ON gwb_chem_exemp_pollutant.gwce_id = gwb_chemical_exemption.gwce_id
				WHERE gwb_chemical_exemption.obex_id IN(1,2,3)

			) u ON u.wbd_id = wb_prognosis.swb_id
			LEFT JOIN (

				SELECT surface_water_body.swb_id wbd_id, part_of_opt_id, opt_id
				FROM surface_water_body
				JOIN wfd_qe_swtype ON wfd_qe_swtype.swt_id = surface_water_body.sw_target_typology_id
				UNION
				SELECT ground_water_body.gwb_id wbd_id, opt_id part_of_opt_id, opt_id
				FROM ground_water_body, wfd_qe_swtype

			) k ON k.wbd_id = wb_prognosis.swb_id AND k.part_of_opt_id = u.opt_id
			WHERE wb_prognosis.year = 2021
		) z
		JOIN hydro_object ho ON ho.hdo_id = z.swb_id
		JOIN report_version rv ON rv.wkrv_id = ho.wkrv_id
		JOIN reporting_period rpp ON rpp.rpp_id = rv.rpp_id AND (rv.begin_lifespan_version <= now() OR (rv.end_lifespan_version > now() OR rv.end_lifespan_version = NULL::timestamp without time zone))
		JOIN namespace_type wb_nst ON wb_nst.ns_id = ho.inspire_id_namespace
		JOIN competentauthority_namespacetype ON competentauthority_namespacetype.ns_id = wb_nst.ns_id
		JOIN competent_authority ON competent_authority.ore_id = competentauthority_namespacetype.ore_id
		JOIN water_body ON water_body.wbd_id = ho.hdo_id
		WHERE ho.hydro_object_type IN ('GroundWaterBody', 'SurfaceWaterBody') AND rpp.rpp_id = 3 /* SGBP2 */
		and water_body.rbd_id = ANY(rbdids) and competent_authority.ore_id = ANY(oreids)  AND rpp.leg_ref_id = 1
		GROUP BY rpp.description	
	) x
	JOIN thema_overzicht_statussen tos ON tos.t_id = 6 AND tos.start_range <= x.percentage_kwaliteitselementen_onderbouwd AND tos.end_range >= x.percentage_kwaliteitselementen_onderbouwd
) z
ORDER BY jaar, themaid, volgorde, volgorde1, regel;
$_$;


--
-- Name: sp_get_thema_overzicht_voortgangmaatregelen(integer, integer[], integer[]); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION sp_get_thema_overzicht_voortgangmaatregelen(jaar integer, rbdids integer[], oreids integer[]) RETURNS TABLE(themaid integer, soort text, regel text)
    LANGUAGE sql
    AS $_$
SELECT themaid "ThemaId", soort "Soort", regel "Regel" FROM
(
	-- Voortgang maatregelen
	SELECT
	3 themaid, 'status'::text soort, 
	format('Voortgang maatregelen %1$s is bijgewerkt (t/m 31-12-%2$s) voor %3$s van de %4$s maatregelen die zijn geclassificeerd met opname in SGBP en uitvoering in periode %5$s (%6$s%%)<img alt="%7$s" title="%7$s" src="[CONTENT_URL]/%7$s.png" />', 
	description, jaar, aantal_bijgewerkte_maatregelen, aantal_maatregelen, substring(uitvoeren_in, char_length(uitvoeren_in)-8), percentage, tos.name)::text regel,
	description volgorde,
	1 volgorde1
	FROM
	(
	       SELECT
	       mp.year jaar, 
	       rpp.description,
	       rpp1.description uitvoeren_in,
	       COUNT(DISTINCT mpc.mtm_id) aantal_bijgewerkte_maatregelen,
	       COUNT(DISTINCT mm.mtm_id) aantal_maatregelen,
	       ROUND((COUNT(DISTINCT mpc.mtm_id) * 1.0 / COUNT(DISTINCT mm.mtm_id)) * 100.0, 1)  percentage
	       FROM monitored_measure mm  
	       JOIN report_version rv1 ON rv1.rpv_id = mm.rpv_id
	       JOIN reporting_period rpp1 ON rpp1.rpp_id = rv1.rpp_id
	       JOIN measure_progress mp ON mp.mtm_id = mm.mtm_id 
	       LEFT JOIN measure_progress_completed mpc ON mpc.mtm_id = mp.mtm_id AND mpc.year_completed = mp.year
	       JOIN supp_add_measure_type samt ON samt.smnl_id = mm.mtm_id
	       JOIN river_basin_management_plan rbmp ON rbmp.rbmp_id = samt.rbmp_id
	       JOIN report_version rv ON rv.wkrv_id = rbmp.wkrv_id
	       JOIN reporting_period rpp ON rpp.rpp_id = rv.rpp_id AND (rv.begin_lifespan_version <= now() AND (rv.end_lifespan_version IS NULL OR (rv.end_lifespan_version IS NOT NULL AND rv.end_lifespan_version > now())))
	       JOIN namespace_type wb_nst ON wb_nst.ns_id = samt.namespace_id
	       JOIN competentauthority_namespacetype ON competentauthority_namespacetype.ns_id = wb_nst.ns_id
	       JOIN competent_authority ON competent_authority.ore_id = competentauthority_namespacetype.ore_id
	       WHERE samt.is_additional_measure AND competent_authority.ore_id = ANY(oreids) AND mp.year = jaar AND rpp.rpp_id = 2 AND rpp1.rpp_id = 2 and rbmp.rbd_id = ANY(rbdids) AND rpp.leg_ref_id = 1
	       GROUP BY mp.year, rpp.description, rpp1.description
	) x
	JOIN thema_overzicht_statussen tos ON tos.t_id = 3 AND tos.start_range <= x.percentage AND tos.end_range >= x.percentage
) z
ORDER BY jaar, themaid, volgorde, volgorde1, regel;
$_$;


--
-- Name: sp_get_thema_overzicht_waterlichamen(integer, integer[], integer[]); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION sp_get_thema_overzicht_waterlichamen(jaar integer, rbdids integer[], oreids integer[]) RETURNS TABLE(themaid integer, soort text, regel text)
    LANGUAGE sql
    AS $_$
SELECT themaid "ThemaId", soort "Soort", regel "Regel" FROM
(
	-- waterlichamen
	SELECT
	1 themaid, 'informatief'::text soort,  
	format('%1$s bevat %2$s waterlichamen', description, aantal_waterlichamen)::text regel,
	description volgorde,
	0 volgorde1
	FROM 
	(
	       SELECT 
	       rpp.description,
	       COUNT(DISTINCT ho.hdo_id) aantal_waterlichamen
	       FROM hydro_object ho 
	       JOIN report_version rv ON rv.wkrv_id = ho.wkrv_id
	       JOIN reporting_period rpp ON rpp.rpp_id = rv.rpp_id AND (rv.begin_lifespan_version <= now() AND (rv.end_lifespan_version IS NULL OR (rv.end_lifespan_version IS NOT NULL AND rv.end_lifespan_version > now())))
	       JOIN namespace_type wb_nst ON wb_nst.ns_id = ho.inspire_id_namespace
	       JOIN competentauthority_namespacetype ON competentauthority_namespacetype.ns_id = wb_nst.ns_id
	       JOIN competent_authority ON competent_authority.ore_id = competentauthority_namespacetype.ore_id
	       JOIN water_body ON water_body.wbd_id = ho.hdo_id
	       WHERE ho.hydro_object_type = 'GroundWaterBody' and competent_authority.ore_id = ANY(oreids) and water_body.rbd_id = ANY(rbdids) AND rpp.leg_ref_id = 1
	       GROUP BY rpp.description
	) x
	UNION 
	-- waterlichamen
	SELECT
	1 themaid, 'informatief'::text soort,  
	format('%1$s bevat %2$s waterlichamen. Van deze waterlichamen zijn er<ul>'
		|| '<li>%3$s natuurlijk, %4$s kunstmatig en %5$s sterk veranderd</li>'
		|| '<li>%6$s R-typen, %7$s M-typen, %8$s O-typen en %9$s K-typen</li></ul>', 
		       description, aantal_waterlichamen, natuurlijk, kunstmatig, sterkveranderd,
		       aantalr, aantalm, aantalo, aantalk)::text regel,
	description volgorde,
	1 volgorde1	       
	FROM 
	(
	       SELECT 
	       rpp.description,
	       COUNT(ho.hdo_id) aantal_waterlichamen,
	       COUNT(DISTINCT status.kunstmatig) kunstmatig,
	       COUNT(DISTINCT status.sterkveranderd) sterkveranderd,
	       COUNT(DISTINCT status.natuurlijk) natuurlijk,
	       COUNT(DISTINCT typen.aantalr) aantalr,
	       COUNT(DISTINCT typen.aantalm) aantalm,
	       COUNT(DISTINCT typen.aantalo) aantalo,
	       COUNT(DISTINCT typen.aantalk) aantalk
	       FROM hydro_object ho 
	       JOIN (
		       SELECT swb_id, 
		       CASE WHEN is_artificial THEN swb_id ELSE NULL END kunstmatig,
		       CASE WHEN is_heaviliy_modified THEN swb_id ELSE NULL END sterkveranderd,
		       CASE WHEN NOT(is_heaviliy_modified) AND NOT(is_artificial) THEN swb_id ELSE NULL END natuurlijk
		       FROM surface_water_body
	       ) status ON status.swb_id = ho.hdo_id
	       JOIN (
		       SELECT swb_id,
		       CASE WHEN category = 'Rivier' THEN swb_id ELSE NULL END aantalr,
		       CASE WHEN category = 'Meer' THEN swb_id ELSE NULL END aantalm,
		       CASE WHEN category = 'Overgangswater' THEN swb_id ELSE NULL END aantalo,
		       CASE WHEN category = 'Kustwater' THEN swb_id ELSE NULL END aantalk
		       FROM 
		       (
			       SELECT swb.swb_id, sct.name category, count(true_swc_id) as aantal
			       FROM surface_water_body swb
			       JOIN sw_typology_type stt ON stt.styp_id = swb.sw_target_typology_id
			       JOIN sw_category_type sct ON sct.swc_id = stt.swc_id
			       GROUP BY swb.swb_id, sct.name
		       ) z
	       ) typen ON typen.swb_id = ho.hdo_id
	       JOIN report_version rv ON rv.wkrv_id = ho.wkrv_id
	       JOIN reporting_period rpp ON rpp.rpp_id = rv.rpp_id AND (rv.begin_lifespan_version <= now() AND (rv.end_lifespan_version IS NULL OR (rv.end_lifespan_version IS NOT NULL AND rv.end_lifespan_version > now())))
	       JOIN namespace_type wb_nst ON wb_nst.ns_id = ho.inspire_id_namespace
	       JOIN competentauthority_namespacetype ON competentauthority_namespacetype.ns_id = wb_nst.ns_id
	       JOIN competent_authority ON competent_authority.ore_id = competentauthority_namespacetype.ore_id
	       JOIN water_body ON water_body.wbd_id = ho.hdo_id
	       WHERE ho.hydro_object_type = 'SurfaceWaterBody' and competent_authority.ore_id = ANY(oreids) and water_body.rbd_id = ANY(rbdids) AND rpp.leg_ref_id = 1
	       GROUP BY rpp.description
	) x
	UNION 
	-- waterlichamen
	SELECT
	1 themaid, 'status'::text soort, 
	format('%1$s bevat %2$s waterlichamen. Van deze waterlichamen is<ul>'
	|| E'<li>%3$s keer een karakterisering ingevuld (%4$s%%)<img alt="%7$s" title="%7$s" src="[CONTENT_URL]/%7$s.png" /></li>'
	|| E'<li>%5$s keer een juiste geometrie ingevuld (%6$s%%)<img alt="%8$s" title="%8$s" src="[CONTENT_URL]/%8$s.png" /></li></ul>', 
		       description, aantal_waterlichamen, aantal_ingevuld, percentage_ingevuld, aantal_geometrie, percentage_geometrie, tos1.name, tos2.name)::text regel,
	description volgorde,
	2 volgorde1
	FROM 
	(
	       SELECT 
	       description,
	       COUNT(hdo_id) aantal_waterlichamen,
	       COUNT(geometry_type) aantal_geometrie,
	       SUM(aantal_ingevuld) aantal_ingevuld,
	       ROUND(SUM(aantal_ingevuld) * 1.0 / COUNT(hdo_id) * 100, 1) percentage_ingevuld,
	       ROUND(COUNT(geometry_type) * 1.0 / COUNT(hdo_id) * 100, 1) percentage_geometrie		
		FROM
		(
		       SELECT DISTINCT rpp.description, ho.hdo_id, g.geometry_type, aantal_ingevuld
		       FROM hydro_object ho 
		       JOIN (
			       SELECT wbd_id, CASE WHEN char_length(description) > 0 THEN 1 ELSE 0 END aantal_ingevuld
			       FROM water_body
		       ) ks ON ks.wbd_id = ho.hdo_id
		       JOIN (
				SELECT swb_id wbd_id,
				CASE WHEN (category = 'Rivier' AND geometrytype(geometry) = 'MULTILINESTRING') OR (category IN ('Meer', 'Overgangswater', 'Kustwater') AND geometrytype(geometry) = 'MULTIPOLYGON')
				THEN swb_id ELSE NULL END geometry_type
				FROM 
				(
				       SELECT swb.swb_id, sct.name category, count(true_swc_id) as aantal
				       FROM surface_water_body swb
				       JOIN sw_typology_type stt ON stt.styp_id = swb.sw_target_typology_id
				       JOIN sw_category_type sct ON sct.swc_id = stt.swc_id
				       GROUP BY swb.swb_id, sct.name
				) z
				LEFT JOIN management_regulation_or_restriction_zone ON management_regulation_or_restriction_zone.mrz_id = z.swb_id
				UNION 
				SELECT gwb_id wbd_id,
				CASE WHEN geometrytype(geometry) IS NOT NULL THEN gwb_id ELSE NULL END geometry_type
				FROM ground_water_body
				LEFT JOIN management_regulation_or_restriction_zone ON management_regulation_or_restriction_zone.mrz_id = ground_water_body.gwb_id
		       ) g ON g.wbd_id = ho.hdo_id
		       JOIN report_version rv ON rv.wkrv_id = ho.wkrv_id
		       JOIN reporting_period rpp ON rpp.rpp_id = rv.rpp_id AND (rv.begin_lifespan_version <= now() AND (rv.end_lifespan_version IS NULL OR (rv.end_lifespan_version IS NOT NULL AND rv.end_lifespan_version > now())))
		       JOIN namespace_type wb_nst ON wb_nst.ns_id = ho.inspire_id_namespace
		       JOIN competentauthority_namespacetype ON competentauthority_namespacetype.ns_id = wb_nst.ns_id
		       JOIN competent_authority ON competent_authority.ore_id = competentauthority_namespacetype.ore_id
		       JOIN water_body ON water_body.wbd_id = ho.hdo_id
		       WHERE ho.hydro_object_type IN ('SurfaceWaterBody', 'GroundWaterBody') and competent_authority.ore_id = ANY(oreids) and water_body.rbd_id = ANY(rbdids) AND rpp.leg_ref_id = 1
		) x2
	       GROUP BY x2.description
	) x
	JOIN thema_overzicht_statussen tos1 ON tos1.t_id = 1 AND tos1.start_range <= x.percentage_ingevuld AND tos1.end_range >= x.percentage_ingevuld
	JOIN thema_overzicht_statussen tos2 ON tos2.t_id = 1 AND tos2.start_range <= x.percentage_geometrie AND tos2.end_range >= x.percentage_geometrie
) z
ORDER BY jaar, themaid, volgorde, volgorde1, regel;
$_$;


--
-- Name: sp_get_toestand_normoverschrijdingen_owm(integer, integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION sp_get_toestand_normoverschrijdingen_owm(hdoid integer, rapportagejaar integer) RETURNS TABLE("Stof" text, "Oordeel" text, "GroepsNaam" text)
    LANGUAGE sql
    AS $_$

WITH normoverschrijding AS (
	SELECT 
		vw_oordeel_chemisch_owm."ChemischeStof_Omschrijving" AS "Stof", 
		vw_oordeel_chemisch_owm."Oordeel", 
		vw_chemischestof_groepen."Groepsnaam" AS "GroepsNaam",
		ROW_NUMBER() OVER(PARTITION BY vw_oordeel_chemisch_owm."ChemischeStof_Omschrijving"
					 ORDER BY vw_oordeel_chemisch_owm."Waargenomen_Eigenschap_DB_ID", vw_oordeel_chemisch_owm."Oordeel_Type_Code" DESC, vw_oordeel_chemisch_owm."WaardebepalingsMethode_Code" DESC) AS positie
	FROM public.vw_oordeel_chemisch_owm
	JOIN vw_chemischestof_groepen ON vw_chemischestof_groepen."ChemischeStof_Code" = vw_oordeel_chemisch_owm."ChemischeStof_code"
	WHERE "Waterlichaam_DB_ID" = $1 AND 
	vw_chemischestof_groepen."DB_ID" IN (3155, 3150, 3149, 3148)
	AND vw_oordeel_chemisch_owm."Rapportagejaar" = $2
)
SELECT "Stof", "Oordeel", "GroepsNaam"
FROM normoverschrijding s
WHERE positie = 1 AND "Oordeel" = 'voldoet niet'
ORDER BY 3, 1

$_$;


--
-- Name: sp_get_toestandsoordelen_chemischestoffen(integer, integer, integer, integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION sp_get_toestandsoordelen_chemischestoffen(waterlichaam integer, jaar integer, jaar2 integer, rrt integer) RETURNS TABLE(status_db_id integer, waterlichaam_db_id integer, rapportagejaar integer, waargenomen_eigenschap_db_id integer, chemischestof_db_id integer, chemischestof_code text, chemischestof_omschrijving text, oordeel text, oordeel_type_code text, oordeel_type_omschrijving text, waardebepalingsmethode_code text, waardebepalingsmethode_omschrijving text)
    LANGUAGE sql
    AS $$
SELECT swb_yearly_status.sys_id AS "Status_DB_ID", 
    hydro_object.hdo_id AS "Waterlichaam_DB_ID",
    swb_yearly_status.year_of_status AS "Rapportagejaar",
    vw_waargenomen_eigenschap_db_id."DB_ID" AS "Waargenomen_Eigenschap_DB_ID", 
    vw_waargenomen_eigenschap_db_id."ChemischeStof_DB_ID",
    vw_waargenomen_eigenschap_db_id."ChemischeStof_code", 
    vw_waargenomen_eigenschap_db_id."ChemischeStof_Omschrijving", 
    classification_type.description AS "Oordeel", 
    eu_monitoring_goal_type.code AS "Oordeel_Type_Code", 
    eu_monitoring_goal_type.description AS "Oordeel_Type_Omschrijving", 
    waarde_bepalings_methode_type.code AS "WaardebepalingsMethode_Code", 
    waarde_bepalings_methode_type.omschrijving AS "WaardebepalingsMethode_Omschrijving"
  
   FROM swb_yearly_status

   LEFT JOIN hydro_object ON hydro_object.hdo_id = swb_yearly_status.swb_id
   LEFT JOIN sw_chemical_substance_status ON sw_chemical_substance_status.sys_id = swb_yearly_status.sys_id
   LEFT JOIN classification_type ON sw_chemical_substance_status.swcs_id = classification_type.cls_id
   LEFT JOIN vw_waargenomen_eigenschap_db_id ON vw_waargenomen_eigenschap_db_id."DB_ID" = sw_chemical_substance_status.opt_id
   LEFT JOIN waarde_bepalings_methode_type ON waarde_bepalings_methode_type.wbpm_id = sw_chemical_substance_status.wbpm_id
   LEFT JOIN eu_monitoring_goal_type ON eu_monitoring_goal_type.eumg_id = sw_chemical_substance_status.eumg_id
  
   
   LEFT JOIN ( SELECT substance_group_element.chs_id, 
    substance_group_element.ssge_id
   FROM substance_group_element
  WHERE substance_group_element.ssge_id = 2907) ssg ON ssg.chs_id = vw_waargenomen_eigenschap_db_id."ChemischeStof_DB_ID"


  where (hydro_object.hdo_id = waterlichaam 
    OR hydro_object.hdo_id IN (select to_hdo from related_hydro_object where from_hdo = waterlichaam and rrt_id = rrt)) 
  and swb_yearly_status.year_of_status IN (jaar, jaar2) 
    and ssg.ssge_id = 2907 

  order by "ChemischeStof_Omschrijving",
   CASE
      WHEN eu_monitoring_goal_type.eumg_id = 3  THEN 1   -- TT_OM == 3
      WHEN eu_monitoring_goal_type.eumg_id = 1 THEN 2      -- OM=1
      WHEN eu_monitoring_goal_type.eumg_id = 2 THEN 3       -- TT=2
      ELSE 4
    END, 
  CASE
      WHEN waarde_bepalings_methode_type.wbpm_id = 1 THEN 1  -- Auquokit =1
      WHEN waarde_bepalings_methode_type.wbpm_id = 4 THEN 2  -- Voorlopig = 4
      WHEN waarde_bepalings_methode_type.wbpm_id = 2 THEN 3  -- Desk = 2
      ELSE 4
    END 
    ;

$$;


--
-- Name: sp_get_toestandsoordelen_overigestoffen(integer, integer, integer, integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION sp_get_toestandsoordelen_overigestoffen(waterlichaam integer, jaar integer, jaar2 integer, rrt integer) RETURNS TABLE(status_db_id integer, waterlichaam_db_id integer, rapportagejaar integer, waargenomen_eigenschap_db_id integer, chemischestof_db_id integer, chemischestof_code text, chemischestof_omschrijving text, oordeel text, oordeel_type_code text, oordeel_type_omschrijving text, waardebepalingsmethode_code text, waardebepalingsmethode_omschrijving text)
    LANGUAGE sql
    AS $$
SELECT swb_yearly_status.sys_id AS "Status_DB_ID", 
    hydro_object.hdo_id AS "Waterlichaam_DB_ID",
    swb_yearly_status.year_of_status AS "Rapportagejaar",
    vw_waargenomen_eigenschap_db_id."DB_ID" AS "Waargenomen_Eigenschap_DB_ID", 
    vw_waargenomen_eigenschap_db_id."ChemischeStof_DB_ID",
    vw_waargenomen_eigenschap_db_id."ChemischeStof_code", 
    vw_waargenomen_eigenschap_db_id."ChemischeStof_Omschrijving", 
    classification_type.description AS "Oordeel", 
    eu_monitoring_goal_type.code AS "Oordeel_Type_Code", 
    eu_monitoring_goal_type.description AS "Oordeel_Type_Omschrijving", 
    waarde_bepalings_methode_type.code AS "WaardebepalingsMethode_Code", 
    waarde_bepalings_methode_type.omschrijving AS "WaardebepalingsMethode_Omschrijving"
  
   FROM swb_yearly_status

   LEFT JOIN hydro_object ON hydro_object.hdo_id = swb_yearly_status.swb_id
   LEFT JOIN sw_chemical_substance_status ON sw_chemical_substance_status.sys_id = swb_yearly_status.sys_id
   LEFT JOIN classification_type ON sw_chemical_substance_status.swcs_id = classification_type.cls_id
   LEFT JOIN vw_waargenomen_eigenschap_db_id ON vw_waargenomen_eigenschap_db_id."DB_ID" = sw_chemical_substance_status.opt_id
   LEFT JOIN waarde_bepalings_methode_type ON waarde_bepalings_methode_type.wbpm_id = sw_chemical_substance_status.wbpm_id
   LEFT JOIN eu_monitoring_goal_type ON eu_monitoring_goal_type.eumg_id = sw_chemical_substance_status.eumg_id
  
   
   LEFT JOIN ( SELECT substance_group_element.chs_id, 
    substance_group_element.ssge_id
   FROM substance_group_element
  WHERE substance_group_element.ssge_id = 2908) ssg ON ssg.chs_id = vw_waargenomen_eigenschap_db_id."ChemischeStof_DB_ID"


  where (hydro_object.hdo_id = waterlichaam 
    OR hydro_object.hdo_id IN (select to_hdo from related_hydro_object where from_hdo = waterlichaam and rrt_id = rrt)) 
  and swb_yearly_status.year_of_status IN (jaar, jaar2) 
    and ssg.ssge_id = 2908 

  order by "ChemischeStof_Omschrijving",
   CASE
      WHEN eu_monitoring_goal_type.eumg_id = 3  THEN 1   -- TT_OM == 3
      WHEN eu_monitoring_goal_type.eumg_id = 1 THEN 2      -- OM=1
      WHEN eu_monitoring_goal_type.eumg_id = 2 THEN 3       -- TT=2
      ELSE 4
    END, 
  CASE
      WHEN waarde_bepalings_methode_type.wbpm_id = 1 THEN 1  -- Auquokit =1
      WHEN waarde_bepalings_methode_type.wbpm_id = 4 THEN 2  -- Voorlopig = 4
      WHEN waarde_bepalings_methode_type.wbpm_id = 2 THEN 3  -- Desk = 2
      ELSE 4
    END 
    ;

$$;


--
-- Name: sp_get_toestandstoetswaarden_chemischestoffen(integer, integer, integer, integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION sp_get_toestandstoetswaarden_chemischestoffen(waterlichaam integer, jaar integer, jaar2 integer, rrt integer) RETURNS TABLE(toetswaarde_db_id integer, status_db_id integer, waterlichaam_db_id integer, rapportagejaar integer, waargenomen_eigenschap_db_id integer, chemischestof_db_id integer, chemischestof_code text, chemischestof_omschrijving text, numerieke_waarde double precision, bepalingsgrens text, eenheid_code text, eenheid_omschrijving text, oordeel_type_db_id integer, oordeel_type_code text, oordeel_type_omschrijving text, waardebepalingsmethode_code text, waardebepalingsmethode_omschrijving text)
    LANGUAGE sql
    AS $$
SELECT observation.obs_id AS "Toetswaarde_DB_ID",
 swb_yearly_status.sys_id AS "Status_DB_ID",
    hydro_object.hdo_id AS "Waterlichaam_DB_ID", 
    swb_yearly_status.year_of_status AS "Rapportagejaar", 
    vw_waargenomen_eigenschap_db_id."DB_ID" AS "Waargenomen_Eigenschap_DB_ID", 
     vw_waargenomen_eigenschap_db_id."ChemischeStof_DB_ID",
    vw_waargenomen_eigenschap_db_id."ChemischeStof_code", 
    vw_waargenomen_eigenschap_db_id."ChemischeStof_Omschrijving", 
    observation.numeric_value AS "Numerieke_waarde", 
    bepaling_grens_type.omschrijving AS "Bepalingsgrens", 
    eenheid_type.code AS "Eenheid_Code", 
    eenheid_type.omschrijving AS "Eenheid_Omschrijving", 
    eu_monitoring_goal_type.eumg_id AS "Oordeel_Type_DB_ID", 
    eu_monitoring_goal_type.code AS "Oordeel_Type_Code", 
    eu_monitoring_goal_type.description AS "Oordeel_Type_Omschrijving", 
    waarde_bepalings_methode_type.code AS "Waardebepalingsmethode_Code", 
    waarde_bepalings_methode_type.omschrijving AS "Waardebepalingsmethode_Omschrijving"

   FROM swb_yearly_status
   LEFT JOIN sw_testing_conclusion ON swb_yearly_status.sys_id = sw_testing_conclusion.sys_id
   LEFT JOIN observation ON sw_testing_conclusion.stcc_id = observation.obs_id
   LEFT JOIN vw_waargenomen_eigenschap_db_id ON vw_waargenomen_eigenschap_db_id."DB_ID" = observation.observed_property_type
   LEFT JOIN eenheid_type ON eenheid_type.eenh_id = observation.numeric_value_uom_id
   LEFT JOIN bepaling_grens_type ON bepaling_grens_type.bpg_id = observation.limit_symbol_id
   LEFT JOIN observation_process ON observation_process.obp_id = observation.result_nature_id
   LEFT JOIN waarde_bepalings_methode_type ON waarde_bepalings_methode_type.wbpm_id = observation_process.wbpm_id
   LEFT JOIN hydro_object ON hydro_object.hdo_id = swb_yearly_status.swb_id
   LEFT JOIN eu_monitoring_goal_type ON eu_monitoring_goal_type.eumg_id = sw_testing_conclusion.eumg_id
   LEFT JOIN ( SELECT substance_group_element.chs_id, 
     substance_group_element.ssge_id
     FROM substance_group_element
   WHERE substance_group_element.ssge_id = 2907) ssg ON ssg.chs_id = vw_waargenomen_eigenschap_db_id."ChemischeStof_DB_ID"

where (hydro_object.hdo_id = waterlichaam 
    OR hydro_object.hdo_id IN (select to_hdo from related_hydro_object where from_hdo = waterlichaam and rrt_id = rrt))    -- waterlichaam
  and swb_yearly_status.year_of_status IN (jaar,jaar2) -- rapportagejaar
   and ssg.ssge_id = 2907 
  
  and waarde_bepalings_methode_type.wbpm_id = 1  -- AQUOKIT
  order by "ChemischeStof_Omschrijving",
  CASE
      WHEN eu_monitoring_goal_type.eumg_id = 3  THEN 1   -- TT_OM == 3
      WHEN eu_monitoring_goal_type.eumg_id = 1 THEN 2      -- OM=1
      WHEN eu_monitoring_goal_type.eumg_id = 2 THEN 3       -- TT=2
      ELSE 4
    END
  ;


$$;


--
-- Name: sp_get_toestandstoetswaarden_overigestoffen(integer, integer, integer, integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION sp_get_toestandstoetswaarden_overigestoffen(waterlichaam integer, jaar integer, jaar2 integer, rrt integer) RETURNS TABLE(toetswaarde_db_id integer, status_db_id integer, waterlichaam_db_id integer, rapportagejaar integer, waargenomen_eigenschap_db_id integer, chemischestof_db_id integer, chemischestof_code text, chemischestof_omschrijving text, numerieke_waarde double precision, bepalingsgrens text, eenheid_code text, eenheid_omschrijving text, oordeel_type_db_id integer, oordeel_type_code text, oordeel_type_omschrijving text, waardebepalingsmethode_code text, waardebepalingsmethode_omschrijving text)
    LANGUAGE sql
    AS $$
SELECT observation.obs_id AS "Toetswaarde_DB_ID",
 swb_yearly_status.sys_id AS "Status_DB_ID",
    hydro_object.hdo_id AS "Waterlichaam_DB_ID", 
    swb_yearly_status.year_of_status AS "Rapportagejaar", 
    vw_waargenomen_eigenschap_db_id."DB_ID" AS "Waargenomen_Eigenschap_DB_ID", 
     vw_waargenomen_eigenschap_db_id."ChemischeStof_DB_ID",
    vw_waargenomen_eigenschap_db_id."ChemischeStof_code", 
    vw_waargenomen_eigenschap_db_id."ChemischeStof_Omschrijving", 
    observation.numeric_value AS "Numerieke_waarde", 
    bepaling_grens_type.omschrijving AS "Bepalingsgrens", 
    eenheid_type.code AS "Eenheid_Code", 
    eenheid_type.omschrijving AS "Eenheid_Omschrijving", 
    eu_monitoring_goal_type.eumg_id AS "Oordeel_Type_DB_ID", 
    eu_monitoring_goal_type.code AS "Oordeel_Type_Code", 
    eu_monitoring_goal_type.description AS "Oordeel_Type_Omschrijving", 
    waarde_bepalings_methode_type.code AS "Waardebepalingsmethode_Code", 
    waarde_bepalings_methode_type.omschrijving AS "Waardebepalingsmethode_Omschrijving"

   FROM swb_yearly_status
   LEFT JOIN sw_testing_conclusion ON swb_yearly_status.sys_id = sw_testing_conclusion.sys_id
   LEFT JOIN observation ON sw_testing_conclusion.stcc_id = observation.obs_id
   LEFT JOIN vw_waargenomen_eigenschap_db_id ON vw_waargenomen_eigenschap_db_id."DB_ID" = observation.observed_property_type
   LEFT JOIN eenheid_type ON eenheid_type.eenh_id = observation.numeric_value_uom_id
   LEFT JOIN bepaling_grens_type ON bepaling_grens_type.bpg_id = observation.limit_symbol_id
   LEFT JOIN observation_process ON observation_process.obp_id = observation.result_nature_id
   LEFT JOIN waarde_bepalings_methode_type ON waarde_bepalings_methode_type.wbpm_id = observation_process.wbpm_id
   LEFT JOIN hydro_object ON hydro_object.hdo_id = swb_yearly_status.swb_id
   LEFT JOIN eu_monitoring_goal_type ON eu_monitoring_goal_type.eumg_id = sw_testing_conclusion.eumg_id
   LEFT JOIN ( SELECT substance_group_element.chs_id, 
     substance_group_element.ssge_id
     FROM substance_group_element
   WHERE substance_group_element.ssge_id = 2908) ssg ON ssg.chs_id = vw_waargenomen_eigenschap_db_id."ChemischeStof_DB_ID"

where (hydro_object.hdo_id = waterlichaam 
    OR hydro_object.hdo_id IN (select to_hdo from related_hydro_object where from_hdo = waterlichaam and rrt_id = rrt))    -- waterlichaam
  and swb_yearly_status.year_of_status IN (jaar,jaar2) -- rapportagejaar
   and ssg.ssge_id = 2908 
  
  and waarde_bepalings_methode_type.wbpm_id = 1  -- AQUOKIT
  order by "ChemischeStof_Omschrijving",
  CASE
      WHEN eu_monitoring_goal_type.eumg_id = 3  THEN 1   -- TT_OM == 3
      WHEN eu_monitoring_goal_type.eumg_id = 1 THEN 2      -- OM=1
      WHEN eu_monitoring_goal_type.eumg_id = 2 THEN 3       -- TT=2
      ELSE 4
    END
  ;


$$;


--
-- Name: sp_oordeel_chemie_owm_g(text, text, integer, integer, text); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION sp_oordeel_chemie_owm_g(in_geometry_type text, in_stroomgebieddistrict text, in_waterlichaam_versie integer, in_rapportagejaar integer, in_kwaliteitselement text) RETURNS TABLE("Waterlichaam_identificatie" text, "Waterlichaam_Versie" integer, stroomgebieddistrict text, "Rapportagejaar" integer, "Tpering_Code" text, "Grootheid_Code" text, "ChemischeStof_code" text, "Oordeel" text, geometry_type text, geometry geometry, "Unique_Key" text)
    LANGUAGE sql
    AS $$
WITH oordeel AS (
   SELECT DISTINCT ON (sys.sys_id, swcs.opt_id)
    sys.sys_id,
    sys.swb_id,
    sys.year_of_status,
    swcs.opt_id,
    swcs.swcs_id,
    swcs.css_id,
    hdo_swb.hdo_id,
    hdo_swb.wkrv_id,
    hdo_swb.inspire_id_local_id
   FROM ((sw_chemical_substance_status swcs
             JOIN swb_yearly_status sys 
               ON ((swcs.sys_id = sys.sys_id)) AND sys.year_of_status = IN_Rapportagejaar
             )
             JOIN hydro_object hdo_swb  ON ((hdo_swb.hdo_id = sys.swb_id)))
   WHERE (swcs.eumg_id = 3) AND hdo_swb.wkrv_id = IN_Waterlichaam_Versie
   --ORDER BY sys.sys_id, swcs.opt_id, swcs.wbpm_id DESC
   )
, opt AS (
    SELECT observed_property_type.opt_id AS "DB_ID",
        typering_type.code AS "Tpering_Code",
        grootheid_type.code AS "Grootheid_Code",
        chemische_stof_type.code AS "ChemischeStof_code"
    FROM (((observed_property_type
             LEFT JOIN grootheid_type 
               ON ((grootheid_type.grh_id = observed_property_type.quantity_id)))
             LEFT JOIN ( chemische_stof_type
                    JOIN substance_group_element 
                      ON ((chemische_stof_type.chs_id = substance_group_element.chs_id))
                  ) ON ((substance_group_element.ssge_id = observed_property_type.substance_group_id))
          )
          LEFT JOIN typering_type 
            ON ((typering_type.typ_id = observed_property_type.indicator_id)))
    WHERE (  typering_type.code = IN_kwaliteitselement
          OR grootheid_type.code = IN_kwaliteitselement
          OR chemische_stof_type.code = IN_kwaliteitselement
          )
    )
SELECT oordeel.inspire_id_local_id AS "Waterlichaam_identificatie",
        oordeel.wkrv_id AS "Waterlichaam_Versie",
        hdo_rbd.inspire_id_local_id AS stroomgebieddistrict,
        oordeel.year_of_status AS "Rapportagejaar",
        opt."Tpering_Code",
        opt."Grootheid_Code",
        opt."ChemischeStof_code",
        classification_type.description AS "Oordeel",
        geometrytype(mrz.geometry) AS geometry_type,
        mrz.geometry,
        ('CH'::text || oordeel.css_id) AS "Unique_Key"
FROM ((((((oordeel
     JOIN management_regulation_or_restriction_zone mrz
        ON ((oordeel.swb_id = mrz.mrz_id)) AND geometrytype(mrz.geometry) LIKE IN_geometry_type
        )
     JOIN water_body wb ON
        ((wb.wbd_id = mrz.mrz_id)))
     JOIN river_basin_disrict rbd ON
        ((rbd.rbd_id = wb.rbd_id)))
     JOIN hydro_object hdo_rbd ON
        ((rbd.rbd_id = hdo_rbd.hdo_id)) AND hdo_rbd.inspire_id_local_id LIKE IN_stroomgebieddistrict
        )
     JOIN classification_type ON
        ((oordeel.swcs_id = classification_type.cls_id)))
     JOIN opt ON
        ((opt."DB_ID" = oordeel.opt_id)))
$$;


--
-- Name: sp_post_create_new_wkr_version(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION sp_post_create_new_wkr_version() RETURNS boolean
    LANGUAGE sql
    AS $$
	-- opruimen
ALTER TABLE public.hydro_object
  DROP COLUMN fromhdo_id;
	
ALTER TABLE public.monitored_measure
  DROP COLUMN frommtm_id;
  
ALTER TABLE public.gwb_yearly_status
  DROP COLUMN from_gys_id;

ALTER TABLE public.swb_yearly_status
  DROP COLUMN from_sys_id;
 
ALTER TABLE public.swb_exemption
  DROP COLUMN from_swce_id; 
  
ALTER TABLE public.gwb_chemical_exemption
  DROP COLUMN from_gwce_id;

ALTER TABLE public.swb_measures_43a
  DROP COLUMN from_swee_id;  
  
ALTER TABLE public.monitoring_object
  DROP COLUMN from_mno_id;

ALTER TABLE observation
  DROP COLUMN from_obs_id;  

ALTER TABLE public.norm
  DROP COLUMN from_nrm_id;  
  
ALTER TABLE public.observing_capability
  DROP COLUMN from_osc_id;  
  
ALTER TABLE public.quality_element
  DROP COLUMN from_qem_id;
  
ALTER TABLE public.planned_feature_monitoring
  DROP COLUMN from_pmf_id;
  
ALTER TABLE public.swb_pressure
  DROP COLUMN from_swbp_id;

ALTER TABLE public.gwb_pressure
  DROP COLUMN from_gwbp_id;

select true;$$;


--
-- Name: sp_pre_create_new_wkr_version(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION sp_pre_create_new_wkr_version() RETURNS boolean
    LANGUAGE sql
    AS $$
	
ALTER TABLE public.hydro_object
  ADD COLUMN fromhdo_id integer;
	
ALTER TABLE public.monitored_measure
  ADD COLUMN frommtm_id integer;
  
ALTER TABLE public.gwb_yearly_status
  ADD COLUMN from_gys_id integer;

ALTER TABLE public.swb_yearly_status
  ADD COLUMN from_sys_id integer;
 
ALTER TABLE public.swb_exemption
  ADD COLUMN from_swce_id integer; 
  
ALTER TABLE public.gwb_chemical_exemption
  ADD COLUMN from_gwce_id integer;

ALTER TABLE public.swb_measures_43a
  ADD COLUMN from_swee_id integer;  
  
ALTER TABLE public.monitoring_object
  ADD COLUMN from_mno_id integer;  

ALTER TABLE public.observation
  ADD COLUMN from_obs_id integer;  

ALTER TABLE public.norm
  ADD COLUMN from_nrm_id integer;  
  
ALTER TABLE public.observing_capability
  ADD COLUMN from_osc_id integer;  

ALTER TABLE public.quality_element
  ADD COLUMN from_qem_id integer;

ALTER TABLE public.planned_feature_monitoring
  ADD COLUMN from_pmf_id integer;

ALTER TABLE public.swb_pressure
  ADD COLUMN from_swbp_id integer;

ALTER TABLE public.gwb_pressure
  ADD COLUMN from_gwbp_id integer;
  
select true;$$;


--
-- Name: sp_remove_samples_and_observations(integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION sp_remove_samples_and_observations(databundelid integer) RETURNS integer
    LANGUAGE plpgsql
    AS $$
BEGIN

create table observing_capability_observation_temp as select obs_id from observing_capability_observation where osc_id = databundelId;
delete from observing_capability_observation where osc_id = databundelId;
delete from quality_element_observation where obs_id in (select obs_id from observing_capability_observation_temp);
delete from bio_observation where obs_id in (select obs_id from observing_capability_observation_temp);
delete from observation where obs_id in (select obs_id from observing_capability_observation_temp);

create table observing_capability_sample_temp as select smpl_id from observing_capability_sample where osc_id = databundelId;
delete from observing_capability_sample where osc_id = databundelId;
delete from related_sampling_feature 	where mnf_id_source in (select smpl_id from observing_capability_sample_temp);
delete from quality_element_sample  	where smpl_id in (select smpl_id from observing_capability_sample_temp);
delete from sample  			where smpl_id in (select smpl_id from observing_capability_sample_temp);
delete from monitoring_feature 		where mnf_id 	in (select smpl_id from observing_capability_sample_temp);
delete from monitoring_object  		where mno_id in (select smpl_id from observing_capability_sample_temp);

drop table observing_capability_sample_temp;
drop table observing_capability_observation_temp;

RETURN databundelId;
END;
$$;


--
-- Name: wkp_mno_change_geom_type(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION wkp_mno_change_geom_type() RETURNS text
    LANGUAGE plpgsql
    AS $$
DECLARE
  def_vw_meetpunten_g varchar;
  def__vw_meetnet_meetpunt_g varchar;
  def_vw_meetnet_meetpunt_g varchar;
  def_vw_tijdwaarden_bestrijdingsmiddelen_csv varchar;
  def_vw_tijdwaarden_csv varchar;
  def_vw_tijdwaarden_mnlso_csv varchar;
  def_vw_meetnetten varchar;
  def_vw_tijdwaarden_g varchar;
  def_vw_ef_inspire varchar;
BEGIN

-- drop depending views
  drop view vw_meetlocatie_waterlichaam;

  drop view vw_download_meetlocaties_krm;

  DROP VIEW public.vw_meetpunt_meetnet_csv;

  drop view vw_meetpunten_csv;

  drop view vw_meetpunten_shape;

  drop view vw_tijdwaarden_bestrijdingsmiddelen_g;

  select view_definition into def__vw_meetnet_meetpunt_g from information_schema.views where table_name = '_vw_meetnet_meetpunt_g';
  drop view _vw_meetnet_meetpunt_g;

  select view_definition into def_vw_meetnet_meetpunt_g from information_schema.views where table_name = 'vw_meetnet_meetpunt_g';
  drop view vw_meetnet_meetpunt_g;

  select view_definition into def_vw_meetpunten_g from information_schema.views where table_name = 'vw_meetpunten_g';
  drop view vw_meetpunten_g;

  select view_definition into def_vw_tijdwaarden_bestrijdingsmiddelen_csv from information_schema.views where table_name = 'vw_tijdwaarden_bestrijdingsmiddelen_csv';
  drop view vw_tijdwaarden_bestrijdingsmiddelen_csv;
  
  select view_definition into def_vw_tijdwaarden_csv from information_schema.views where table_name = 'vw_tijdwaarden_csv';
  drop view vw_tijdwaarden_csv;

  select view_definition into def_vw_tijdwaarden_mnlso_csv from information_schema.views where table_name = 'vw_tijdwaarden_mnlso_csv';
  drop view vw_tijdwaarden_mnlso_csv;

  select view_definition into def_vw_meetnetten from information_schema.views where table_name = 'vw_meetnetten';
  drop view vw_meetnetten;

  select view_definition into def_vw_tijdwaarden_g from information_schema.views where table_name = 'vw_tijdwaarden_g';
  drop view vw_tijdwaarden_g;

  select view_definition into def_vw_ef_inspire from information_schema.views where table_name = 'vw_ef_inspire';
  drop view vw_ef_inspire;

-- change geometry type  
  ALTER TABLE monitoring_object ALTER COLUMN geometry TYPE geometry(Geometry,28992);
  ALTER TABLE monitoring_object ALTER COLUMN geometry_etrs89 TYPE geometry(Geometry,4258);

--recreate depending views

  execute 'create view vw_meetnetten as ' || def_vw_meetnetten;
  ALTER TABLE vw_meetnetten OWNER TO  pgsql;

  execute 'create view vw_meetpunten_g as ' || def_vw_meetpunten_g;
  ALTER TABLE vw_meetpunten_g OWNER TO  pgsql;

  execute 'create view _vw_meetnet_meetpunt_g as ' || def__vw_meetnet_meetpunt_g;
  ALTER TABLE _vw_meetnet_meetpunt_g OWNER TO  pgsql;

  execute 'create view vw_meetnet_meetpunt_g as ' || def_vw_meetnet_meetpunt_g;
  ALTER TABLE vw_meetnet_meetpunt_g OWNER TO  pgsql;

  execute 'create view vw_tijdwaarden_bestrijdingsmiddelen_csv as ' || def_vw_tijdwaarden_bestrijdingsmiddelen_csv;
  ALTER TABLE vw_tijdwaarden_bestrijdingsmiddelen_csv OWNER TO  pgsql;

  execute 'create view vw_tijdwaarden_csv as ' || def_vw_tijdwaarden_csv;
  ALTER TABLE vw_tijdwaarden_csv OWNER TO  pgsql;

  execute 'create view vw_tijdwaarden_mnlso_csv as ' || def_vw_tijdwaarden_mnlso_csv;
  ALTER TABLE vw_tijdwaarden_mnlso_csv OWNER TO  pgsql;

  execute 'create view vw_tijdwaarden_g as ' || def_vw_tijdwaarden_g;
  ALTER TABLE vw_tijdwaarden_g OWNER TO  pgsql;

  execute 'create view vw_ef_inspire as ' || def_vw_ef_inspire;
  ALTER TABLE vw_ef_inspire OWNER TO  pgsql;

  CREATE OR REPLACE VIEW public.vw_meetlocatie_waterlichaam AS 
 SELECT mno.inspire_id_local_id AS "Meetpunt.identificatie", 
    mno.name AS "Meetpunt.omschrijving", 
    st_x(st_transform(mno.geometry, 28992)) AS "Geometriepunt.X_RD", 
    st_y(st_transform(mno.geometry, 28992)) AS "Geometriepunt.Y_RD", 
    hdo.inspire_id_local_id AS "Waterlichaam.identificatie", 
    wln.omschrijving AS "Waterlichaam.omschrijving", 
    ns.code AS "Waterbeheerder.code", 
    ns.descrption AS "Waterbeheerder.omschrijving", 
    wln.stroomgebieddistrict AS "Stroomgebieddistrict.code", 
    mno.wkrv_id AS "Versie.code", mno.last_change_time
   FROM monitoring_object mno
   JOIN wkr_version wkrv ON wkrv.wkrv_id = mno.wkrv_id
   JOIN monitoring_feature mnf ON mnf.mnf_id = mno.mno_id
   JOIN environmental_monitoring_facility emf ON emf.emf_id = mnf.mnf_id
   JOIN management_regulation_or_restriction_zone mrz ON mrz.mrz_id = emf.ligt_in_mrz_id
   JOIN water_body wbd ON wbd.wbd_id = mrz.mrz_id
   JOIN hydro_object hdo ON hdo.hdo_id = mrz.mrz_id
   JOIN vw_waterlichamen wln ON wln.db_id = hdo.hdo_id
   JOIN namespace_type ns ON ns.ns_id = mno.inspire_id_namespace_id
  WHERE ST_GeometryType(mno.geometry) = 'ST_Point'
  ORDER BY wln.waterbeheerder_code, hdo.inspire_id_local_id;

ALTER TABLE public.vw_meetlocatie_waterlichaam
  OWNER TO  pgsql;

CREATE OR REPLACE VIEW public.vw_meetpunten_csv AS 
 SELECT monitoring_object.mno_id AS meetpunt_identificatie_db_id, 
    monitoring_object.inspire_id_local_id AS "Meetpunt.identificatie", 
    monitoring_object.name AS "Meetpunt.omschrijving", 
    namespace_type.code AS "Waterbeheerder.code", 
    namespace_type.descrption AS "Waterbeheerder.omschrijving", 
    st_x(st_transform(monitoring_object.geometry, 28992)) AS "GeometriePunt.X_RD", 
    st_y(st_transform(monitoring_object.geometry, 28992)) AS "GeometriePunt.Y_RD", 
    monitoring_object.wkrv_id, monitoring_object.last_change_time
   FROM monitoring_object
   JOIN monitored_compartiment ON monitored_compartiment.mno_id = monitoring_object.mno_id
   JOIN namespace_type ON namespace_type.ns_id = monitoring_object.inspire_id_namespace_id
   JOIN monitoring_feature ON monitoring_feature.mnf_id = monitoring_object.mno_id
  WHERE ST_GeometryType(monitoring_object.geometry) = 'ST_Point'
  ORDER BY namespace_type.code, monitoring_object.inspire_id_local_id;

ALTER TABLE public.vw_meetpunten_csv
  OWNER TO  pgsql;  

CREATE OR REPLACE VIEW public.vw_meetpunten_shape AS 
 SELECT DISTINCT ON (monitoring_object.inspire_id_local_id) monitoring_object.inspire_id_local_id AS "IDENT", 
    namespace_type.code AS "WBHCODE", namespace_type.descrption AS "WBHNAAM", 
    monitoring_object.name AS "MPNNAAM", 
    monitoring_object.additional_description AS "TOELICHT", 
    monitoring_object.geometry, 
    monitoring_feature.pos_accuracy_horizontal_value AS "PRECISIE", 
    eenheid_type.code AS "PREC_EEN", 
    measurement_regime_type.description AS "REGIME", 
    environmental_monitoring_facility.is_mobile AS "ISMOBIEL", 
    result_acquisition_source_type.description AS "INWINSRT", 
    specialised_emf_type.description AS "TYPESRT", 
    subsite_type.description AS "LOCTYPE", 
    monitoring_station.number_of_points_in_subsite AS "AANTPNT", 
    management_regulation_or_restriction_zone.mrz_id AS "IN_OWM"
   FROM wkr_version
   RIGHT JOIN (namespace_type
   RIGHT JOIN (monitoring_object
   RIGHT JOIN (hydro_object
   JOIN management_regulation_or_restriction_zone ON hydro_object.hdo_id = management_regulation_or_restriction_zone.mrz_id
   JOIN namespace_type namespace_type_1 ON hydro_object.inspire_id_namespace = namespace_type_1.ns_id
   RIGHT JOIN (environmental_monitoring_facility
   JOIN monitoring_feature ON environmental_monitoring_facility.emf_id = monitoring_feature.mnf_id) ON management_regulation_or_restriction_zone.mrz_id = environmental_monitoring_facility.ligt_in_mrz_id) ON monitoring_object.mno_id = monitoring_feature.mnf_id) ON namespace_type.ns_id = monitoring_object.inspire_id_namespace_id) ON wkr_version.wkrv_id = monitoring_object.wkrv_id
   LEFT JOIN eenheid_type ON monitoring_feature.pos_accuracy_horizontal_uom_id = eenheid_type.eenh_id
   LEFT JOIN specialised_emf_type ON environmental_monitoring_facility.speciallised_emf_type_id = specialised_emf_type.semf_id
   LEFT JOIN result_acquisition_source_type ON environmental_monitoring_facility.result_acquisition_source_id = result_acquisition_source_type.ras_id
   LEFT JOIN measurement_regime_type ON environmental_monitoring_facility.measurement_regime_id = measurement_regime_type.mmr_id
   LEFT JOIN (subsite_type
   RIGHT JOIN monitoring_station ON subsite_type.sst_id = monitoring_station.subsite_type_id) ON environmental_monitoring_facility.emf_id = monitoring_station.mts_id
  WHERE ST_GeometryType(monitoring_object.geometry) = 'ST_Point'
  ORDER BY monitoring_object.inspire_id_local_id, monitoring_object.wkrv_id DESC;

ALTER TABLE public.vw_meetpunten_shape
  OWNER TO  pgsql;

CREATE OR REPLACE VIEW public.vw_tijdwaarden_bestrijdingsmiddelen_g AS 
 SELECT observation.obs_id AS db_id, 
    monitoring_object.mno_id AS meetpunt_identificatie_db_id, 
    monitoring_object.inspire_id_local_id AS "Meetpunt.identificatie", 
    monitoring_object.name AS "Meetpunt.omschrijving", 
    st_x(st_transform(monitoring_object.geometry, 28992)) AS "GeometriePunt.X_RD", 
    st_y(st_transform(monitoring_object.geometry, 28992)) AS "GeometriePunt.Y_RD", 
    monitoring_object.geometry, namespace_type_1.code AS "Waterbeheerder.code", 
    namespace_type_1.descrption AS "Waterbeheerder.omschrijving", 
    typering_type.code AS "Typering.code", 
    typering_type.omschrijving AS "Typering.omschrijving", 
    grootheid_type.code AS "Grootheid.code", 
    grootheid_type.omschrijving AS "Grootheid.omschrijving", 
    chemische_stof_type.code AS "Parameter.code", 
    chemische_stof_type.naam AS "Parameter.omschrijving", 
    chemische_stof_type.cas_nr AS "Chemischestof.casnr", 
    object_type.code AS "Object.code", 
    object_type.omschrijving AS "Object.omschrijving", 
    eenheid_type.code AS "Eenheid.code", 
    eenheid_type.omschrijving AS "Eenheid.omschrijving", 
    hoedanigheid_type.code AS "Hoedanigheid.code", 
    hoedanigheid_type.omschrijving AS "Hoedanigheid.omschrijving", 
    compartiment_type.code AS "Compartiment.code", 
    compartiment_type.description AS "Compartiment.omschrijving", 
    waarde_bewerkings_methode_type.code AS "Waardebewerkingsmethode.code", 
    waarde_bewerkings_methode_type.omschrijving AS "Waardebewerkingsmethode.omschrijving", 
    ''::text AS "Waardebepalingsmethode.code", 
    ''::text AS "Waardebepalingsmethode.omschrijving", 
    classification_group_type.code AS "Classificatie.waarde", 
    classification_group_type.description AS "Classificatie.groep", 
    to_char(observation.phenomenon_time_begin, 'YYYY-MM-DD'::text) AS "Begindatum", 
    to_char(observation.phenomenon_time_begin, 'HH24:MM:SS'::text) AS "Begintijd", 
    to_char(observation.phenomenon_time_end, 'YYYY-MM-DD'::text) AS "Einddatum", 
    to_char(observation.phenomenon_time_end, 'HH24:MM:SS'::text) AS "Eindtijd", 
    bepaling_grens_type.omschrijving AS "Limietsymbool", 
    observation.numeric_value AS "Numeriekewaarde", 
    observation.description AS "Alfanumeriekewaarde", 
    kwaliteitsoordeel_type.code AS "Kwaliteitsoordeel.code", 
    kwaliteitsoordeel_type.description AS "Kwaliteitsoordeel.omschrijving", 
    observation.remarks AS "Opmerking", 
    sg."Groepsnaam" AS "SubstanceGroup.omschrijving", 
    sg."Type" AS "SubstanceGroup.type", observation.last_change_time, 
    monitoring_object.wkrv_id
   FROM observed_property_type
   JOIN observation ON observation.observed_property_type = observed_property_type.opt_id
   LEFT JOIN object_group ON object_group.ojg_id = observed_property_type.object_group_id
   LEFT JOIN typering_type ON typering_type.typ_id = observed_property_type.indicator_id
   LEFT JOIN grootheid_type ON observed_property_type.quantity_id = grootheid_type.grh_id
   JOIN monitored_compartiment ON monitored_compartiment.mno_id = observation.mno_id
   JOIN compartiment_type ON monitored_compartiment.cptm_id = compartiment_type.cptm_id
   JOIN (chemische_stof_type
   LEFT JOIN substance_group_element ON chemische_stof_type.chs_id = substance_group_element.chs_id) ON observed_property_type.substance_group_id = substance_group_element.ssge_id
   LEFT JOIN kwaliteitsoordeel_type ON observation.quality_indicator_id = kwaliteitsoordeel_type.kwod_id
   LEFT JOIN classification_group_type ON observation.classified_result_id = classification_group_type.clsg_id
   JOIN eenheid_type ON observation.numeric_value_uom_id = eenheid_type.eenh_id
   LEFT JOIN bepaling_grens_type ON observation.limit_symbol_id = bepaling_grens_type.bpg_id
   JOIN waarde_bewerkings_methode_type ON observation.value_processing_method_id = waarde_bewerkings_methode_type.wbm_id
   LEFT JOIN object_group_element ON object_group.ojg_id = object_group_element.ojg_id
   LEFT JOIN object_type ON object_group_element.obj_id = object_type.obj_id
   JOIN (namespace_type namespace_type_1
   LEFT JOIN monitoring_object ON namespace_type_1.ns_id = monitoring_object.inspire_id_namespace_id) ON observation.mno_id = monitoring_object.mno_id
   LEFT JOIN taxa_group_element ON observed_property_type.taxa_group_id = taxa_group_element.txg_id
   LEFT JOIN taxon_type ON observed_property_type.taxa_group_id = taxa_group_element.txg_id
   JOIN hoedanigheid_type ON hoedanigheid_type.hdh_id = observed_property_type.hoedanigheid_id
   JOIN vw_chemischestof_groepen sg ON sg."ChemischeStof_Code"::text = chemische_stof_type.code::text
  WHERE sg."Groepsnaam"::text = 'Bestrijdingsmiddelen CML'::text AND monitoring_object.wkrv_id = 7 
    AND ST_GeometryType(monitoring_object.geometry) = 'ST_Point'
  ORDER BY namespace_type_1.code, monitoring_object.inspire_id_local_id, chemische_stof_type.code, to_char(observation.phenomenon_time_begin, 'YYYY-MM-DD'::text) DESC;


ALTER TABLE public.vw_tijdwaarden_bestrijdingsmiddelen_g
  OWNER TO  pgsql;
  
  
CREATE OR REPLACE VIEW public.vw_download_meetlocaties_krm AS 
 SELECT mo.geometry, mo.inspire_id_local_id AS mpnident, mo.name AS mpnomsch, 
    mo.inspire_id_namespace_id AS wbhcode, 
    mo.begin_lifespan_version AS startdatum, 
    mo.end_lifespan_version AS einddatum, mo.additional_description AS memo, 
    oe.naam AS externbron, mooi.hydro_id_local_id AS externcode, 
    nf.emn_id AS meetnetid
   FROM monitoring_object mo
   JOIN monitoring_feature mf ON mo.mno_id = mf.mnf_id
   JOIN environmental_monitoring_facility emf ON mo.mno_id = emf.emf_id
   JOIN network_facility nf ON nf.emf_id = emf.emf_id
   LEFT JOIN monitoring_object_other_ids mooi ON mooi.mno_id = mo.mno_id
   LEFT JOIN organisatorische_eenheid oe ON oe.ore_id = mooi.hydro_id_ore_id;

ALTER TABLE public.vw_download_meetlocaties_krm
  OWNER TO  pgsql;

CREATE OR REPLACE VIEW public.vw_meetpunt_meetnet_csv AS 
 SELECT mpc.meetpunt_identificatie_db_id, mpc."Meetpunt.identificatie", 
    mpc."Meetpunt.omschrijving", mpc."GeometriePunt.X_RD", 
    mpc."GeometriePunt.Y_RD", mpc."Waterbeheerder.code", 
    mpc."Waterbeheerder.omschrijving", 
    mmp."Meetnet_Identificatie" AS "Meetnet.identificatie", 
    mmp."Meetnet_Omschrijving" AS "Meetnet.omschrijving", 
    mmp.wkr_versie AS "Versie"
   FROM vw_meetpunten_csv mpc
   JOIN vw_meetnet_meetpunt_g mmp ON mmp."Meetpunt_Identificatie"::text = mpc."Meetpunt.identificatie"::text
  ORDER BY mpc."Waterbeheerder.code", mpc."Meetpunt.identificatie";

ALTER TABLE public.vw_meetpunt_meetnet_csv
  OWNER TO pgsql;


  RETURN 'Success';
END;
$$;


SET default_tablespace = '';

SET default_with_oids = false;

--
-- Name: monitoring_feature; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE monitoring_feature (
    mnf_id integer NOT NULL,
    monitoring_feature_type character varying(50) NOT NULL,
    pos_accuracy_horizontal_value double precision,
    pos_accuracy_horizontal_uom_id integer,
    pos_accuracy_vertical_value double precision,
    pos_accuracy_vertical_uom_id integer,
    last_change_time timestamp without time zone NOT NULL
);


--
-- Name: COLUMN monitoring_feature.monitoring_feature_type; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN monitoring_feature.monitoring_feature_type IS 'Om facility en network te onderscheiden';


--
-- Name: monitoring_feature_positioning_method; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE monitoring_feature_positioning_method (
    mnf_id integer NOT NULL,
    pba_id integer NOT NULL,
    last_change_time timestamp without time zone NOT NULL
);


--
-- Name: monitoring_object; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE monitoring_object (
    mno_id integer NOT NULL,
    inspire_id_local_id character varying(36) NOT NULL,
    inspire_id_namespace_id integer NOT NULL,
    wkrv_id integer NOT NULL,
    monitoring_object_type character varying(50) NOT NULL,
    name character varying(255),
    additional_description text,
    geometry geometry(Geometry,28992),
    last_change_time timestamp without time zone NOT NULL,
    geometry_etrs89 geometry(Geometry,4258),
    begin_lifespan_version timestamp without time zone DEFAULT '1999-12-31 00:00:00'::timestamp without time zone NOT NULL,
    end_lifespan_version timestamp without time zone,
    primary_geo_column character varying(32) DEFAULT 'geometry'::character varying NOT NULL,
    reason_change text,
    primary_geodetic_reference_id integer DEFAULT 3331 NOT NULL,
    CONSTRAINT chk_primary_geo_column CHECK ((((primary_geo_column)::text = 'geometry'::text) OR ((primary_geo_column)::text = 'geometry_etrs89'::text)))
);


--
-- Name: COLUMN monitoring_object.monitoring_object_type; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN monitoring_object.monitoring_object_type IS 'Bepaalt het subtype monitoring_object';


--
-- Name: namespace_type; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE namespace_type (
    ns_id integer NOT NULL,
    code character varying(2) NOT NULL,
    descrption character varying(90),
    d_begin timestamp without time zone,
    d_eind timestamp without time zone,
    last_changed_date timestamp without time zone,
    d_status character varying(50) DEFAULT 'Gepubliceerd'::character varying
);


--
-- Name: plaatsbepalingsapparaat_type; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE plaatsbepalingsapparaat_type (
    pba_id integer NOT NULL,
    code character varying(12) NOT NULL,
    description character varying(90) NOT NULL,
    d_begin timestamp without time zone,
    d_eind timestamp without time zone,
    last_changed_date timestamp without time zone,
    d_status character varying(50) DEFAULT 'Gepubliceerd'::character varying,
    id integer
);


--
-- Name: rel_samp_feat_role_type; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE rel_samp_feat_role_type (
    rsfr_id integer NOT NULL,
    code character varying(12) NOT NULL,
    description character varying(90) NOT NULL,
    d_begin timestamp without time zone,
    d_eind timestamp without time zone,
    last_changed_date timestamp without time zone,
    d_status character varying(50) DEFAULT 'Gepubliceerd'::character varying
);


--
-- Name: related_sampling_feature; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE related_sampling_feature (
    mnf_id_source integer NOT NULL,
    mnf_id_target integer NOT NULL,
    role_id integer NOT NULL,
    last_change_time timestamp without time zone NOT NULL
);


SET search_path = aquo_formaten, pg_catalog;

--
-- Name: vw_imwa_meetpunten_csv; Type: VIEW; Schema: aquo_formaten; Owner: -
--

CREATE VIEW vw_imwa_meetpunten_csv AS
 SELECT monitoring_object.inspire_id_local_id AS "Identificatie",
    ('NL'::text || (namespace_type.code)::text) AS "Namespace",
    monitoring_object.wkrv_id AS "Versie",
    monitoring_object.name AS "Omschrijving",
    round((public.st_x(public.st_transform(monitoring_object.geometry, 28992)))::numeric, 3) AS "GeometriePunt.X_RD",
    round((public.st_y(public.st_transform(monitoring_object.geometry, 28992)))::numeric, 3) AS "GeometriePunt.Y_RD",
    pba.code AS "Plaatsbepaling.Code",
        CASE
            WHEN (pba.code IS NOT NULL) THEN 'www.aquo.nl'::text
            ELSE NULL::text
        END AS "Plaatsbepaling.Codespace",
    'meetpunt'::text AS "MeetobjectSoort.code",
        CASE
            WHEN (mno_to.inspire_id_local_id IS NOT NULL) THEN ((('NL'::text || (ns2.code)::text) || '_'::text) || (mno_to.inspire_id_local_id)::text)
            ELSE NULL::text
        END AS "GerelateerdMeetobject",
        CASE
            WHEN (mno_to.inspire_id_local_id IS NOT NULL) THEN (sf_rol.code)::text
            ELSE NULL::text
        END AS "GerelateerdMeetobjectRol.Id",
    monitoring_object.mno_id AS meetpunt_identificatie_db_id,
    monitoring_object.last_change_time
   FROM ((((((((public.monitoring_object
     LEFT JOIN public.namespace_type ON ((namespace_type.ns_id = monitoring_object.inspire_id_namespace_id)))
     LEFT JOIN public.monitoring_feature ON ((monitoring_feature.mnf_id = monitoring_object.mno_id)))
     LEFT JOIN public.monitoring_feature_positioning_method mfpm ON ((monitoring_feature.mnf_id = mfpm.mnf_id)))
     LEFT JOIN public.plaatsbepalingsapparaat_type pba ON ((pba.pba_id = mfpm.pba_id)))
     LEFT JOIN public.related_sampling_feature rsf ON ((rsf.mnf_id_source = monitoring_object.mno_id)))
     LEFT JOIN public.rel_samp_feat_role_type sf_rol ON ((sf_rol.rsfr_id = rsf.role_id)))
     LEFT JOIN public.monitoring_object mno_to ON ((rsf.mnf_id_target = mno_to.mno_id)))
     LEFT JOIN public.namespace_type ns2 ON ((ns2.ns_id = mno_to.inspire_id_namespace_id)))
  WHERE ((public.st_geometrytype(monitoring_object.geometry) = 'ST_Point'::text) AND ((monitoring_object.monitoring_object_type)::text ~~ 'MonitoringFeature%'::text));


SET search_path = domains, pg_catalog;

--
-- Name: bemonsteringsmethode; Type: TABLE; Schema: domains; Owner: -
--

CREATE TABLE bemonsteringsmethode (
    bmm_id integer NOT NULL,
    code character varying(50) NOT NULL,
    description character varying(90) NOT NULL,
    groep character varying(32) NOT NULL,
    titel character varying(255) NOT NULL,
    d_begin timestamp without time zone,
    d_eind timestamp without time zone,
    last_changed_date timestamp without time zone,
    d_status character varying(50) DEFAULT 'Gepubliceerd'::character varying,
    id integer
);


--
-- Name: monsterbewerkingsmethode; Type: TABLE; Schema: domains; Owner: -
--

CREATE TABLE monsterbewerkingsmethode (
    mbm_id integer NOT NULL,
    code character varying(50) NOT NULL,
    description character varying(255) NOT NULL,
    d_begin timestamp without time zone,
    d_eind timestamp without time zone,
    d_status character varying(50) DEFAULT 'Gepubliceerd'::character varying,
    id integer,
    codespace character varying(25),
    last_changed_date timestamp without time zone,
    groep character varying(32) NOT NULL,
    titel character varying(255) NOT NULL
);


--
-- Name: orgaan; Type: TABLE; Schema: domains; Owner: -
--

CREATE TABLE orgaan (
    org_id integer NOT NULL,
    code character varying(5) NOT NULL,
    description character varying(50) NOT NULL,
    groep character varying(50),
    d_begin timestamp without time zone NOT NULL,
    d_eind timestamp without time zone,
    d_status character varying(50) DEFAULT 'Gepubliceerd'::character varying NOT NULL
);


--
-- Name: veldapparaat; Type: TABLE; Schema: domains; Owner: -
--

CREATE TABLE veldapparaat (
    var_id integer NOT NULL,
    code character varying(2) NOT NULL,
    description character varying(90) NOT NULL,
    d_begin timestamp without time zone,
    d_eind timestamp without time zone,
    last_changed_date timestamp without time zone,
    d_status character varying(50) DEFAULT 'Gepubliceerd'::character varying,
    id integer,
    codespace character varying(25),
    groep character varying(32) NOT NULL
);


SET search_path = public, pg_catalog;

--
-- Name: compartiment_type; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE compartiment_type (
    cptm_id integer NOT NULL,
    code character varying(50) NOT NULL,
    description character varying(50) NOT NULL,
    d_begin timestamp without time zone,
    d_eind timestamp without time zone,
    last_changed_date timestamp without time zone,
    d_status character varying(50) DEFAULT 'Gepubliceerd'::character varying,
    id integer
);


--
-- Name: eenheid_type; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE eenheid_type (
    eenh_id integer NOT NULL,
    code character varying(50) NOT NULL,
    omschrijving character varying(50) NOT NULL,
    d_begin timestamp without time zone,
    d_eind timestamp without time zone,
    last_changed_date timestamp without time zone,
    d_status character varying(50) DEFAULT 'Gepubliceerd'::character varying,
    id integer
);


--
-- Name: hoedanigheid_type; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE hoedanigheid_type (
    hdh_id integer NOT NULL,
    code character varying(12) NOT NULL,
    omschrijving character varying(90) NOT NULL,
    d_begin timestamp without time zone,
    d_eind timestamp without time zone,
    last_changed_date timestamp without time zone,
    d_status character varying(50) DEFAULT 'Gepubliceerd'::character varying,
    id integer
);


--
-- Name: sample; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE sample (
    smpl_id integer NOT NULL,
    name character varying(255),
    material_class_id integer NOT NULL,
    specimen_type_id integer,
    sampling_time timestamp without time zone NOT NULL,
    remarks character varying(255),
    sampling_location geometry(Geometry,28992),
    size_value double precision,
    size_uom_id integer,
    upper_depth_value double precision,
    upper_depth_uom_id integer,
    upper_depth_condition_id integer,
    lower_depth_value double precision,
    lower_depth_uom_id integer,
    lower_depth_condition_id integer,
    start_time timestamp without time zone,
    end_time timestamp without time zone,
    fraction_criterium_id integer,
    organ_id integer,
    biota_criterium_id integer,
    txn_id integer,
    smp_id integer NOT NULL
);


--
-- Name: COLUMN sample.smpl_id; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN sample.smpl_id IS 'is de abstacte relatie tussen monitoring_object';


--
-- Name: sampling_proces; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE sampling_proces (
    smp_id integer NOT NULL,
    nen3610_id_namespace_id integer,
    nen3610_id_local_id text,
    sampling_method_id integer,
    sampling_processing_method_id integer,
    sampling_operator_id integer,
    "time" timestamp without time zone,
    process_operator_id integer,
    var_id integer
);


--
-- Name: taxon_type; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE taxon_type (
    txn_id integer NOT NULL,
    code character varying(90) NOT NULL,
    omschrijving character varying(90) NOT NULL,
    auteur character varying(90),
    d_begin timestamp without time zone,
    d_eind timestamp without time zone,
    last_changed_date timestamp without time zone,
    d_status character varying(50) DEFAULT 'Gepubliceerd'::character varying
);


SET search_path = aquo_formaten, pg_catalog;

--
-- Name: vw_imwa_monster_csv; Type: VIEW; Schema: aquo_formaten; Owner: -
--

CREATE VIEW vw_imwa_monster_csv AS
 SELECT mno.inspire_id_local_id AS "Identificatie",
    ('NL'::text || (nst.code)::text) AS "Namespace",
    mno.wkrv_id AS "Versie",
    ((('NL'::text || (ns2.code)::text) || '_'::text) || (mno_mpn.inspire_id_local_id)::text) AS "Meetpunt.Identificatie",
    cmp.code AS "Compartiment.Code",
    cmp.description AS "Compartiment.Omschrijving",
    orgaan.code AS "Orgaan.Code",
    orgaan.description AS "Orgaan.Omschrijving",
    taxon_type.omschrijving AS "Organisme.Naam",
    smpl.upper_depth_value AS "BeginDiepte_m",
    smpl.lower_depth_value AS "EindDiepte_m",
        CASE
            WHEN (hdh_ud.hdh_id IS NULL) THEN
            CASE
                WHEN (hdh_ld.hdh_id IS NULL) THEN (NULL::text)::character varying
                ELSE hdh_ld.code
            END
            ELSE hdh_ud.code
        END AS "ReferentieVlak.Code",
    mbm.code AS "Monsterbewerkingsmethode.Code",
    mbm.description AS "Monsterbewerkingsmethode.Omschrijving",
    mbm.codespace AS "Monsterbewerkingsmethode.codespace",
    bmm.code AS "Bemonsteringsmethode.Code",
    bmm.description AS "Bemonsteringsmethode.Omschrijving",
        CASE
            WHEN (bmm.code IS NULL) THEN NULL::text
            ELSE 'www.aquo.nl'::text
        END AS "Bemonsteringsmethode.codespace",
        CASE
            WHEN (frac.code IS NULL) THEN biota.code
            ELSE frac.code
        END AS "Monstercriterium.Code",
    var.code AS "veldapparaat.Code",
    var.description AS "veldapparaat.Omschrijving",
    var.codespace AS "veldapparaat.Codespace",
    to_char(smpl.sampling_time, 'YYYY-MM-DD'::text) AS "Monsternemingsdatum",
    to_char(smpl.sampling_time, 'HH24:MM:SS'::text) AS "Monsternemingstijd",
    NULL::integer AS "Tijd_UTCoffset",
    round((public.st_x(public.st_transform(mno.geometry, 28992)))::numeric, 3) AS "GeometriePunt.X",
    round((public.st_y(public.st_transform(mno.geometry, 28992)))::numeric, 3) AS "GeometriePunt.Y",
    'EPSG28992'::text AS "ReferentieHorizontaal.code",
    smpl.remarks AS "Opmerking",
        CASE
            WHEN (mno_smpl.wkrv_id IS NULL) THEN NULL::text
            ELSE ((('NL'::text || (ns3.code)::text) || '_'::text) || (mno_smpl.inspire_id_local_id)::text)
        END AS "GerelateerdMonsterobject",
        CASE
            WHEN (mno_smpl.wkrv_id IS NULL) THEN (NULL::text)::character varying
            ELSE rsfr.code
        END AS "GerelateerdMonsterRol.id",
    smpl.smpl_id AS monster_db_id,
    mno.last_change_time AS laatste_wijziging
   FROM ((((((((((((((((((((((public.sample smpl
     JOIN public.monitoring_object mno ON ((mno.mno_id = smpl.smpl_id)))
     JOIN public.namespace_type nst ON ((mno.inspire_id_namespace_id = nst.ns_id)))
     JOIN public.compartiment_type cmp ON ((smpl.material_class_id = cmp.cptm_id)))
     LEFT JOIN public.hoedanigheid_type hdh_ud ON ((hdh_ud.hdh_id = smpl.upper_depth_condition_id)))
     LEFT JOIN public.hoedanigheid_type hdh_ld ON ((hdh_ld.hdh_id = smpl.lower_depth_condition_id)))
     LEFT JOIN public.taxon_type ON ((smpl.txn_id = taxon_type.txn_id)))
     LEFT JOIN domains.orgaan ON ((orgaan.org_id = smpl.organ_id)))
     LEFT JOIN public.hoedanigheid_type frac ON ((frac.hdh_id = smpl.fraction_criterium_id)))
     LEFT JOIN public.hoedanigheid_type biota ON ((biota.hdh_id = smpl.biota_criterium_id)))
     LEFT JOIN public.eenheid_type eenh_ud ON ((eenh_ud.eenh_id = smpl.upper_depth_uom_id)))
     LEFT JOIN public.eenheid_type eenh_ld ON ((eenh_ld.eenh_id = smpl.lower_depth_uom_id)))
     LEFT JOIN public.sampling_proces smp ON ((smp.smp_id = smpl.smp_id)))
     LEFT JOIN domains.monsterbewerkingsmethode mbm ON ((mbm.mbm_id = smp.sampling_method_id)))
     LEFT JOIN domains.bemonsteringsmethode bmm ON ((bmm.bmm_id = smp.sampling_processing_method_id)))
     LEFT JOIN domains.veldapparaat var ON ((var.var_id = smp.var_id)))
     LEFT JOIN public.related_sampling_feature rel_smpl ON ((smpl.smpl_id = rel_smpl.mnf_id_source)))
     LEFT JOIN public.sample smpl2 ON ((smpl.smpl_id = rel_smpl.mnf_id_target)))
     LEFT JOIN public.monitoring_object mno_mpn ON (((mno_mpn.mno_id = rel_smpl.mnf_id_target) AND ((mno_mpn.monitoring_object_type)::text <> 'Sample'::text))))
     LEFT JOIN public.monitoring_object mno_smpl ON (((smpl2.smpl_id = mno_smpl.mno_id) AND ((mno_smpl.monitoring_object_type)::text = 'Sample'::text))))
     LEFT JOIN public.namespace_type ns2 ON ((ns2.ns_id = mno_mpn.inspire_id_namespace_id)))
     LEFT JOIN public.namespace_type ns3 ON ((ns3.ns_id = mno_smpl.inspire_id_namespace_id)))
     LEFT JOIN public.rel_samp_feat_role_type rsfr ON ((rsfr.rsfr_id = rel_smpl.role_id)));


SET search_path = domains, pg_catalog;

--
-- Name: meetapparaat; Type: TABLE; Schema: domains; Owner: -
--

CREATE TABLE meetapparaat (
    mar_id integer NOT NULL,
    code character varying(50) NOT NULL,
    description character varying(255) NOT NULL,
    d_begin timestamp without time zone,
    d_eind timestamp without time zone,
    d_status character varying(50) DEFAULT 'Gepubliceerd'::character varying
);


SET search_path = public, pg_catalog;

--
-- Name: bio_observation; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE bio_observation (
    obs_id integer NOT NULL,
    levensstadium_id integer,
    lengte_klasse_id integer,
    geslacht_id integer,
    verschijningsvorm_id integer,
    levensvorm_id integer,
    gedrag_id integer
);


--
-- Name: chemische_stof_type; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE chemische_stof_type (
    chs_id integer NOT NULL,
    cas_nr character varying(12) NOT NULL,
    naam character varying(90) NOT NULL,
    code character varying(12) NOT NULL,
    d_begin timestamp without time zone,
    d_eind timestamp without time zone,
    last_changed_date timestamp without time zone,
    d_status character varying(50) DEFAULT 'Gepubliceerd'::character varying,
    id integer
);


--
-- Name: grootheid_type; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE grootheid_type (
    grh_id integer NOT NULL,
    code character varying(50) NOT NULL,
    omschrijving character varying(90) NOT NULL,
    d_begin timestamp without time zone,
    d_eind timestamp without time zone,
    last_changed_date timestamp without time zone,
    d_status character varying(50) DEFAULT 'Gepubliceerd'::character varying,
    id integer
);


--
-- Name: hydro_object; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE hydro_object (
    hdo_id integer NOT NULL,
    inspire_id_local_id character varying(36) NOT NULL,
    inspire_id_namespace integer NOT NULL,
    wkrv_id integer NOT NULL,
    hydro_object_type character varying(50) NOT NULL,
    related_hdo_id integer,
    last_change_time timestamp without time zone NOT NULL
);


--
-- Name: COLUMN hydro_object.hydro_object_type; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN hydro_object.hydro_object_type IS 'Enumeratie van subtypen van hydro_objecten.';


--
-- Name: kwaliteitsoordeel_type; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE kwaliteitsoordeel_type (
    kwod_id integer NOT NULL,
    code character varying(2) NOT NULL,
    description character varying(90) NOT NULL,
    d_begin timestamp without time zone,
    d_eind timestamp without time zone,
    last_changed_date timestamp without time zone,
    d_status character varying(50) DEFAULT 'Gepubliceerd'::character varying,
    id integer
);


--
-- Name: monitored_compartiment; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE monitored_compartiment (
    mno_id integer NOT NULL,
    cptm_id integer NOT NULL,
    last_change_time timestamp without time zone NOT NULL
);


--
-- Name: object_group; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE object_group (
    ojg_id integer NOT NULL,
    name character varying(90) NOT NULL,
    group_type character varying(1) NOT NULL,
    d_begin timestamp without time zone,
    d_eind timestamp without time zone,
    last_changed_date timestamp without time zone,
    d_status character varying(50) DEFAULT 'Gepubliceerd'::character varying
);


--
-- Name: COLUMN object_group.group_type; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN object_group.group_type IS 'Enumeratie: I=Individual, O=Observation, N=Normal';


--
-- Name: object_group_element; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE object_group_element (
    ojg_id integer NOT NULL,
    obj_id integer NOT NULL
);


--
-- Name: object_type; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE object_type (
    obj_id integer NOT NULL,
    code character varying(12) NOT NULL,
    omschrijving character varying(90) NOT NULL,
    d_begin timestamp without time zone,
    d_eind timestamp without time zone,
    last_changed_date timestamp without time zone,
    d_status character varying(50) DEFAULT 'Gepubliceerd'::character varying,
    id integer
);


--
-- Name: obs_ctx_role_type; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE obs_ctx_role_type (
    ocr_id integer NOT NULL,
    code character varying(50) NOT NULL,
    description text NOT NULL,
    d_begin timestamp without time zone,
    d_eind timestamp without time zone,
    last_changed_date timestamp without time zone,
    d_status character varying(50) DEFAULT 'Gepubliceerd'::character varying
);


--
-- Name: obs_process_meetapparaat; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE obs_process_meetapparaat (
    obp_id integer NOT NULL,
    mar_id integer NOT NULL,
    last_change_time timestamp without time zone NOT NULL
);


--
-- Name: observation; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE observation (
    obs_id integer NOT NULL,
    phenomenon_time_begin timestamp without time zone NOT NULL,
    phenomenon_time_end timestamp without time zone,
    result_time timestamp without time zone NOT NULL,
    valid_time_begin timestamp without time zone,
    valid_time_end timestamp without time zone,
    observed_property_type integer NOT NULL,
    quality_indicator_id integer,
    numeric_value_uom_id integer,
    value_processing_method_id integer,
    limit_symbol_id integer,
    description text,
    classified_result_id integer,
    remarks text,
    result_nature_id integer,
    start_depth double precision,
    end_depth double precision,
    obs_parm_parent_id integer,
    mno_id integer,
    last_change_time timestamp without time zone NOT NULL,
    numeric_value double precision,
    numeric_value_significance integer
    , mw_id integer	 -- toegevoegd als onofficiele verwijzing naar dump.meetwaarden tbv vulling bio_observations (kan evt na vulling verwijderd)
);


--
-- Name: observation_context; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE observation_context (
    obs_id_source integer NOT NULL,
    obs_id_target integer NOT NULL,
    role_id integer NOT NULL,
    last_change_time timestamp without time zone NOT NULL
);


--
-- Name: observation_process_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE observation_process_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: observation_process; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE observation_process (
    obp_id integer DEFAULT nextval('observation_process_seq'::regclass) NOT NULL,
    ore_id integer,
    last_change_time timestamp without time zone NOT NULL,
    wbpm_id integer,
    sensing_location_type_id integer,
    sample_pre_treatment_method_id integer,
    sample_destruction_method_id integer,
    certification_id integer,
    analytical_technique_id integer,
    accreditation_org_id integer,
    nen3610_id_namespace_id integer
);


--
-- Name: observed_feature; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE observed_feature (
    hdo_id integer NOT NULL,
    obs_id integer NOT NULL,
    last_change_time timestamp without time zone NOT NULL
);


--
-- Name: observed_property_type; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE observed_property_type (
    opt_id integer NOT NULL,
    observed_property_type_class character varying(50) NOT NULL,
    result_type character varying(50) NOT NULL,
    hoedanigheid_id integer,
    object_group_id integer,
    quantity_id integer,
    taxa_group_id integer,
    substance_group_id integer,
    indicator_id integer,
    classification_group_id integer,
    remarks text,
    d_begin timestamp without time zone,
    d_eind timestamp without time zone,
    last_changed_date timestamp without time zone,
    d_status character varying(50) DEFAULT 'Gepubliceerd'::character varying
);


--
-- Name: TABLE observed_property_type; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON TABLE observed_property_type IS 'Type van de waargenomen/waar te nemen eigenschap, bedoeld als abstractie/generalisatie van verschillende typen waarnemingen, zoals PhysicalObservation, SpeciesObservation, CalculatedAnalysis, etc';


--
-- Name: COLUMN observed_property_type.result_type; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN observed_property_type.result_type IS 'Type resultaat (enumeratie) bepaalt hoe het resultaat vastgelegd moet worden (measure, analysis, classified, description)';


--
-- Name: substance_group; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE substance_group (
    ssg_id integer NOT NULL,
    name character varying(90) NOT NULL,
    group_type character varying(1) NOT NULL,
    d_begin timestamp without time zone,
    d_eind timestamp without time zone,
    last_changed_date timestamp without time zone,
    d_status character varying(50) DEFAULT 'Gepubliceerd'::character varying
);


--
-- Name: substance_group_element; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE substance_group_element (
    ssge_id integer NOT NULL,
    chs_id integer NOT NULL
);


--
-- Name: taxa_group; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE taxa_group (
    txg_id integer NOT NULL,
    name character varying(90) NOT NULL,
    group_type character varying(1) NOT NULL,
    d_begin timestamp without time zone,
    d_eind timestamp without time zone,
    last_changed_date timestamp without time zone,
    d_status character varying(50) DEFAULT 'Gepubliceerd'::character varying
);


--
-- Name: taxa_group_element; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE taxa_group_element (
    txg_id integer NOT NULL,
    txn_id integer NOT NULL
);


--
-- Name: typering_type; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE typering_type (
    typ_id integer NOT NULL,
    code character varying(12) NOT NULL,
    omschrijving character varying(90) NOT NULL,
    d_begin timestamp without time zone,
    d_eind timestamp without time zone,
    last_changed_date timestamp without time zone,
    d_status character varying(50) DEFAULT 'Gepubliceerd'::character varying,
    id integer
);


--
-- Name: waarde_bepalings_methode_type; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE waarde_bepalings_methode_type (
    wbpm_id integer NOT NULL,
    code character varying(24) NOT NULL,
    omschrijving character varying(90) NOT NULL,
    d_begin timestamp without time zone,
    d_eind timestamp without time zone,
    last_changed_date timestamp without time zone,
    d_status character varying(50) DEFAULT 'Gepubliceerd'::character varying,
    id integer,
    codespace character varying(10)
);


--
-- Name: waarde_bewerkings_methode_type; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE waarde_bewerkings_methode_type (
    wbm_id integer NOT NULL,
    code character varying(12) NOT NULL,
    omschrijving character varying(90) NOT NULL,
    d_begin timestamp without time zone,
    d_eind timestamp without time zone,
    last_changed_date timestamp without time zone,
    d_status character varying(50) DEFAULT 'Gepubliceerd'::character varying,
    id integer
);


SET search_path = aquo_formaten, pg_catalog;

--
-- Name: vw_imwa_tijdwaarden_csv; Type: VIEW; Schema: aquo_formaten; Owner: -
--

CREATE VIEW vw_imwa_tijdwaarden_csv AS
 WITH bio AS (
         SELECT bio_1.obs_id,
            gedrag.code AS gedrag_code,
            geslacht.code AS geslacht_code,
            lengte.code AS lengte_code,
            levensstadium.code AS levensstadium_code,
            levensvorm.code AS levensvorm_code,
            verschijning.code AS verschijning_code
           FROM ((((((public.bio_observation bio_1
             LEFT JOIN public.hoedanigheid_type gedrag ON (((bio_1.gedrag_id = gedrag.hdh_id) AND (bio_1.gedrag_id IS NOT NULL))))
             LEFT JOIN public.hoedanigheid_type geslacht ON (((bio_1.geslacht_id = geslacht.hdh_id) AND (bio_1.geslacht_id IS NOT NULL))))
             LEFT JOIN public.hoedanigheid_type lengte ON (((bio_1.lengte_klasse_id = lengte.hdh_id) AND (bio_1.lengte_klasse_id IS NOT NULL))))
             LEFT JOIN public.hoedanigheid_type levensstadium ON (((bio_1.levensstadium_id = levensstadium.hdh_id) AND (bio_1.levensstadium_id IS NOT NULL))))
             LEFT JOIN public.hoedanigheid_type levensvorm ON (((bio_1.levensvorm_id = levensvorm.hdh_id) AND (bio_1.levensvorm_id IS NOT NULL))))
             LEFT JOIN public.hoedanigheid_type verschijning ON (((bio_1.verschijningsvorm_id = verschijning.hdh_id) AND (bio_1.verschijningsvorm_id IS NOT NULL))))
          WHERE ((bio_1.gedrag_id IS NOT NULL) AND (bio_1.geslacht_id IS NOT NULL) AND (bio_1.lengte_klasse_id IS NOT NULL) AND (bio_1.levensstadium_id IS NOT NULL) AND (bio_1.levensvorm_id IS NOT NULL) AND (bio_1.verschijningsvorm_id IS NOT NULL))
        ), txg AS (
         SELECT txg.txg_id,
            txt.omschrijving
           FROM ((public.taxa_group txg
             JOIN public.taxa_group_element tge ON ((tge.txg_id = txg.txg_id)))
             JOIN public.taxon_type txt ON ((txt.txn_id = tge.txn_id)))
          WHERE ((txg.group_type)::text = 'I'::text)
        ), chs AS (
         SELECT ssg.ssg_id,
            chs.code,
            chs.naam
           FROM ((public.substance_group ssg
             JOIN public.substance_group_element ssge ON ((ssge.ssge_id = ssg.ssg_id)))
             JOIN public.chemische_stof_type chs ON ((chs.chs_id = ssge.chs_id)))
          WHERE ((ssg.group_type)::text = 'I'::text)
        ), obj AS (
         SELECT ojg.ojg_id,
            obj.code,
            obj.omschrijving
           FROM ((public.object_group ojg
             JOIN public.object_group_element ojge ON ((ojg.ojg_id = ojge.ojg_id)))
             JOIN public.object_type obj ON ((obj.obj_id = ojge.obj_id)))
          WHERE ((ojg.group_type)::text = 'I'::text)
        ), opt AS (
         SELECT opt_1.opt_id,
            grh.code AS grh_code,
            grh.omschrijving AS grh_omschrijving,
            typ.code AS typ_code,
            typ.omschrijving AS typ_omschrijving,
            txg.omschrijving AS txg_omschrijving,
            chs.code AS chs_code,
            chs.naam AS chs_naam,
            obj.code AS obj_code,
            obj.omschrijving AS obj_omschrijving,
            hdh.code AS hdh_code,
            hdh.omschrijving AS hdh_omschrijving
           FROM ((((((public.observed_property_type opt_1
             LEFT JOIN public.grootheid_type grh ON (((grh.grh_id = opt_1.quantity_id) AND (opt_1.quantity_id IS NOT NULL))))
             LEFT JOIN public.typering_type typ ON (((typ.typ_id = opt_1.indicator_id) AND (opt_1.indicator_id IS NOT NULL))))
             LEFT JOIN public.hoedanigheid_type hdh ON (((hdh.hdh_id = opt_1.hoedanigheid_id) AND (opt_1.hoedanigheid_id IS NOT NULL))))
             LEFT JOIN txg ON (((txg.txg_id = opt_1.taxa_group_id) AND (opt_1.taxa_group_id IS NOT NULL))))
             LEFT JOIN chs ON (((chs.ssg_id = opt_1.substance_group_id) AND (opt_1.substance_group_id IS NOT NULL))))
             LEFT JOIN obj ON (((obj.ojg_id = opt_1.object_group_id) AND (opt_1.object_group_id IS NOT NULL))))
        ), obf AS (
         SELECT of.obs_id,
            (('NL'::text || (ns_hdo.code)::text) || (hdo.inspire_id_local_id)::text) AS local_id
           FROM ((public.observed_feature of
             JOIN public.hydro_object hdo ON ((of.hdo_id = hdo.hdo_id)))
             JOIN public.namespace_type ns_hdo ON ((hdo.inspire_id_namespace = ns_hdo.ns_id)))
        ), obp AS (
         SELECT obp_1.obp_id,
            wbpm.code AS wbpm_code,
            mar.code AS mar_code
           FROM (((public.observation_process obp_1
             LEFT JOIN public.waarde_bepalings_methode_type wbpm ON (((wbpm.wbpm_id = obp_1.wbpm_id) AND (obp_1.wbpm_id IS NOT NULL))))
             LEFT JOIN public.obs_process_meetapparaat opm ON (((opm.obp_id = obp_1.obp_id) AND (obp_1.obp_id IS NOT NULL))))
             LEFT JOIN domains.meetapparaat mar ON (((mar.mar_id = opm.mar_id) AND (opm.mar_id IS NOT NULL))))
          WHERE ((obp_1.wbpm_id IS NOT NULL) AND (obp_1.obp_id IS NOT NULL) AND (opm.mar_id IS NOT NULL))
        ), mno AS (
         SELECT mno_1.mno_id,
            mno_1.wkrv_id,
            nst.code AS namespace,
            mno_1.monitoring_object_type,
            ((('NL'::text || (nst.code)::text) || '_AQUO_COMPARTIMENT:'::text) || (compartiment_type.code)::text) AS cmp_code,
            ((('NL'::text || (nst.code)::text) || '_'::text) || (mno_1.inspire_id_local_id)::text) AS local_id
           FROM (((public.monitoring_object mno_1
             LEFT JOIN public.monitored_compartiment ON ((monitored_compartiment.mno_id = mno_1.mno_id)))
             LEFT JOIN public.compartiment_type ON ((monitored_compartiment.cptm_id = compartiment_type.cptm_id)))
             JOIN public.namespace_type nst ON ((nst.ns_id = mno_1.inspire_id_namespace_id)))
        )
 SELECT
        CASE
            WHEN (obf.obs_id IS NOT NULL) THEN obf.local_id
            ELSE
            CASE
                WHEN ((mno.monitoring_object_type)::text = 'Sample'::text) THEN NULL::text
                ELSE mno.cmp_code
            END
        END AS "Geoobject.Identificatie",
        CASE
            WHEN ((mno.monitoring_object_type)::text = 'Sample'::text) THEN mno.local_id
            ELSE NULL::text
        END AS "Monster.Identificatie",
        CASE
            WHEN ((mno.monitoring_object_type)::text = 'Sample'::text) THEN NULL::text
            ELSE mno.local_id
        END AS "Meetpunt.Identificatie",
    obs.obs_id AS "Identificatie",
    ('NL'::text || (mno.namespace)::text) AS "Namespace",
    mno.wkrv_id AS "Versie",
    opt.grh_code AS "Grootheid.code",
    opt.grh_omschrijving AS "Grootheid.omschrijving",
    opt.typ_code AS "Typering.code",
    opt.typ_omschrijving AS "Typering.omschrijving",
        CASE
            WHEN (opt.txg_omschrijving IS NOT NULL) THEN 'Biotaxon'::text
            WHEN (opt.chs_code IS NOT NULL) THEN 'ChemischeStof'::text
            WHEN (opt.obj_code IS NOT NULL) THEN 'Object'::text
            ELSE NULL::text
        END AS "Parameter.Groep",
        CASE
            WHEN (opt.txg_omschrijving IS NOT NULL) THEN (NULL::text)::character varying
            WHEN (opt.chs_code IS NOT NULL) THEN opt.chs_code
            WHEN (opt.obj_code IS NOT NULL) THEN opt.obj_code
            ELSE NULL::character varying
        END AS "Parameter.Code",
        CASE
            WHEN (opt.txg_omschrijving IS NOT NULL) THEN opt.txg_omschrijving
            WHEN (opt.chs_code IS NOT NULL) THEN opt.chs_naam
            WHEN (opt.obj_code IS NOT NULL) THEN opt.obj_omschrijving
            ELSE NULL::character varying
        END AS "Parameter.Omschrijving",
    eenh.code AS "Eenheid.code",
    eenh.omschrijving AS "Eenheid.omschrijving",
    opt.hdh_code AS "Hoedanigheid.code",
    opt.hdh_omschrijving AS "Hoedanigheid.omschrijving",
    wbm.code AS "Waardebewerkigngsmethode.code",
        CASE
            WHEN (wbm.code IS NULL) THEN NULL::text
            ELSE 'www.aquo.nl'::text
        END AS "Waardebewerkigngsmethode.codespace",
    obp.wbpm_code AS "Waardebepalingsmethode.code",
        CASE
            WHEN (obp.wbpm_code IS NULL) THEN NULL::text
            ELSE 'www.aquo.nl'::text
        END AS "Waardebepalingsmethode.codespace",
    to_char(obs.phenomenon_time_begin, 'YYYY-MM-DD'::text) AS "Begindatum",
    to_char(obs.phenomenon_time_begin, 'HH24:MM:SS'::text) AS "Begintijd",
    to_char(obs.phenomenon_time_end, 'YYYY-MM-DD'::text) AS "Einddatum",
    to_char(obs.phenomenon_time_end, 'HH24:MM:SS'::text) AS "Eindtijd",
    NULL::integer AS "Tijd_UTCoffset",
    to_char(obs.result_time, 'YYYY-MM-DD'::text) AS "Resultaatdatum",
    NULL::integer AS "Resultaat_UTCoffset",
    obs.limit_symbol_id AS "Limietsymbool",
    obs.numeric_value AS "Numeriekewaarde",
    obs.description AS "Alfanumeriekewaarde",
    kwaliteitsoordeel_type.code AS "Kwaliteitsoordeel.code",
    kwaliteitsoordeel_type.description AS "Kwaliteitsoordeel.omschrijving",
    obp.mar_code AS "Meetapparaat.code",
        CASE
            WHEN (obp.mar_code IS NULL) THEN NULL::text
            ELSE 'www.aquo.nl'::text
        END AS "Meetapparaat.codespace",
    bio.levensstadium_code AS "Levensstadium.code",
    bio.lengte_code AS "Lengteklasse.code",
    bio.geslacht_code AS "Geslachtcode",
    bio.verschijning_code AS "Verschijningsvorm.code",
    bio.levensvorm_code AS "Levensvorm.code",
    bio.gedrag_code AS "Gedrag.code",
        CASE
            WHEN (obx.obs_id_target IS NULL) THEN NULL::text
            ELSE ((('NL'::text || (mno.namespace)::text) || '_'::text) || (obx.obs_id_target)::text)
        END AS "GerelateerdObservatieobject",
    ocr.code AS "GerelateerdObservatieobjectRol.id",
    obs.remarks AS "Opmerking",
    obs.observed_property_type AS observedpropertytype_id,
    mno.mno_id AS monitoring_object_db_id,
    obs.last_change_time AS "Tijdstip.geladeninwkp"
   FROM ((((((((((public.observation obs
     LEFT JOIN public.eenheid_type eenh ON ((eenh.eenh_id = obs.numeric_value_uom_id)))
     JOIN mno ON ((mno.mno_id = obs.mno_id)))
     JOIN opt ON ((opt.opt_id = obs.observed_property_type)))
     LEFT JOIN public.kwaliteitsoordeel_type ON ((obs.quality_indicator_id = kwaliteitsoordeel_type.kwod_id)))
     LEFT JOIN obp ON ((obp.obp_id = obs.result_nature_id)))
     LEFT JOIN bio ON ((bio.obs_id = obs.obs_id)))
     LEFT JOIN public.observation_context obx ON ((obx.obs_id_source = obs.obs_id)))
     LEFT JOIN public.obs_ctx_role_type ocr ON ((ocr.ocr_id = obx.role_id)))
     LEFT JOIN public.waarde_bewerkings_methode_type wbm ON ((wbm.wbm_id = obs.value_processing_method_id)))
     LEFT JOIN obf ON ((obs.obs_id = obf.obs_id)));


--
-- Name: vw_umaquo_meetpunten_csv; Type: VIEW; Schema: aquo_formaten; Owner: -
--

CREATE VIEW vw_umaquo_meetpunten_csv AS
 SELECT monitoring_object.mno_id AS meetpunt_identificatie_db_id,
    monitoring_object.inspire_id_local_id AS "Meetpunt.identificatie",
    monitoring_object.name AS "Meetpunt.omschrijving",
    namespace_type.code AS "Waterbeheerder.code",
    namespace_type.descrption AS "Waterbeheerder.omschrijving",
    public.st_x(public.st_transform(monitoring_object.geometry, 28992)) AS "GeometriePunt.X_RD",
    public.st_y(public.st_transform(monitoring_object.geometry, 28992)) AS "GeometriePunt.Y_RD",
    monitoring_object.wkrv_id AS "Versie",
    monitoring_object.last_change_time
   FROM (((public.monitoring_object
     JOIN public.monitored_compartiment ON ((monitored_compartiment.mno_id = monitoring_object.mno_id)))
     JOIN public.namespace_type ON ((namespace_type.ns_id = monitoring_object.inspire_id_namespace_id)))
     JOIN public.monitoring_feature ON ((monitoring_feature.mnf_id = monitoring_object.mno_id)))
  WHERE (public.st_geometrytype(monitoring_object.geometry) = 'ST_Point'::text)
  ORDER BY namespace_type.code, monitoring_object.inspire_id_local_id;


SET search_path = public, pg_catalog;

--
-- Name: env_mon_facil_in_mngmt_reg_or_restr_zone; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE env_mon_facil_in_mngmt_reg_or_restr_zone (
    emf_id integer NOT NULL,
    mrz_id integer NOT NULL,
    last_change_time timestamp without time zone NOT NULL
);


--
-- Name: environmental_monitoring_facility; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE environmental_monitoring_facility (
    emf_id integer NOT NULL,
    measurement_regime_id integer NOT NULL,
    representative_point geometry(Point,28992),
    is_mobile boolean DEFAULT false,
    result_acquisition_source_id integer,
    speciallised_emf_type_id integer,
    ligt_in_mrz_id integer,
    last_change_time timestamp without time zone NOT NULL
);


--
-- Name: environmental_monitoring_network; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE environmental_monitoring_network (
    emn_id integer NOT NULL,
    organization_level_id integer NOT NULL,
    last_change_time timestamp without time zone NOT NULL
);


--
-- Name: legislation_level_type; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE legislation_level_type (
    lgl_id integer NOT NULL,
    code character varying(12) NOT NULL,
    description character varying(90) NOT NULL,
    d_begin timestamp without time zone,
    d_eind timestamp without time zone,
    last_changed_date timestamp without time zone,
    d_status character varying(50) DEFAULT 'Gepubliceerd'::character varying
);


--
-- Name: measurement_regime_type; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE measurement_regime_type (
    mmr_id integer NOT NULL,
    code character varying(12) NOT NULL,
    description character varying(50),
    d_begin timestamp without time zone,
    d_eind timestamp without time zone,
    last_changed_date timestamp without time zone,
    d_status character varying(50) DEFAULT 'Gepubliceerd'::character varying
);


--
-- Name: monitoring_station; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE monitoring_station (
    mts_id integer NOT NULL,
    monitoring_station_type character varying(50) NOT NULL,
    number_of_points_in_subsite integer,
    subsite_type_id integer,
    last_change_time timestamp without time zone NOT NULL
);


--
-- Name: network_facility; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE network_facility (
    emf_id integer NOT NULL,
    emn_id integer NOT NULL,
    linking_time_begin timestamp without time zone NOT NULL,
    linking_time_end timestamp without time zone,
    last_change_time timestamp without time zone NOT NULL
);


--
-- Name: result_acquisition_source_type; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE result_acquisition_source_type (
    ras_id integer NOT NULL,
    code character varying(12) NOT NULL,
    description character varying(90),
    d_begin timestamp without time zone,
    d_eind timestamp without time zone,
    last_changed_date timestamp without time zone,
    d_status character varying(50) DEFAULT 'Gepubliceerd'::character varying
);


--
-- Name: specialised_emf_type; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE specialised_emf_type (
    semf_id integer NOT NULL,
    code character varying(12) NOT NULL,
    description character varying(90),
    d_begin timestamp without time zone,
    d_eind timestamp without time zone,
    last_changed_date timestamp without time zone,
    d_status character varying(50) DEFAULT 'Gepubliceerd'::character varying
);


--
-- Name: TABLE specialised_emf_type; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON TABLE specialised_emf_type IS 'NB: Heeft andere types dan Aquo.TypeMeting';


--
-- Name: subsite_type; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE subsite_type (
    sst_id integer NOT NULL,
    code character varying(12) NOT NULL,
    description character varying(90) NOT NULL,
    d_begin timestamp without time zone,
    d_eind timestamp without time zone,
    last_changed_date timestamp without time zone,
    d_status character varying(50) DEFAULT 'Gepubliceerd'::character varying
);


--
-- Name: wkr_version; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE wkr_version (
    wkrv_id integer NOT NULL,
    begin_lifespan_version timestamp without time zone NOT NULL,
    end_lifespan_version timestamp without time zone,
    last_change_time timestamp without time zone NOT NULL
);


--
-- Name: vw_meetnetten; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_meetnetten AS
 SELECT monitoring_object.mno_id AS db_id,
    monitoring_object.inspire_id_local_id AS identificatie,
    monitoring_object.wkrv_id AS wkr_versie,
    wkr_version.begin_lifespan_version AS wkr_beginversie,
    wkr_version.end_lifespan_version AS wkr_eindversie,
    monitoring_object.name AS omschrijving,
    monitoring_object.additional_description AS "Toelichting:"
   FROM (wkr_version
     RIGHT JOIN ((legislation_level_type
     JOIN environmental_monitoring_network ON ((legislation_level_type.lgl_id = environmental_monitoring_network.organization_level_id)))
     LEFT JOIN (monitoring_object
     JOIN monitoring_feature ON ((monitoring_object.mno_id = monitoring_feature.mnf_id))) ON ((environmental_monitoring_network.emn_id = monitoring_feature.mnf_id))) ON ((wkr_version.wkrv_id = monitoring_object.wkrv_id)))
  ORDER BY monitoring_object.inspire_id_local_id, monitoring_object.wkrv_id DESC;


--
-- Name: vw_meetpunten_g; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_meetpunten_g AS
 SELECT monitoring_object.mno_id AS db_id,
    monitoring_object.inspire_id_local_id AS identificatie,
    namespace_type.code AS waterbeheerder_code,
    namespace_type.descrption AS waterbeheerder_omschrijving,
    monitoring_object.wkrv_id AS wkr_versie,
    wkr_version.begin_lifespan_version AS wkr_beginversie,
    wkr_version.end_lifespan_version AS wkr_eindversie,
    monitoring_object.name AS omschrijving,
    monitoring_object.additional_description AS toelichting,
    monitoring_object.geometry,
    environmental_monitoring_facility.representative_point AS geometriepunt,
    monitoring_feature.pos_accuracy_horizontal_value AS geometrieprecisie_waarde,
    eenheid_type.code AS eenheid_code,
    eenheid_type.omschrijving AS eenheid_omschrijving,
    measurement_regime_type.code AS meetregime_code,
    measurement_regime_type.description AS meetregime_omschrijving,
    environmental_monitoring_facility.is_mobile AS ismobielelokatie,
    result_acquisition_source_type.code AS inwinbron_code,
    result_acquisition_source_type.description AS inwinbron_omschrijving,
    specialised_emf_type.code AS specifiektype_code,
    specialised_emf_type.description AS specifiektype_omschrijving,
    subsite_type.code AS krwlocatietype_code,
    subsite_type.description AS krwlocatietype_omschrijving,
    monitoring_station.number_of_points_in_subsite AS aantalpunteninkrwlokatie,
    env_mon_facil_in_mngmt_reg_or_restr_zone.mrz_id AS ligtinwaterlichaam_id,
    namespace_type_1.code AS ligtinwaterlichaam_code,
    hydro_object.inspire_id_local_id AS ligtinwaterlichaam_waterbeheerder
   FROM ((((((wkr_version
     RIGHT JOIN (namespace_type
     RIGHT JOIN (monitoring_object
     RIGHT JOIN (((hydro_object
     JOIN env_mon_facil_in_mngmt_reg_or_restr_zone ON ((hydro_object.hdo_id = env_mon_facil_in_mngmt_reg_or_restr_zone.mrz_id)))
     JOIN namespace_type namespace_type_1 ON ((hydro_object.inspire_id_namespace = namespace_type_1.ns_id)))
     RIGHT JOIN (environmental_monitoring_facility
     JOIN monitoring_feature ON ((environmental_monitoring_facility.emf_id = monitoring_feature.mnf_id))) ON ((env_mon_facil_in_mngmt_reg_or_restr_zone.emf_id = environmental_monitoring_facility.emf_id))) ON ((monitoring_object.mno_id = monitoring_feature.mnf_id))) ON ((namespace_type.ns_id = monitoring_object.inspire_id_namespace_id))) ON ((wkr_version.wkrv_id = monitoring_object.wkrv_id)))
     LEFT JOIN eenheid_type ON ((monitoring_feature.pos_accuracy_horizontal_uom_id = eenheid_type.eenh_id)))
     LEFT JOIN specialised_emf_type ON ((environmental_monitoring_facility.speciallised_emf_type_id = specialised_emf_type.semf_id)))
     LEFT JOIN result_acquisition_source_type ON ((environmental_monitoring_facility.result_acquisition_source_id = result_acquisition_source_type.ras_id)))
     LEFT JOIN measurement_regime_type ON ((environmental_monitoring_facility.measurement_regime_id = measurement_regime_type.mmr_id)))
     LEFT JOIN (subsite_type
     RIGHT JOIN monitoring_station ON ((subsite_type.sst_id = monitoring_station.subsite_type_id))) ON ((environmental_monitoring_facility.emf_id = monitoring_station.mts_id)))
  ORDER BY monitoring_object.inspire_id_local_id, monitoring_object.wkrv_id DESC;


--
-- Name: vw_meetnet_meetpunt_g; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_meetnet_meetpunt_g AS
 SELECT ((vw_meetnetten.db_id)::text || (vw_meetpunten_g.db_id)::text) AS uniquekey,
    vw_meetnetten.db_id AS "Meetnet_DB_ID",
    vw_meetnetten.identificatie AS "Meetnet_Identificatie",
    vw_meetnetten.omschrijving AS "Meetnet_Omschrijving",
    vw_meetnetten."Toelichting:" AS "Meetnet_Toelichting",
    vw_meetpunten_g.db_id AS "Meetpunt_DB_ID",
    vw_meetpunten_g.identificatie AS "Meetpunt_Identificatie",
    vw_meetpunten_g.waterbeheerder_code AS "Meetpunt_Waterbeheerdercode",
    vw_meetpunten_g.waterbeheerder_omschrijving AS "Meetpunt_Omschrijving",
    vw_meetpunten_g.wkr_versie,
    vw_meetpunten_g.omschrijving,
    vw_meetpunten_g.toelichting,
    vw_meetpunten_g.geometry,
    vw_meetpunten_g.geometriepunt,
    vw_meetpunten_g.geometrieprecisie_waarde,
    vw_meetpunten_g.eenheid_code,
    vw_meetpunten_g.eenheid_omschrijving,
    vw_meetpunten_g.ismobielelokatie,
    vw_meetpunten_g.meetregime_omschrijving,
    vw_meetpunten_g.meetregime_code,
    vw_meetpunten_g.inwinbron_code,
    vw_meetpunten_g.inwinbron_omschrijving,
    vw_meetpunten_g.specifiektype_code,
    vw_meetpunten_g.specifiektype_omschrijving,
    vw_meetpunten_g.krwlocatietype_code,
    vw_meetpunten_g.krwlocatietype_omschrijving,
    vw_meetpunten_g.aantalpunteninkrwlokatie,
    vw_meetpunten_g.ligtinwaterlichaam_id,
    vw_meetpunten_g.ligtinwaterlichaam_code,
    vw_meetpunten_g.ligtinwaterlichaam_waterbeheerder
   FROM ((network_facility
     LEFT JOIN vw_meetnetten ON ((vw_meetnetten.db_id = network_facility.emn_id)))
     LEFT JOIN vw_meetpunten_g ON ((vw_meetpunten_g.db_id = network_facility.emf_id)))
  ORDER BY vw_meetnetten.identificatie;


SET search_path = aquo_formaten, pg_catalog;

--
-- Name: vw_meetpunt_meetnet_csv; Type: VIEW; Schema: aquo_formaten; Owner: -
--

CREATE VIEW vw_meetpunt_meetnet_csv AS
 SELECT DISTINCT ON (mpc."Waterbeheerder.code", mpc."Meetpunt.identificatie") mpc.meetpunt_identificatie_db_id,
    mpc."Meetpunt.identificatie",
    mpc."Meetpunt.omschrijving",
    mpc."GeometriePunt.X_RD",
    mpc."GeometriePunt.Y_RD",
    mpc."Waterbeheerder.code",
    mpc."Waterbeheerder.omschrijving",
    mmp."Meetnet_Identificatie" AS "Meetnet.identificatie",
    mmp."Meetnet_Omschrijving" AS "Meetnet.omschrijving",
    mmp.wkr_versie AS "Versie"
   FROM (vw_umaquo_meetpunten_csv mpc
     JOIN public.vw_meetnet_meetpunt_g mmp ON (((mmp."Meetpunt_Identificatie")::text = (mpc."Meetpunt.identificatie")::text)))
  ORDER BY mpc."Waterbeheerder.code", mpc."Meetpunt.identificatie", mpc.meetpunt_identificatie_db_id DESC;


SET search_path = public, pg_catalog;

--
-- Name: bepaling_grens_type; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE bepaling_grens_type (
    bpg_id integer NOT NULL,
    code character varying(50) NOT NULL,
    omschrijving text NOT NULL,
    d_begin timestamp without time zone,
    d_eind timestamp without time zone,
    last_changed_date timestamp without time zone,
    d_status character varying(50) DEFAULT 'Gepubliceerd'::character varying
);


--
-- Name: classification_group_type; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE classification_group_type (
    clsg_id integer NOT NULL,
    code character varying(50) NOT NULL,
    description text,
    d_begin timestamp without time zone,
    d_eind timestamp without time zone,
    last_changed_date timestamp without time zone,
    d_status character varying(50) DEFAULT 'Gepubliceerd'::character varying
);


--
-- Name: competent_authority; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE competent_authority (
    ore_id integer NOT NULL,
    namespace_id integer NOT NULL,
    legal_status text NOT NULL,
    legal_status_reference text NOT NULL,
    legal_status_summary text,
    url character varying(255) NOT NULL,
    last_change_time timestamp without time zone NOT NULL,
    name_uk character varying(255)
);


--
-- Name: competentauthority_namespacetype; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE competentauthority_namespacetype (
    ca_ns_id integer NOT NULL,
    ns_id integer NOT NULL,
    ore_id integer NOT NULL,
    last_change_time timestamp without time zone NOT NULL
);


--
-- Name: eu_monitoring_goal_type; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE eu_monitoring_goal_type (
    eumg_id integer NOT NULL,
    code character varying(50) NOT NULL,
    description character varying(50),
    d_begin timestamp without time zone,
    d_eind timestamp without time zone,
    last_changed_date timestamp without time zone,
    d_status character varying(50) DEFAULT 'Gepubliceerd'::character varying
);


--
-- Name: hdo_names; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE hdo_names (
    hdo_id integer NOT NULL,
    name character varying(90) NOT NULL,
    language character varying(12) DEFAULT 'dut'::text NOT NULL,
    last_change_time timestamp without time zone NOT NULL
);


--
-- Name: management_regulation_or_restriction_zone; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE management_regulation_or_restriction_zone (
    mrz_id integer NOT NULL,
    mrz_type character varying(50) NOT NULL,
    geometry geometry(Geometry,28992),
    environmental_domain_id integer NOT NULL,
    mrz_collection_id integer NOT NULL,
    specialised_zone_type_id integer NOT NULL,
    begin_designation timestamp without time zone NOT NULL,
    end_designation timestamp without time zone,
    indeterminate_end_position character varying(50),
    related_mrz_id integer,
    last_change_time timestamp without time zone NOT NULL,
    geometry_etrs89 geometry(Geometry,4258)
);


--
-- Name: COLUMN management_regulation_or_restriction_zone.mrz_type; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN management_regulation_or_restriction_zone.mrz_type IS 'mrz_type bepaalt het subtype: SurfaceWaterBody, GroundWaterBody, ProtectedArea, etc';


--
-- Name: organisation_category_type; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE organisation_category_type (
    ocat_id integer NOT NULL,
    code character varying(12) NOT NULL,
    omschrijving character varying(90) NOT NULL,
    d_begin timestamp without time zone,
    d_eind timestamp without time zone,
    last_changed_date timestamp without time zone,
    d_status character varying(50) DEFAULT 'Gepubliceerd'::character varying,
    id integer
);


--
-- Name: organisatorische_eenheid; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE organisatorische_eenheid (
    ore_id integer NOT NULL,
    organisatie_identificatie character varying(12) NOT NULL,
    datum_ontstaan date NOT NULL,
    datum_opheffing date,
    naam character varying(90) NOT NULL,
    naam_verkort character varying(50),
    omschrijving text,
    toelichting text,
    email_adres character varying(255),
    faxnummer character varying(13),
    telefoonnummer character varying(13),
    organisation_category_id integer NOT NULL,
    last_change_time timestamp without time zone NOT NULL,
    adres character varying(50),
    postcode character varying(7),
    plaatsnaam character varying(50)
);


--
-- Name: river_basin_disrict; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE river_basin_disrict (
    rbd_id integer NOT NULL,
    area_value double precision NOT NULL,
    area_uom_id integer NOT NULL,
    international_rbd integer,
    part_of_district integer,
    last_change_time timestamp without time zone NOT NULL,
    area_ex_cw_value double precision
);


--
-- Name: COLUMN river_basin_disrict.part_of_district; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN river_basin_disrict.part_of_district IS 'pointer from subdistrict to district';


--
-- Name: sw_testing_conclusion; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE sw_testing_conclusion (
    stcc_id integer NOT NULL,
    sys_id integer NOT NULL,
    last_change_time timestamp without time zone NOT NULL,
    eumg_id integer DEFAULT 3 NOT NULL
);


--
-- Name: swb_yearly_status; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE swb_yearly_status (
    sys_id integer NOT NULL,
    swb_id integer NOT NULL,
    year_of_status integer NOT NULL,
    comment_on_chemical_status text,
    comment_on_ecological_status text,
    motivation_4no_chemical_status text,
    motivation_4no_ecological_status text,
    last_change_time timestamp without time zone NOT NULL,
    additional_purification boolean DEFAULT false NOT NULL,
    exceeds_drinkingwater boolean DEFAULT false NOT NULL
);


--
-- Name: vw_competent_authority; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_competent_authority AS
 SELECT organisatorische_eenheid.ore_id AS "DB_ID",
    organisatorische_eenheid.organisatie_identificatie AS "Identificatie",
    organisatorische_eenheid.naam AS "Omschrijving",
    organisatorische_eenheid.naam_verkort AS "Omschrijving_verkort",
    organisatorische_eenheid.omschrijving AS "Toelichting",
    organisatorische_eenheid.toelichting AS "Opmerking",
    organisatorische_eenheid.adres AS "Adres",
    organisatorische_eenheid.postcode AS "Postcode",
    organisatorische_eenheid.plaatsnaam AS "Plaats",
    organisatorische_eenheid.telefoonnummer AS "Telefoon",
    organisatorische_eenheid.faxnummer AS "Fax",
    organisatorische_eenheid.email_adres AS "Email",
    competent_authority.url AS "Website",
    organisatorische_eenheid.datum_ontstaan AS "Ontstaan_begindatum",
    organisatorische_eenheid.datum_opheffing AS "Ontstaan_einddatum",
    competent_authority.legal_status AS "Wettelijke_status",
    competent_authority.legal_status_summary AS "Wettelijke_status_samenvatting",
    competent_authority.legal_status_reference AS "Wettelijke_status_referentie",
    organisation_category_type.code AS "Organisatietype_Code",
    organisation_category_type.omschrijving AS "Organisatietype_Omschrijving",
    competent_authority.namespace_id AS waterbeheerder_db_id
   FROM competent_authority,
    organisatorische_eenheid,
    organisation_category_type
  WHERE ((organisatorische_eenheid.ore_id = competent_authority.ore_id) AND (organisation_category_type.ocat_id = organisatorische_eenheid.organisation_category_id));


--
-- Name: vw_sg_en_dsg_districten; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_sg_en_dsg_districten AS
 SELECT hydro_object.hdo_id AS "DB_ID",
    hydro_object.inspire_id_local_id AS "Identificatie",
    hdo_names.name AS omschrijving,
    river_basin_disrict.area_value AS "Oppervlakte_NumeriekeWaarde",
    eenheid_type.code AS "Oppervlakte_Eenheid_Code",
    eenheid_type.omschrijving AS "Oppervlakte_Eenheid_Omschrijving",
    wkr_version.wkrv_id AS wkr_versie,
    wkr_version.begin_lifespan_version AS wkr_beginversie,
    wkr_version.end_lifespan_version AS wkr_eindversie,
    hydro_object.related_hdo_id AS "Gerelateerd_HydroObject"
   FROM (((((hydro_object
     LEFT JOIN hdo_names ON ((hdo_names.hdo_id = hydro_object.hdo_id)))
     JOIN management_regulation_or_restriction_zone ON ((hydro_object.hdo_id = management_regulation_or_restriction_zone.mrz_id)))
     JOIN river_basin_disrict ON ((hydro_object.hdo_id = river_basin_disrict.rbd_id)))
     JOIN eenheid_type ON ((eenheid_type.eenh_id = river_basin_disrict.area_uom_id)))
     JOIN wkr_version ON ((wkr_version.wkrv_id = hydro_object.wkrv_id)));


--
-- Name: vw_waargenomen_eigenschap; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_waargenomen_eigenschap AS
 SELECT observed_property_type.opt_id AS "DB_ID",
    typering_type.code AS "Tpering_Code",
    typering_type.omschrijving AS "Typering_Omschrijving",
    grootheid_type.code AS "Grootheid_Code",
    grootheid_type.omschrijving AS "Grootheid_Omschrijving",
    chemische_stof_type.code AS "ChemischeStof_code",
    chemische_stof_type.naam AS "ChemischeStof_Omschrijving",
    chemische_stof_type.cas_nr AS "ChemischeStof_CASnr",
    classification_group_type.code AS "ClassificatieType_Code",
    classification_group_type.description AS "ClassificatieType_Omschrijving",
    object_type.omschrijving AS "Object_Omschrijving",
    object_type.code AS "Object_Code",
    taxon_type.code AS "Taxon_Naam",
    taxon_type.auteur AS "Taxon_Auteur",
    hoedanigheid_type.code AS "Hoedanigheid_Code",
    hoedanigheid_type.omschrijving AS "Hoedanigheid_Omschrijving",
    observed_property_type.observed_property_type_class AS "Parameter_Type",
    observed_property_type.result_type AS "Parameter_Resultaat",
    observed_property_type.remarks AS "Opmerkingen"
   FROM (((((((observed_property_type
     LEFT JOIN (object_type
     JOIN object_group_element ON ((object_type.obj_id = object_group_element.obj_id))) ON ((object_group_element.ojg_id = observed_property_type.object_group_id)))
     LEFT JOIN hoedanigheid_type ON ((hoedanigheid_type.hdh_id = observed_property_type.hoedanigheid_id)))
     LEFT JOIN grootheid_type ON ((grootheid_type.grh_id = observed_property_type.quantity_id)))
     LEFT JOIN (taxon_type
     JOIN taxa_group_element ON ((taxon_type.txn_id = taxa_group_element.txn_id))) ON ((taxa_group_element.txg_id = observed_property_type.taxa_group_id)))
     LEFT JOIN (chemische_stof_type
     JOIN substance_group_element ON ((chemische_stof_type.chs_id = substance_group_element.chs_id))) ON ((substance_group_element.ssge_id = observed_property_type.substance_group_id)))
     LEFT JOIN typering_type ON ((typering_type.typ_id = observed_property_type.indicator_id)))
     LEFT JOIN classification_group_type ON ((classification_group_type.clsg_id = observed_property_type.classification_group_id)))
  ORDER BY typering_type.code, grootheid_type.code, chemische_stof_type.code, object_type.code, taxon_type.code, hoedanigheid_type.code;


--
-- Name: vw_toetsresultaat_owm; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_toetsresultaat_owm AS
 SELECT observation.obs_id AS "DB_ID",
    hydro_object.hdo_id AS "Waterlichaam_DB_ID",
    hydro_object.inspire_id_local_id AS "Waterlichaam_Identificatie",
    hydro_object.wkrv_id AS "Waterlichaam_Versie",
    swb_yearly_status.year_of_status AS "Rapportagejaar",
    vw_waargenomen_eigenschap."DB_ID" AS "Waargenomen_Eigenschap_DB_ID",
    vw_waargenomen_eigenschap."Tpering_Code",
    vw_waargenomen_eigenschap."Typering_Omschrijving",
    vw_waargenomen_eigenschap."Grootheid_Code",
    vw_waargenomen_eigenschap."Grootheid_Omschrijving",
    vw_waargenomen_eigenschap."ChemischeStof_code",
    vw_waargenomen_eigenschap."ChemischeStof_Omschrijving",
    vw_waargenomen_eigenschap."ChemischeStof_CASnr",
    waarde_bewerkings_methode_type.code AS "Waardebewerkingsmethode_Code",
    waarde_bewerkings_methode_type.omschrijving AS "Waardebewerkingsmethode_Omschrijving",
    observation.result_time AS "Begintijd_Toetsresultaat",
    observation.phenomenon_time_end AS "Eindtijd_Toetsreeks",
    observation.phenomenon_time_begin AS "Begintijd_Toetsreeks",
    observation.numeric_value AS "Numerieke_waarde",
    observation.numeric_value_significance AS "Numerieke_waarde_Significantie",
    bepaling_grens_type.omschrijving AS "Bepalingsgrens",
    eenheid_type.code AS "Eenheid_Code",
    eenheid_type.omschrijving AS "Eenheid_Omschrijving",
    vw_waargenomen_eigenschap."Hoedanigheid_Code",
    vw_waargenomen_eigenschap."Hoedanigheid_Omschrijving",
    kwaliteitsoordeel_type.code AS "KwaliteitsOordeel_Code",
    kwaliteitsoordeel_type.description AS "KwaliteitsOordeel_Omschrijving",
    eu_monitoring_goal_type.eumg_id AS "Oordeel_Type_DB_ID",
    eu_monitoring_goal_type.code AS "Oordeel_Type_Code",
    eu_monitoring_goal_type.description AS "Oordeel_Type_Omschrijving",
    waarde_bepalings_methode_type.code AS "Waardebepalingsmethode_Code",
    waarde_bepalings_methode_type.omschrijving AS "Waardebepalingsmethode_Omschrijving"
   FROM (((((((((((observation
     LEFT JOIN vw_waargenomen_eigenschap ON ((vw_waargenomen_eigenschap."DB_ID" = observation.observed_property_type)))
     LEFT JOIN waarde_bewerkings_methode_type ON ((waarde_bewerkings_methode_type.wbm_id = observation.value_processing_method_id)))
     LEFT JOIN eenheid_type ON ((eenheid_type.eenh_id = observation.numeric_value_uom_id)))
     LEFT JOIN bepaling_grens_type ON ((bepaling_grens_type.bpg_id = observation.limit_symbol_id)))
     LEFT JOIN kwaliteitsoordeel_type ON ((kwaliteitsoordeel_type.kwod_id = observation.quality_indicator_id)))
     LEFT JOIN observation_process ON ((observation_process.obp_id = observation.result_nature_id)))
     LEFT JOIN waarde_bepalings_methode_type ON ((waarde_bepalings_methode_type.wbpm_id = observation_process.wbpm_id)))
     LEFT JOIN sw_testing_conclusion ON ((sw_testing_conclusion.stcc_id = observation.obs_id)))
     LEFT JOIN swb_yearly_status ON ((swb_yearly_status.sys_id = sw_testing_conclusion.sys_id)))
     LEFT JOIN hydro_object ON ((hydro_object.hdo_id = swb_yearly_status.swb_id)))
     LEFT JOIN eu_monitoring_goal_type ON ((eu_monitoring_goal_type.eumg_id = sw_testing_conclusion.eumg_id)))
  WHERE (swb_yearly_status.year_of_status IS NOT NULL)
  ORDER BY hydro_object.hdo_id, vw_waargenomen_eigenschap."Tpering_Code", vw_waargenomen_eigenschap."Grootheid_Code", vw_waargenomen_eigenschap."ChemischeStof_code", swb_yearly_status.year_of_status;


--
-- Name: water_body; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE water_body (
    wbd_id integer NOT NULL,
    level_of_detail integer DEFAULT 10000 NOT NULL,
    water_body_subtype character varying(50) NOT NULL,
    rbd_id integer NOT NULL,
    last_change_time timestamp without time zone NOT NULL,
    description text,
    is_article_7 boolean DEFAULT false NOT NULL,
    measure_comment character varying(2000),
    excemption_remarks text,
    doelen_toestand_remarks text
);


--
-- Name: COLUMN water_body.excemption_remarks; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN water_body.excemption_remarks IS 'Toelichting uitzonderingsbepalingen';


--
-- Name: COLUMN water_body.doelen_toestand_remarks; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN water_body.doelen_toestand_remarks IS 'Toelichting doelen toestand';


--
-- Name: vw_waterlichamen; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_waterlichamen AS
 SELECT hydro_object.hdo_id AS db_id,
    hydro_object.inspire_id_local_id AS identificatie,
    hydro_object.inspire_id_namespace AS waterbeheerder_code,
    vw_competent_authority."Omschrijving" AS waterbeheerder_naam,
    hdo_names.name AS omschrijving,
    water_body.level_of_detail AS schaal,
    vw_sg_en_dsg_districten."Identificatie" AS stroomgebieddistrict,
    water_body.water_body_subtype AS waterlichaam_type,
    water_body.description AS karakterschets,
    water_body.is_article_7 AS drinkwateronttrekking_jn,
    hydro_object.wkrv_id AS versie,
    wkr_version.begin_lifespan_version AS versie_begintijd,
    wkr_version.end_lifespan_version AS versie_eindtijd,
    hydro_object.related_hdo_id AS "Gerelateerd_HydroObject"
   FROM (((((((hydro_object
     LEFT JOIN hdo_names ON ((hdo_names.hdo_id = hydro_object.hdo_id)))
     JOIN wkr_version ON ((wkr_version.wkrv_id = hydro_object.wkrv_id)))
     LEFT JOIN management_regulation_or_restriction_zone ON ((management_regulation_or_restriction_zone.mrz_id = hydro_object.hdo_id)))
     LEFT JOIN competentauthority_namespacetype ON ((competentauthority_namespacetype.ns_id = hydro_object.inspire_id_namespace)))
     LEFT JOIN vw_competent_authority ON ((vw_competent_authority."DB_ID" = competentauthority_namespacetype.ore_id)))
     JOIN water_body ON ((water_body.wbd_id = hydro_object.hdo_id)))
     LEFT JOIN vw_sg_en_dsg_districten ON ((vw_sg_en_dsg_districten."DB_ID" = water_body.rbd_id)));


SET search_path = aquo_formaten, pg_catalog;

--
-- Name: vw_toetsresultaat_csv; Type: VIEW; Schema: aquo_formaten; Owner: -
--

CREATE VIEW vw_toetsresultaat_csv AS
 SELECT vto."Waterlichaam_Identificatie" AS "Waterlichaam.identificatie",
    vwl.omschrijving AS "Waterlichaam.omschrijving",
    vto."Rapportagejaar",
    vto."Tpering_Code" AS "Typering.code",
    vto."Typering_Omschrijving" AS "Typering.omschrijving",
    vto."Grootheid_Code" AS "Grootheid.code",
    vto."Grootheid_Omschrijving" AS "Grootheid.omschrijving",
    vto."Hoedanigheid_Code" AS "Hoedanigheid.code",
    vto."Hoedanigheid_Omschrijving" AS "Hoedanigheid.omschrijving",
    vto."Eenheid_Code" AS "Eenheid.code",
    vto."Eenheid_Omschrijving" AS "Eenheid.omschrijving",
    vto."Waardebewerkingsmethode_Code" AS "Waardebewerkingsmethode.code",
    vto."Waardebewerkingsmethode_Omschrijving" AS "Waardebewerkingsmethode.omschrijving",
    vto."Waardebepalingsmethode_Code" AS "Waardebepalingsmethode.code",
    vto."Waardebepalingsmethode_Omschrijving" AS "Waardebepalingsmethode.omschrijving",
    vto."Begintijd_Toetsresultaat" AS "Begintijd.toetsresultaat",
    vto."Begintijd_Toetsreeks" AS "Begintijd.toetsreeks",
    vto."Eindtijd_Toetsreeks" AS "Eindtijd.toetsreeks",
    vto."Numerieke_waarde" AS "Numeriekewaarde",
    vto."Numerieke_waarde_Significantie" AS "Numeriekewaarde.significantie",
    vto."KwaliteitsOordeel_Code" AS "KwaliteitsOordeel.code",
    vto."KwaliteitsOordeel_Omschrijving" AS "KwaliteitsOordeel.omschrijving",
    vto."Oordeel_Type_Code" AS "Oordeeltype.code",
    vwl.waterbeheerder_code AS "Waterbeheerder.code",
    vwl.waterbeheerder_naam AS "Waterbeheerder.omschrijving",
    vwl.stroomgebieddistrict AS "Stroomgebieddistrict.code",
        CASE
            WHEN (vwl.drinkwateronttrekking_jn = true) THEN 'Ja'::text
            ELSE 'nee'::text
        END AS "Drinkwateronttrekking",
    vto."Waterlichaam_Versie" AS wkrv_id
   FROM (public.vw_toetsresultaat_owm vto
     JOIN public.vw_waterlichamen vwl ON (((vwl.identificatie)::text = (vto."Waterlichaam_Identificatie")::text)))
  WHERE (vto."Waterlichaam_Versie" = vwl.versie)
  ORDER BY vwl.waterbeheerder_code, vto."Waterlichaam_Identificatie", vto."Oordeel_Type_Code" DESC;


--
-- Name: vw_umaquo_meetpunten_shp; Type: VIEW; Schema: aquo_formaten; Owner: -
--

CREATE VIEW vw_umaquo_meetpunten_shp AS
 SELECT monitoring_object.inspire_id_local_id AS "MPNIDENT",
    ('NL'::text || (namespace_type.code)::text) AS "WBHCODE",
    monitoring_object.wkrv_id AS "VERSIE",
    monitoring_object.name AS "MPNOMSCH",
    monitoring_object.geometry,
    to_char(monitoring_object.begin_lifespan_version, 'YYYY-MM-DD'::text) AS "FL_BEGIN",
    to_char(monitoring_object.end_lifespan_version, 'YYYY-MM-DD'::text) AS "FL_EIND",
    monitoring_object.mno_id AS meetpunt_identificatie_db_id,
    monitoring_object.last_change_time
   FROM ((((((((public.monitoring_object
     LEFT JOIN public.namespace_type ON ((namespace_type.ns_id = monitoring_object.inspire_id_namespace_id)))
     LEFT JOIN public.monitoring_feature ON ((monitoring_feature.mnf_id = monitoring_object.mno_id)))
     LEFT JOIN public.monitoring_feature_positioning_method mfpm ON ((monitoring_feature.mnf_id = mfpm.mnf_id)))
     LEFT JOIN public.plaatsbepalingsapparaat_type pba ON ((pba.pba_id = mfpm.pba_id)))
     LEFT JOIN public.related_sampling_feature rsf ON ((rsf.mnf_id_source = monitoring_object.mno_id)))
     LEFT JOIN public.rel_samp_feat_role_type sf_rol ON ((sf_rol.rsfr_id = rsf.role_id)))
     LEFT JOIN public.monitoring_object mno_to ON ((rsf.mnf_id_target = mno_to.mno_id)))
     LEFT JOIN public.namespace_type ns2 ON ((ns2.ns_id = mno_to.inspire_id_namespace_id)))
  WHERE ((public.st_geometrytype(monitoring_object.geometry) = 'ST_Point'::text) AND ((monitoring_object.monitoring_object_type)::text ~~ 'MonitoringFeature%'::text));


--
-- Name: vw_umaquo_tijdwaarden_csv; Type: VIEW; Schema: aquo_formaten; Owner: -
--

CREATE VIEW vw_umaquo_tijdwaarden_csv AS
 SELECT monitoring_object.inspire_id_local_id AS "Meetpunt.identificatie",
    monitoring_object.name AS "Meetpunt.omschrijving",
    ca.namespace_id AS "Waterbeheerder.code",
    ore.naam AS "Waterbeheerder.omschrijving",
    typering_type.code AS "Typering.code",
    typering_type.omschrijving AS "Typering.omschrijving",
    grootheid_type.code AS "Grootheid.code",
    grootheid_type.omschrijving AS "Grootheid.omschrijving",
        CASE
            WHEN (observed_property_type.taxa_group_id IS NOT NULL) THEN 'Biotaxon'::text
            WHEN (observed_property_type.substance_group_id IS NOT NULL) THEN 'ChemischeStof'::text
            WHEN (observed_property_type.object_group_id IS NOT NULL) THEN 'Object'::text
            ELSE NULL::text
        END AS "Parameter.Groep",
        CASE
            WHEN (observed_property_type.taxa_group_id IS NOT NULL) THEN (NULL::text)::character varying
            WHEN (observed_property_type.substance_group_id IS NOT NULL) THEN chemische_stof_type.code
            WHEN (observed_property_type.object_group_id IS NOT NULL) THEN object_type.code
            ELSE NULL::character varying
        END AS "Parameter.Code",
        CASE
            WHEN (observed_property_type.taxa_group_id IS NOT NULL) THEN txn.omschrijving
            WHEN (observed_property_type.substance_group_id IS NOT NULL) THEN chemische_stof_type.naam
            WHEN (observed_property_type.object_group_id IS NOT NULL) THEN object_type.omschrijving
            ELSE NULL::character varying
        END AS "Parameter.Omschrijving",
    eenheid_type.code AS "Eenheid.code",
    eenheid_type.omschrijving AS "Eenheid.omschrijving",
    hoedanigheid_type.code AS "Hoedanigheid.code",
    hoedanigheid_type.omschrijving AS "Hoedanigheid.omschrijving",
    compartiment_type.code AS "Compartiment.code",
    compartiment_type.description AS "Compartiment.omschrijving",
    waarde_bewerkings_methode_type.code AS "Waardebewerkingsmethode.code",
    waarde_bewerkings_methode_type.omschrijving AS "Waardebewerkingsmethode.omschrijving",
    to_char(observation.phenomenon_time_begin, 'YYYY-MM-DD'::text) AS "Begindatum",
    to_char(observation.phenomenon_time_begin, 'HH24:MM:SS'::text) AS "Begintijd",
    to_char(observation.phenomenon_time_end, 'YYYY-MM-DD'::text) AS "Einddatum",
    to_char(observation.phenomenon_time_end, 'HH24:MM:SS'::text) AS "Eindtijd",
    bepaling_grens_type.omschrijving AS "Limietsymbool",
    observation.numeric_value AS "Numeriekewaarde",
    observation.description AS "Alfanumeriekewaarde",
    kwaliteitsoordeel_type.code AS "Kwaliteitsoordeel.code",
    kwaliteitsoordeel_type.description AS "Kwaliteitsoordeel.omschrijving",
    observation.remarks AS "Opmerking",
    monitoring_object.mno_id AS "Meetpunt.DB_ID",
    date_part('year'::text, observation.phenomenon_time_begin) AS "Rapportagejaar",
    observation.last_change_time,
    monitoring_object.wkrv_id AS "Versie"
   FROM (((((((((((((((((((((((public.observation
     JOIN public.observed_property_type ON ((observation.observed_property_type = observed_property_type.opt_id)))
     LEFT JOIN public.grootheid_type ON ((observed_property_type.quantity_id = grootheid_type.grh_id)))
     LEFT JOIN public.object_group ON ((object_group.ojg_id = observed_property_type.object_group_id)))
     LEFT JOIN public.object_group_element ON ((object_group.ojg_id = object_group_element.ojg_id)))
     LEFT JOIN public.object_type ON ((object_group_element.obj_id = object_type.obj_id)))
     LEFT JOIN public.typering_type ON ((typering_type.typ_id = observed_property_type.indicator_id)))
     LEFT JOIN public.monitored_compartiment ON ((monitored_compartiment.mno_id = observation.mno_id)))
     LEFT JOIN public.compartiment_type ON ((monitored_compartiment.cptm_id = compartiment_type.cptm_id)))
     LEFT JOIN public.substance_group_element ON ((observed_property_type.substance_group_id = substance_group_element.ssge_id)))
     LEFT JOIN public.chemische_stof_type ON ((chemische_stof_type.chs_id = substance_group_element.chs_id)))
     LEFT JOIN public.kwaliteitsoordeel_type ON ((observation.quality_indicator_id = kwaliteitsoordeel_type.kwod_id)))
     LEFT JOIN public.classification_group_type ON ((observation.classified_result_id = classification_group_type.clsg_id)))
     JOIN public.eenheid_type ON ((observation.numeric_value_uom_id = eenheid_type.eenh_id)))
     LEFT JOIN public.bepaling_grens_type ON ((observation.limit_symbol_id = bepaling_grens_type.bpg_id)))
     LEFT JOIN public.taxa_group txg ON ((txg.txg_id = observed_property_type.taxa_group_id)))
     LEFT JOIN public.taxa_group_element txe ON ((txe.txg_id = txg.txg_id)))
     LEFT JOIN public.taxon_type txn ON ((txn.txn_id = txe.txg_id)))
     LEFT JOIN public.waarde_bewerkings_methode_type ON ((observation.value_processing_method_id = waarde_bewerkings_methode_type.wbm_id)))
     JOIN (public.namespace_type namespace_type_1
     JOIN public.monitoring_object ON ((namespace_type_1.ns_id = monitoring_object.inspire_id_namespace_id))) ON ((observation.mno_id = monitoring_object.mno_id)))
     LEFT JOIN public.hoedanigheid_type ON ((hoedanigheid_type.hdh_id = observed_property_type.hoedanigheid_id)))
     JOIN public.competentauthority_namespacetype cns ON ((cns.ns_id = namespace_type_1.ns_id)))
     JOIN public.organisatorische_eenheid ore ON ((ore.ore_id = cns.ore_id)))
     JOIN public.competent_authority ca ON ((ca.ore_id = ore.ore_id)));


SET search_path = public, pg_catalog;

--
-- Name: logging; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE logging (
    loggingid integer NOT NULL,
    severity character varying(25) NOT NULL,
    logtype character varying(256) NOT NULL,
    thema character varying(256) NOT NULL,
    wie character varying(256) NOT NULL,
    errormessage text,
    result text,
    status character varying(300),
    "timestamp" timestamp with time zone NOT NULL
);


SET search_path = beheer, pg_catalog;

--
-- Name: _test_vw_logging_login_wie_timestamp_last_24h; Type: VIEW; Schema: beheer; Owner: -
--

CREATE VIEW _test_vw_logging_login_wie_timestamp_last_24h AS
 SELECT DISTINCT
        CASE
            WHEN ((logging.wie)::text ~~ '%@%'::text) THEN logging.wie
            WHEN (logging.result ~~ '%@%'::text) THEN (logging.result)::character varying
            ELSE NULL::character varying
        END AS logins,
        CASE
            WHEN ((logging.wie)::text ~~ '%@%'::text) THEN 'WKP'::character varying
            WHEN (logging.result ~~ '%@%'::text) THEN 'KRM'::character varying
            ELSE NULL::character varying
        END AS systeem,
    logging."timestamp"
   FROM public.logging
  WHERE ((age(now(), logging."timestamp") < '1 day'::interval) AND (((logging.severity)::text = 'INFO'::text) OR ((logging.severity)::text = 'Info'::text)) AND (((logging.logtype)::text = 'Login'::text) OR ((logging.thema)::text = 'login'::text)))
  ORDER BY logging."timestamp" DESC;


--
-- Name: stat_user_tables_hist; Type: TABLE; Schema: beheer; Owner: -
--

CREATE TABLE stat_user_tables_hist (
    suth_id integer NOT NULL,
    "timestamp" timestamp with time zone,
    relid oid,
    schemaname name,
    relname name,
    seq_scan bigint,
    seq_tup_read bigint,
    idx_scan bigint,
    idx_tup_fetch bigint,
    n_tup_ins bigint,
    n_tup_upd bigint,
    n_tup_del bigint,
    n_tup_hot_upd bigint,
    n_live_tup bigint,
    n_dead_tup bigint,
    n_mod_since_analyze bigint,
    last_vacuum timestamp with time zone,
    last_autovacuum timestamp with time zone,
    last_analyze timestamp with time zone,
    last_autoanalyze timestamp with time zone,
    vacuum_count bigint,
    autovacuum_count bigint,
    analyze_count bigint,
    autoanalyze_count bigint,
    n_live_tup_real bigint
);


--
-- Name: stat_user_tables_hist_suth_id_seq; Type: SEQUENCE; Schema: beheer; Owner: -
--

CREATE SEQUENCE stat_user_tables_hist_suth_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: stat_user_tables_hist_suth_id_seq; Type: SEQUENCE OWNED BY; Schema: beheer; Owner: -
--

ALTER SEQUENCE stat_user_tables_hist_suth_id_seq OWNED BY stat_user_tables_hist.suth_id;


--
-- Name: vw_grp; Type: VIEW; Schema: beheer; Owner: -
--

CREATE VIEW vw_grp AS
 SELECT 'txg'::text AS "grp.cat",
    txg.txg_id AS "grp.grp_id",
    txg.name AS "grp.name",
    txg.group_type AS "grp.group_type",
    txg.d_begin AS "grp.d_begin",
    txg.d_eind AS "grp.d_eind",
    txg.last_changed_date AS "grp.last_changed_date",
    txg.d_status AS "grp.d_status"
   FROM public.taxa_group txg
UNION ALL
 SELECT 'ojg'::text AS "grp.cat",
    ojg.ojg_id AS "grp.grp_id",
    ojg.name AS "grp.name",
    ojg.group_type AS "grp.group_type",
    ojg.d_begin AS "grp.d_begin",
    ojg.d_eind AS "grp.d_eind",
    ojg.last_changed_date AS "grp.last_changed_date",
    ojg.d_status AS "grp.d_status"
   FROM public.object_group ojg
UNION ALL
 SELECT 'ssg'::text AS "grp.cat",
    ssg.ssg_id AS "grp.grp_id",
    ssg.name AS "grp.name",
    ssg.group_type AS "grp.group_type",
    ssg.d_begin AS "grp.d_begin",
    ssg.d_eind AS "grp.d_eind",
    ssg.last_changed_date AS "grp.last_changed_date",
    ssg.d_status AS "grp.d_status"
   FROM public.substance_group ssg;


--
-- Name: vw_grp_elt; Type: VIEW; Schema: beheer; Owner: -
--

CREATE VIEW vw_grp_elt AS
 SELECT 'txg'::text AS "grp.cat",
    txg.txg_id AS "grp.grp_id",
    txg.name AS "grp.name",
    txg.group_type AS "grp.group_type",
    txg.d_begin AS "grp.d_begin",
    txg.d_eind AS "grp.d_eind",
    txg.last_changed_date AS "grp.last_changed_date",
    txg.d_status AS "grp.d_status",
    'txn'::text AS "elt.cat",
    txn.txn_id AS "elt.elt_id",
    NULL::text AS "elt.elt_code",
    txn.code AS "elt.cas_nr",
    txn.omschrijving AS "elt.name",
    txn.auteur AS "elt.group_type",
    txn.d_begin AS "elt.d_begin",
    txn.d_eind AS "elt.d_eind",
    txn.last_changed_date AS "elt.last_changed_date",
    txn.d_status AS "elt.d_status",
    NULL::integer AS "elt.id"
   FROM ((public.taxa_group txg
     LEFT JOIN public.taxa_group_element tge ON ((txg.txg_id = tge.txg_id)))
     LEFT JOIN public.taxon_type txn ON ((tge.txn_id = txn.txn_id)))
UNION ALL
 SELECT 'ojg'::text AS "grp.cat",
    ojg.ojg_id AS "grp.grp_id",
    ojg.name AS "grp.name",
    ojg.group_type AS "grp.group_type",
    ojg.d_begin AS "grp.d_begin",
    ojg.d_eind AS "grp.d_eind",
    ojg.last_changed_date AS "grp.last_changed_date",
    ojg.d_status AS "grp.d_status",
    'obj'::text AS "elt.cat",
    obj.obj_id AS "elt.elt_id",
    NULL::text AS "elt.elt_code",
    obj.code AS "elt.cas_nr",
    obj.omschrijving AS "elt.name",
    NULL::character varying AS "elt.group_type",
    obj.d_begin AS "elt.d_begin",
    obj.d_eind AS "elt.d_eind",
    obj.last_changed_date AS "elt.last_changed_date",
    obj.d_status AS "elt.d_status",
    obj.id AS "elt.id"
   FROM ((public.object_group ojg
     LEFT JOIN public.object_group_element oge ON ((ojg.ojg_id = oge.ojg_id)))
     LEFT JOIN public.object_type obj ON ((oge.obj_id = obj.obj_id)))
UNION ALL
 SELECT 'ssg'::text AS "grp.cat",
    ssg.ssg_id AS "grp.grp_id",
    ssg.name AS "grp.name",
    ssg.group_type AS "grp.group_type",
    ssg.d_begin AS "grp.d_begin",
    ssg.d_eind AS "grp.d_eind",
    ssg.last_changed_date AS "grp.last_changed_date",
    ssg.d_status AS "grp.d_status",
    'chs'::text AS "elt.cat",
    chs.chs_id AS "elt.elt_id",
    chs.cas_nr AS "elt.elt_code",
    chs.code AS "elt.cas_nr",
    chs.naam AS "elt.name",
    NULL::text AS "elt.group_type",
    chs.d_begin AS "elt.d_begin",
    chs.d_eind AS "elt.d_eind",
    chs.last_changed_date AS "elt.last_changed_date",
    chs.d_status AS "elt.d_status",
    chs.id AS "elt.id"
   FROM ((public.substance_group ssg
     LEFT JOIN public.substance_group_element ssge ON ((ssg.ssg_id = ssge.ssge_id)))
     LEFT JOIN public.chemische_stof_type chs ON ((ssge.chs_id = chs.chs_id)));


--
-- Name: vw_logging_login_uniek_totaal_last_24h; Type: VIEW; Schema: beheer; Owner: -
--

CREATE VIEW vw_logging_login_uniek_totaal_last_24h AS
 SELECT count(DISTINCT logging.wie) AS count
   FROM public.logging
  WHERE ((age(now(), logging."timestamp") < '1 day'::interval) AND ((logging.logtype)::text = 'Login'::text));


--
-- Name: VIEW vw_logging_login_uniek_totaal_last_24h; Type: COMMENT; Schema: beheer; Owner: -
--

COMMENT ON VIEW vw_logging_login_uniek_totaal_last_24h IS 'tbv funtioneel beheer';


--
-- Name: vw_logging_login_wie_last_24h; Type: VIEW; Schema: beheer; Owner: -
--

CREATE VIEW vw_logging_login_wie_last_24h AS
 SELECT DISTINCT
        CASE
            WHEN ((logging.wie)::text ~~ '%@%'::text) THEN logging.wie
            WHEN (logging.result ~~ '%@%'::text) THEN (logging.result)::character varying
            ELSE NULL::character varying
        END AS logins
   FROM public.logging
  WHERE ((age(now(), logging."timestamp") < '1 day'::interval) AND (((logging.severity)::text = 'INFO'::text) OR ((logging.severity)::text = 'Info'::text)) AND (((logging.logtype)::text = 'Login'::text) OR ((logging.thema)::text = 'login'::text)))
  ORDER BY
        CASE
            WHEN ((logging.wie)::text ~~ '%@%'::text) THEN logging.wie
            WHEN (logging.result ~~ '%@%'::text) THEN (logging.result)::character varying
            ELSE NULL::character varying
        END;


--
-- Name: VIEW vw_logging_login_wie_last_24h; Type: COMMENT; Schema: beheer; Owner: -
--

COMMENT ON VIEW vw_logging_login_wie_last_24h IS 'users last 24 hrs tbv functioneel beheer';


SET search_path = monprog, pg_catalog;

--
-- Name: planned_observation_time; Type: TABLE; Schema: monprog; Owner: -
--

CREATE TABLE planned_observation_time (
    pot_id integer NOT NULL,
    qem_id integer NOT NULL,
    start_date date DEFAULT '2015-01-01'::date NOT NULL,
    end_date date DEFAULT '2021-12-31'::date NOT NULL,
    noof_samples integer DEFAULT 1,
    samples_bepalingsgrens_id integer,
    last_change_time timestamp without time zone NOT NULL
);


SET search_path = public, pg_catalog;

--
-- Name: monitoring_object_quality_element; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE monitoring_object_quality_element (
    moqe_id integer NOT NULL,
    mno_id integer NOT NULL,
    qem_id integer NOT NULL
);


--
-- Name: observing_capability; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE observing_capability (
    osc_id integer NOT NULL,
    observing_time_begin timestamp without time zone NOT NULL,
    observing_time_end timestamp without time zone,
    online_resource character varying(255),
    process_type_id integer,
    last_change_time timestamp without time zone NOT NULL,
    name character varying(255),
    is_sample boolean DEFAULT false NOT NULL,
    wkrv_id integer
);


--
-- Name: quality_element; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE quality_element (
    qem_id integer NOT NULL,
    osc_id integer NOT NULL,
    opt_id integer NOT NULL,
    parameter_use_id integer,
    cycle_value integer,
    cycle_uom_id integer,
    cycle_description text,
    frequency_value integer,
    frequency_uom_id integer,
    reason_deviation_program text,
    last_change_time timestamp without time zone NOT NULL,
    sampling_method_id integer,
    sampling_device_id integer,
    deviation_program_jn boolean DEFAULT false,
    opt_uom_id integer,
    wbm_id integer,
    remark text,
    CONSTRAINT chk_reason_deviation_program CHECK (((deviation_program_jn AND (reason_deviation_program IS NOT NULL)) OR (NOT deviation_program_jn)))
);


SET search_path = beheer, pg_catalog;

--
-- Name: vw_monprogs; Type: VIEW; Schema: beheer; Owner: -
--

CREATE VIEW vw_monprogs AS
 SELECT txg.txg_id AS "txg.txg_id",
    txg.name AS "txg.name",
    txg.group_type AS "txg.group_type",
    txg.d_begin AS "txg.d_begin",
    txg.d_eind AS "txg.d_eind",
    txg.last_changed_date AS "txg.last_changed_date",
    txg.d_status AS "txg.d_status",
    ojg.ojg_id AS "ojg.ojg_id",
    ojg.name AS "ojg.name",
    ojg.group_type AS "ojg.group_type",
    ojg.d_begin AS "ojg.d_begin",
    ojg.d_eind AS "ojg.d_eind",
    ojg.last_changed_date AS "ojg.last_changed_date",
    ojg.d_status AS "ojg.d_status",
    ssg.ssg_id AS "ssg.ssg_id",
    ssg.name AS "ssg.name",
    ssg.group_type AS "ssg.group_type",
    ssg.d_begin AS "ssg.d_begin",
    ssg.d_eind AS "ssg.d_eind",
    ssg.last_changed_date AS "ssg.last_changed_date",
    ssg.d_status AS "ssg.d_status",
    opt.opt_id AS "opt.opt_id",
    opt.observed_property_type_class AS "opt.observed_property_type_class",
    opt.result_type AS "opt.result_type",
    opt.hoedanigheid_id AS "opt.hoedanigheid_id",
    opt.object_group_id AS "opt.object_group_id",
    opt.quantity_id AS "opt.quantity_id",
    opt.taxa_group_id AS "opt.taxa_group_id",
    opt.substance_group_id AS "opt.substance_group_id",
    opt.indicator_id AS "opt.indicator_id",
    opt.classification_group_id AS "opt.classification_group_id",
    opt.remarks AS "opt.remarks",
    opt.d_begin AS "opt.d_begin",
    opt.d_eind AS "opt.d_eind",
    opt.last_changed_date AS "opt.last_changed_date",
    opt.d_status AS "opt.d_status",
    hdh.hdh_id AS "hdh.hdh_id",
    hdh.code AS "hdh.code",
    hdh.omschrijving AS "hdh.omschrijving",
    hdh.d_begin AS "hdh.d_begin",
    hdh.d_eind AS "hdh.d_eind",
    hdh.last_changed_date AS "hdh.last_changed_date",
    hdh.d_status AS "hdh.d_status",
    hdh.id AS "hdh.id",
    grh.grh_id AS "grh.grh_id",
    grh.code AS "grh.code",
    grh.omschrijving AS "grh.omschrijving",
    grh.d_begin AS "grh.d_begin",
    grh.d_eind AS "grh.d_eind",
    grh.last_changed_date AS "grh.last_changed_date",
    grh.d_status AS "grh.d_status",
    grh.id AS "grh.id",
    typ.typ_id AS "typ.typ_id",
    typ.code AS "typ.code",
    typ.omschrijving AS "typ.omschrijving",
    typ.d_begin AS "typ.d_begin",
    typ.d_eind AS "typ.d_eind",
    typ.last_changed_date AS "typ.last_changed_date",
    typ.d_status AS "typ.d_status",
    typ.id AS "typ.id",
    clsg.clsg_id AS "clsg.clsg_id",
    clsg.code AS "clsg.code",
    clsg.description AS "clsg.description",
    clsg.d_begin AS "clsg.d_begin",
    clsg.d_eind AS "clsg.d_eind",
    clsg.last_changed_date AS "clsg.last_changed_date",
    clsg.d_status AS "clsg.d_status",
    qem.qem_id AS "qem.qem_id",
    qem.osc_id AS "qem.osc_id",
    qem.opt_id AS "qem.opt_id",
    qem.parameter_use_id AS "qem.parameter_use_id",
    qem.cycle_value AS "qem.cycle_value",
    qem.cycle_uom_id AS "qem.cycle_uom_id",
    qem.cycle_description AS "qem.cycle_description",
    qem.frequency_value AS "qem.frequency_value",
    qem.frequency_uom_id AS "qem.frequency_uom_id",
    qem.reason_deviation_program AS "qem.reason_deviation_program",
    qem.last_change_time AS "qem.last_change_time",
    qem.sampling_method_id AS "qem.sampling_method_id",
    qem.sampling_device_id AS "qem.sampling_device_id",
    qem.deviation_program_jn AS "qem.deviation_program_jn",
    qem.opt_uom_id AS "qem.opt_uom_id",
    qem.wbm_id AS "qem.wbm_id",
    qem.remark AS "qem.remark",
    ehd.eenh_id AS "ehd.eenh_id",
    ehd.code AS "ehd.code",
    ehd.omschrijving AS "ehd.omschrijving",
    ehd.d_begin AS "ehd.d_begin",
    ehd.d_eind AS "ehd.d_eind",
    ehd.last_changed_date AS "ehd.last_changed_date",
    ehd.d_status AS "ehd.d_status",
    ehd.id AS "ehd.id",
    var.var_id AS "var.var_id",
    var.code AS "var.code",
    var.description AS "var.description",
    var.d_begin AS "var.d_begin",
    var.d_eind AS "var.d_eind",
    var.last_changed_date AS "var.last_changed_date",
    var.d_status AS "var.d_status",
    var.id AS "var.id",
    var.codespace AS "var.codespace",
    var.groep AS "var.groep",
    wbm.wbm_id AS "wbm.wbm_id",
    wbm.code AS "wbm.code",
    wbm.omschrijving AS "wbm.omschrijving",
    wbm.d_begin AS "wbm.d_begin",
    wbm.d_eind AS "wbm.d_eind",
    wbm.last_changed_date AS "wbm.last_changed_date",
    wbm.d_status AS "wbm.d_status",
    wbm.id AS "wbm.id",
    bmm.bmm_id AS "bmm.bmm_id",
    bmm.code AS "bmm.code ",
    bmm.description AS "bmm.description",
    bmm.groep AS "bmm.groep",
    bmm.titel AS "bmm.titel",
    bmm.d_begin AS "bmm.d_begin",
    bmm.d_eind AS "bmm.d_eind ",
    bmm.last_changed_date AS "bmm.last_changed_date",
    bmm.d_status AS "bmm.d_status ",
    bmm.id AS "bmm.id ",
    osc.osc_id AS "osc.osc_id",
    osc.observing_time_begin AS "osc.observing_time_begin",
    osc.observing_time_end AS "osc.observing_time_end",
    osc.online_resource AS "osc.online_resource",
    osc.process_type_id AS "osc.process_type_id",
    osc.last_change_time AS "osc.last_change_time",
    osc.name AS "osc.name",
    osc.is_sample AS "osc.is_sample",
    osc.wkrv_id AS "osc.wkrv_id",
    moqe.moqe_id AS "moqe.moqe_id",
    moqe.mno_id AS "moqe.mno_id",
    moqe.qem_id AS "moqe.qem_id",
    mno.mno_id AS "mno.mno_id",
    mno.inspire_id_local_id AS "mno.inspire_id_local_id",
    mno.inspire_id_namespace_id AS "mno.inspire_id_namespace_id",
    mno.wkrv_id AS "mno.wkrv_id",
    mno.monitoring_object_type AS "mno.monitoring_object_type",
    mno.name AS "mno.name",
    mno.additional_description AS "mno.additional_description",
    mno.last_change_time AS "mno.last_change_time",
    mno.begin_lifespan_version AS "mno.begin_lifespan_version",
    mno.end_lifespan_version AS "mno.end_lifespan_version",
    mno.primary_geo_column AS "mno.primary_geo_column",
    mno.reason_change AS "mno.reason_change",
    mno.primary_geodetic_reference_id AS "mno.primary_geodetic_reference_id",
    pot.pot_id AS "pot.pot_id",
    pot.qem_id AS "pot.qem_id",
    pot.start_date AS "pot.start_date",
    pot.end_date AS "pot.end_date",
    pot.noof_samples AS "pot.noof_samples",
    pot.samples_bepalingsgrens_id AS "pot.samples_bepalingsgrens_id",
    pot.last_change_time AS "pot.last_change_time",
    bpg.bpg_id AS "bpg.bpg_id",
    bpg.code AS "bpg.code",
    bpg.omschrijving AS "bpg.omschrijving",
    bpg.d_begin AS "bpg.d_begin",
    bpg.d_eind AS "bpg.d_eind",
    bpg.last_changed_date AS "bpg.last_changed_date",
    bpg.d_status AS "bpg.d_status"
   FROM (((((((((((((((((public.observed_property_type opt
     LEFT JOIN public.taxa_group txg ON ((opt.taxa_group_id = txg.txg_id)))
     LEFT JOIN public.object_group ojg ON ((opt.object_group_id = ojg.ojg_id)))
     LEFT JOIN public.substance_group ssg ON ((opt.substance_group_id = ssg.ssg_id)))
     LEFT JOIN public.hoedanigheid_type hdh ON ((hdh.hdh_id = opt.hoedanigheid_id)))
     LEFT JOIN public.grootheid_type grh ON ((grh.grh_id = opt.quantity_id)))
     LEFT JOIN public.typering_type typ ON ((typ.typ_id = opt.indicator_id)))
     LEFT JOIN public.classification_group_type clsg ON ((clsg.clsg_id = opt.classification_group_id)))
     LEFT JOIN public.quality_element qem ON ((qem.opt_id = opt.opt_id)))
     LEFT JOIN public.eenheid_type ehd ON ((ehd.eenh_id = qem.opt_uom_id)))
     LEFT JOIN domains.veldapparaat var ON ((var.var_id = qem.sampling_device_id)))
     LEFT JOIN public.waarde_bewerkings_methode_type wbm ON ((wbm.wbm_id = qem.wbm_id)))
     LEFT JOIN domains.bemonsteringsmethode bmm ON ((bmm.bmm_id = qem.sampling_method_id)))
     LEFT JOIN public.observing_capability osc ON ((osc.osc_id = qem.osc_id)))
     LEFT JOIN public.monitoring_object_quality_element moqe ON ((moqe.qem_id = qem.qem_id)))
     LEFT JOIN public.monitoring_object mno ON ((mno.mno_id = moqe.mno_id)))
     LEFT JOIN monprog.planned_observation_time pot ON ((pot.qem_id = qem.qem_id)))
     LEFT JOIN public.bepaling_grens_type bpg ON ((bpg.bpg_id = pot.samples_bepalingsgrens_id)));


--
-- Name: vw_opt; Type: VIEW; Schema: beheer; Owner: -
--

CREATE VIEW vw_opt AS
 SELECT opt.opt_id AS "opt.opt_id",
    opt.observed_property_type_class AS "opt.observed_property_type_class",
    opt.result_type AS "opt.result_type",
    opt.hoedanigheid_id AS "opt.hoedanigheid_id",
        CASE
            WHEN (opt.object_group_id IS NOT NULL) THEN 'ojg'::text
            WHEN (opt.taxa_group_id IS NOT NULL) THEN 'txg'::text
            WHEN (opt.substance_group_id IS NOT NULL) THEN 'ssg'::text
            ELSE NULL::text
        END AS "opt.grp.cat",
        CASE
            WHEN (opt.object_group_id IS NOT NULL) THEN opt.object_group_id
            WHEN (opt.taxa_group_id IS NOT NULL) THEN opt.taxa_group_id
            WHEN (opt.substance_group_id IS NOT NULL) THEN opt.substance_group_id
            ELSE NULL::integer
        END AS "opt.grp_id",
    opt.quantity_id AS "opt.quantity_id",
    opt.indicator_id AS "opt.indicator_id",
    opt.classification_group_id AS "opt.classification_group_id",
    opt.remarks AS "opt.remarks",
    opt.d_begin AS "opt.d_begin",
    opt.d_eind AS "opt.d_eind",
    opt.last_changed_date AS "opt.last_changed_date",
    opt.d_status AS "opt.d_status",
    hdh.hdh_id AS "hdh.hdh_id",
    hdh.code AS "hdh.code",
    hdh.omschrijving AS "hdh.omschrijving",
    hdh.d_begin AS "hdh.d_begin",
    hdh.d_eind AS "hdh.d_eind",
    hdh.last_changed_date AS "hdh.last_changed_date",
    hdh.d_status AS "hdh.d_status",
    hdh.id AS "hdh.id",
    grh.grh_id AS "grh.grh_id",
    grh.code AS "grh.code",
    grh.omschrijving AS "grh.omschrijving",
    grh.d_begin AS "grh.d_begin",
    grh.d_eind AS "grh.d_eind",
    grh.last_changed_date AS "grh.last_changed_date",
    grh.d_status AS "grh.d_status",
    grh.id AS "grh.id",
    typ.typ_id AS "typ.typ_id",
    typ.code AS "typ.code",
    typ.omschrijving AS "typ.omschrijving",
    typ.d_begin AS "typ.d_begin",
    typ.d_eind AS "typ.d_eind",
    typ.last_changed_date AS "typ.last_changed_date",
    typ.d_status AS "typ.d_status",
    typ.id AS "typ.id",
    clsg.clsg_id AS "clsg.clsg_id",
    clsg.code AS "clsg.code",
    clsg.description AS "clsg.description",
    clsg.d_begin AS "clsg.d_begin",
    clsg.d_eind AS "clsg.d_eind",
    clsg.last_changed_date AS "clsg.last_changed_date",
    clsg.d_status AS "clsg.d_status"
   FROM ((((public.observed_property_type opt
     LEFT JOIN public.hoedanigheid_type hdh ON ((hdh.hdh_id = opt.hoedanigheid_id)))
     LEFT JOIN public.grootheid_type grh ON ((grh.grh_id = opt.quantity_id)))
     LEFT JOIN public.typering_type typ ON ((typ.typ_id = opt.indicator_id)))
     LEFT JOIN public.classification_group_type clsg ON ((clsg.clsg_id = opt.classification_group_id)));


SET search_path = public, pg_catalog;

--
-- Name: observing_capability_responsible_party; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE observing_capability_responsible_party (
    ocrp_id integer NOT NULL,
    osc_id integer NOT NULL,
    ore_id integer NOT NULL
);


SET search_path = beheer, pg_catalog;

--
-- Name: vw_osc_qem_pot; Type: VIEW; Schema: beheer; Owner: -
--

CREATE VIEW vw_osc_qem_pot AS
 SELECT osc.osc_id AS "osc.osc_id",
    osc.observing_time_begin AS "osc.observing_time_begin",
    osc.observing_time_end AS "osc.observing_time_end",
    osc.online_resource AS "osc.online_resource",
    osc.process_type_id AS "osc.process_type_id",
    osc.last_change_time AS "osc.last_change_time",
    osc.name AS "osc.name",
    osc.is_sample AS "osc.is_sample",
    osc.wkrv_id AS "osc.wkrv_id",
    ocrp.ocrp_id AS "ocrp.ocrp_id",
    ore.ore_id AS "ore.ore_id",
    ore.naam_verkort AS "ore.naam_verkort",
    qem.qem_id AS "qem.qem_id",
    qem.osc_id AS "qem.osc_id",
    qem.opt_id AS "qem.opt_id",
    qem.parameter_use_id AS "qem.parameter_use_id",
    qem.cycle_value AS "qem.cycle_value",
    qem.cycle_uom_id AS "qem.cycle_uom_id",
    qem.cycle_description AS "qem.cycle_description",
    qem.frequency_value AS "qem.frequency_value",
    qem.frequency_uom_id AS "qem.frequency_uom_id",
    qem.reason_deviation_program AS "qem.reason_deviation_program",
    qem.last_change_time AS "qem.last_change_time",
    qem.sampling_method_id AS "qem.sampling_method_id",
    qem.sampling_device_id AS "qem.sampling_device_id",
    qem.deviation_program_jn AS "qem.deviation_program_jn",
    qem.opt_uom_id AS "qem.opt_uom_id",
    qem.wbm_id AS "qem.wbm_id",
    qem.remark AS "qem.remark",
    opt.opt_id AS "qem.opt.opt_id",
    opt.observed_property_type_class AS "qem.opt.observed_property_type_class",
    opt.result_type AS "qem.opt.result_type",
    ehd.eenh_id AS "ehd.eenh_id",
    ehd.code AS "ehd.code",
    ehd.omschrijving AS "ehd.omschrijving",
    ehd.d_begin AS "ehd.d_begin",
    ehd.d_eind AS "ehd.d_eind",
    ehd.last_changed_date AS "ehd.last_changed_date",
    ehd.d_status AS "ehd.d_status",
    ehd.id AS "ehd.id",
    var.var_id AS "var.var_id",
    var.code AS "var.code",
    var.description AS "var.description",
    var.d_begin AS "var.d_begin",
    var.d_eind AS "var.d_eind",
    var.last_changed_date AS "var.last_changed_date",
    var.d_status AS "var.d_status",
    var.id AS "var.id",
    var.codespace AS "var.codespace",
    var.groep AS "var.groep",
    wbm.wbm_id AS "wbm.wbm_id",
    wbm.code AS "wbm.code",
    wbm.omschrijving AS "wbm.omschrijving",
    wbm.d_begin AS "wbm.d_begin",
    wbm.d_eind AS "wbm.d_eind",
    wbm.last_changed_date AS "wbm.last_changed_date",
    wbm.d_status AS "wbm.d_status",
    wbm.id AS "wbm.id",
    bmm.bmm_id AS "bmm.bmm_id",
    bmm.code AS "bmm.code ",
    bmm.description AS "bmm.description",
    bmm.groep AS "bmm.groep",
    bmm.titel AS "bmm.titel",
    bmm.d_begin AS "bmm.d_begin",
    bmm.d_eind AS "bmm.d_eind ",
    bmm.last_changed_date AS "bmm.last_changed_date",
    bmm.d_status AS "bmm.d_status ",
    bmm.id AS "bmm.id ",
    moqe.moqe_id AS "moqe.moqe_id",
    moqe.mno_id AS "moqe.mno_id",
    moqe.qem_id AS "moqe.qem_id",
    mno.mno_id AS "mno.mno_id",
    mno.inspire_id_local_id AS "mno.inspire_id_local_id",
    mno.inspire_id_namespace_id AS "mno.inspire_id_namespace_id",
    mno.wkrv_id AS "mno.wkrv_id",
    mno.monitoring_object_type AS "mno.monitoring_object_type",
    mno.name AS "mno.name",
    mno.additional_description AS "mno.additional_description",
    mno.last_change_time AS "mno.last_change_time",
    mno.begin_lifespan_version AS "mno.begin_lifespan_version",
    mno.end_lifespan_version AS "mno.end_lifespan_version",
    mno.primary_geo_column AS "mno.primary_geo_column",
    mno.reason_change AS "mno.reason_change",
    mno.primary_geodetic_reference_id AS "mno.primary_geodetic_reference_id",
    pot.pot_id AS "pot.pot_id",
    pot.qem_id AS "pot.qem_id",
    pot.start_date AS "pot.start_date",
    pot.end_date AS "pot.end_date",
    pot.noof_samples AS "pot.noof_samples",
    pot.samples_bepalingsgrens_id AS "pot.samples_bepalingsgrens_id",
    pot.last_change_time AS "pot.last_change_time",
    bpg.bpg_id AS "bpg.bpg_id",
    bpg.code AS "bpg.code",
    bpg.omschrijving AS "bpg.omschrijving",
    bpg.d_begin AS "bpg.d_begin",
    bpg.d_eind AS "bpg.d_eind",
    bpg.last_changed_date AS "bpg.last_changed_date",
    bpg.d_status AS "bpg.d_status"
   FROM (((((((((((((public.observing_capability osc
     LEFT JOIN public.observing_capability_responsible_party ocrp ON ((ocrp.osc_id = osc.osc_id)))
     LEFT JOIN public.organisatorische_eenheid ore ON ((ore.ore_id = ocrp.ore_id)))
     LEFT JOIN public.wkr_version wkrv ON ((wkrv.wkrv_id = osc.wkrv_id)))
     LEFT JOIN public.quality_element qem ON ((osc.osc_id = qem.osc_id)))
     LEFT JOIN public.observed_property_type opt ON ((opt.opt_id = qem.opt_id)))
     LEFT JOIN public.eenheid_type ehd ON ((ehd.eenh_id = qem.opt_uom_id)))
     LEFT JOIN domains.veldapparaat var ON ((var.var_id = qem.sampling_device_id)))
     LEFT JOIN public.waarde_bewerkings_methode_type wbm ON ((wbm.wbm_id = qem.wbm_id)))
     LEFT JOIN domains.bemonsteringsmethode bmm ON ((bmm.bmm_id = qem.sampling_method_id)))
     LEFT JOIN public.monitoring_object_quality_element moqe ON ((moqe.qem_id = qem.qem_id)))
     LEFT JOIN public.monitoring_object mno ON ((mno.mno_id = moqe.mno_id)))
     LEFT JOIN monprog.planned_observation_time pot ON ((pot.qem_id = qem.qem_id)))
     LEFT JOIN public.bepaling_grens_type bpg ON ((bpg.bpg_id = pot.samples_bepalingsgrens_id)));


--
-- Name: vw_monprogs_grp; Type: VIEW; Schema: beheer; Owner: -
--

CREATE VIEW vw_monprogs_grp AS
 SELECT opt."opt.opt_id",
    opt."opt.observed_property_type_class",
    opt."opt.result_type",
    opt."opt.hoedanigheid_id",
    opt."opt.quantity_id",
    opt."opt.grp.cat",
    opt."opt.grp_id",
    opt."opt.indicator_id",
    opt."opt.classification_group_id",
    opt."opt.remarks",
    opt."opt.d_begin",
    opt."opt.d_eind",
    opt."opt.last_changed_date",
    opt."opt.d_status",
    opt."hdh.hdh_id",
    opt."hdh.code",
    opt."hdh.omschrijving",
    opt."hdh.d_begin",
    opt."hdh.d_eind",
    opt."hdh.last_changed_date",
    opt."hdh.d_status",
    opt."hdh.id",
    opt."grh.grh_id",
    opt."grh.code",
    opt."grh.omschrijving",
    opt."grh.d_begin",
    opt."grh.d_eind",
    opt."grh.last_changed_date",
    opt."grh.d_status",
    opt."grh.id",
    opt."typ.typ_id",
    opt."typ.code",
    opt."typ.omschrijving",
    opt."typ.d_begin",
    opt."typ.d_eind",
    opt."typ.last_changed_date",
    opt."typ.d_status",
    opt."typ.id",
    opt."clsg.clsg_id",
    opt."clsg.code",
    opt."clsg.description",
    opt."clsg.d_begin",
    opt."clsg.d_eind",
    opt."clsg.last_changed_date",
    opt."clsg.d_status",
    grp."grp.cat",
    grp."grp.grp_id",
    grp."grp.name",
    grp."grp.group_type",
    grp."grp.d_begin",
    grp."grp.d_eind",
    grp."grp.last_changed_date",
    grp."grp.d_status",
    oqp."osc.osc_id",
    oqp."osc.observing_time_begin",
    oqp."osc.observing_time_end",
    oqp."osc.online_resource",
    oqp."osc.process_type_id",
    oqp."osc.last_change_time",
    oqp."osc.name",
    oqp."osc.is_sample",
    oqp."osc.wkrv_id",
    oqp."ocrp.ocrp_id",
    oqp."ore.ore_id",
    oqp."ore.naam_verkort",
    oqp."qem.qem_id",
    oqp."qem.osc_id",
    oqp."qem.opt_id",
    oqp."qem.parameter_use_id",
    oqp."qem.cycle_value",
    oqp."qem.cycle_uom_id",
    oqp."qem.cycle_description",
    oqp."qem.frequency_value",
    oqp."qem.frequency_uom_id",
    oqp."qem.reason_deviation_program",
    oqp."qem.last_change_time",
    oqp."qem.sampling_method_id",
    oqp."qem.sampling_device_id",
    oqp."qem.deviation_program_jn",
    oqp."qem.opt_uom_id",
    oqp."qem.wbm_id",
    oqp."qem.remark",
    oqp."qem.opt.opt_id",
    oqp."qem.opt.observed_property_type_class",
    oqp."qem.opt.result_type",
    oqp."ehd.eenh_id",
    oqp."ehd.code",
    oqp."ehd.omschrijving",
    oqp."ehd.d_begin",
    oqp."ehd.d_eind",
    oqp."ehd.last_changed_date",
    oqp."ehd.d_status",
    oqp."ehd.id",
    oqp."var.var_id",
    oqp."var.code",
    oqp."var.description",
    oqp."var.d_begin",
    oqp."var.d_eind",
    oqp."var.last_changed_date",
    oqp."var.d_status",
    oqp."var.id",
    oqp."var.codespace",
    oqp."var.groep",
    oqp."wbm.wbm_id",
    oqp."wbm.code",
    oqp."wbm.omschrijving",
    oqp."wbm.d_begin",
    oqp."wbm.d_eind",
    oqp."wbm.last_changed_date",
    oqp."wbm.d_status",
    oqp."wbm.id",
    oqp."bmm.bmm_id",
    oqp."bmm.code ",
    oqp."bmm.description",
    oqp."bmm.groep",
    oqp."bmm.titel",
    oqp."bmm.d_begin",
    oqp."bmm.d_eind ",
    oqp."bmm.last_changed_date",
    oqp."bmm.d_status ",
    oqp."bmm.id ",
    oqp."moqe.moqe_id",
    oqp."moqe.mno_id",
    oqp."moqe.qem_id",
    oqp."mno.mno_id",
    oqp."mno.inspire_id_local_id",
    oqp."mno.inspire_id_namespace_id",
    oqp."mno.wkrv_id",
    oqp."mno.monitoring_object_type",
    oqp."mno.name",
    oqp."mno.additional_description",
    oqp."mno.last_change_time",
    oqp."mno.begin_lifespan_version",
    oqp."mno.end_lifespan_version",
    oqp."mno.primary_geo_column",
    oqp."mno.reason_change",
    oqp."mno.primary_geodetic_reference_id",
    oqp."pot.pot_id",
    oqp."pot.qem_id",
    oqp."pot.start_date",
    oqp."pot.end_date",
    oqp."pot.noof_samples",
    oqp."pot.samples_bepalingsgrens_id",
    oqp."pot.last_change_time",
    oqp."bpg.bpg_id",
    oqp."bpg.code",
    oqp."bpg.omschrijving",
    oqp."bpg.d_begin",
    oqp."bpg.d_eind",
    oqp."bpg.last_changed_date",
    oqp."bpg.d_status"
   FROM ((vw_opt opt
     LEFT JOIN vw_grp grp ON (((opt."opt.grp.cat" = grp."grp.cat") AND (opt."opt.grp_id" = grp."grp.grp_id"))))
     LEFT JOIN vw_osc_qem_pot oqp ON ((opt."opt.opt_id" = oqp."qem.opt_id")));


--
-- Name: vw_monprogs_grp_elt; Type: VIEW; Schema: beheer; Owner: -
--

CREATE VIEW vw_monprogs_grp_elt AS
 SELECT opt."opt.opt_id",
    opt."opt.observed_property_type_class",
    opt."opt.result_type",
    opt."opt.hoedanigheid_id",
    opt."opt.quantity_id",
    opt."opt.grp.cat",
    opt."opt.grp_id",
    opt."opt.indicator_id",
    opt."opt.classification_group_id",
    opt."opt.remarks",
    opt."opt.d_begin",
    opt."opt.d_eind",
    opt."opt.last_changed_date",
    opt."opt.d_status",
    opt."hdh.hdh_id",
    opt."hdh.code",
    opt."hdh.omschrijving",
    opt."hdh.d_begin",
    opt."hdh.d_eind",
    opt."hdh.last_changed_date",
    opt."hdh.d_status",
    opt."hdh.id",
    opt."grh.grh_id",
    opt."grh.code",
    opt."grh.omschrijving",
    opt."grh.d_begin",
    opt."grh.d_eind",
    opt."grh.last_changed_date",
    opt."grh.d_status",
    opt."grh.id",
    opt."typ.typ_id",
    opt."typ.code",
    opt."typ.omschrijving",
    opt."typ.d_begin",
    opt."typ.d_eind",
    opt."typ.last_changed_date",
    opt."typ.d_status",
    opt."typ.id",
    opt."clsg.clsg_id",
    opt."clsg.code",
    opt."clsg.description",
    opt."clsg.d_begin",
    opt."clsg.d_eind",
    opt."clsg.last_changed_date",
    opt."clsg.d_status",
    gre."grp.cat",
    gre."grp.grp_id",
    gre."grp.name",
    gre."grp.group_type",
    gre."grp.d_begin",
    gre."grp.d_eind",
    gre."grp.last_changed_date",
    gre."grp.d_status",
    gre."elt.cat",
    gre."elt.elt_id",
    gre."elt.elt_code",
    gre."elt.cas_nr",
    gre."elt.name",
    gre."elt.group_type",
    gre."elt.d_begin",
    gre."elt.d_eind",
    gre."elt.last_changed_date",
    gre."elt.d_status",
    gre."elt.id",
    oqp."osc.osc_id",
    oqp."osc.observing_time_begin",
    oqp."osc.observing_time_end",
    oqp."osc.online_resource",
    oqp."osc.process_type_id",
    oqp."osc.last_change_time",
    oqp."osc.name",
    oqp."osc.is_sample",
    oqp."osc.wkrv_id",
    oqp."ocrp.ocrp_id",
    oqp."ore.ore_id",
    oqp."ore.naam_verkort",
    oqp."qem.qem_id",
    oqp."qem.osc_id",
    oqp."qem.opt_id",
    oqp."qem.parameter_use_id",
    oqp."qem.cycle_value",
    oqp."qem.cycle_uom_id",
    oqp."qem.cycle_description",
    oqp."qem.frequency_value",
    oqp."qem.frequency_uom_id",
    oqp."qem.reason_deviation_program",
    oqp."qem.last_change_time",
    oqp."qem.sampling_method_id",
    oqp."qem.sampling_device_id",
    oqp."qem.deviation_program_jn",
    oqp."qem.opt_uom_id",
    oqp."qem.wbm_id",
    oqp."qem.remark",
    oqp."qem.opt.opt_id",
    oqp."qem.opt.observed_property_type_class",
    oqp."qem.opt.result_type",
    oqp."ehd.eenh_id",
    oqp."ehd.code",
    oqp."ehd.omschrijving",
    oqp."ehd.d_begin",
    oqp."ehd.d_eind",
    oqp."ehd.last_changed_date",
    oqp."ehd.d_status",
    oqp."ehd.id",
    oqp."var.var_id",
    oqp."var.code",
    oqp."var.description",
    oqp."var.d_begin",
    oqp."var.d_eind",
    oqp."var.last_changed_date",
    oqp."var.d_status",
    oqp."var.id",
    oqp."var.codespace",
    oqp."var.groep",
    oqp."wbm.wbm_id",
    oqp."wbm.code",
    oqp."wbm.omschrijving",
    oqp."wbm.d_begin",
    oqp."wbm.d_eind",
    oqp."wbm.last_changed_date",
    oqp."wbm.d_status",
    oqp."wbm.id",
    oqp."bmm.bmm_id",
    oqp."bmm.code ",
    oqp."bmm.description",
    oqp."bmm.groep",
    oqp."bmm.titel",
    oqp."bmm.d_begin",
    oqp."bmm.d_eind ",
    oqp."bmm.last_changed_date",
    oqp."bmm.d_status ",
    oqp."bmm.id ",
    oqp."moqe.moqe_id",
    oqp."moqe.mno_id",
    oqp."moqe.qem_id",
    oqp."mno.mno_id",
    oqp."mno.inspire_id_local_id",
    oqp."mno.inspire_id_namespace_id",
    oqp."mno.wkrv_id",
    oqp."mno.monitoring_object_type",
    oqp."mno.name",
    oqp."mno.additional_description",
    oqp."mno.last_change_time",
    oqp."mno.begin_lifespan_version",
    oqp."mno.end_lifespan_version",
    oqp."mno.primary_geo_column",
    oqp."mno.reason_change",
    oqp."mno.primary_geodetic_reference_id",
    oqp."pot.pot_id",
    oqp."pot.qem_id",
    oqp."pot.start_date",
    oqp."pot.end_date",
    oqp."pot.noof_samples",
    oqp."pot.samples_bepalingsgrens_id",
    oqp."pot.last_change_time",
    oqp."bpg.bpg_id",
    oqp."bpg.code",
    oqp."bpg.omschrijving",
    oqp."bpg.d_begin",
    oqp."bpg.d_eind",
    oqp."bpg.last_changed_date",
    oqp."bpg.d_status"
   FROM ((vw_opt opt
     LEFT JOIN vw_grp_elt gre ON (((opt."opt.grp.cat" = gre."grp.cat") AND (opt."opt.grp_id" = gre."grp.grp_id"))))
     LEFT JOIN vw_osc_qem_pot oqp ON ((opt."opt.opt_id" = oqp."qem.opt_id")));


--
-- Name: vw_obs_bob; Type: VIEW; Schema: beheer; Owner: -
--

CREATE VIEW vw_obs_bob AS
 SELECT obs.obs_id,
    obs.phenomenon_time_begin,
    obs.phenomenon_time_end,
    obs.result_time,
    obs.valid_time_begin,
    obs.valid_time_end,
    obs.observed_property_type,
    obs.quality_indicator_id,
    obs.numeric_value_uom_id,
    bob.levensstadium_id,
    ehd.code
   FROM ((public.observation obs
     LEFT JOIN public.bio_observation bob ON ((obs.obs_id = bob.obs_id)))
     LEFT JOIN public.eenheid_type ehd ON ((obs.numeric_value_uom_id = ehd.eenh_id)));


--
-- Name: vw_opt_table; Type: VIEW; Schema: beheer; Owner: -
--

CREATE VIEW vw_opt_table AS
 SELECT opt.opt_id,
    opt.observed_property_type_class,
    opt.result_type,
    opt.hoedanigheid_id,
    hdh.code AS "hoedanigheid.code",
    opt.object_group_id,
    ojg.name AS "object.code",
    opt.quantity_id,
    grh.code AS "grootheid.code",
    opt.taxa_group_id,
    txg.name AS "Taxagroup.omschrijving",
    opt.substance_group_id,
    chs.code AS "chemischestof.code",
    opt.indicator_id,
    typ.code AS "typering.code",
    opt.d_status,
    opt.last_changed_date AS last_change_date
   FROM ((((((((public.observed_property_type opt
     LEFT JOIN public.substance_group ssg ON ((ssg.ssg_id = opt.substance_group_id)))
     LEFT JOIN public.substance_group_element ssge ON ((ssge.ssge_id = ssg.ssg_id)))
     LEFT JOIN public.chemische_stof_type chs ON ((chs.chs_id = ssge.chs_id)))
     LEFT JOIN public.taxa_group txg ON ((txg.txg_id = opt.taxa_group_id)))
     LEFT JOIN public.hoedanigheid_type hdh ON ((hdh.hdh_id = opt.hoedanigheid_id)))
     LEFT JOIN public.object_group ojg ON ((ojg.ojg_id = opt.object_group_id)))
     LEFT JOIN public.grootheid_type grh ON ((grh.grh_id = opt.quantity_id)))
     LEFT JOIN public.typering_type typ ON ((typ.typ_id = opt.indicator_id)))
  ORDER BY txg.name, chs.code, opt.opt_id DESC;


--
-- Name: VIEW vw_opt_table; Type: COMMENT; Schema: beheer; Owner: -
--

COMMENT ON VIEW vw_opt_table IS 'Deze view toont de observed_property_type tabel met de codes voorafgaand aan de ''vertaling''';


--
-- Name: vw_stat_user_tables_hist_last; Type: VIEW; Schema: beheer; Owner: -
--

CREATE VIEW vw_stat_user_tables_hist_last AS
 SELECT stat_user_tables_hist.suth_id,
    stat_user_tables_hist."timestamp",
    stat_user_tables_hist.relid,
    stat_user_tables_hist.schemaname,
    stat_user_tables_hist.relname,
    stat_user_tables_hist.seq_scan,
    stat_user_tables_hist.seq_tup_read,
    stat_user_tables_hist.idx_scan,
    stat_user_tables_hist.idx_tup_fetch,
    stat_user_tables_hist.n_tup_ins,
    stat_user_tables_hist.n_tup_upd,
    stat_user_tables_hist.n_tup_del,
    stat_user_tables_hist.n_tup_hot_upd,
    stat_user_tables_hist.n_live_tup,
    stat_user_tables_hist.n_dead_tup,
    stat_user_tables_hist.n_mod_since_analyze,
    stat_user_tables_hist.last_vacuum,
    stat_user_tables_hist.last_autovacuum,
    stat_user_tables_hist.last_analyze,
    stat_user_tables_hist.last_autoanalyze,
    stat_user_tables_hist.vacuum_count,
    stat_user_tables_hist.autovacuum_count,
    stat_user_tables_hist.analyze_count,
    stat_user_tables_hist.autoanalyze_count,
    stat_user_tables_hist.n_live_tup_real
   FROM stat_user_tables_hist
  WHERE (stat_user_tables_hist."timestamp" IN ( SELECT max(stat_user_tables_hist_1."timestamp") AS max
           FROM stat_user_tables_hist stat_user_tables_hist_1));


--
-- Name: vw_stat_user_tables_hist_prev; Type: VIEW; Schema: beheer; Owner: -
--

CREATE VIEW vw_stat_user_tables_hist_prev AS
 SELECT stat_user_tables_hist.suth_id,
    stat_user_tables_hist."timestamp",
    stat_user_tables_hist.relid,
    stat_user_tables_hist.schemaname,
    stat_user_tables_hist.relname,
    stat_user_tables_hist.seq_scan,
    stat_user_tables_hist.seq_tup_read,
    stat_user_tables_hist.idx_scan,
    stat_user_tables_hist.idx_tup_fetch,
    stat_user_tables_hist.n_tup_ins,
    stat_user_tables_hist.n_tup_upd,
    stat_user_tables_hist.n_tup_del,
    stat_user_tables_hist.n_tup_hot_upd,
    stat_user_tables_hist.n_live_tup,
    stat_user_tables_hist.n_dead_tup,
    stat_user_tables_hist.n_mod_since_analyze,
    stat_user_tables_hist.last_vacuum,
    stat_user_tables_hist.last_autovacuum,
    stat_user_tables_hist.last_analyze,
    stat_user_tables_hist.last_autoanalyze,
    stat_user_tables_hist.vacuum_count,
    stat_user_tables_hist.autovacuum_count,
    stat_user_tables_hist.analyze_count,
    stat_user_tables_hist.autoanalyze_count,
    stat_user_tables_hist.n_live_tup_real
   FROM stat_user_tables_hist
  WHERE (stat_user_tables_hist."timestamp" IN ( SELECT max(max_but_one."timestamp") AS max
           FROM ( SELECT stat_user_tables_hist_1."timestamp"
                   FROM stat_user_tables_hist stat_user_tables_hist_1
                  WHERE (NOT (stat_user_tables_hist_1."timestamp" IN ( SELECT max(stat_user_tables_hist_2."timestamp") AS max
                           FROM stat_user_tables_hist stat_user_tables_hist_2)))) max_but_one));


--
-- Name: vw_stat_user_tables_hist_last_prev; Type: VIEW; Schema: beheer; Owner: -
--

CREATE VIEW vw_stat_user_tables_hist_last_prev AS
 SELECT suth_last.suth_id AS last_suth_id,
    suth_last."timestamp" AS last_timestamp,
    suth_last.relid AS last_relid,
    suth_last.schemaname AS last_schemaname,
    suth_last.relname AS last_relname,
    suth_last.seq_scan AS last_seq_scan,
    suth_last.seq_tup_read AS last_seq_tup_read,
    suth_last.idx_scan AS last_idx_scan,
    suth_last.idx_tup_fetch AS last_idx_tup_fetch,
    suth_last.n_tup_ins AS last_n_tup_ins,
    suth_last.n_tup_upd AS last_n_tup_upd,
    suth_last.n_tup_del AS last_n_tup_del,
    suth_last.n_tup_hot_upd AS last_n_tup_hot_upd,
    suth_last.n_live_tup AS last_n_live_tup,
    suth_last.n_dead_tup AS last_n_dead_tup,
    suth_last.n_mod_since_analyze AS last_n_mod_since_analyze,
    suth_last.last_vacuum AS last_last_vacuum,
    suth_last.last_autovacuum AS last_last_autovacuum,
    suth_last.last_analyze AS last_last_analyze,
    suth_last.last_autoanalyze AS last_last_autoanalyze,
    suth_last.vacuum_count AS last_vacuum_count,
    suth_last.autovacuum_count AS last_autovacuum_count,
    suth_last.analyze_count AS last_analyze_count,
    suth_last.autoanalyze_count AS last_autoanalyze_count,
    suth_last.n_live_tup_real AS last_n_live_tup_real,
    suth_prev.suth_id AS prev_suth_id,
    suth_prev."timestamp" AS prev_timestamp,
    suth_prev.relid AS prev_relid,
    suth_prev.schemaname AS prev_schemaname,
    suth_prev.relname AS prev_relname,
    suth_prev.seq_scan AS prev_seq_scan,
    suth_prev.seq_tup_read AS prev_seq_tup_read,
    suth_prev.idx_scan AS prev_idx_scan,
    suth_prev.idx_tup_fetch AS prev_idx_tup_fetch,
    suth_prev.n_tup_ins AS prev_n_tup_ins,
    suth_prev.n_tup_upd AS prev_n_tup_upd,
    suth_prev.n_tup_del AS prev_n_tup_del,
    suth_prev.n_tup_hot_upd AS prev_n_tup_hot_upd,
    suth_prev.n_live_tup AS prev_n_live_tup,
    suth_prev.n_dead_tup AS prev_n_dead_tup,
    suth_prev.n_mod_since_analyze AS prev_n_mod_since_analyze,
    suth_prev.last_vacuum AS prev_last_vacuum,
    suth_prev.last_autovacuum AS prev_last_autovacuum,
    suth_prev.last_analyze AS prev_last_analyze,
    suth_prev.last_autoanalyze AS prev_last_autoanalyze,
    suth_prev.vacuum_count AS prev_vacuum_count,
    suth_prev.autovacuum_count AS prev_autovacuum_count,
    suth_prev.analyze_count AS prev_analyze_count,
    suth_prev.autoanalyze_count AS prev_autoanalyze_count,
    suth_prev.n_live_tup_real AS prev_n_live_tup_real
   FROM (vw_stat_user_tables_hist_last suth_last
     FULL JOIN vw_stat_user_tables_hist_prev suth_prev ON ((suth_prev.relid = suth_last.relid)));


--
-- Name: vw_stat_user_tables_hist_smpl_rpt; Type: VIEW; Schema: beheer; Owner: -
--

CREATE VIEW vw_stat_user_tables_hist_smpl_rpt AS
 SELECT vwsuthlp.last_suth_id,
    vwsuthlp.last_timestamp,
    vwsuthlp.last_relid,
    vwsuthlp.last_schemaname,
    vwsuthlp.last_relname,
    vwsuthlp.prev_n_live_tup_real,
    vwsuthlp.last_n_live_tup_real,
    (COALESCE(vwsuthlp.last_n_live_tup_real, (0)::bigint) - COALESCE(vwsuthlp.prev_n_live_tup_real, (0)::bigint)) AS n_live_tup_real_chg,
        CASE
            WHEN ((COALESCE(vwsuthlp.prev_n_live_tup_real, (0)::bigint) = 0) AND (vwsuthlp.last_n_live_tup_real = 0)) THEN 0
            WHEN ((COALESCE(vwsuthlp.prev_n_live_tup_real, (0)::bigint) = 0) AND (vwsuthlp.last_n_live_tup_real > 0)) THEN 100
            WHEN (vwsuthlp.prev_n_live_tup_real > 0) THEN (round(((100.0 * ((COALESCE(vwsuthlp.last_n_live_tup_real, (0)::bigint))::numeric - (vwsuthlp.prev_n_live_tup_real)::numeric)) / (vwsuthlp.prev_n_live_tup_real)::numeric)))::integer
            ELSE 100
        END AS n_live_tup_real_chg_pct,
    vwsuthlp.prev_schemaname,
    vwsuthlp.prev_relname,
    vwsuthlp.prev_suth_id,
    vwsuthlp.prev_timestamp,
    vwsuthlp.prev_relid
   FROM vw_stat_user_tables_hist_last_prev vwsuthlp
  WHERE ((vwsuthlp.prev_n_live_tup_real <> vwsuthlp.last_n_live_tup_real) OR (vwsuthlp.prev_n_live_tup_real IS NULL) OR (vwsuthlp.last_n_live_tup_real IS NULL))
  ORDER BY vwsuthlp.last_schemaname, vwsuthlp.last_relname;


--
-- Name: vw_waterbeheerder_stroomgebieddistrict; Type: VIEW; Schema: beheer; Owner: -
--

CREATE VIEW vw_waterbeheerder_stroomgebieddistrict AS
 SELECT DISTINCT ON (vw_competent_authority.waterbeheerder_db_id, vw_sg_en_dsg_districten."Identificatie", hydro_object.wkrv_id) vw_competent_authority.waterbeheerder_db_id AS waterbeheerder_code,
    competentauthority_namespacetype.ore_id,
    vw_competent_authority."Omschrijving" AS waterbeheerder_omschrijving,
        CASE
            WHEN ((vw_sg_en_dsg_districten."Identificatie")::text = 'NLRNNO'::text) THEN 'Rijn-Noord'::text
            ELSE ''::text
        END AS "Stroomgebieddistrict Rijn-Noord",
        CASE
            WHEN ((vw_sg_en_dsg_districten."Identificatie")::text = 'NLRNOO'::text) THEN 'Rijn-Oost'::text
            ELSE ''::text
        END AS "Stroomgebieddistrict Rijn-Oost",
        CASE
            WHEN ((vw_sg_en_dsg_districten."Identificatie")::text = 'NLRNWE'::text) THEN 'Rijn-West'::text
            ELSE ''::text
        END AS "Stroomgebieddistrict Rijn-West",
        CASE
            WHEN ((vw_sg_en_dsg_districten."Identificatie")::text = 'NLMS'::text) THEN 'Maas'::text
            ELSE ''::text
        END AS "Stroomgebied Maas",
        CASE
            WHEN ((vw_sg_en_dsg_districten."Identificatie")::text = 'NLEM'::text) THEN 'Eems'::text
            ELSE ''::text
        END AS "Stroomgebied Eems",
        CASE
            WHEN ((vw_sg_en_dsg_districten."Identificatie")::text = 'NLSC'::text) THEN 'Schelde'::text
            ELSE ''::text
        END AS "Stroomgebied Schelde",
    hydro_object.wkrv_id AS versie
   FROM (((((public.hydro_object
     LEFT JOIN public.management_regulation_or_restriction_zone ON ((management_regulation_or_restriction_zone.mrz_id = hydro_object.hdo_id)))
     LEFT JOIN public.competentauthority_namespacetype ON ((competentauthority_namespacetype.ns_id = hydro_object.inspire_id_namespace)))
     LEFT JOIN public.vw_competent_authority ON ((vw_competent_authority."DB_ID" = competentauthority_namespacetype.ore_id)))
     JOIN public.water_body ON ((water_body.wbd_id = hydro_object.hdo_id)))
     LEFT JOIN public.vw_sg_en_dsg_districten ON ((vw_sg_en_dsg_districten."DB_ID" = water_body.rbd_id)))
  ORDER BY vw_competent_authority.waterbeheerder_db_id, vw_sg_en_dsg_districten."Identificatie", hydro_object.wkrv_id;


SET search_path = domains, pg_catalog;

--
-- Name: bemonsteringsmethode_bmm_id_seq; Type: SEQUENCE; Schema: domains; Owner: -
--

CREATE SEQUENCE bemonsteringsmethode_bmm_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: bemonsteringsmethode_bmm_id_seq; Type: SEQUENCE OWNED BY; Schema: domains; Owner: -
--

ALTER SEQUENCE bemonsteringsmethode_bmm_id_seq OWNED BY bemonsteringsmethode.bmm_id;


--
-- Name: certificeringscode; Type: TABLE; Schema: domains; Owner: -
--

CREATE TABLE certificeringscode (
    ctf_id integer NOT NULL,
    code character varying(50) NOT NULL,
    description character varying(255) NOT NULL,
    d_begin timestamp without time zone,
    d_eind timestamp without time zone,
    d_status character varying(50) DEFAULT 'Gepubliceerd'::character varying
);


--
-- Name: certificeringscode_ctf_id_seq; Type: SEQUENCE; Schema: domains; Owner: -
--

CREATE SEQUENCE certificeringscode_ctf_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: certificeringscode_ctf_id_seq; Type: SEQUENCE OWNED BY; Schema: domains; Owner: -
--

ALTER SEQUENCE certificeringscode_ctf_id_seq OWNED BY certificeringscode.ctf_id;


--
-- Name: confidence_level_type; Type: TABLE; Schema: domains; Owner: -
--

CREATE TABLE confidence_level_type (
    clt_id integer NOT NULL,
    code character varying(1) NOT NULL,
    description character varying(50),
    d_begin timestamp without time zone,
    d_eind timestamp without time zone,
    d_status character varying(50) DEFAULT 'Gepubliceerd'::character varying,
    last_change_time timestamp without time zone
);


--
-- Name: confidence_level_type_clt_id_seq; Type: SEQUENCE; Schema: domains; Owner: -
--

CREATE SEQUENCE confidence_level_type_clt_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: confidence_level_type_clt_id_seq; Type: SEQUENCE OWNED BY; Schema: domains; Owner: -
--

ALTER SEQUENCE confidence_level_type_clt_id_seq OWNED BY confidence_level_type.clt_id;


--
-- Name: drivers; Type: TABLE; Schema: domains; Owner: -
--

CREATE TABLE drivers (
    driver_id integer NOT NULL,
    naam character varying(255),
    order_id integer,
    last_changed_date timestamp without time zone,
    d_begin timestamp without time zone,
    d_eind timestamp without time zone,
    d_status character varying(50) DEFAULT 'Gepubliceerd'::character varying NOT NULL
);


--
-- Name: drivers_driver_id_seq; Type: SEQUENCE; Schema: domains; Owner: -
--

CREATE SEQUENCE drivers_driver_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: drivers_driver_id_seq; Type: SEQUENCE OWNED BY; Schema: domains; Owner: -
--

ALTER SEQUENCE drivers_driver_id_seq OWNED BY drivers.driver_id;


--
-- Name: impacts; Type: TABLE; Schema: domains; Owner: -
--

CREATE TABLE impacts (
    impact_id integer NOT NULL,
    naam character varying(255),
    order_id integer,
    last_changed_date timestamp without time zone,
    d_begin timestamp without time zone,
    d_eind timestamp without time zone,
    d_status character varying(50) DEFAULT 'Gepubliceerd'::character varying NOT NULL,
    usedforgw boolean,
    usedforsw boolean
);


--
-- Name: impacts_impact_id_seq; Type: SEQUENCE; Schema: domains; Owner: -
--

CREATE SEQUENCE impacts_impact_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: impacts_impact_id_seq; Type: SEQUENCE OWNED BY; Schema: domains; Owner: -
--

ALTER SEQUENCE impacts_impact_id_seq OWNED BY impacts.impact_id;


--
-- Name: indicator_descriptor; Type: TABLE; Schema: domains; Owner: -
--

CREATE TABLE indicator_descriptor (
    idd_id integer NOT NULL,
    opt_id integer NOT NULL,
    part_of_idd_id integer,
    additional_description character varying(1000),
    eu_identifier character varying(256),
    begin_lifespan_version timestamp without time zone NOT NULL,
    end_lifespan_version timestamp without time zone,
    last_change_time timestamp without time zone NOT NULL,
    name character varying(50) NOT NULL,
    d_begin timestamp without time zone,
    d_eind timestamp without time zone,
    d_status character varying(50) DEFAULT 'Gepubliceerd'::character varying
);


--
-- Name: indicator_descriptor_idd_id_seq; Type: SEQUENCE; Schema: domains; Owner: -
--

CREATE SEQUENCE indicator_descriptor_idd_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: indicator_descriptor_idd_id_seq; Type: SEQUENCE OWNED BY; Schema: domains; Owner: -
--

ALTER SEQUENCE indicator_descriptor_idd_id_seq OWNED BY indicator_descriptor.idd_id;


--
-- Name: locatietype_waardebepaling; Type: TABLE; Schema: domains; Owner: -
--

CREATE TABLE locatietype_waardebepaling (
    ltwb_id integer NOT NULL,
    code character varying(50) NOT NULL,
    description character varying(255) NOT NULL,
    d_begin timestamp without time zone,
    d_eind timestamp without time zone,
    d_status character varying(50) DEFAULT 'Gepubliceerd'::character varying
);


--
-- Name: locatietype_waardebepaling_ltwb_id_seq; Type: SEQUENCE; Schema: domains; Owner: -
--

CREATE SEQUENCE locatietype_waardebepaling_ltwb_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: locatietype_waardebepaling_ltwb_id_seq; Type: SEQUENCE OWNED BY; Schema: domains; Owner: -
--

ALTER SEQUENCE locatietype_waardebepaling_ltwb_id_seq OWNED BY locatietype_waardebepaling.ltwb_id;


--
-- Name: meetapparaat_mar_id_seq; Type: SEQUENCE; Schema: domains; Owner: -
--

CREATE SEQUENCE meetapparaat_mar_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: meetapparaat_mar_id_seq; Type: SEQUENCE OWNED BY; Schema: domains; Owner: -
--

ALTER SEQUENCE meetapparaat_mar_id_seq OWNED BY meetapparaat.mar_id;


--
-- Name: monsterbewerkingsmethode_mbm_id_seq; Type: SEQUENCE; Schema: domains; Owner: -
--

CREATE SEQUENCE monsterbewerkingsmethode_mbm_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: monsterbewerkingsmethode_mbm_id_seq; Type: SEQUENCE OWNED BY; Schema: domains; Owner: -
--

ALTER SEQUENCE monsterbewerkingsmethode_mbm_id_seq OWNED BY monsterbewerkingsmethode.mbm_id;


--
-- Name: monstervoorbehandeling; Type: TABLE; Schema: domains; Owner: -
--

CREATE TABLE monstervoorbehandeling (
    mvb_id integer NOT NULL,
    code character varying(50) NOT NULL,
    description character varying(255) NOT NULL,
    d_begin timestamp without time zone,
    d_eind timestamp without time zone,
    d_status character varying(50) DEFAULT 'Gepubliceerd'::character varying
);


--
-- Name: monstervoorbehandeling_mvb_id_seq; Type: SEQUENCE; Schema: domains; Owner: -
--

CREATE SEQUENCE monstervoorbehandeling_mvb_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: monstervoorbehandeling_mvb_id_seq; Type: SEQUENCE OWNED BY; Schema: domains; Owner: -
--

ALTER SEQUENCE monstervoorbehandeling_mvb_id_seq OWNED BY monstervoorbehandeling.mvb_id;


--
-- Name: orgaan_org_id_seq; Type: SEQUENCE; Schema: domains; Owner: -
--

CREATE SEQUENCE orgaan_org_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: orgaan_org_id_seq; Type: SEQUENCE OWNED BY; Schema: domains; Owner: -
--

ALTER SEQUENCE orgaan_org_id_seq OWNED BY orgaan.org_id;


--
-- Name: status_change_motivation_type; Type: TABLE; Schema: domains; Owner: -
--

CREATE TABLE status_change_motivation_type (
    scm_id integer NOT NULL,
    description character varying(255) NOT NULL,
    d_begin timestamp without time zone,
    d_eind timestamp without time zone,
    d_status character varying(50) DEFAULT 'Gepubliceerd'::character varying,
    last_change_time timestamp without time zone
);


--
-- Name: status_change_motivation_type_scm_id_seq; Type: SEQUENCE; Schema: domains; Owner: -
--

CREATE SEQUENCE status_change_motivation_type_scm_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: status_change_motivation_type_scm_id_seq; Type: SEQUENCE OWNED BY; Schema: domains; Owner: -
--

ALTER SEQUENCE status_change_motivation_type_scm_id_seq OWNED BY status_change_motivation_type.scm_id;


--
-- Name: veldapparaat_var_id_seq; Type: SEQUENCE; Schema: domains; Owner: -
--

CREATE SEQUENCE veldapparaat_var_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: veldapparaat_var_id_seq; Type: SEQUENCE OWNED BY; Schema: domains; Owner: -
--

ALTER SEQUENCE veldapparaat_var_id_seq OWNED BY veldapparaat.var_id;


--
-- Name: waardebepalingstechniek; Type: TABLE; Schema: domains; Owner: -
--

CREATE TABLE waardebepalingstechniek (
    wbpt_id integer NOT NULL,
    code character varying(50) NOT NULL,
    description character varying(255) NOT NULL,
    d_begin timestamp without time zone,
    d_eind timestamp without time zone,
    d_status character varying(50) DEFAULT 'Gepubliceerd'::character varying
);


--
-- Name: waardebepalingstechniek_wbpt_id_seq; Type: SEQUENCE; Schema: domains; Owner: -
--

CREATE SEQUENCE waardebepalingstechniek_wbpt_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: waardebepalingstechniek_wbpt_id_seq; Type: SEQUENCE OWNED BY; Schema: domains; Owner: -
--

ALTER SEQUENCE waardebepalingstechniek_wbpt_id_seq OWNED BY waardebepalingstechniek.wbpt_id;


SET search_path = eu_state_of_environment, pg_catalog;

--
-- Name: monprog_2015; Type: TABLE; Schema: eu_state_of_environment; Owner: -
--

CREATE TABLE monprog_2015 (
    mpnident character varying(100) NOT NULL,
    ligt_in_owm character varying(100),
    rd_x double precision,
    rd_y double precision,
    parameter character varying(24) NOT NULL,
    monfreq integer,
    moncyclus integer,
    monsoort character varying(10) NOT NULL,
    repr_owm character varying(100) NOT NULL,
    mpntype character varying(50),
    diepte character varying(50),
    montype character varying(50) DEFAULT 'ow'::character varying,
    naam character varying(100),
    sgb character varying(10),
    purpose character varying(25),
    sinds character varying(10),
    tot character varying(10),
    fract character varying(10)
);


SET search_path = factsheets, pg_catalog;

--
-- Name: rapport_tekst; Type: TABLE; Schema: factsheets; Owner: -
--

CREATE TABLE rapport_tekst (
    rapport_tekst_id integer NOT NULL,
    wb_type_id integer,
    veld_id integer,
    uitvoering_tpe_id integer,
    tekst character varying(1000),
    begindatum timestamp without time zone NOT NULL,
    einddatum timestamp without time zone NOT NULL
);


--
-- Name: uitvoering_type; Type: TABLE; Schema: factsheets; Owner: -
--

CREATE TABLE uitvoering_type (
    uitvoering_type_id integer NOT NULL,
    omschrijving character varying(50)
);


--
-- Name: veld; Type: TABLE; Schema: factsheets; Owner: -
--

CREATE TABLE veld (
    veld_id integer NOT NULL,
    omschrijving character varying(50)
);


SET search_path = public, pg_catalog;

--
-- Name: wb_status_change_motivation; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE wb_status_change_motivation (
    wbsc_id integer NOT NULL,
    wbd_id integer NOT NULL,
    scm_id integer NOT NULL,
    opt_id integer NOT NULL,
    year_initial integer DEFAULT 2009 NOT NULL,
    year_status integer,
    last_change_time timestamp without time zone
);


SET search_path = factsheets, pg_catalog;

--
-- Name: vw_ch3_toestand_achteruitgang; Type: VIEW; Schema: factsheets; Owner: -
--

CREATE VIEW vw_ch3_toestand_achteruitgang AS
 SELECT wscm.wbd_id,
    wscm.opt_id,
    wscm.year_status
   FROM public.wb_status_change_motivation wscm
  WHERE (wscm.scm_id = 4);


SET search_path = public, pg_catalog;

--
-- Name: classification_type; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE classification_type (
    cls_id integer NOT NULL,
    code character varying(50) NOT NULL,
    description character varying(90) NOT NULL,
    clsg_id integer NOT NULL,
    d_begin timestamp without time zone,
    d_eind timestamp without time zone,
    last_changed_date timestamp without time zone,
    d_status character varying(50) DEFAULT 'Gepubliceerd'::character varying
);


--
-- Name: gw_chemical_status; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE gw_chemical_status (
    gwcs_id integer NOT NULL,
    gys_id integer NOT NULL,
    clst_id integer NOT NULL,
    last_change_time timestamp without time zone NOT NULL,
    eumg_id integer NOT NULL,
    wbpm_id integer NOT NULL,
    opt_id integer NOT NULL,
    observation_start_date date,
    observation_end_date date,
    clt_id integer
);


--
-- Name: gw_quantity_status; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE gw_quantity_status (
    gwqs_id integer NOT NULL,
    gys_id integer NOT NULL,
    gwst_id integer NOT NULL,
    last_change_time timestamp without time zone NOT NULL,
    wbpm_id integer NOT NULL,
    eumg_id integer NOT NULL,
    opt_id integer NOT NULL,
    clt_id integer DEFAULT 2
);


--
-- Name: gwb_yearly_status; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE gwb_yearly_status (
    gys_id integer NOT NULL,
    gwb_id integer NOT NULL,
    year_of_status integer NOT NULL,
    comment_on_chemical_status character varying(500),
    comment_on_quantity_status character varying(500),
    motivation_4no_chemical_status text,
    motivation_4no_quantity_status text,
    last_change_time timestamp without time zone NOT NULL,
    additional_purification boolean DEFAULT false NOT NULL,
    motivation_4no_chemical_trends text,
    exceeds_drinkingwater boolean DEFAULT false NOT NULL
);


--
-- Name: vw_waargenomen_eigenschap_db_id; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_waargenomen_eigenschap_db_id AS
 SELECT observed_property_type.opt_id AS "DB_ID",
    typering_type.typ_id AS "Typering_DB_ID",
    typering_type.code AS "Tpering_Code",
    typering_type.omschrijving AS "Typering_Omschrijving",
    grootheid_type.grh_id AS "Grootheid_DB_ID",
    grootheid_type.code AS "Grootheid_Code",
    grootheid_type.omschrijving AS "Grootheid_Omschrijving",
    chemische_stof_type.chs_id AS "ChemischeStof_DB_ID",
    chemische_stof_type.code AS "ChemischeStof_code",
    chemische_stof_type.naam AS "ChemischeStof_Omschrijving",
    chemische_stof_type.cas_nr AS "ChemischeStof_CASnr",
    classification_group_type.code AS "ClassificatieType_Code",
    classification_group_type.description AS "ClassificatieType_Omschrijving",
    object_type.obj_id AS "Object_DB_ID",
    object_type.omschrijving AS "Object_Omschrijving",
    object_type.code AS "Object_Code",
    taxon_type.txn_id AS "Taxon_DB_ID",
    taxon_type.code AS "Taxon_Naam",
    taxon_type.auteur AS "Taxon_Auteur",
    hoedanigheid_type.hdh_id AS "Hoedanigheid_DB_ID",
    hoedanigheid_type.code AS "Hoedanigheid_Code",
    hoedanigheid_type.omschrijving AS "Hoedanigheid_Omschrijving",
    observed_property_type.observed_property_type_class AS "Parameter_Type",
    observed_property_type.result_type AS "Parameter_Resultaat",
    observed_property_type.remarks AS "Opmerkingen"
   FROM (((((((observed_property_type
     LEFT JOIN (object_type
     JOIN object_group_element ON ((object_type.obj_id = object_group_element.obj_id))) ON ((object_group_element.ojg_id = observed_property_type.object_group_id)))
     LEFT JOIN hoedanigheid_type ON ((hoedanigheid_type.hdh_id = observed_property_type.hoedanigheid_id)))
     LEFT JOIN grootheid_type ON ((grootheid_type.grh_id = observed_property_type.quantity_id)))
     LEFT JOIN (taxon_type
     JOIN taxa_group_element ON ((taxon_type.txn_id = taxa_group_element.txn_id))) ON ((taxa_group_element.txg_id = observed_property_type.taxa_group_id)))
     LEFT JOIN (chemische_stof_type
     JOIN substance_group_element ON ((chemische_stof_type.chs_id = substance_group_element.chs_id))) ON ((substance_group_element.ssge_id = observed_property_type.substance_group_id)))
     LEFT JOIN typering_type ON ((typering_type.typ_id = observed_property_type.indicator_id)))
     LEFT JOIN classification_group_type ON ((classification_group_type.clsg_id = observed_property_type.classification_group_id)))
  ORDER BY typering_type.code, grootheid_type.code, chemische_stof_type.code, object_type.code, taxon_type.code, hoedanigheid_type.code;


--
-- Name: wfd_qe_gwtype; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE wfd_qe_gwtype (
    opt_id integer NOT NULL,
    part_of_opt_id_eu integer,
    part_of_opt_id_nl integer,
    main_group boolean NOT NULL,
    is_applicable boolean NOT NULL,
    is_excemption boolean NOT NULL,
    name character varying(255) NOT NULL,
    qegw_id integer NOT NULL,
    clsg_id integer NOT NULL,
    is_trendsubstance boolean DEFAULT true NOT NULL,
    is_backgroundlevelsubstance boolean DEFAULT false NOT NULL,
    sortorder integer,
    d_begin timestamp without time zone,
    d_eind timestamp without time zone,
    last_changed_date timestamp without time zone,
    d_status character varying(50) DEFAULT 'Gepubliceerd'::character varying
);


SET search_path = factsheets, pg_catalog;

--
-- Name: vw_oordeel_totaal_gwl_for_crystal_reports; Type: VIEW; Schema: factsheets; Owner: -
--

CREATE VIEW vw_oordeel_totaal_gwl_for_crystal_reports AS
 WITH krw_kwal AS (
         SELECT wfd_qe_gwtype.name,
                CASE
                    WHEN (wfd_qe_gwtype.part_of_opt_id_nl = ANY (ARRAY[4495, 4494])) THEN 'LANDELIJK'::text
                    ELSE
                    CASE
                        WHEN (wfd_qe_gwtype.part_of_opt_id_eu = ANY (ARRAY[4494, 4495])) THEN 'REGIONAAL'::text
                        ELSE
                        CASE
                            WHEN (wfd_qe_gwtype.opt_id = ANY (ARRAY[4494, 4495, 4487])) THEN 'TOTAAL'::text
                            ELSE 'NVT'::text
                        END
                    END
                END AS "CATEGORIE",
            wfd_qe_gwtype.opt_id,
            wfd_qe_gwtype.is_applicable
           FROM public.wfd_qe_gwtype
        )
 SELECT gwb_yearly_status.gys_id AS "DB_ID",
    hdo_gwb.hdo_id AS "Waterlichaam_DB_ID",
    hdo_gwb.inspire_id_local_id AS "Waterlichaam_identificatie",
    hdo_gwb.wkrv_id AS "Waterlichaam_Versie",
    gwb_yearly_status.year_of_status AS "Rapportagejaar",
    vw_waargenomen_eigenschap_db_id."DB_ID" AS "Waargenomen_Eigenschap_DB_ID",
        CASE
            WHEN (krw_kwal.name IS NOT NULL) THEN krw_kwal.name
            ELSE
            CASE
                WHEN (vw_waargenomen_eigenschap_db_id."ChemischeStof_Omschrijving" IS NOT NULL) THEN vw_waargenomen_eigenschap_db_id."ChemischeStof_Omschrijving"
                ELSE vw_waargenomen_eigenschap_db_id."Grootheid_Omschrijving"
            END
        END AS "Typering",
    classification_type.code AS "Oordeel_Code",
    classification_type.description AS "Oordeel",
    eu_monitoring_goal_type.code AS "Oordeel_Type_Code",
    eu_monitoring_goal_type.description AS "Oordeel_Type_Omschrijving",
    waarde_bepalings_methode_type.code AS "WaardebepalingsMethode_Code",
    waarde_bepalings_methode_type.omschrijving AS "WaardebepalingsMethode_Omschrijving",
    (gwb_yearly_status.comment_on_chemical_status)::character varying(5000) AS "Toelichting_ChemischeStatus",
    (gwb_yearly_status.comment_on_quantity_status)::character varying(5000) AS "Toelichting_EcologischeStatus",
    (gwb_yearly_status.motivation_4no_chemical_status)::character varying(5000) AS "Motivatie_Geen_ChemischeStatus",
    (gwb_yearly_status.motivation_4no_chemical_trends)::character varying(5000) AS "Motivatie_Geen_ChemischeTrend",
    (gwb_yearly_status.motivation_4no_quantity_status)::character varying(5000) AS "Motivatie_Geen_EcologischeStatus",
        CASE
            WHEN (krw_kwal.is_applicable = true) THEN (krw_kwal."CATEGORIE")::character varying(24)
            ELSE 'NVT'::character varying
        END AS "KWAL_ELEMENT",
        CASE
            WHEN (wscm.scm_id IS NOT NULL) THEN 'A'::character varying(1)
            ELSE NULL::character varying
        END AS "Motivatie_Achteruitgang"
   FROM ((((((((public.gwb_yearly_status
     LEFT JOIN public.hydro_object hdo_gwb ON ((hdo_gwb.hdo_id = gwb_yearly_status.gwb_id)))
     JOIN public.gw_chemical_status ON ((gw_chemical_status.gys_id = gwb_yearly_status.gys_id)))
     LEFT JOIN public.classification_type ON ((gw_chemical_status.clst_id = classification_type.cls_id)))
     LEFT JOIN public.vw_waargenomen_eigenschap_db_id ON ((vw_waargenomen_eigenschap_db_id."DB_ID" = gw_chemical_status.opt_id)))
     LEFT JOIN public.waarde_bepalings_methode_type ON ((waarde_bepalings_methode_type.wbpm_id = gw_chemical_status.wbpm_id)))
     LEFT JOIN public.eu_monitoring_goal_type ON ((eu_monitoring_goal_type.eumg_id = gw_chemical_status.eumg_id)))
     LEFT JOIN public.wb_status_change_motivation wscm ON (((wscm.wbd_id = hdo_gwb.hdo_id) AND (wscm.opt_id = vw_waargenomen_eigenschap_db_id."DB_ID") AND (wscm.year_status = gwb_yearly_status.year_of_status) AND (wscm.scm_id = 1))))
     FULL JOIN krw_kwal ON ((vw_waargenomen_eigenschap_db_id."DB_ID" = krw_kwal.opt_id)))
UNION ALL
 SELECT gwb_yearly_status.gys_id AS "DB_ID",
    hdo_gwb.hdo_id AS "Waterlichaam_DB_ID",
    hdo_gwb.inspire_id_local_id AS "Waterlichaam_identificatie",
    hdo_gwb.wkrv_id AS "Waterlichaam_Versie",
    gwb_yearly_status.year_of_status AS "Rapportagejaar",
    vw_waargenomen_eigenschap_db_id."DB_ID" AS "Waargenomen_Eigenschap_DB_ID",
        CASE
            WHEN (krw_kwal.name IS NOT NULL) THEN krw_kwal.name
            ELSE
            CASE
                WHEN (vw_waargenomen_eigenschap_db_id."ChemischeStof_Omschrijving" IS NOT NULL) THEN vw_waargenomen_eigenschap_db_id."ChemischeStof_Omschrijving"
                ELSE vw_waargenomen_eigenschap_db_id."Grootheid_Omschrijving"
            END
        END AS "Typering",
    classification_type.code AS "Oordeel_Code",
    classification_type.description AS "Oordeel",
    eu_monitoring_goal_type.code AS "Oordeel_Type_Code",
    eu_monitoring_goal_type.description AS "Oordeel_Type_Omschrijving",
    waarde_bepalings_methode_type.code AS "WaardebepalingsMethode_Code",
    waarde_bepalings_methode_type.omschrijving AS "WaardebepalingsMethode_Omschrijving",
    (gwb_yearly_status.comment_on_chemical_status)::character varying(5000) AS "Toelichting_ChemischeStatus",
    (gwb_yearly_status.comment_on_quantity_status)::character varying(5000) AS "Toelichting_EcologischeStatus",
    (gwb_yearly_status.motivation_4no_chemical_status)::character varying(5000) AS "Motivatie_Geen_ChemischeStatus",
    (gwb_yearly_status.motivation_4no_chemical_trends)::character varying(5000) AS "Motivatie_Geen_ChemischeTrend",
    (gwb_yearly_status.motivation_4no_quantity_status)::character varying(5000) AS "Motivatie_Geen_EcologischeStatus",
        CASE
            WHEN (krw_kwal.is_applicable = true) THEN (krw_kwal."CATEGORIE")::character varying(24)
            ELSE 'NVT'::character varying
        END AS "KWAL_ELEMENT",
        CASE
            WHEN (wscm.scm_id IS NOT NULL) THEN 'A'::character varying(1)
            ELSE NULL::character varying
        END AS "Motivatie_Achteruitgang"
   FROM ((((((((public.gwb_yearly_status
     LEFT JOIN public.hydro_object hdo_gwb ON ((hdo_gwb.hdo_id = gwb_yearly_status.gwb_id)))
     JOIN public.gw_quantity_status ON ((gw_quantity_status.gys_id = gwb_yearly_status.gys_id)))
     LEFT JOIN public.classification_type ON ((gw_quantity_status.gwst_id = classification_type.cls_id)))
     LEFT JOIN public.vw_waargenomen_eigenschap_db_id ON ((vw_waargenomen_eigenschap_db_id."DB_ID" = gw_quantity_status.opt_id)))
     LEFT JOIN public.waarde_bepalings_methode_type ON ((waarde_bepalings_methode_type.wbpm_id = gw_quantity_status.wbpm_id)))
     LEFT JOIN public.eu_monitoring_goal_type ON ((eu_monitoring_goal_type.eumg_id = gw_quantity_status.eumg_id)))
     LEFT JOIN public.wb_status_change_motivation wscm ON (((wscm.wbd_id = hdo_gwb.hdo_id) AND (wscm.opt_id = vw_waargenomen_eigenschap_db_id."DB_ID") AND (wscm.year_status = gwb_yearly_status.year_of_status) AND (wscm.scm_id = 1))))
     FULL JOIN krw_kwal ON ((vw_waargenomen_eigenschap_db_id."DB_ID" = krw_kwal.opt_id)))
  ORDER BY 1, 6, 12 DESC, 10 DESC;


--
-- Name: vw_oordeel_totaal_gwl_for_crystal_reports01; Type: VIEW; Schema: factsheets; Owner: -
--

CREATE VIEW vw_oordeel_totaal_gwl_for_crystal_reports01 AS
 WITH krw_kwal AS (
         SELECT wfd_qe_gwtype.name,
                CASE
                    WHEN (wfd_qe_gwtype.part_of_opt_id_nl = ANY (ARRAY[4495, 4494])) THEN 'LANDELIJK'::text
                    ELSE
                    CASE
                        WHEN (wfd_qe_gwtype.part_of_opt_id_eu = ANY (ARRAY[4494, 4495])) THEN 'REGIONAAL'::text
                        ELSE
                        CASE
                            WHEN (wfd_qe_gwtype.opt_id = ANY (ARRAY[4494, 4495, 4487])) THEN 'TOTAAL'::text
                            ELSE 'NVT'::text
                        END
                    END
                END AS "CATEGORIE",
            wfd_qe_gwtype.opt_id,
            wfd_qe_gwtype.is_applicable
           FROM public.wfd_qe_gwtype
        )
 SELECT gwb_yearly_status.gys_id AS "DB_ID",
    hdo_gwb.hdo_id AS "Waterlichaam_DB_ID",
    hdo_gwb.inspire_id_local_id AS "Waterlichaam_identificatie",
    hdo_gwb.wkrv_id AS "Waterlichaam_Versie",
    gwb_yearly_status.year_of_status AS "Rapportagejaar",
    vw_waargenomen_eigenschap_db_id."DB_ID" AS "Waargenomen_Eigenschap_DB_ID",
        CASE
            WHEN (krw_kwal.name IS NOT NULL) THEN krw_kwal.name
            ELSE
            CASE
                WHEN (vw_waargenomen_eigenschap_db_id."ChemischeStof_Omschrijving" IS NOT NULL) THEN vw_waargenomen_eigenschap_db_id."ChemischeStof_Omschrijving"
                ELSE vw_waargenomen_eigenschap_db_id."Grootheid_Omschrijving"
            END
        END AS "Typering",
    classification_type.code AS "Oordeel_Code",
    classification_type.description AS "Oordeel",
    eu_monitoring_goal_type.code AS "Oordeel_Type_Code",
    eu_monitoring_goal_type.description AS "Oordeel_Type_Omschrijving",
    waarde_bepalings_methode_type.code AS "WaardebepalingsMethode_Code",
    waarde_bepalings_methode_type.omschrijving AS "WaardebepalingsMethode_Omschrijving",
    (gwb_yearly_status.comment_on_chemical_status)::character varying(5000) AS "Toelichting_ChemischeStatus",
    (gwb_yearly_status.comment_on_quantity_status)::character varying(5000) AS "Toelichting_EcologischeStatus",
    (gwb_yearly_status.motivation_4no_chemical_status)::character varying(5000) AS "Motivatie_Geen_ChemischeStatus",
    (gwb_yearly_status.motivation_4no_chemical_trends)::character varying(5000) AS "Motivatie_Geen_ChemischeTrend",
    (gwb_yearly_status.motivation_4no_quantity_status)::character varying(5000) AS "Motivatie_Geen_EcologischeStatus",
        CASE
            WHEN (krw_kwal.is_applicable = true) THEN (krw_kwal."CATEGORIE")::character varying(24)
            ELSE 'NVT'::character varying
        END AS "KWAL_ELEMENT",
        CASE
            WHEN (wscm.scm_id IS NOT NULL) THEN 'A'::character varying(1)
            ELSE NULL::character varying
        END AS "Motivatie_Achteruitgang"
   FROM ((((((((public.gwb_yearly_status
     LEFT JOIN public.hydro_object hdo_gwb ON ((hdo_gwb.hdo_id = gwb_yearly_status.gwb_id)))
     JOIN public.gw_chemical_status ON ((gw_chemical_status.gys_id = gwb_yearly_status.gys_id)))
     LEFT JOIN public.classification_type ON ((gw_chemical_status.clst_id = classification_type.cls_id)))
     LEFT JOIN public.vw_waargenomen_eigenschap_db_id ON ((vw_waargenomen_eigenschap_db_id."DB_ID" = gw_chemical_status.opt_id)))
     LEFT JOIN public.waarde_bepalings_methode_type ON ((waarde_bepalings_methode_type.wbpm_id = gw_chemical_status.wbpm_id)))
     LEFT JOIN public.eu_monitoring_goal_type ON ((eu_monitoring_goal_type.eumg_id = gw_chemical_status.eumg_id)))
     LEFT JOIN public.wb_status_change_motivation wscm ON (((wscm.wbd_id = hdo_gwb.hdo_id) AND (wscm.opt_id = vw_waargenomen_eigenschap_db_id."DB_ID") AND (wscm.year_status = gwb_yearly_status.year_of_status) AND (wscm.scm_id = 1))))
     FULL JOIN krw_kwal ON ((vw_waargenomen_eigenschap_db_id."DB_ID" = krw_kwal.opt_id)))
UNION ALL
 SELECT gwb_yearly_status.gys_id AS "DB_ID",
    hdo_gwb.hdo_id AS "Waterlichaam_DB_ID",
    hdo_gwb.inspire_id_local_id AS "Waterlichaam_identificatie",
    hdo_gwb.wkrv_id AS "Waterlichaam_Versie",
    gwb_yearly_status.year_of_status AS "Rapportagejaar",
    vw_waargenomen_eigenschap_db_id."DB_ID" AS "Waargenomen_Eigenschap_DB_ID",
        CASE
            WHEN (krw_kwal.name IS NOT NULL) THEN krw_kwal.name
            ELSE
            CASE
                WHEN (vw_waargenomen_eigenschap_db_id."ChemischeStof_Omschrijving" IS NOT NULL) THEN vw_waargenomen_eigenschap_db_id."ChemischeStof_Omschrijving"
                ELSE vw_waargenomen_eigenschap_db_id."Grootheid_Omschrijving"
            END
        END AS "Typering",
    classification_type.code AS "Oordeel_Code",
    classification_type.description AS "Oordeel",
    eu_monitoring_goal_type.code AS "Oordeel_Type_Code",
    eu_monitoring_goal_type.description AS "Oordeel_Type_Omschrijving",
    waarde_bepalings_methode_type.code AS "WaardebepalingsMethode_Code",
    waarde_bepalings_methode_type.omschrijving AS "WaardebepalingsMethode_Omschrijving",
    (gwb_yearly_status.comment_on_chemical_status)::character varying(5000) AS "Toelichting_ChemischeStatus",
    (gwb_yearly_status.comment_on_quantity_status)::character varying(5000) AS "Toelichting_EcologischeStatus",
    (gwb_yearly_status.motivation_4no_chemical_status)::character varying(5000) AS "Motivatie_Geen_ChemischeStatus",
    (gwb_yearly_status.motivation_4no_chemical_trends)::character varying(5000) AS "Motivatie_Geen_ChemischeTrend",
    (gwb_yearly_status.motivation_4no_quantity_status)::character varying(5000) AS "Motivatie_Geen_EcologischeStatus",
        CASE
            WHEN (krw_kwal.is_applicable = true) THEN (krw_kwal."CATEGORIE")::character varying(24)
            ELSE 'NVT'::character varying
        END AS "KWAL_ELEMENT",
        CASE
            WHEN (wscm.scm_id IS NOT NULL) THEN 'A'::character varying(1)
            ELSE NULL::character varying
        END AS "Motivatie_Achteruitgang"
   FROM ((((((((public.gwb_yearly_status
     LEFT JOIN public.hydro_object hdo_gwb ON ((hdo_gwb.hdo_id = gwb_yearly_status.gwb_id)))
     JOIN public.gw_quantity_status ON ((gw_quantity_status.gys_id = gwb_yearly_status.gys_id)))
     LEFT JOIN public.classification_type ON ((gw_quantity_status.gwst_id = classification_type.cls_id)))
     LEFT JOIN public.vw_waargenomen_eigenschap_db_id ON ((vw_waargenomen_eigenschap_db_id."DB_ID" = gw_quantity_status.opt_id)))
     LEFT JOIN public.waarde_bepalings_methode_type ON ((waarde_bepalings_methode_type.wbpm_id = gw_quantity_status.wbpm_id)))
     LEFT JOIN public.eu_monitoring_goal_type ON ((eu_monitoring_goal_type.eumg_id = gw_quantity_status.eumg_id)))
     LEFT JOIN public.wb_status_change_motivation wscm ON (((wscm.wbd_id = hdo_gwb.hdo_id) AND (wscm.opt_id = vw_waargenomen_eigenschap_db_id."DB_ID") AND (wscm.year_status = gwb_yearly_status.year_of_status) AND (wscm.scm_id = 1))))
     FULL JOIN krw_kwal ON ((vw_waargenomen_eigenschap_db_id."DB_ID" = krw_kwal.opt_id)))
  ORDER BY 1, 6, 12 DESC, 10 DESC;


SET search_path = public, pg_catalog;

--
-- Name: surface_water_body; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE surface_water_body (
    swb_id integer NOT NULL,
    is_artificial boolean NOT NULL,
    sw_typology_id integer NOT NULL,
    waterbody_description text,
    is_heaviliy_modified boolean,
    representative_point geometry(Point,28992),
    area_value double precision,
    area_uom_id integer,
    large boolean,
    length_value double precision,
    length_uom_id integer,
    main boolean,
    other_pressure_description character varying(3000),
    other_impact_description text,
    last_change_time timestamp without time zone NOT NULL,
    sw_target_typology_id integer NOT NULL,
    article_43_comment text,
    article_43_litref text,
    article_43_url character varying(255),
    article_43b_motivation text,
    significantlychanged boolean,
    reason_change_old text,
    is_reservoir boolean DEFAULT false NOT NULL,
    is_transboundary boolean DEFAULT false NOT NULL,
    rct_id integer
);


--
-- Name: sw_chemical_substance_status; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE sw_chemical_substance_status (
    sys_id integer NOT NULL,
    opt_id integer NOT NULL,
    swcs_id integer NOT NULL,
    last_change_time timestamp without time zone NOT NULL,
    eumg_id integer NOT NULL,
    wbpm_id integer NOT NULL,
    css_id integer NOT NULL,
    observation_start_date date,
    observation_end_date date,
    clt_id integer
);


--
-- Name: sw_ecological_status; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE sw_ecological_status (
    sys_id integer NOT NULL,
    opt_id integer NOT NULL,
    swes_id integer NOT NULL,
    last_change_time timestamp without time zone NOT NULL,
    eumg_id integer NOT NULL,
    wbpm_id integer NOT NULL,
    ecs_id integer NOT NULL,
    observation_start_date date,
    observation_end_date date,
    clt_id integer
);


--
-- Name: wfd_qe_swtype; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE wfd_qe_swtype (
    opt_id integer NOT NULL,
    swt_id integer NOT NULL,
    part_of_opt_id integer,
    last_change_time time without time zone,
    main_group character varying(50) NOT NULL,
    is_applicable boolean NOT NULL,
    qesw_id integer NOT NULL,
    clsg_id integer NOT NULL,
    name character varying(255) NOT NULL,
    is_excemption boolean NOT NULL,
    d_begin timestamp without time zone,
    d_eind timestamp without time zone,
    last_changed_date timestamp without time zone,
    d_status character varying(50) DEFAULT 'Gepubliceerd'::character varying
);


SET search_path = factsheets, pg_catalog;

--
-- Name: vw_oordeel_totaal_owm_cr_allqe; Type: VIEW; Schema: factsheets; Owner: -
--

CREATE VIEW vw_oordeel_totaal_owm_cr_allqe AS
 WITH ssg AS (
         SELECT substance_group_element.chs_id,
            substance_group_element.ssge_id,
                CASE
                    WHEN (substance_group_element.ssge_id = 2908) THEN 'SVS_STOF'::text
                    ELSE
                    CASE
                        WHEN (substance_group_element.ssge_id = 3150) THEN 'UBIQUITAIR'::text
                        ELSE 'NIET_UBIQUITAIR'::text
                    END
                END AS "CATEGORIE"
           FROM public.substance_group_element
          WHERE (substance_group_element.ssge_id = ANY (ARRAY[2908, 3150, 3149]))
        ), krw_kwal AS (
         SELECT wfd_qe_swtype.name,
                CASE
                    WHEN (wfd_qe_swtype.part_of_opt_id = 4477) THEN 'CHEMT'::text
                    ELSE
                    CASE
                        WHEN (wfd_qe_swtype.part_of_opt_id = ANY (ARRAY[4480, 4514])) THEN 'FYSCHEM'::text
                        ELSE
                        CASE
                            WHEN (wfd_qe_swtype.part_of_opt_id = 4476) THEN 'BIOLT'::text
                            ELSE 'TOTAAL'::text
                        END
                    END
                END AS "CATEGORIE",
            wfd_qe_swtype.opt_id,
            wfd_qe_swtype.swt_id,
            wfd_qe_swtype.is_applicable
           FROM public.wfd_qe_swtype
        )
 SELECT swb_yearly_status.sys_id AS "DB_ID",
    hdo_swb.hdo_id AS "Waterlichaam_DB_ID",
    hdo_swb.inspire_id_local_id AS "Waterlichaam_identificatie",
    hdo_swb.wkrv_id AS "Waterlichaam_Versie",
    swb_yearly_status.year_of_status AS "Rapportagejaar",
    krw_kwal.opt_id AS "Waargenomen_Eigenschap_DB_ID",
        CASE
            WHEN (krw_kwal.name IS NOT NULL) THEN krw_kwal.name
            ELSE
            CASE
                WHEN (vw_waargenomen_eigenschap_db_id."ChemischeStof_Omschrijving" IS NOT NULL) THEN vw_waargenomen_eigenschap_db_id."ChemischeStof_Omschrijving"
                WHEN (vw_waargenomen_eigenschap_db_id."Grootheid_Omschrijving" IS NOT NULL) THEN vw_waargenomen_eigenschap_db_id."Grootheid_Omschrijving"
                ELSE krw_kwal.name
            END
        END AS "Typering",
    classification_type.code AS "Oordeel_Code",
    classification_type.description AS "Oordeel",
        CASE
            WHEN ((eu_monitoring_goal_type.code)::text = 'TT_OM'::text) THEN 1
            WHEN ((eu_monitoring_goal_type.code)::text = 'OM'::text) THEN 2
            WHEN ((eu_monitoring_goal_type.code)::text = 'TT'::text) THEN 3
            WHEN (eu_monitoring_goal_type.code IS NULL) THEN 5
            ELSE 4
        END AS oordeel_type_sortorder,
    eu_monitoring_goal_type.eumg_id AS "Oordeel_Type_DB_ID",
    eu_monitoring_goal_type.code AS "Oordeel_Type_Code",
    eu_monitoring_goal_type.description AS "Oordeel_Type_Omschrijving",
        CASE
            WHEN ((waarde_bepalings_methode_type.code)::text = 'DESK'::text) THEN 1
            WHEN ((waarde_bepalings_methode_type.code)::text = 'AQUOKIT'::text) THEN 2
            WHEN (waarde_bepalings_methode_type.code IS NULL) THEN 4
            ELSE 3
        END AS waardebepalingsmethode_sortorder,
    waarde_bepalings_methode_type.code AS "WaardebepalingsMethode_Code",
    waarde_bepalings_methode_type.omschrijving AS "WaardebepalingsMethode_Omschrijving",
    (swb_yearly_status.comment_on_chemical_status)::character varying(5000) AS "Toelichting_ChemischeStatus",
    (swb_yearly_status.comment_on_ecological_status)::character varying(5000) AS "Toelichting_EcologischeStatus",
    (swb_yearly_status.motivation_4no_chemical_status)::character varying(5000) AS "Motivatie_Geen_ChemischeStatus",
    (swb_yearly_status.motivation_4no_ecological_status)::character varying(5000) AS "Motivatie_Geen_EcologischeStatus",
        CASE
            WHEN (krw_kwal.is_applicable = true) THEN (krw_kwal."CATEGORIE")::character varying(24)
            ELSE 'NVT'::character varying
        END AS "KWAL_ELEMENT",
    (ssg."CATEGORIE")::character varying(24) AS "STOF_CATEGORIE",
        CASE
            WHEN (wscm.scm_id IS NOT NULL) THEN 'A'::character varying(1)
            ELSE NULL::character varying
        END AS "Motivatie_Achteruitgang",
    krw_kwal.is_applicable
   FROM ((((((((((public.swb_yearly_status
     LEFT JOIN public.hydro_object hdo_swb ON ((hdo_swb.hdo_id = swb_yearly_status.swb_id)))
     LEFT JOIN public.surface_water_body swb ON ((swb.swb_id = hdo_swb.hdo_id)))
     FULL JOIN krw_kwal ON ((swb.sw_target_typology_id = krw_kwal.swt_id)))
     LEFT JOIN public.sw_chemical_substance_status ON (((sw_chemical_substance_status.opt_id = krw_kwal.opt_id) AND (sw_chemical_substance_status.sys_id = swb_yearly_status.sys_id))))
     LEFT JOIN public.classification_type ON ((sw_chemical_substance_status.swcs_id = classification_type.cls_id)))
     LEFT JOIN public.vw_waargenomen_eigenschap_db_id ON ((vw_waargenomen_eigenschap_db_id."DB_ID" = sw_chemical_substance_status.opt_id)))
     LEFT JOIN public.waarde_bepalings_methode_type ON ((waarde_bepalings_methode_type.wbpm_id = sw_chemical_substance_status.wbpm_id)))
     LEFT JOIN public.eu_monitoring_goal_type ON ((eu_monitoring_goal_type.eumg_id = sw_chemical_substance_status.eumg_id)))
     LEFT JOIN ssg ON ((vw_waargenomen_eigenschap_db_id."ChemischeStof_DB_ID" = ssg.chs_id)))
     LEFT JOIN public.wb_status_change_motivation wscm ON (((wscm.wbd_id = hdo_swb.hdo_id) AND (wscm.opt_id = sw_chemical_substance_status.opt_id) AND (wscm.year_status = swb_yearly_status.year_of_status) AND (wscm.scm_id = 1))))
UNION ALL
 SELECT swb_yearly_status.sys_id AS "DB_ID",
    hdo_swb.hdo_id AS "Waterlichaam_DB_ID",
    hdo_swb.inspire_id_local_id AS "Waterlichaam_identificatie",
    hdo_swb.wkrv_id AS "Waterlichaam_Versie",
    swb_yearly_status.year_of_status AS "Rapportagejaar",
    krw_kwal.opt_id AS "Waargenomen_Eigenschap_DB_ID",
        CASE
            WHEN (krw_kwal.name IS NOT NULL) THEN krw_kwal.name
            ELSE
            CASE
                WHEN (vw_waargenomen_eigenschap_db_id."ChemischeStof_Omschrijving" IS NOT NULL) THEN vw_waargenomen_eigenschap_db_id."ChemischeStof_Omschrijving"
                WHEN (vw_waargenomen_eigenschap_db_id."Grootheid_Omschrijving" IS NOT NULL) THEN vw_waargenomen_eigenschap_db_id."Grootheid_Omschrijving"
                ELSE krw_kwal.name
            END
        END AS "Typering",
    classification_type.code AS "Oordeel_Code",
    classification_type.description AS "Oordeel",
        CASE
            WHEN ((eu_monitoring_goal_type.code)::text = 'TT_OM'::text) THEN 1
            WHEN ((eu_monitoring_goal_type.code)::text = 'OM'::text) THEN 2
            WHEN ((eu_monitoring_goal_type.code)::text = 'TT'::text) THEN 3
            WHEN (eu_monitoring_goal_type.code IS NULL) THEN 5
            ELSE 4
        END AS oordeel_type_sortorder,
    eu_monitoring_goal_type.eumg_id AS "Oordeel_Type_DB_ID",
    eu_monitoring_goal_type.code AS "Oordeel_Type_Code",
    eu_monitoring_goal_type.description AS "Oordeel_Type_Omschrijving",
        CASE
            WHEN ((waarde_bepalings_methode_type.code)::text = 'DESK'::text) THEN 1
            WHEN ((waarde_bepalings_methode_type.code)::text = 'AQUOKIT'::text) THEN 2
            WHEN (waarde_bepalings_methode_type.code IS NULL) THEN 4
            ELSE 3
        END AS waardebepalingsmethode_sortorder,
    waarde_bepalings_methode_type.code AS "WaardebepalingsMethode_Code",
    waarde_bepalings_methode_type.omschrijving AS "WaardebepalingsMethode_Omschrijving",
    (swb_yearly_status.comment_on_chemical_status)::character varying(5000) AS "Toelichting_ChemischeStatus",
    (swb_yearly_status.comment_on_ecological_status)::character varying(5000) AS "Toelichting_EcologischeStatus",
    (swb_yearly_status.motivation_4no_chemical_status)::character varying(5000) AS "Motivatie_Geen_ChemischeStatus",
    (swb_yearly_status.motivation_4no_ecological_status)::character varying(5000) AS "Motivatie_Geen_EcologischeStatus",
        CASE
            WHEN (krw_kwal.is_applicable = true) THEN (krw_kwal."CATEGORIE")::character varying(24)
            ELSE 'NVT'::character varying
        END AS "KWAL_ELEMENT",
    NULL::character varying(24) AS "STOF_CATEGORIE",
        CASE
            WHEN (wscm.scm_id IS NOT NULL) THEN 'A'::character varying(1)
            ELSE NULL::character varying
        END AS "Motivatie_Achteruitgang",
    krw_kwal.is_applicable
   FROM (((((((((public.swb_yearly_status
     LEFT JOIN public.hydro_object hdo_swb ON ((hdo_swb.hdo_id = swb_yearly_status.swb_id)))
     LEFT JOIN public.surface_water_body swb ON ((swb.swb_id = hdo_swb.hdo_id)))
     FULL JOIN krw_kwal ON ((swb.sw_target_typology_id = krw_kwal.swt_id)))
     LEFT JOIN public.sw_ecological_status ON (((sw_ecological_status.opt_id = krw_kwal.opt_id) AND (sw_ecological_status.sys_id = swb_yearly_status.sys_id))))
     LEFT JOIN public.classification_type ON ((sw_ecological_status.swes_id = classification_type.cls_id)))
     LEFT JOIN public.vw_waargenomen_eigenschap_db_id ON ((vw_waargenomen_eigenschap_db_id."DB_ID" = sw_ecological_status.opt_id)))
     LEFT JOIN public.waarde_bepalings_methode_type ON ((waarde_bepalings_methode_type.wbpm_id = sw_ecological_status.wbpm_id)))
     LEFT JOIN public.eu_monitoring_goal_type ON ((eu_monitoring_goal_type.eumg_id = sw_ecological_status.eumg_id)))
     LEFT JOIN public.wb_status_change_motivation wscm ON (((wscm.wbd_id = hdo_swb.hdo_id) AND (wscm.opt_id = sw_ecological_status.opt_id) AND (wscm.year_status = swb_yearly_status.year_of_status) AND (wscm.scm_id = 1))));


--
-- Name: vw_oordeel_totaal_owm_for_crystal_reports; Type: VIEW; Schema: factsheets; Owner: -
--

CREATE VIEW vw_oordeel_totaal_owm_for_crystal_reports AS
 WITH ssg AS (
         SELECT substance_group_element.chs_id,
            substance_group_element.ssge_id,
                CASE
                    WHEN (substance_group_element.ssge_id = 2908) THEN 'SVS_STOF'::text
                    ELSE
                    CASE
                        WHEN (substance_group_element.ssge_id = 3150) THEN 'UBIQUITAIR'::text
                        ELSE 'NIET_UBIQUITAIR'::text
                    END
                END AS "CATEGORIE"
           FROM public.substance_group_element
          WHERE (substance_group_element.ssge_id = ANY (ARRAY[2908, 3150, 3149]))
        ), krw_kwal AS (
         SELECT wfd_qe_swtype.name,
                CASE
                    WHEN (wfd_qe_swtype.part_of_opt_id = 4477) THEN 'CHEMT'::text
                    ELSE
                    CASE
                        WHEN (wfd_qe_swtype.part_of_opt_id = ANY (ARRAY[4480, 4514])) THEN 'FYSCHEM'::text
                        ELSE
                        CASE
                            WHEN (wfd_qe_swtype.part_of_opt_id = 4476) THEN 'BIOLT'::text
                            ELSE 'TOTAAL'::text
                        END
                    END
                END AS "CATEGORIE",
            wfd_qe_swtype.opt_id,
            wfd_qe_swtype.swt_id,
            wfd_qe_swtype.is_applicable
           FROM public.wfd_qe_swtype
        )
 SELECT swb_yearly_status.sys_id AS "DB_ID",
    hdo_swb.hdo_id AS "Waterlichaam_DB_ID",
    hdo_swb.inspire_id_local_id AS "Waterlichaam_identificatie",
    hdo_swb.wkrv_id AS "Waterlichaam_Versie",
    swb_yearly_status.year_of_status AS "Rapportagejaar",
    vw_waargenomen_eigenschap_db_id."DB_ID" AS "Waargenomen_Eigenschap_DB_ID",
        CASE
            WHEN (krw_kwal.name IS NOT NULL) THEN krw_kwal.name
            ELSE
            CASE
                WHEN (vw_waargenomen_eigenschap_db_id."ChemischeStof_Omschrijving" IS NOT NULL) THEN vw_waargenomen_eigenschap_db_id."ChemischeStof_Omschrijving"
                ELSE vw_waargenomen_eigenschap_db_id."Grootheid_Omschrijving"
            END
        END AS "Typering",
    classification_type.code AS "Oordeel_Code",
    classification_type.description AS "Oordeel",
        CASE
            WHEN ((eu_monitoring_goal_type.code)::text = 'TT_OM'::text) THEN 1
            WHEN ((eu_monitoring_goal_type.code)::text = 'OM'::text) THEN 2
            WHEN ((eu_monitoring_goal_type.code)::text = 'TT'::text) THEN 3
            WHEN (eu_monitoring_goal_type.code IS NULL) THEN 5
            ELSE 4
        END AS oordeel_type_sortorder,
    eu_monitoring_goal_type.eumg_id AS "Oordeel_Type_DB_ID",
    eu_monitoring_goal_type.code AS "Oordeel_Type_Code",
    eu_monitoring_goal_type.description AS "Oordeel_Type_Omschrijving",
        CASE
            WHEN ((waarde_bepalings_methode_type.code)::text = 'DESK'::text) THEN 1
            WHEN ((waarde_bepalings_methode_type.code)::text = 'AQUOKIT'::text) THEN 2
            WHEN (waarde_bepalings_methode_type.code IS NULL) THEN 4
            ELSE 3
        END AS waardebepalingsmethode_sortorder,
    waarde_bepalings_methode_type.code AS "WaardebepalingsMethode_Code",
    waarde_bepalings_methode_type.omschrijving AS "WaardebepalingsMethode_Omschrijving",
    (swb_yearly_status.comment_on_chemical_status)::character varying(5000) AS "Toelichting_ChemischeStatus",
    (swb_yearly_status.comment_on_ecological_status)::character varying(5000) AS "Toelichting_EcologischeStatus",
    (swb_yearly_status.motivation_4no_chemical_status)::character varying(5000) AS "Motivatie_Geen_ChemischeStatus",
    (swb_yearly_status.motivation_4no_ecological_status)::character varying(5000) AS "Motivatie_Geen_EcologischeStatus",
        CASE
            WHEN (krw_kwal.is_applicable = true) THEN (krw_kwal."CATEGORIE")::character varying(24)
            ELSE 'NVT'::character varying
        END AS "KWAL_ELEMENT",
    (ssg."CATEGORIE")::character varying(24) AS "STOF_CATEGORIE",
        CASE
            WHEN (wscm.scm_id IS NOT NULL) THEN 'A'::character varying(1)
            ELSE NULL::character varying
        END AS "Motivatie_Achteruitgang",
    krw_kwal.is_applicable
   FROM ((((((((((public.swb_yearly_status
     LEFT JOIN public.hydro_object hdo_swb ON ((hdo_swb.hdo_id = swb_yearly_status.swb_id)))
     LEFT JOIN public.surface_water_body swb ON ((swb.swb_id = hdo_swb.hdo_id)))
     LEFT JOIN public.sw_chemical_substance_status ON ((sw_chemical_substance_status.sys_id = swb_yearly_status.sys_id)))
     LEFT JOIN public.classification_type ON ((sw_chemical_substance_status.swcs_id = classification_type.cls_id)))
     LEFT JOIN public.vw_waargenomen_eigenschap_db_id ON ((vw_waargenomen_eigenschap_db_id."DB_ID" = sw_chemical_substance_status.opt_id)))
     LEFT JOIN public.waarde_bepalings_methode_type ON ((waarde_bepalings_methode_type.wbpm_id = sw_chemical_substance_status.wbpm_id)))
     LEFT JOIN public.eu_monitoring_goal_type ON ((eu_monitoring_goal_type.eumg_id = sw_chemical_substance_status.eumg_id)))
     LEFT JOIN ssg ON ((vw_waargenomen_eigenschap_db_id."ChemischeStof_DB_ID" = ssg.chs_id)))
     LEFT JOIN public.wb_status_change_motivation wscm ON (((wscm.wbd_id = hdo_swb.hdo_id) AND (wscm.opt_id = sw_chemical_substance_status.opt_id) AND (wscm.year_status = swb_yearly_status.year_of_status) AND (wscm.scm_id = 1))))
     FULL JOIN krw_kwal ON (((sw_chemical_substance_status.opt_id = krw_kwal.opt_id) AND (swb.sw_target_typology_id = krw_kwal.swt_id))))
UNION ALL
 SELECT swb_yearly_status.sys_id AS "DB_ID",
    hdo_swb.hdo_id AS "Waterlichaam_DB_ID",
    hdo_swb.inspire_id_local_id AS "Waterlichaam_identificatie",
    hdo_swb.wkrv_id AS "Waterlichaam_Versie",
    swb_yearly_status.year_of_status AS "Rapportagejaar",
    vw_waargenomen_eigenschap_db_id."DB_ID" AS "Waargenomen_Eigenschap_DB_ID",
        CASE
            WHEN (krw_kwal.name IS NOT NULL) THEN krw_kwal.name
            ELSE
            CASE
                WHEN (vw_waargenomen_eigenschap_db_id."ChemischeStof_Omschrijving" IS NOT NULL) THEN vw_waargenomen_eigenschap_db_id."ChemischeStof_Omschrijving"
                ELSE vw_waargenomen_eigenschap_db_id."Grootheid_Omschrijving"
            END
        END AS "Typering",
    classification_type.code AS "Oordeel_Code",
    classification_type.description AS "Oordeel",
        CASE
            WHEN ((eu_monitoring_goal_type.code)::text = 'TT_OM'::text) THEN 1
            WHEN ((eu_monitoring_goal_type.code)::text = 'OM'::text) THEN 2
            WHEN ((eu_monitoring_goal_type.code)::text = 'TT'::text) THEN 3
            WHEN (eu_monitoring_goal_type.code IS NULL) THEN 5
            ELSE 4
        END AS oordeel_type_sortorder,
    eu_monitoring_goal_type.eumg_id AS "Oordeel_Type_DB_ID",
    eu_monitoring_goal_type.code AS "Oordeel_Type_Code",
    eu_monitoring_goal_type.description AS "Oordeel_Type_Omschrijving",
        CASE
            WHEN ((waarde_bepalings_methode_type.code)::text = 'DESK'::text) THEN 1
            WHEN ((waarde_bepalings_methode_type.code)::text = 'AQUOKIT'::text) THEN 2
            WHEN (waarde_bepalings_methode_type.code IS NULL) THEN 4
            ELSE 3
        END AS waardebepalingsmethode_sortorder,
    waarde_bepalings_methode_type.code AS "WaardebepalingsMethode_Code",
    waarde_bepalings_methode_type.omschrijving AS "WaardebepalingsMethode_Omschrijving",
    (swb_yearly_status.comment_on_chemical_status)::character varying(5000) AS "Toelichting_ChemischeStatus",
    (swb_yearly_status.comment_on_ecological_status)::character varying(5000) AS "Toelichting_EcologischeStatus",
    (swb_yearly_status.motivation_4no_chemical_status)::character varying(5000) AS "Motivatie_Geen_ChemischeStatus",
    (swb_yearly_status.motivation_4no_ecological_status)::character varying(5000) AS "Motivatie_Geen_EcologischeStatus",
        CASE
            WHEN (krw_kwal.is_applicable = true) THEN (krw_kwal."CATEGORIE")::character varying(24)
            ELSE 'NVT'::character varying
        END AS "KWAL_ELEMENT",
    NULL::character varying(24) AS "STOF_CATEGORIE",
        CASE
            WHEN (wscm.scm_id IS NOT NULL) THEN 'A'::character varying(1)
            ELSE NULL::character varying
        END AS "Motivatie_Achteruitgang",
    krw_kwal.is_applicable
   FROM (((((((((public.swb_yearly_status
     LEFT JOIN public.hydro_object hdo_swb ON ((hdo_swb.hdo_id = swb_yearly_status.swb_id)))
     LEFT JOIN public.surface_water_body swb ON ((swb.swb_id = hdo_swb.hdo_id)))
     LEFT JOIN public.sw_ecological_status ON ((sw_ecological_status.sys_id = swb_yearly_status.sys_id)))
     LEFT JOIN public.classification_type ON ((sw_ecological_status.swes_id = classification_type.cls_id)))
     LEFT JOIN public.vw_waargenomen_eigenschap_db_id ON ((vw_waargenomen_eigenschap_db_id."DB_ID" = sw_ecological_status.opt_id)))
     LEFT JOIN public.waarde_bepalings_methode_type ON ((waarde_bepalings_methode_type.wbpm_id = sw_ecological_status.wbpm_id)))
     LEFT JOIN public.eu_monitoring_goal_type ON ((eu_monitoring_goal_type.eumg_id = sw_ecological_status.eumg_id)))
     LEFT JOIN public.wb_status_change_motivation wscm ON (((wscm.wbd_id = hdo_swb.hdo_id) AND (wscm.opt_id = sw_ecological_status.opt_id) AND (wscm.year_status = swb_yearly_status.year_of_status) AND (wscm.scm_id = 1))))
     FULL JOIN krw_kwal ON (((sw_ecological_status.opt_id = krw_kwal.opt_id) AND (swb.sw_target_typology_id = krw_kwal.swt_id))))
  ORDER BY 1, 6, 13 DESC, 11 DESC;


--
-- Name: vw_oordeel_totaal_owm_for_crystal_reports01; Type: VIEW; Schema: factsheets; Owner: -
--

CREATE VIEW vw_oordeel_totaal_owm_for_crystal_reports01 AS
 WITH ssg AS (
         SELECT substance_group_element.chs_id,
            substance_group_element.ssge_id,
                CASE
                    WHEN (substance_group_element.ssge_id = 2908) THEN 'SVS_STOF'::text
                    ELSE
                    CASE
                        WHEN (substance_group_element.ssge_id = 3149) THEN 'UBIQUITAIR'::text
                        ELSE 'NIET_UBIQUITAIR'::text
                    END
                END AS "CATEGORIE"
           FROM public.substance_group_element
          WHERE (substance_group_element.ssge_id = ANY (ARRAY[2908, 3150, 3149]))
        ), krw_kwal AS (
         SELECT wfd_qe_swtype.name,
                CASE
                    WHEN (wfd_qe_swtype.part_of_opt_id = 4477) THEN 'CHEMT'::text
                    ELSE
                    CASE
                        WHEN (wfd_qe_swtype.part_of_opt_id = ANY (ARRAY[4480, 4514])) THEN 'FYSCHEM'::text
                        ELSE
                        CASE
                            WHEN (wfd_qe_swtype.part_of_opt_id = 4476) THEN 'BIOLT'::text
                            ELSE 'TOTAAL'::text
                        END
                    END
                END AS "CATEGORIE",
            wfd_qe_swtype.opt_id,
            wfd_qe_swtype.swt_id,
            wfd_qe_swtype.is_applicable
           FROM public.wfd_qe_swtype
        )
 SELECT swb_yearly_status.sys_id AS "DB_ID",
    hdo_swb.hdo_id AS "Waterlichaam_DB_ID",
    hdo_swb.inspire_id_local_id AS "Waterlichaam_identificatie",
    hdo_swb.wkrv_id AS "Waterlichaam_Versie",
    swb_yearly_status.year_of_status AS "Rapportagejaar",
    vw_waargenomen_eigenschap_db_id."DB_ID" AS "Waargenomen_Eigenschap_DB_ID",
        CASE
            WHEN (krw_kwal.name IS NOT NULL) THEN krw_kwal.name
            ELSE
            CASE
                WHEN (vw_waargenomen_eigenschap_db_id."ChemischeStof_Omschrijving" IS NOT NULL) THEN vw_waargenomen_eigenschap_db_id."ChemischeStof_Omschrijving"
                ELSE vw_waargenomen_eigenschap_db_id."Grootheid_Omschrijving"
            END
        END AS "Typering",
    classification_type.code AS "Oordeel_Code",
    classification_type.description AS "Oordeel",
    eu_monitoring_goal_type.eumg_id AS "Oordeel_Type_DB_ID",
    eu_monitoring_goal_type.code AS "Oordeel_Type_Code",
    eu_monitoring_goal_type.description AS "Oordeel_Type_Omschrijving",
    waarde_bepalings_methode_type.code AS "WaardebepalingsMethode_Code",
    waarde_bepalings_methode_type.omschrijving AS "WaardebepalingsMethode_Omschrijving",
    (swb_yearly_status.comment_on_chemical_status)::character varying(5000) AS "Toelichting_ChemischeStatus",
    (swb_yearly_status.comment_on_ecological_status)::character varying(5000) AS "Toelichting_EcologischeStatus",
    (swb_yearly_status.motivation_4no_chemical_status)::character varying(5000) AS "Motivatie_Geen_ChemischeStatus",
    (swb_yearly_status.motivation_4no_ecological_status)::character varying(5000) AS "Motivatie_Geen_EcologischeStatus",
        CASE
            WHEN (krw_kwal.is_applicable = true) THEN (krw_kwal."CATEGORIE")::character varying(24)
            ELSE 'NVT'::character varying
        END AS "KWAL_ELEMENT",
    (ssg."CATEGORIE")::character varying(24) AS "STOF_CATEGORIE",
        CASE
            WHEN (wscm.scm_id IS NOT NULL) THEN 'A'::character varying(1)
            ELSE NULL::character varying
        END AS "Motivatie_Achteruitgang",
    krw_kwal.is_applicable
   FROM ((((((((((public.swb_yearly_status
     LEFT JOIN public.hydro_object hdo_swb ON ((hdo_swb.hdo_id = swb_yearly_status.swb_id)))
     LEFT JOIN public.surface_water_body swb ON ((swb.swb_id = hdo_swb.hdo_id)))
     LEFT JOIN public.sw_chemical_substance_status ON ((sw_chemical_substance_status.sys_id = swb_yearly_status.sys_id)))
     LEFT JOIN public.classification_type ON ((sw_chemical_substance_status.swcs_id = classification_type.cls_id)))
     LEFT JOIN public.vw_waargenomen_eigenschap_db_id ON ((vw_waargenomen_eigenschap_db_id."DB_ID" = sw_chemical_substance_status.opt_id)))
     LEFT JOIN public.waarde_bepalings_methode_type ON ((waarde_bepalings_methode_type.wbpm_id = sw_chemical_substance_status.wbpm_id)))
     LEFT JOIN public.eu_monitoring_goal_type ON ((eu_monitoring_goal_type.eumg_id = sw_chemical_substance_status.eumg_id)))
     LEFT JOIN ssg ON ((vw_waargenomen_eigenschap_db_id."ChemischeStof_DB_ID" = ssg.chs_id)))
     LEFT JOIN public.wb_status_change_motivation wscm ON (((wscm.wbd_id = hdo_swb.hdo_id) AND (wscm.opt_id = sw_chemical_substance_status.opt_id) AND (wscm.year_status = swb_yearly_status.year_of_status) AND (wscm.scm_id = 1))))
     FULL JOIN krw_kwal ON (((sw_chemical_substance_status.opt_id = krw_kwal.opt_id) AND (swb.sw_target_typology_id = krw_kwal.swt_id))))
UNION ALL
 SELECT swb_yearly_status.sys_id AS "DB_ID",
    hdo_swb.hdo_id AS "Waterlichaam_DB_ID",
    hdo_swb.inspire_id_local_id AS "Waterlichaam_identificatie",
    hdo_swb.wkrv_id AS "Waterlichaam_Versie",
    swb_yearly_status.year_of_status AS "Rapportagejaar",
    vw_waargenomen_eigenschap_db_id."DB_ID" AS "Waargenomen_Eigenschap_DB_ID",
        CASE
            WHEN (krw_kwal.name IS NOT NULL) THEN krw_kwal.name
            ELSE
            CASE
                WHEN (vw_waargenomen_eigenschap_db_id."ChemischeStof_Omschrijving" IS NOT NULL) THEN vw_waargenomen_eigenschap_db_id."ChemischeStof_Omschrijving"
                ELSE vw_waargenomen_eigenschap_db_id."Grootheid_Omschrijving"
            END
        END AS "Typering",
    classification_type.code AS "Oordeel_Code",
    classification_type.description AS "Oordeel",
    eu_monitoring_goal_type.eumg_id AS "Oordeel_Type_DB_ID",
    eu_monitoring_goal_type.code AS "Oordeel_Type_Code",
    eu_monitoring_goal_type.description AS "Oordeel_Type_Omschrijving",
    waarde_bepalings_methode_type.code AS "WaardebepalingsMethode_Code",
    waarde_bepalings_methode_type.omschrijving AS "WaardebepalingsMethode_Omschrijving",
    (swb_yearly_status.comment_on_chemical_status)::character varying(5000) AS "Toelichting_ChemischeStatus",
    (swb_yearly_status.comment_on_ecological_status)::character varying(5000) AS "Toelichting_EcologischeStatus",
    (swb_yearly_status.motivation_4no_chemical_status)::character varying(5000) AS "Motivatie_Geen_ChemischeStatus",
    (swb_yearly_status.motivation_4no_ecological_status)::character varying(5000) AS "Motivatie_Geen_EcologischeStatus",
        CASE
            WHEN (krw_kwal.is_applicable = true) THEN (krw_kwal."CATEGORIE")::character varying(24)
            ELSE 'NVT'::character varying
        END AS "KWAL_ELEMENT",
    NULL::character varying(24) AS "STOF_CATEGORIE",
        CASE
            WHEN (wscm.scm_id IS NOT NULL) THEN 'A'::character varying(1)
            ELSE NULL::character varying
        END AS "Motivatie_Achteruitgang",
    krw_kwal.is_applicable
   FROM (((((((((public.swb_yearly_status
     LEFT JOIN public.hydro_object hdo_swb ON ((hdo_swb.hdo_id = swb_yearly_status.swb_id)))
     LEFT JOIN public.surface_water_body swb ON ((swb.swb_id = hdo_swb.hdo_id)))
     LEFT JOIN public.sw_ecological_status ON ((sw_ecological_status.sys_id = swb_yearly_status.sys_id)))
     LEFT JOIN public.classification_type ON ((sw_ecological_status.swes_id = classification_type.cls_id)))
     LEFT JOIN public.vw_waargenomen_eigenschap_db_id ON ((vw_waargenomen_eigenschap_db_id."DB_ID" = sw_ecological_status.opt_id)))
     LEFT JOIN public.waarde_bepalings_methode_type ON ((waarde_bepalings_methode_type.wbpm_id = sw_ecological_status.wbpm_id)))
     LEFT JOIN public.eu_monitoring_goal_type ON ((eu_monitoring_goal_type.eumg_id = sw_ecological_status.eumg_id)))
     LEFT JOIN public.wb_status_change_motivation wscm ON (((wscm.wbd_id = hdo_swb.hdo_id) AND (wscm.opt_id = sw_ecological_status.opt_id) AND (wscm.year_status = swb_yearly_status.year_of_status) AND (wscm.scm_id = 1))))
     FULL JOIN krw_kwal ON (((sw_ecological_status.opt_id = krw_kwal.opt_id) AND (swb.sw_target_typology_id = krw_kwal.swt_id))))
  ORDER BY 1, 6, 13 DESC, 11 DESC;


--
-- Name: vw_oordeel_totaal_owm_for_crystal_reports02; Type: VIEW; Schema: factsheets; Owner: -
--

CREATE VIEW vw_oordeel_totaal_owm_for_crystal_reports02 AS
 WITH yearly_status AS (
         SELECT swb_yearly_status.sys_id,
            swb_yearly_status.swb_id,
            swb_yearly_status.year_of_status,
            swb_yearly_status.comment_on_chemical_status,
            swb_yearly_status.comment_on_ecological_status,
            swb_yearly_status.motivation_4no_chemical_status,
            swb_yearly_status.motivation_4no_ecological_status,
            swb_yearly_status.last_change_time,
            swb_yearly_status.additional_purification,
            swb_yearly_status.exceeds_drinkingwater,
            hdo_swb.hdo_id,
            hdo_swb.inspire_id_local_id,
            hdo_swb.inspire_id_namespace,
            hdo_swb.wkrv_id,
            hdo_swb.hydro_object_type,
            hdo_swb.related_hdo_id,
            hdo_swb.last_change_time,
            swb.swb_id,
            swb.is_artificial,
            swb.sw_typology_id,
            swb.waterbody_description,
            swb.is_heaviliy_modified,
            swb.representative_point,
            swb.area_value,
            swb.area_uom_id,
            swb.large,
            swb.length_value,
            swb.length_uom_id,
            swb.main,
            swb.other_pressure_description,
            swb.other_impact_description,
            swb.last_change_time,
            swb.sw_target_typology_id,
            swb.article_43_comment,
            swb.article_43_litref,
            swb.article_43_url,
            swb.article_43b_motivation,
            swb.significantlychanged,
            swb.reason_change_old,
            swb.is_reservoir,
            swb.is_transboundary,
            swb.rct_id
           FROM ((public.swb_yearly_status
             LEFT JOIN public.hydro_object hdo_swb ON ((hdo_swb.hdo_id = swb_yearly_status.swb_id)))
             LEFT JOIN public.surface_water_body swb ON ((swb.swb_id = hdo_swb.hdo_id)))
        ), oordeel AS (
         SELECT sw_chemical_substance_status.sys_id,
            sw_chemical_substance_status.opt_id,
            vw_waargenomen_eigenschap_db_id."ChemischeStof_Omschrijving",
            vw_waargenomen_eigenschap_db_id."ChemischeStof_DB_ID",
            vw_waargenomen_eigenschap_db_id."Grootheid_Omschrijving",
            classification_type.code,
            classification_type.description,
            eu_monitoring_goal_type.eumg_id,
            eu_monitoring_goal_type.description AS eumg_description,
            waarde_bepalings_methode_type.code AS wbpm_code,
            waarde_bepalings_methode_type.omschrijving
           FROM ((((public.sw_chemical_substance_status
             LEFT JOIN public.classification_type ON ((sw_chemical_substance_status.swcs_id = classification_type.cls_id)))
             LEFT JOIN public.vw_waargenomen_eigenschap_db_id ON ((vw_waargenomen_eigenschap_db_id."DB_ID" = sw_chemical_substance_status.opt_id)))
             LEFT JOIN public.waarde_bepalings_methode_type ON ((waarde_bepalings_methode_type.wbpm_id = sw_chemical_substance_status.wbpm_id)))
             LEFT JOIN public.eu_monitoring_goal_type ON ((eu_monitoring_goal_type.eumg_id = sw_chemical_substance_status.eumg_id)))
        UNION ALL
         SELECT sw_ecological_status.sys_id,
            sw_ecological_status.opt_id,
            vw_waargenomen_eigenschap_db_id."ChemischeStof_Omschrijving",
            vw_waargenomen_eigenschap_db_id."ChemischeStof_DB_ID",
            vw_waargenomen_eigenschap_db_id."Grootheid_Omschrijving",
            classification_type.code,
            classification_type.description,
            eu_monitoring_goal_type.eumg_id,
            eu_monitoring_goal_type.description,
            waarde_bepalings_methode_type.code AS wbpm_code,
            waarde_bepalings_methode_type.omschrijving
           FROM ((((public.sw_ecological_status
             LEFT JOIN public.classification_type ON ((sw_ecological_status.swes_id = classification_type.cls_id)))
             FULL JOIN public.vw_waargenomen_eigenschap_db_id ON ((vw_waargenomen_eigenschap_db_id."DB_ID" = sw_ecological_status.opt_id)))
             LEFT JOIN public.waarde_bepalings_methode_type ON ((waarde_bepalings_methode_type.wbpm_id = sw_ecological_status.wbpm_id)))
             LEFT JOIN public.eu_monitoring_goal_type ON ((eu_monitoring_goal_type.eumg_id = sw_ecological_status.eumg_id)))
        ), ssg AS (
         SELECT substance_group_element.chs_id,
            substance_group_element.ssge_id,
                CASE
                    WHEN (substance_group_element.ssge_id = 2908) THEN 'SVS_STOF'::text
                    ELSE
                    CASE
                        WHEN (substance_group_element.ssge_id = 3149) THEN 'UBIQUITAIR'::text
                        ELSE 'NIET_UBIQUITAIR'::text
                    END
                END AS "CATEGORIE"
           FROM public.substance_group_element
          WHERE (substance_group_element.ssge_id = ANY (ARRAY[2908, 3150, 3149]))
        ), krw_kwal AS (
         SELECT wfd_qe_swtype.name,
                CASE
                    WHEN (wfd_qe_swtype.part_of_opt_id = 4477) THEN 'CHEMT'::text
                    ELSE
                    CASE
                        WHEN (wfd_qe_swtype.part_of_opt_id = ANY (ARRAY[4480, 4514])) THEN 'FYSCHEM'::text
                        ELSE
                        CASE
                            WHEN (wfd_qe_swtype.part_of_opt_id = 4476) THEN 'BIOLT'::text
                            ELSE 'TOTAAL'::text
                        END
                    END
                END AS "CATEGORIE",
            wfd_qe_swtype.opt_id,
            wfd_qe_swtype.swt_id,
            wfd_qe_swtype.is_applicable
           FROM public.wfd_qe_swtype
        )
 SELECT yearly_status.sys_id AS "DB_ID",
    yearly_status.hdo_id AS "Waterlichaam_DB_ID",
    yearly_status.inspire_id_local_id AS "Waterlichaam_identificatie",
    yearly_status.wkrv_id AS "Waterlichaam_Versie",
    yearly_status.year_of_status AS "Rapportagejaar",
    oordeel.opt_id AS "Waargenomen_Eigenschap_DB_ID",
        CASE
            WHEN (krw_kwal.name IS NOT NULL) THEN krw_kwal.name
            ELSE
            CASE
                WHEN (oordeel."ChemischeStof_Omschrijving" IS NOT NULL) THEN oordeel."ChemischeStof_Omschrijving"
                ELSE oordeel."Grootheid_Omschrijving"
            END
        END AS "Typering",
    oordeel.code AS "Oordeel_Code",
    oordeel.description AS "Oordeel",
    oordeel.eumg_id AS "Oordeel_Type_DB_ID",
    oordeel.eumg_description AS "Oordeel_Type_Omschrijving",
    oordeel.wbpm_code AS "WaardebepalingsMethode_Code",
    oordeel.omschrijving AS "WaardebepalingsMethode_Omschrijving",
    (yearly_status.comment_on_chemical_status)::character varying(5000) AS "Toelichting_ChemischeStatus",
    (yearly_status.comment_on_ecological_status)::character varying(5000) AS "Toelichting_EcologischeStatus",
    (yearly_status.motivation_4no_chemical_status)::character varying(5000) AS "Motivatie_Geen_ChemischeStatus",
    (yearly_status.motivation_4no_ecological_status)::character varying(5000) AS "Motivatie_Geen_EcologischeStatus",
        CASE
            WHEN (krw_kwal.is_applicable = true) THEN (krw_kwal."CATEGORIE")::character varying(24)
            ELSE 'NVT'::character varying
        END AS "KWAL_ELEMENT",
    (ssg."CATEGORIE")::character varying(24) AS "STOF_CATEGORIE",
        CASE
            WHEN (wscm.scm_id IS NOT NULL) THEN 'A'::character varying(1)
            ELSE NULL::character varying
        END AS "Motivatie_Achteruitgang"
   FROM ((((oordeel
     FULL JOIN krw_kwal ON ((oordeel.opt_id = krw_kwal.opt_id)))
     LEFT JOIN yearly_status yearly_status(sys_id, swb_id, year_of_status, comment_on_chemical_status, comment_on_ecological_status, motivation_4no_chemical_status, motivation_4no_ecological_status, last_change_time, additional_purification, exceeds_drinkingwater, hdo_id, inspire_id_local_id, inspire_id_namespace, wkrv_id, hydro_object_type, related_hdo_id, last_change_time_1, swb_id_1, is_artificial, sw_typology_id, waterbody_description, is_heaviliy_modified, representative_point, area_value, area_uom_id, large, length_value, length_uom_id, main, other_pressure_description, other_impact_description, last_change_time_2, sw_target_typology_id, article_43_comment, article_43_litref, article_43_url, article_43b_motivation, significantlychanged, reason_change_old, is_reservoir, is_transboundary, rct_id) ON ((oordeel.sys_id = yearly_status.sys_id)))
     LEFT JOIN public.wb_status_change_motivation wscm ON (((wscm.wbd_id = yearly_status.hdo_id) AND (wscm.opt_id = oordeel.opt_id) AND (wscm.year_status = yearly_status.year_of_status) AND (wscm.scm_id = 1))))
     LEFT JOIN ssg ON ((oordeel."ChemischeStof_DB_ID" = ssg.chs_id)))
  WHERE ((krw_kwal.is_applicable IS NULL) OR (yearly_status.sw_target_typology_id = krw_kwal.swt_id))
  ORDER BY yearly_status.sys_id, oordeel.opt_id, oordeel.omschrijving DESC, oordeel.eumg_description DESC;


--
-- Name: vw_toestand_achteruitgang_owl_dgrw; Type: VIEW; Schema: factsheets; Owner: -
--

CREATE VIEW vw_toestand_achteruitgang_owl_dgrw AS
 SELECT wscm.wbd_id,
    wscm.opt_id,
    wscm.year_status,
    hdo.inspire_id_local_id AS "Waterlichaam.identificatie",
    hdo_names.name AS "Waterlichaam.omschrijving",
    hdo.inspire_id_namespace AS "Waterbeheerder.code",
    vca."Omschrijving" AS "Waterbeheerder.omschrijving",
    chs.code AS "ChemischeStof.code",
    ssg.name AS "ChemischeStof.omschrijving",
    chs.cas_nr AS "Cas.nr",
    typ.code AS "Typering.code",
    typ.omschrijving AS "Typering.omschrijving",
    grh.code AS "Grootheid.code",
    grh.omschrijving AS "Grootheid.omschrijving",
    obj.code AS "object.code",
    obj.omschrijving AS "Object.omschrijving",
    hdh.code AS "Hoedanigheid.code",
    hdh.omschrijving AS "Hoedanigheid.omschrijving"
   FROM ((((((((((((((public.wb_status_change_motivation wscm
     JOIN public.hydro_object hdo ON ((wscm.wbd_id = hdo.hdo_id)))
     JOIN public.observed_property_type opt ON ((opt.opt_id = wscm.opt_id)))
     LEFT JOIN public.substance_group ssg ON ((ssg.ssg_id = opt.substance_group_id)))
     LEFT JOIN public.substance_group_element ssge ON ((ssge.ssge_id = ssg.ssg_id)))
     LEFT JOIN public.chemische_stof_type chs ON ((chs.chs_id = ssge.chs_id)))
     LEFT JOIN public.object_group ojg ON ((ojg.ojg_id = opt.object_group_id)))
     LEFT JOIN public.object_group_element ojge ON ((ojg.ojg_id = ojge.ojg_id)))
     LEFT JOIN public.object_type obj ON ((obj.obj_id = ojge.ojg_id)))
     LEFT JOIN public.hoedanigheid_type hdh ON ((hdh.hdh_id = opt.hoedanigheid_id)))
     LEFT JOIN public.typering_type typ ON ((typ.typ_id = opt.indicator_id)))
     LEFT JOIN public.grootheid_type grh ON ((grh.grh_id = opt.quantity_id)))
     JOIN public.competentauthority_namespacetype can ON ((can.ns_id = hdo.inspire_id_namespace)))
     LEFT JOIN public.vw_competent_authority vca ON ((vca."DB_ID" = can.ore_id)))
     LEFT JOIN public.hdo_names ON ((hdo_names.hdo_id = hdo.hdo_id)))
  WHERE (wscm.scm_id = 1)
  ORDER BY hdo.inspire_id_namespace, hdo.inspire_id_local_id;


--
-- Name: wb_type; Type: TABLE; Schema: factsheets; Owner: -
--

CREATE TABLE wb_type (
    wb_type_id integer NOT NULL,
    code character varying(50) NOT NULL,
    omschrijving character varying(50)
);


SET search_path = krm, pg_catalog;

--
-- Name: cycle_description; Type: TABLE; Schema: krm; Owner: -
--

CREATE TABLE cycle_description (
    cym_id integer NOT NULL,
    description character varying(256),
    last_change_time time without time zone
);


--
-- Name: cycle_description_cym_id_seq; Type: SEQUENCE; Schema: krm; Owner: -
--

CREATE SEQUENCE cycle_description_cym_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: cycle_description_cym_id_seq; Type: SEQUENCE OWNED BY; Schema: krm; Owner: -
--

ALTER SEQUENCE cycle_description_cym_id_seq OWNED BY cycle_description.cym_id;


SET search_path = monprog, pg_catalog;

--
-- Name: quality_element_indicator_descriptor; Type: TABLE; Schema: monprog; Owner: -
--

CREATE TABLE quality_element_indicator_descriptor (
    qem_id integer NOT NULL,
    idd_id integer NOT NULL,
    last_change_time timestamp without time zone NOT NULL
);


SET search_path = public, pg_catalog;

--
-- Name: quality_element_observation; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE quality_element_observation (
    qeo_id integer NOT NULL,
    obs_id integer NOT NULL,
    qem_id integer NOT NULL,
    is_approved boolean DEFAULT false NOT NULL,
    last_change_time timestamp without time zone NOT NULL
);


--
-- Name: quality_element_sample; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE quality_element_sample (
    qes_id integer NOT NULL,
    smpl_id integer NOT NULL,
    qem_id integer NOT NULL,
    is_approved boolean DEFAULT false NOT NULL,
    last_change_time timestamp without time zone NOT NULL
);


SET search_path = krm, pg_catalog;

--
-- Name: hj_vw_krm_metingen_1; Type: VIEW; Schema: krm; Owner: -
--

CREATE VIEW hj_vw_krm_metingen_1 AS
 WITH bio AS (
         SELECT bio.obs_id,
            gedrag.code AS gedrag_code,
            geslacht.code AS geslacht_code,
            lengte.code AS lengte_code,
            levensstadium.code AS levensstadium_code,
            levensvorm.code AS levensvorm_code,
            verschijning.code AS verschijning_code
           FROM ((((((public.bio_observation bio
             LEFT JOIN public.hoedanigheid_type gedrag ON (((bio.gedrag_id = gedrag.hdh_id) AND (bio.gedrag_id IS NOT NULL))))
             LEFT JOIN public.hoedanigheid_type geslacht ON (((bio.geslacht_id = geslacht.hdh_id) AND (bio.geslacht_id IS NOT NULL))))
             LEFT JOIN public.hoedanigheid_type lengte ON (((bio.lengte_klasse_id = lengte.hdh_id) AND (bio.lengte_klasse_id IS NOT NULL))))
             LEFT JOIN public.hoedanigheid_type levensstadium ON (((bio.levensstadium_id = levensstadium.hdh_id) AND (bio.levensstadium_id IS NOT NULL))))
             LEFT JOIN public.hoedanigheid_type levensvorm ON (((bio.levensvorm_id = levensvorm.hdh_id) AND (bio.levensvorm_id IS NOT NULL))))
             LEFT JOIN public.hoedanigheid_type verschijning ON (((bio.verschijningsvorm_id = verschijning.hdh_id) AND (bio.verschijningsvorm_id IS NOT NULL))))
          WHERE ((bio.gedrag_id IS NOT NULL) AND (bio.geslacht_id IS NOT NULL) AND (bio.lengte_klasse_id IS NOT NULL) AND (bio.levensstadium_id IS NOT NULL) AND (bio.levensvorm_id IS NOT NULL) AND (bio.verschijningsvorm_id IS NOT NULL))
        ), opt AS (
         SELECT opt.opt_id,
            grh.code AS grh_code,
            grh.omschrijving AS grh_omschrijving,
            typ.code AS typ_code,
            typ.omschrijving AS typ_omschrijving,
            txt.omschrijving AS txg_omschrijving,
            chs.code AS chs_code,
            chs.naam AS chs_naam,
            obj.code AS obj_code,
            obj.omschrijving AS obj_omschrijving,
            hdh.code AS hdh_code,
            hdh.omschrijving AS hdh_omschrijving
           FROM ((((((public.observed_property_type opt
             LEFT JOIN public.grootheid_type grh ON (((grh.grh_id = opt.quantity_id) AND (opt.quantity_id IS NOT NULL))))
             LEFT JOIN public.typering_type typ ON (((typ.typ_id = opt.indicator_id) AND (opt.indicator_id IS NOT NULL))))
             LEFT JOIN public.hoedanigheid_type hdh ON (((hdh.hdh_id = opt.hoedanigheid_id) AND (opt.hoedanigheid_id IS NOT NULL))))
             LEFT JOIN ((public.taxa_group txg
             JOIN public.taxa_group_element tge ON ((tge.txg_id = txg.txg_id)))
             JOIN public.taxon_type txt ON ((txt.txn_id = tge.txn_id))) ON (((txg.txg_id = opt.taxa_group_id) AND ((txg.group_type)::text = 'I'::text))))
             LEFT JOIN ((public.substance_group ssg
             JOIN public.substance_group_element ssge ON ((ssge.ssge_id = ssg.ssg_id)))
             JOIN public.chemische_stof_type chs ON ((chs.chs_id = ssge.chs_id))) ON (((ssg.ssg_id = opt.substance_group_id) AND ((ssg.group_type)::text = 'I'::text))))
             LEFT JOIN ((public.object_group ojg
             JOIN public.object_group_element ojge ON ((ojg.ojg_id = ojge.ojg_id)))
             JOIN public.object_type obj ON ((obj.obj_id = ojge.obj_id))) ON (((ojg.ojg_id = opt.object_group_id) AND ((ojg.group_type)::text = 'I'::text))))
        )
 SELECT ((qem.qem_id)::text || (obs.obs_id)::text) AS unique_key,
    ((('NL'::text || (mno_nst.code)::text) || '_'::text) || (mno.inspire_id_local_id)::text) AS "Meetpunt.Identificatie",
        CASE
            WHEN (obf.obs_id IS NOT NULL) THEN (('NL'::text || (ns_hdo.code)::text) || (hdo.inspire_id_local_id)::text)
            ELSE
            CASE
                WHEN ((mno.monitoring_object_type)::text = 'Sample'::text) THEN NULL::text
                ELSE ((('NL'::text || (mno_nst.code)::text) || '_AQUO_COMPARTIMENT:'::text) || (compartiment_type.code)::text)
            END
        END AS "Geoobject.Identificatie",
    NULL::text AS "Monster.Identificatie",
    NULL::text AS "Monster.Namespace",
    NULL::integer AS "Monster.Versie",
    NULL::text AS "Compartiment.Code",
    NULL::text AS "Compartiment.Omschrijving",
    NULL::text AS "Orgaan.Code",
    NULL::text AS "Orgaan.Omschrijving",
    NULL::text AS "Organisme.Naam",
    NULL::numeric AS "BeginDiepte_m",
    NULL::numeric AS "EindDiepte_m",
    NULL::text AS "ReferentieVlak.Code",
    NULL::text AS "Monsterbewerkingsmethode.Code",
    NULL::text AS "Monsterbewerkingsmethode.Omschrijving",
    NULL::text AS "Monsterbewerkingsmethode.codespace",
    NULL::text AS "Bemonsteringsmethode.Code",
    NULL::text AS "Bemonsteringsmethode.Omschrijving",
    NULL::text AS "Bemonsteringsmethode.codespace",
    NULL::text AS "Monstercriterium.Code",
    NULL::text AS "veldapparaat.Code",
    NULL::text AS "veldapparaat.Omschrijving",
    NULL::text AS "veldapparaat.Codespace",
    NULL::text AS "Monsternemingsdatum",
    NULL::text AS "Monsternemingstijd",
    NULL::integer AS "Monster.Tijd_UTCoffset",
    NULL::text AS "ReferentieHorizontaal.code",
    NULL::text AS "Monster.Opmerking",
    NULL::text AS "GerelateerdMonsterobject",
    NULL::text AS "GerelateerdMonsterRol.id",
    obs.obs_id AS "Meetwaarde.Identificatie",
    ('NL'::text || (mno_nst.code)::text) AS "Meetwaarde.Namespace",
    mno.wkrv_id AS "Meetwaarde.Versie",
    opt.grh_code AS "Grootheid.code",
    opt.grh_omschrijving AS "Grootheid.omschrijving",
    opt.typ_code AS "Typering.code",
    opt.typ_omschrijving AS "Typering.omschrijving",
        CASE
            WHEN (opt.txg_omschrijving IS NOT NULL) THEN 'Biotaxon'::text
            WHEN (opt.chs_code IS NOT NULL) THEN 'ChemischeStof'::text
            WHEN (opt.obj_code IS NOT NULL) THEN 'Object'::text
            ELSE NULL::text
        END AS "Parameter.Groep",
        CASE
            WHEN (opt.txg_omschrijving IS NOT NULL) THEN (NULL::text)::character varying
            WHEN (opt.chs_code IS NOT NULL) THEN opt.chs_code
            WHEN (opt.obj_code IS NOT NULL) THEN opt.obj_code
            ELSE NULL::character varying
        END AS "Parameter.Code",
        CASE
            WHEN (opt.txg_omschrijving IS NOT NULL) THEN opt.txg_omschrijving
            WHEN (opt.chs_code IS NOT NULL) THEN opt.chs_naam
            WHEN (opt.obj_code IS NOT NULL) THEN opt.obj_omschrijving
            ELSE NULL::character varying
        END AS "Parameter.Omschrijving",
    eenh.code AS "Eenheid.code",
    eenh.omschrijving AS "Eenheid.omschrijving",
    opt.hdh_code AS "Hoedanigheid.code",
    opt.hdh_omschrijving AS "Hoedanigheid.omschrijving",
    wbm.code AS "Waardebewerkigngsmethode.code",
        CASE
            WHEN (wbm.code IS NULL) THEN NULL::text
            ELSE 'www.aquo.nl'::text
        END AS "Waardebewerkigngsmethode.codespace",
    wbpm.code AS "Waardebepalingsmethode.code",
        CASE
            WHEN (wbpm.code IS NULL) THEN NULL::text
            ELSE 'www.aquo.nl'::text
        END AS "Waardebepalingsmethode.codespace",
    to_char(obs.phenomenon_time_begin, 'YYYY-MM-DD'::text) AS "Begindatum",
    to_char(obs.phenomenon_time_begin, 'HH24:MM:SS'::text) AS "Begintijd",
    to_char(obs.phenomenon_time_end, 'YYYY-MM-DD'::text) AS "Einddatum",
    to_char(obs.phenomenon_time_end, 'HH24:MM:SS'::text) AS "Eindtijd",
    NULL::integer AS "Meetwaarde.Tijd_UTCoffset",
    to_char(obs.result_time, 'YYYY-MM-DD'::text) AS "Resultaatdatum",
    NULL::integer AS "Resultaat_UTCoffset",
    obs.limit_symbol_id AS "Limietsymbool",
    obs.numeric_value AS "Numeriekewaarde",
    obs.description AS "Alfanumeriekewaarde",
    kwaliteitsoordeel_type.code AS "Kwaliteitsoordeel.code",
    kwaliteitsoordeel_type.description AS "Kwaliteitsoordeel.omschrijving",
    mar.code AS "Meetapparaat.code",
        CASE
            WHEN (mar.code IS NULL) THEN NULL::text
            ELSE 'www.aquo.nl'::text
        END AS "Meetapparaat.codespace",
    bio.levensstadium_code AS "Levensstadium.code",
    bio.lengte_code AS "Lengteklasse.code",
    bio.geslacht_code AS "Geslachtcode",
    bio.verschijning_code AS "Verschijningsvorm.code",
    bio.levensvorm_code AS "Levensvorm.code",
    bio.gedrag_code AS "Gedrag.code",
        CASE
            WHEN (obx.obs_id_target IS NULL) THEN NULL::text
            ELSE ((('NL'::text || (mno_nst.code)::text) || '_'::text) || (obx.obs_id_target)::text)
        END AS "GerelateerdObservatieobject",
    ocr.code AS "GerelateerdObservatieobjectRol.id",
    obs.remarks AS "Meetwaarde.Opmerking",
    indicator.additional_description AS "Indicator.EUOmschrijving",
    typi.code AS "Indicator.Code",
    typd.code AS "Descriptor.Code",
    descriptor.additional_description AS "Descriptor.EUOmschrijving"
   FROM (((((((((((((((((((domains.indicator_descriptor indicator
     JOIN public.observed_property_type opti ON ((indicator.opt_id = opti.opt_id)))
     JOIN public.typering_type typi ON ((opti.indicator_id = typi.typ_id)))
     JOIN domains.indicator_descriptor descriptor ON (((indicator.part_of_idd_id = descriptor.idd_id) AND (descriptor.part_of_idd_id IS NULL))))
     JOIN public.observed_property_type optd ON ((descriptor.opt_id = optd.opt_id)))
     JOIN public.typering_type typd ON ((optd.indicator_id = typd.typ_id)))
     JOIN monprog.quality_element_indicator_descriptor qeid ON ((qeid.idd_id = indicator.idd_id)))
     JOIN public.quality_element qem ON ((qem.qem_id = qeid.qem_id)))
     JOIN public.monitoring_object_quality_element moqe ON ((moqe.qem_id = qem.qem_id)))
     JOIN public.quality_element_observation qeo ON ((qeo.qem_id = qem.qem_id)))
     JOIN public.observation obs ON ((qeo.obs_id = obs.obs_id)))
     JOIN ((public.monitoring_object mno
     LEFT JOIN (public.monitored_compartiment
     JOIN public.compartiment_type ON ((monitored_compartiment.cptm_id = compartiment_type.cptm_id))) ON ((monitored_compartiment.mno_id = mno.mno_id)))
     JOIN public.namespace_type mno_nst ON ((mno_nst.ns_id = mno.inspire_id_namespace_id))) ON (((mno.mno_id = obs.mno_id) AND ((mno.monitoring_object_type)::text <> 'Sample'::text) AND (mno.mno_id = moqe.mno_id))))
     JOIN public.eenheid_type eenh ON ((eenh.eenh_id = obs.numeric_value_uom_id)))
     JOIN opt ON ((opt.opt_id = obs.observed_property_type)))
     LEFT JOIN public.kwaliteitsoordeel_type ON ((obs.quality_indicator_id = kwaliteitsoordeel_type.kwod_id)))
     LEFT JOIN ((public.observation_process obp
     JOIN public.waarde_bepalings_methode_type wbpm ON ((wbpm.wbpm_id = obp.wbpm_id)))
     LEFT JOIN (public.obs_process_meetapparaat opm
     JOIN domains.meetapparaat mar ON ((mar.mar_id = opm.mar_id))) ON ((opm.obp_id = obp.obp_id))) ON ((obp.obp_id = obs.result_nature_id)))
     LEFT JOIN bio ON ((bio.obs_id = obs.obs_id)))
     LEFT JOIN (public.observation_context obx
     JOIN public.obs_ctx_role_type ocr ON ((ocr.ocr_id = obx.role_id))) ON ((obx.obs_id_source = obs.obs_id)))
     LEFT JOIN public.waarde_bewerkings_methode_type wbm ON ((wbm.wbm_id = obs.value_processing_method_id)))
     LEFT JOIN ((public.observed_feature obf
     JOIN public.hydro_object hdo ON ((obf.hdo_id = hdo.hdo_id)))
     JOIN public.namespace_type ns_hdo ON ((hdo.inspire_id_namespace = ns_hdo.ns_id))) ON (((obs.obs_id = obf.obs_id) AND (mno.wkrv_id = hdo.wkrv_id))))
UNION ALL
 SELECT ((qem.osc_id)::text || (obs.obs_id)::text) AS unique_key,
    ((('NL'::text || (mpn_nst.code)::text) || '_'::text) || (mno_mpn.inspire_id_local_id)::text) AS "Meetpunt.Identificatie",
        CASE
            WHEN (obf.obs_id IS NOT NULL) THEN ((('NL'::text || (ns_hdo.code)::text) || '_'::text) || (hdo.inspire_id_local_id)::text)
            ELSE NULL::text
        END AS "Geoobject.Identificatie",
    mno_smpl.inspire_id_local_id AS "Monster.Identificatie",
    mpn_nst.code AS "Monster.Namespace",
    mno_smpl.wkrv_id AS "Monster.Versie",
    cmp.code AS "Compartiment.Code",
    cmp.description AS "Compartiment.Omschrijving",
    orgaan.code AS "Orgaan.Code",
    orgaan.description AS "Orgaan.Omschrijving",
    taxon_type.omschrijving AS "Organisme.Naam",
    smpl.upper_depth_value AS "BeginDiepte_m",
    smpl.lower_depth_value AS "EindDiepte_m",
        CASE
            WHEN (hdh_ud.hdh_id IS NULL) THEN
            CASE
                WHEN (hdh_ld.hdh_id IS NULL) THEN (NULL::text)::character varying
                ELSE hdh_ld.code
            END
            ELSE hdh_ud.code
        END AS "ReferentieVlak.Code",
    mbm.code AS "Monsterbewerkingsmethode.Code",
    mbm.description AS "Monsterbewerkingsmethode.Omschrijving",
    mbm.codespace AS "Monsterbewerkingsmethode.codespace",
    bmm.code AS "Bemonsteringsmethode.Code",
    bmm.description AS "Bemonsteringsmethode.Omschrijving",
        CASE
            WHEN (bmm.code IS NULL) THEN NULL::text
            ELSE 'www.aquo.nl'::text
        END AS "Bemonsteringsmethode.codespace",
        CASE
            WHEN (frac.code IS NULL) THEN biota.code
            ELSE frac.code
        END AS "Monstercriterium.Code",
    var.code AS "veldapparaat.Code",
    var.description AS "veldapparaat.Omschrijving",
    var.codespace AS "veldapparaat.Codespace",
    to_char(smpl.sampling_time, 'YYYY-MM-DD'::text) AS "Monsternemingsdatum",
    to_char(smpl.sampling_time, 'HH24:MM:SS'::text) AS "Monsternemingstijd",
    NULL::integer AS "Monster.Tijd_UTCoffset",
    'EPSG4258'::text AS "ReferentieHorizontaal.code",
    smpl.remarks AS "Monster.Opmerking",
        CASE
            WHEN (mno_smpl.wkrv_id IS NULL) THEN NULL::text
            ELSE ((('NL'::text || (smpl_nst.code)::text) || '_'::text) || (mno_smpl.inspire_id_local_id)::text)
        END AS "GerelateerdMonsterobject",
        CASE
            WHEN (mno_smpl.wkrv_id IS NULL) THEN (NULL::text)::character varying
            ELSE rsfr.code
        END AS "GerelateerdMonsterRol.id",
    obs.obs_id AS "Meetwaarde.Identificatie",
    ('NL'::text || (mpn_nst.code)::text) AS "Meetwaarde.Namespace",
    mno_mpn.wkrv_id AS "Meetwaarde.Versie",
    opt.grh_code AS "Grootheid.code",
    opt.grh_omschrijving AS "Grootheid.omschrijving",
    opt.typ_code AS "Typering.code",
    opt.typ_omschrijving AS "Typering.omschrijving",
        CASE
            WHEN (opt.txg_omschrijving IS NOT NULL) THEN 'Biotaxon'::text
            WHEN (opt.chs_code IS NOT NULL) THEN 'ChemischeStof'::text
            WHEN (opt.obj_code IS NOT NULL) THEN 'Object'::text
            ELSE NULL::text
        END AS "Parameter.Groep",
        CASE
            WHEN (opt.txg_omschrijving IS NOT NULL) THEN (NULL::text)::character varying
            WHEN (opt.chs_code IS NOT NULL) THEN opt.chs_code
            WHEN (opt.obj_code IS NOT NULL) THEN opt.obj_code
            ELSE NULL::character varying
        END AS "Parameter.Code",
        CASE
            WHEN (opt.txg_omschrijving IS NOT NULL) THEN opt.txg_omschrijving
            WHEN (opt.chs_code IS NOT NULL) THEN opt.chs_naam
            WHEN (opt.obj_code IS NOT NULL) THEN opt.obj_omschrijving
            ELSE NULL::character varying
        END AS "Parameter.Omschrijving",
    eenh.code AS "Eenheid.code",
    eenh.omschrijving AS "Eenheid.omschrijving",
    opt.hdh_code AS "Hoedanigheid.code",
    opt.hdh_omschrijving AS "Hoedanigheid.omschrijving",
    wbm.code AS "Waardebewerkigngsmethode.code",
        CASE
            WHEN (wbm.code IS NULL) THEN NULL::text
            ELSE 'www.aquo.nl'::text
        END AS "Waardebewerkigngsmethode.codespace",
    wbpm.code AS "Waardebepalingsmethode.code",
        CASE
            WHEN (wbpm.code IS NULL) THEN NULL::text
            ELSE 'www.aquo.nl'::text
        END AS "Waardebepalingsmethode.codespace",
    to_char(obs.phenomenon_time_begin, 'YYYY-MM-DD'::text) AS "Begindatum",
    to_char(obs.phenomenon_time_begin, 'HH24:MM:SS'::text) AS "Begintijd",
    to_char(obs.phenomenon_time_end, 'YYYY-MM-DD'::text) AS "Einddatum",
    to_char(obs.phenomenon_time_end, 'HH24:MM:SS'::text) AS "Eindtijd",
    NULL::integer AS "Meetwaarde.Tijd_UTCoffset",
    to_char(obs.result_time, 'YYYY-MM-DD'::text) AS "Resultaatdatum",
    NULL::integer AS "Resultaat_UTCoffset",
    obs.limit_symbol_id AS "Limietsymbool",
    obs.numeric_value AS "Numeriekewaarde",
    obs.description AS "Alfanumeriekewaarde",
    kwaliteitsoordeel_type.code AS "Kwaliteitsoordeel.code",
    kwaliteitsoordeel_type.description AS "Kwaliteitsoordeel.omschrijving",
    mar.code AS "Meetapparaat.code",
        CASE
            WHEN (mar.code IS NULL) THEN NULL::text
            ELSE 'www.aquo.nl'::text
        END AS "Meetapparaat.codespace",
    bio.levensstadium_code AS "Levensstadium.code",
    bio.lengte_code AS "Lengteklasse.code",
    bio.geslacht_code AS "Geslachtcode",
    bio.verschijning_code AS "Verschijningsvorm.code",
    bio.levensvorm_code AS "Levensvorm.code",
    bio.gedrag_code AS "Gedrag.code",
        CASE
            WHEN (obx.obs_id_target IS NULL) THEN NULL::text
            ELSE ((('NL'::text || (mpn_nst.code)::text) || '_'::text) || (obx.obs_id_target)::text)
        END AS "GerelateerdObservatieobject",
    ocr.code AS "GerelateerdObservatieobjectRol.id",
    obs.remarks AS "Meetwaarde.Opmerking",
    indicator.additional_description AS "Indicator.EUOmschrijving",
    typi.code AS "Indicator.Code",
    typd.code AS "Descriptor.Code",
    descriptor.additional_description AS "Descriptor.EUOmschrijving"
   FROM (((((((((((((((((((((((((((((((((domains.indicator_descriptor indicator
     JOIN public.observed_property_type opti ON ((indicator.opt_id = opti.opt_id)))
     JOIN public.typering_type typi ON ((opti.indicator_id = typi.typ_id)))
     JOIN domains.indicator_descriptor descriptor ON (((indicator.part_of_idd_id = descriptor.idd_id) AND (descriptor.part_of_idd_id IS NULL))))
     JOIN public.observed_property_type optd ON ((descriptor.opt_id = optd.opt_id)))
     JOIN public.typering_type typd ON ((optd.indicator_id = typd.typ_id)))
     JOIN monprog.quality_element_indicator_descriptor qeid ON ((qeid.idd_id = indicator.idd_id)))
     JOIN public.quality_element qem ON ((qem.qem_id = qeid.qem_id)))
     JOIN public.quality_element_sample qes ON ((qem.qem_id = qes.qem_id)))
     JOIN public.sample smpl ON ((smpl.smpl_id = qes.smpl_id)))
     JOIN public.observation obs ON ((smpl.smpl_id = obs.mno_id)))
     JOIN public.compartiment_type cmp ON ((smpl.material_class_id = cmp.cptm_id)))
     LEFT JOIN public.hoedanigheid_type hdh_ud ON ((hdh_ud.hdh_id = smpl.upper_depth_condition_id)))
     LEFT JOIN public.hoedanigheid_type hdh_ld ON ((hdh_ld.hdh_id = smpl.lower_depth_condition_id)))
     LEFT JOIN public.taxon_type ON ((smpl.txn_id = taxon_type.txn_id)))
     LEFT JOIN domains.orgaan ON ((orgaan.org_id = smpl.organ_id)))
     LEFT JOIN public.hoedanigheid_type frac ON ((frac.hdh_id = smpl.fraction_criterium_id)))
     LEFT JOIN public.hoedanigheid_type biota ON ((biota.hdh_id = smpl.biota_criterium_id)))
     LEFT JOIN public.eenheid_type eenh_ud ON ((eenh_ud.eenh_id = smpl.upper_depth_uom_id)))
     LEFT JOIN public.eenheid_type eenh_ld ON ((eenh_ld.eenh_id = smpl.lower_depth_uom_id)))
     LEFT JOIN (((public.sampling_proces smp
     LEFT JOIN domains.monsterbewerkingsmethode mbm ON ((mbm.mbm_id = smp.sampling_method_id)))
     LEFT JOIN domains.bemonsteringsmethode bmm ON ((bmm.bmm_id = smp.sampling_processing_method_id)))
     LEFT JOIN domains.veldapparaat var ON ((var.var_id = smp.var_id))) ON ((smp.smp_id = smpl.smp_id)))
     LEFT JOIN public.related_sampling_feature rel_smpl ON ((smpl.smpl_id = rel_smpl.mnf_id_source)))
     LEFT JOIN public.sample smpl2 ON ((smpl.smpl_id = rel_smpl.mnf_id_target)))
     LEFT JOIN (public.monitoring_object mno_mpn
     JOIN public.namespace_type mpn_nst ON ((mpn_nst.ns_id = mno_mpn.inspire_id_namespace_id))) ON (((mno_mpn.mno_id = rel_smpl.mnf_id_target) AND ((mno_mpn.monitoring_object_type)::text <> 'Sample'::text))))
     LEFT JOIN (public.monitoring_object mno_smpl
     JOIN public.namespace_type smpl_nst ON ((smpl_nst.ns_id = mno_smpl.inspire_id_namespace_id))) ON (((smpl2.smpl_id = mno_smpl.mno_id) AND ((mno_smpl.monitoring_object_type)::text = 'Sample'::text))))
     LEFT JOIN public.rel_samp_feat_role_type rsfr ON ((rsfr.rsfr_id = rel_smpl.role_id)))
     JOIN public.eenheid_type eenh ON ((eenh.eenh_id = obs.numeric_value_uom_id)))
     JOIN opt ON ((opt.opt_id = obs.observed_property_type)))
     LEFT JOIN public.kwaliteitsoordeel_type ON ((obs.quality_indicator_id = kwaliteitsoordeel_type.kwod_id)))
     LEFT JOIN ((public.observation_process obp
     LEFT JOIN public.waarde_bepalings_methode_type wbpm ON ((wbpm.wbpm_id = obp.wbpm_id)))
     LEFT JOIN (public.obs_process_meetapparaat opm
     JOIN domains.meetapparaat mar ON ((mar.mar_id = opm.mar_id))) ON ((opm.obp_id = obp.obp_id))) ON ((obp.obp_id = obs.result_nature_id)))
     LEFT JOIN bio ON ((bio.obs_id = obs.obs_id)))
     LEFT JOIN (public.observation_context obx
     JOIN public.obs_ctx_role_type ocr ON ((ocr.ocr_id = obx.role_id))) ON ((obx.obs_id_source = obs.obs_id)))
     LEFT JOIN public.waarde_bewerkings_methode_type wbm ON ((wbm.wbm_id = obs.value_processing_method_id)))
     LEFT JOIN ((public.observed_feature obf
     JOIN public.hydro_object hdo ON ((obf.hdo_id = hdo.hdo_id)))
     JOIN public.namespace_type ns_hdo ON ((hdo.inspire_id_namespace = ns_hdo.ns_id))) ON ((obs.obs_id = obf.obs_id)));


--
-- Name: hj_vw_krm_metingen_1_g; Type: VIEW; Schema: krm; Owner: -
--

CREATE VIEW hj_vw_krm_metingen_1_g AS
 WITH bio AS (
         SELECT bio.obs_id,
            gedrag.code AS gedrag_code,
            geslacht.code AS geslacht_code,
            lengte.code AS lengte_code,
            levensstadium.code AS levensstadium_code,
            levensvorm.code AS levensvorm_code,
            verschijning.code AS verschijning_code
           FROM ((((((public.bio_observation bio
             LEFT JOIN public.hoedanigheid_type gedrag ON (((bio.gedrag_id = gedrag.hdh_id) AND (bio.gedrag_id IS NOT NULL))))
             LEFT JOIN public.hoedanigheid_type geslacht ON (((bio.geslacht_id = geslacht.hdh_id) AND (bio.geslacht_id IS NOT NULL))))
             LEFT JOIN public.hoedanigheid_type lengte ON (((bio.lengte_klasse_id = lengte.hdh_id) AND (bio.lengte_klasse_id IS NOT NULL))))
             LEFT JOIN public.hoedanigheid_type levensstadium ON (((bio.levensstadium_id = levensstadium.hdh_id) AND (bio.levensstadium_id IS NOT NULL))))
             LEFT JOIN public.hoedanigheid_type levensvorm ON (((bio.levensvorm_id = levensvorm.hdh_id) AND (bio.levensvorm_id IS NOT NULL))))
             LEFT JOIN public.hoedanigheid_type verschijning ON (((bio.verschijningsvorm_id = verschijning.hdh_id) AND (bio.verschijningsvorm_id IS NOT NULL))))
          WHERE ((bio.gedrag_id IS NOT NULL) AND (bio.geslacht_id IS NOT NULL) AND (bio.lengte_klasse_id IS NOT NULL) AND (bio.levensstadium_id IS NOT NULL) AND (bio.levensvorm_id IS NOT NULL) AND (bio.verschijningsvorm_id IS NOT NULL))
        ), opt AS (
         SELECT opt.opt_id,
            grh.code AS grh_code,
            grh.omschrijving AS grh_omschrijving,
            typ.code AS typ_code,
            typ.omschrijving AS typ_omschrijving,
            txt.omschrijving AS txg_omschrijving,
            chs.code AS chs_code,
            chs.naam AS chs_naam,
            obj.code AS obj_code,
            obj.omschrijving AS obj_omschrijving,
            hdh.code AS hdh_code,
            hdh.omschrijving AS hdh_omschrijving
           FROM ((((((public.observed_property_type opt
             LEFT JOIN public.grootheid_type grh ON (((grh.grh_id = opt.quantity_id) AND (opt.quantity_id IS NOT NULL))))
             LEFT JOIN public.typering_type typ ON (((typ.typ_id = opt.indicator_id) AND (opt.indicator_id IS NOT NULL))))
             LEFT JOIN public.hoedanigheid_type hdh ON (((hdh.hdh_id = opt.hoedanigheid_id) AND (opt.hoedanigheid_id IS NOT NULL))))
             LEFT JOIN ((public.taxa_group txg
             JOIN public.taxa_group_element tge ON ((tge.txg_id = txg.txg_id)))
             JOIN public.taxon_type txt ON ((txt.txn_id = tge.txn_id))) ON (((txg.txg_id = opt.taxa_group_id) AND ((txg.group_type)::text = 'I'::text))))
             LEFT JOIN ((public.substance_group ssg
             JOIN public.substance_group_element ssge ON ((ssge.ssge_id = ssg.ssg_id)))
             JOIN public.chemische_stof_type chs ON ((chs.chs_id = ssge.chs_id))) ON (((ssg.ssg_id = opt.substance_group_id) AND ((ssg.group_type)::text = 'I'::text))))
             LEFT JOIN ((public.object_group ojg
             JOIN public.object_group_element ojge ON ((ojg.ojg_id = ojge.ojg_id)))
             JOIN public.object_type obj ON ((obj.obj_id = ojge.obj_id))) ON (((ojg.ojg_id = opt.object_group_id) AND ((ojg.group_type)::text = 'I'::text))))
        )
 SELECT ((qem.qem_id)::text || (obs.obs_id)::text) AS unique_key,
    qem.osc_id AS "MonProg.Identificatie",
    (osc.name)::text AS "MonProg.Naam",
    ((('NL'::text || (mno_nst.code)::text) || '_'::text) || (mno.inspire_id_local_id)::text) AS "Meetpunt.Identificatie",
    public.st_x(public.st_transform(public.st_centroid(mno.geometry_etrs89), 4258)) AS "GeometriePunt.X",
    public.st_y(public.st_transform(public.st_centroid(mno.geometry_etrs89), 4258)) AS "GeometriePunt.Y",
        CASE
            WHEN (obf.obs_id IS NOT NULL) THEN (('NL'::text || (ns_hdo.code)::text) || (hdo.inspire_id_local_id)::text)
            ELSE
            CASE
                WHEN ((mno.monitoring_object_type)::text = 'Sample'::text) THEN NULL::text
                ELSE ((('NL'::text || (mno_nst.code)::text) || '_AQUO_COMPARTIMENT:'::text) || (compartiment_type.code)::text)
            END
        END AS "Geoobject.Identificatie",
    NULL::text AS "Monster.Identificatie",
    NULL::text AS "Monster.Namespace",
    NULL::integer AS "Monster.Versie",
    NULL::text AS "Compartiment.Code",
    NULL::text AS "Compartiment.Omschrijving",
    NULL::text AS "Orgaan.Code",
    NULL::text AS "Orgaan.Omschrijving",
    NULL::text AS "Organisme.Naam",
    NULL::numeric AS "BeginDiepte_m",
    NULL::numeric AS "EindDiepte_m",
    NULL::text AS "ReferentieVlak.Code",
    NULL::text AS "Monsterbewerkingsmethode.Code",
    NULL::text AS "Monsterbewerkingsmethode.Omschrijving",
    NULL::text AS "Monsterbewerkingsmethode.Codespace",
    NULL::text AS "Bemonsteringsmethode.Code",
    NULL::text AS "Bemonsteringsmethode.Omschrijving",
    NULL::text AS "Bemonsteringsmethode.Codespace",
    NULL::text AS "Monstercriterium.Code",
    NULL::text AS "Veldapparaat.Code",
    NULL::text AS "Veldapparaat.Omschrijving",
    NULL::text AS "Veldapparaat.Codespace",
    NULL::text AS "Monsternemingsdatum",
    NULL::text AS "Monsternemingstijd",
    NULL::integer AS "Monster.Tijd_UTCoffset",
    NULL::text AS "ReferentieHorizontaal.code",
    NULL::text AS "Monster.Opmerking",
    NULL::text AS "GerelateerdMonsterobject",
    NULL::text AS "GerelateerdMonsterRol.id",
    obs.obs_id AS "Meetwaarde.Identificatie",
    ('NL'::text || (mno_nst.code)::text) AS "Meetwaarde.Namespace",
    mno.wkrv_id AS "Meetwaarde.Versie",
    opt.grh_code AS "Grootheid.code",
    opt.grh_omschrijving AS "Grootheid.omschrijving",
    opt.typ_code AS "Typering.code",
    opt.typ_omschrijving AS "Typering.omschrijving",
        CASE
            WHEN (opt.txg_omschrijving IS NOT NULL) THEN 'Biotaxon'::text
            WHEN (opt.chs_code IS NOT NULL) THEN 'ChemischeStof'::text
            WHEN (opt.obj_code IS NOT NULL) THEN 'Object'::text
            ELSE NULL::text
        END AS "Parameter.Groep",
        CASE
            WHEN (opt.txg_omschrijving IS NOT NULL) THEN (NULL::text)::character varying
            WHEN (opt.chs_code IS NOT NULL) THEN opt.chs_code
            WHEN (opt.obj_code IS NOT NULL) THEN opt.obj_code
            ELSE NULL::character varying
        END AS "Parameter.Code",
        CASE
            WHEN (opt.txg_omschrijving IS NOT NULL) THEN opt.txg_omschrijving
            WHEN (opt.chs_code IS NOT NULL) THEN opt.chs_naam
            WHEN (opt.obj_code IS NOT NULL) THEN opt.obj_omschrijving
            ELSE NULL::character varying
        END AS "Parameter.Omschrijving",
    eenh.code AS "Eenheid.Code",
    eenh.omschrijving AS "Eenheid.Omschrijving",
    opt.hdh_code AS "Hoedanigheid.Code",
    opt.hdh_omschrijving AS "Hoedanigheid.Omschrijving",
    wbm.code AS "Waardebewerkingsmethode.Code",
    (wbm.omschrijving)::text AS "Waardebewerkingsmethode.Omschrijving",
        CASE
            WHEN (wbm.code IS NULL) THEN NULL::text
            ELSE 'www.aquo.nl'::text
        END AS "Waardebewerkingsmethode.Codespace",
    wbpm.code AS "Waardebepalingsmethode.Code",
    (wbpm.omschrijving)::text AS "Waardebepalingsmethode.Omschrijving",
        CASE
            WHEN (wbpm.code IS NULL) THEN NULL::text
            ELSE 'www.aquo.nl'::text
        END AS "Waardebepalingsmethode.Codespace",
    to_char(obs.phenomenon_time_begin, 'YYYY-MM-DD'::text) AS "Begindatum",
    to_char(obs.phenomenon_time_begin, 'HH24:MM:SS'::text) AS "Begintijd",
    to_char(obs.phenomenon_time_end, 'YYYY-MM-DD'::text) AS "Einddatum",
    to_char(obs.phenomenon_time_end, 'HH24:MM:SS'::text) AS "Eindtijd",
    NULL::integer AS "Meetwaarde.Tijd_UTCoffset",
    to_char(obs.result_time, 'YYYY-MM-DD'::text) AS "Resultaatdatum",
    NULL::integer AS "Resultaat_UTCoffset",
    bpg.omschrijving AS "Limietsymbool",
    obs.numeric_value AS "NumeriekeWaarde",
    obs.description AS "AlfanumeriekeWaarde",
    kwaliteitsoordeel_type.code AS "Kwaliteitsoordeel.Code",
    kwaliteitsoordeel_type.description AS "Kwaliteitsoordeel.Omschrijving",
    mar.code AS "Meetapparaat.Code",
        CASE
            WHEN (mar.code IS NULL) THEN NULL::text
            ELSE 'www.aquo.nl'::text
        END AS "Meetapparaat.Codespace",
    bio.levensstadium_code AS "Levensstadium.Code",
    bio.lengte_code AS "Lengteklasse.Code",
    bio.geslacht_code AS "Geslacht.Code",
    bio.verschijning_code AS "Verschijningsvorm.Code",
    bio.levensvorm_code AS "Levensvorm.Code",
    bio.gedrag_code AS "Gedrag.Code",
        CASE
            WHEN (obx.obs_id_target IS NULL) THEN NULL::text
            ELSE ((('NL'::text || (mno_nst.code)::text) || '_'::text) || (obx.obs_id_target)::text)
        END AS "GerelateerdObservatieobject",
    ocr.code AS "GerelateerdObservatieobjectRol.id",
    obs.remarks AS "Meetwaarde.Opmerking",
    indicator.additional_description AS "Indicator.EUOmschrijving",
    typi.code AS "Indicator.Code",
    typd.code AS "Descriptor.Code",
    descriptor.additional_description AS "Descriptor.EUOmschrijving"
   FROM (((((((((((((((((((((domains.indicator_descriptor indicator
     JOIN public.observed_property_type opti ON ((indicator.opt_id = opti.opt_id)))
     JOIN public.typering_type typi ON ((opti.indicator_id = typi.typ_id)))
     JOIN domains.indicator_descriptor descriptor ON (((indicator.part_of_idd_id = descriptor.idd_id) AND (descriptor.part_of_idd_id IS NULL))))
     JOIN public.observed_property_type optd ON ((descriptor.opt_id = optd.opt_id)))
     JOIN public.typering_type typd ON ((optd.indicator_id = typd.typ_id)))
     JOIN monprog.quality_element_indicator_descriptor qeid ON ((qeid.idd_id = indicator.idd_id)))
     JOIN public.quality_element qem ON ((qem.qem_id = qeid.qem_id)))
     JOIN public.observing_capability osc ON ((osc.osc_id = qem.osc_id)))
     JOIN public.monitoring_object_quality_element moqe ON ((moqe.qem_id = qem.qem_id)))
     JOIN public.quality_element_observation qeo ON ((qeo.qem_id = qem.qem_id)))
     JOIN public.observation obs ON ((qeo.obs_id = obs.obs_id)))
     LEFT JOIN public.bepaling_grens_type bpg ON ((bpg.bpg_id = obs.limit_symbol_id)))
     JOIN ((public.monitoring_object mno
     LEFT JOIN (public.monitored_compartiment
     JOIN public.compartiment_type ON ((monitored_compartiment.cptm_id = compartiment_type.cptm_id))) ON ((monitored_compartiment.mno_id = mno.mno_id)))
     JOIN public.namespace_type mno_nst ON ((mno_nst.ns_id = mno.inspire_id_namespace_id))) ON (((mno.mno_id = obs.mno_id) AND ((mno.monitoring_object_type)::text <> 'Sample'::text) AND (mno.mno_id = moqe.mno_id))))
     JOIN public.eenheid_type eenh ON ((eenh.eenh_id = obs.numeric_value_uom_id)))
     JOIN opt ON ((opt.opt_id = obs.observed_property_type)))
     LEFT JOIN public.kwaliteitsoordeel_type ON ((obs.quality_indicator_id = kwaliteitsoordeel_type.kwod_id)))
     LEFT JOIN ((public.observation_process obp
     JOIN public.waarde_bepalings_methode_type wbpm ON ((wbpm.wbpm_id = obp.wbpm_id)))
     LEFT JOIN (public.obs_process_meetapparaat opm
     JOIN domains.meetapparaat mar ON ((mar.mar_id = opm.mar_id))) ON ((opm.obp_id = obp.obp_id))) ON ((obp.obp_id = obs.result_nature_id)))
     LEFT JOIN bio ON ((bio.obs_id = obs.obs_id)))
     LEFT JOIN (public.observation_context obx
     JOIN public.obs_ctx_role_type ocr ON ((ocr.ocr_id = obx.role_id))) ON ((obx.obs_id_source = obs.obs_id)))
     LEFT JOIN public.waarde_bewerkings_methode_type wbm ON ((wbm.wbm_id = obs.value_processing_method_id)))
     LEFT JOIN ((public.observed_feature obf
     JOIN public.hydro_object hdo ON ((obf.hdo_id = hdo.hdo_id)))
     JOIN public.namespace_type ns_hdo ON ((hdo.inspire_id_namespace = ns_hdo.ns_id))) ON (((obs.obs_id = obf.obs_id) AND (mno.wkrv_id = hdo.wkrv_id))))
UNION ALL
 SELECT ((qem.osc_id)::text || (obs.obs_id)::text) AS unique_key,
    qem.osc_id AS "MonProg.Identificatie",
    (osc.name)::text AS "MonProg.Naam",
    ((('NL'::text || (mpn_nst.code)::text) || '_'::text) || (mno_mpn.inspire_id_local_id)::text) AS "Meetpunt.Identificatie",
    public.st_x(public.st_transform(smpl.sampling_location, 4258)) AS "GeometriePunt.X",
    public.st_y(public.st_transform(smpl.sampling_location, 4258)) AS "GeometriePunt.Y",
        CASE
            WHEN (obf.obs_id IS NOT NULL) THEN ((('NL'::text || (ns_hdo.code)::text) || '_'::text) || (hdo.inspire_id_local_id)::text)
            ELSE NULL::text
        END AS "Geoobject.Identificatie",
    smpl.name AS "Monster.Identificatie",
    mpn_nst.code AS "Monster.Namespace",
    mno_smpl.wkrv_id AS "Monster.Versie",
    cmp.code AS "Compartiment.Code",
    cmp.description AS "Compartiment.Omschrijving",
    orgaan.code AS "Orgaan.Code",
    orgaan.description AS "Orgaan.Omschrijving",
    taxon_type.omschrijving AS "Organisme.Naam",
    smpl.upper_depth_value AS "BeginDiepte_m",
    smpl.lower_depth_value AS "EindDiepte_m",
        CASE
            WHEN (hdh_ud.hdh_id IS NULL) THEN
            CASE
                WHEN (hdh_ld.hdh_id IS NULL) THEN (NULL::text)::character varying
                ELSE hdh_ld.code
            END
            ELSE hdh_ud.code
        END AS "ReferentieVlak.Code",
    mbm.code AS "Monsterbewerkingsmethode.Code",
    mbm.description AS "Monsterbewerkingsmethode.Omschrijving",
    mbm.codespace AS "Monsterbewerkingsmethode.Codespace",
    bmm.code AS "Bemonsteringsmethode.Code",
    bmm.description AS "Bemonsteringsmethode.Omschrijving",
        CASE
            WHEN (bmm.code IS NULL) THEN NULL::text
            ELSE 'www.aquo.nl'::text
        END AS "Bemonsteringsmethode.Codespace",
        CASE
            WHEN (frac.code IS NULL) THEN biota.code
            ELSE frac.code
        END AS "Monstercriterium.Code",
    var.code AS "Veldapparaat.Code",
    var.description AS "Veldapparaat.Omschrijving",
    var.codespace AS "Veldapparaat.Codespace",
    to_char(smpl.sampling_time, 'YYYY-MM-DD'::text) AS "Monsternemingsdatum",
    to_char(smpl.sampling_time, 'HH24:MM:SS'::text) AS "Monsternemingstijd",
    NULL::integer AS "Monster.Tijd_UTCoffset",
    'EPSG4258'::text AS "ReferentieHorizontaal.code",
    smpl.remarks AS "Monster.Opmerking",
        CASE
            WHEN (mno_smpl.wkrv_id IS NULL) THEN NULL::text
            ELSE ((('NL'::text || (smpl_nst.code)::text) || '_'::text) || (mno_smpl.inspire_id_local_id)::text)
        END AS "GerelateerdMonsterobject",
        CASE
            WHEN (mno_smpl.wkrv_id IS NULL) THEN (NULL::text)::character varying
            ELSE rsfr.code
        END AS "GerelateerdMonsterRol.id",
    obs.obs_id AS "Meetwaarde.Identificatie",
    ('NL'::text || (mpn_nst.code)::text) AS "Meetwaarde.Namespace",
    mno_mpn.wkrv_id AS "Meetwaarde.Versie",
    opt.grh_code AS "Grootheid.code",
    opt.grh_omschrijving AS "Grootheid.omschrijving",
    opt.typ_code AS "Typering.code",
    opt.typ_omschrijving AS "Typering.omschrijving",
        CASE
            WHEN (opt.txg_omschrijving IS NOT NULL) THEN 'Biotaxon'::text
            WHEN (opt.chs_code IS NOT NULL) THEN 'ChemischeStof'::text
            WHEN (opt.obj_code IS NOT NULL) THEN 'Object'::text
            ELSE NULL::text
        END AS "Parameter.Groep",
        CASE
            WHEN (opt.txg_omschrijving IS NOT NULL) THEN (NULL::text)::character varying
            WHEN (opt.chs_code IS NOT NULL) THEN opt.chs_code
            WHEN (opt.obj_code IS NOT NULL) THEN opt.obj_code
            ELSE NULL::character varying
        END AS "Parameter.Code",
        CASE
            WHEN (opt.txg_omschrijving IS NOT NULL) THEN opt.txg_omschrijving
            WHEN (opt.chs_code IS NOT NULL) THEN opt.chs_naam
            WHEN (opt.obj_code IS NOT NULL) THEN opt.obj_omschrijving
            ELSE NULL::character varying
        END AS "Parameter.Omschrijving",
    eenh.code AS "Eenheid.Code",
    eenh.omschrijving AS "Eenheid.Omschrijving",
    opt.hdh_code AS "Hoedanigheid.Code",
    opt.hdh_omschrijving AS "Hoedanigheid.Omschrijving",
    wbm.code AS "Waardebewerkingsmethode.Code",
    (wbm.omschrijving)::text AS "Waardebewerkingsmethode.Omschrijving",
        CASE
            WHEN (wbm.code IS NULL) THEN NULL::text
            ELSE 'www.aquo.nl'::text
        END AS "Waardebewerkingsmethode.Codespace",
    wbpm.code AS "Waardebepalingsmethode.Code",
    (wbpm.omschrijving)::text AS "Waardebepalingsmethode.Omschrijving",
        CASE
            WHEN (wbpm.code IS NULL) THEN NULL::text
            ELSE 'www.aquo.nl'::text
        END AS "Waardebepalingsmethode.Codespace",
    to_char(obs.phenomenon_time_begin, 'YYYY-MM-DD'::text) AS "Begindatum",
    to_char(obs.phenomenon_time_begin, 'HH24:MM:SS'::text) AS "Begintijd",
    to_char(obs.phenomenon_time_end, 'YYYY-MM-DD'::text) AS "Einddatum",
    to_char(obs.phenomenon_time_end, 'HH24:MM:SS'::text) AS "Eindtijd",
    NULL::integer AS "Meetwaarde.Tijd_UTCoffset",
    to_char(obs.result_time, 'YYYY-MM-DD'::text) AS "Resultaatdatum",
    NULL::integer AS "Resultaat_UTCoffset",
    bpg.omschrijving AS "Limietsymbool",
    obs.numeric_value AS "NumeriekeWaarde",
    obs.description AS "AlfanumeriekeWaarde",
    kwaliteitsoordeel_type.code AS "Kwaliteitsoordeel.Code",
    kwaliteitsoordeel_type.description AS "Kwaliteitsoordeel.Omschrijving",
    mar.code AS "Meetapparaat.Code",
        CASE
            WHEN (mar.code IS NULL) THEN NULL::text
            ELSE 'www.aquo.nl'::text
        END AS "Meetapparaat.Codespace",
    bio.levensstadium_code AS "Levensstadium.Code",
    bio.lengte_code AS "Lengteklasse.Code",
    bio.geslacht_code AS "Geslacht.Code",
    bio.verschijning_code AS "Verschijningsvorm.Code",
    bio.levensvorm_code AS "Levensvorm.Code",
    bio.gedrag_code AS "Gedrag.Code",
        CASE
            WHEN (obx.obs_id_target IS NULL) THEN NULL::text
            ELSE ((('NL'::text || (mpn_nst.code)::text) || '_'::text) || (obx.obs_id_target)::text)
        END AS "GerelateerdObservatieobject",
    ocr.code AS "GerelateerdObservatieobjectRol.id",
    obs.remarks AS "Meetwaarde.Opmerking",
    indicator.additional_description AS "Indicator.EUOmschrijving",
    typi.code AS "Indicator.Code",
    typd.code AS "Descriptor.Code",
    descriptor.additional_description AS "Descriptor.EUOmschrijving"
   FROM (((((((((((((((((((((((((((((((((((domains.indicator_descriptor indicator
     JOIN public.observed_property_type opti ON ((indicator.opt_id = opti.opt_id)))
     JOIN public.typering_type typi ON ((opti.indicator_id = typi.typ_id)))
     JOIN domains.indicator_descriptor descriptor ON (((indicator.part_of_idd_id = descriptor.idd_id) AND (descriptor.part_of_idd_id IS NULL))))
     JOIN public.observed_property_type optd ON ((descriptor.opt_id = optd.opt_id)))
     JOIN public.typering_type typd ON ((optd.indicator_id = typd.typ_id)))
     JOIN monprog.quality_element_indicator_descriptor qeid ON ((qeid.idd_id = indicator.idd_id)))
     JOIN public.quality_element qem ON ((qem.qem_id = qeid.qem_id)))
     JOIN public.observing_capability osc ON ((osc.osc_id = qem.osc_id)))
     JOIN public.quality_element_sample qes ON ((qem.qem_id = qes.qem_id)))
     JOIN public.sample smpl ON ((smpl.smpl_id = qes.smpl_id)))
     JOIN public.observation obs ON ((smpl.smpl_id = obs.mno_id)))
     LEFT JOIN public.bepaling_grens_type bpg ON ((bpg.bpg_id = obs.limit_symbol_id)))
     JOIN public.compartiment_type cmp ON ((smpl.material_class_id = cmp.cptm_id)))
     LEFT JOIN public.hoedanigheid_type hdh_ud ON ((hdh_ud.hdh_id = smpl.upper_depth_condition_id)))
     LEFT JOIN public.hoedanigheid_type hdh_ld ON ((hdh_ld.hdh_id = smpl.lower_depth_condition_id)))
     LEFT JOIN public.taxon_type ON ((smpl.txn_id = taxon_type.txn_id)))
     LEFT JOIN domains.orgaan ON ((orgaan.org_id = smpl.organ_id)))
     LEFT JOIN public.hoedanigheid_type frac ON ((frac.hdh_id = smpl.fraction_criterium_id)))
     LEFT JOIN public.hoedanigheid_type biota ON ((biota.hdh_id = smpl.biota_criterium_id)))
     LEFT JOIN public.eenheid_type eenh_ud ON ((eenh_ud.eenh_id = smpl.upper_depth_uom_id)))
     LEFT JOIN public.eenheid_type eenh_ld ON ((eenh_ld.eenh_id = smpl.lower_depth_uom_id)))
     LEFT JOIN (((public.sampling_proces smp
     LEFT JOIN domains.monsterbewerkingsmethode mbm ON ((mbm.mbm_id = smp.sampling_method_id)))
     LEFT JOIN domains.bemonsteringsmethode bmm ON ((bmm.bmm_id = smp.sampling_processing_method_id)))
     LEFT JOIN domains.veldapparaat var ON ((var.var_id = smp.var_id))) ON ((smp.smp_id = smpl.smp_id)))
     LEFT JOIN public.related_sampling_feature rel_smpl ON ((smpl.smpl_id = rel_smpl.mnf_id_source)))
     LEFT JOIN public.sample smpl2 ON ((smpl.smpl_id = rel_smpl.mnf_id_target)))
     LEFT JOIN (public.monitoring_object mno_mpn
     JOIN public.namespace_type mpn_nst ON ((mpn_nst.ns_id = mno_mpn.inspire_id_namespace_id))) ON (((mno_mpn.mno_id = rel_smpl.mnf_id_target) AND ((mno_mpn.monitoring_object_type)::text <> 'Sample'::text))))
     LEFT JOIN (public.monitoring_object mno_smpl
     JOIN public.namespace_type smpl_nst ON ((smpl_nst.ns_id = mno_smpl.inspire_id_namespace_id))) ON (((smpl2.smpl_id = mno_smpl.mno_id) AND ((mno_smpl.monitoring_object_type)::text = 'Sample'::text))))
     LEFT JOIN public.rel_samp_feat_role_type rsfr ON ((rsfr.rsfr_id = rel_smpl.role_id)))
     JOIN public.eenheid_type eenh ON ((eenh.eenh_id = obs.numeric_value_uom_id)))
     JOIN opt ON ((opt.opt_id = obs.observed_property_type)))
     LEFT JOIN public.kwaliteitsoordeel_type ON ((obs.quality_indicator_id = kwaliteitsoordeel_type.kwod_id)))
     LEFT JOIN ((public.observation_process obp
     LEFT JOIN public.waarde_bepalings_methode_type wbpm ON ((wbpm.wbpm_id = obp.wbpm_id)))
     LEFT JOIN (public.obs_process_meetapparaat opm
     JOIN domains.meetapparaat mar ON ((mar.mar_id = opm.mar_id))) ON ((opm.obp_id = obp.obp_id))) ON ((obp.obp_id = obs.result_nature_id)))
     LEFT JOIN bio ON ((bio.obs_id = obs.obs_id)))
     LEFT JOIN (public.observation_context obx
     JOIN public.obs_ctx_role_type ocr ON ((ocr.ocr_id = obx.role_id))) ON ((obx.obs_id_source = obs.obs_id)))
     LEFT JOIN public.waarde_bewerkings_methode_type wbm ON ((wbm.wbm_id = obs.value_processing_method_id)))
     LEFT JOIN ((public.observed_feature obf
     JOIN public.hydro_object hdo ON ((obf.hdo_id = hdo.hdo_id)))
     JOIN public.namespace_type ns_hdo ON ((hdo.inspire_id_namespace = ns_hdo.ns_id))) ON ((obs.obs_id = obf.obs_id)));


--
-- Name: hj_vw_krm_metingen_1_g_backup; Type: VIEW; Schema: krm; Owner: -
--

CREATE VIEW hj_vw_krm_metingen_1_g_backup AS
 WITH bio AS (
         SELECT bio.obs_id,
            gedrag.code AS gedrag_code,
            geslacht.code AS geslacht_code,
            lengte.code AS lengte_code,
            levensstadium.code AS levensstadium_code,
            levensvorm.code AS levensvorm_code,
            verschijning.code AS verschijning_code
           FROM ((((((public.bio_observation bio
             LEFT JOIN public.hoedanigheid_type gedrag ON (((bio.gedrag_id = gedrag.hdh_id) AND (bio.gedrag_id IS NOT NULL))))
             LEFT JOIN public.hoedanigheid_type geslacht ON (((bio.geslacht_id = geslacht.hdh_id) AND (bio.geslacht_id IS NOT NULL))))
             LEFT JOIN public.hoedanigheid_type lengte ON (((bio.lengte_klasse_id = lengte.hdh_id) AND (bio.lengte_klasse_id IS NOT NULL))))
             LEFT JOIN public.hoedanigheid_type levensstadium ON (((bio.levensstadium_id = levensstadium.hdh_id) AND (bio.levensstadium_id IS NOT NULL))))
             LEFT JOIN public.hoedanigheid_type levensvorm ON (((bio.levensvorm_id = levensvorm.hdh_id) AND (bio.levensvorm_id IS NOT NULL))))
             LEFT JOIN public.hoedanigheid_type verschijning ON (((bio.verschijningsvorm_id = verschijning.hdh_id) AND (bio.verschijningsvorm_id IS NOT NULL))))
          WHERE ((bio.gedrag_id IS NOT NULL) AND (bio.geslacht_id IS NOT NULL) AND (bio.lengte_klasse_id IS NOT NULL) AND (bio.levensstadium_id IS NOT NULL) AND (bio.levensvorm_id IS NOT NULL) AND (bio.verschijningsvorm_id IS NOT NULL))
        ), opt AS (
         SELECT opt.opt_id,
            grh.code AS grh_code,
            grh.omschrijving AS grh_omschrijving,
            typ.code AS typ_code,
            typ.omschrijving AS typ_omschrijving,
            txt.omschrijving AS txg_omschrijving,
            chs.code AS chs_code,
            chs.naam AS chs_naam,
            obj.code AS obj_code,
            obj.omschrijving AS obj_omschrijving,
            hdh.code AS hdh_code,
            hdh.omschrijving AS hdh_omschrijving
           FROM ((((((public.observed_property_type opt
             LEFT JOIN public.grootheid_type grh ON (((grh.grh_id = opt.quantity_id) AND (opt.quantity_id IS NOT NULL))))
             LEFT JOIN public.typering_type typ ON (((typ.typ_id = opt.indicator_id) AND (opt.indicator_id IS NOT NULL))))
             LEFT JOIN public.hoedanigheid_type hdh ON (((hdh.hdh_id = opt.hoedanigheid_id) AND (opt.hoedanigheid_id IS NOT NULL))))
             LEFT JOIN ((public.taxa_group txg
             JOIN public.taxa_group_element tge ON ((tge.txg_id = txg.txg_id)))
             JOIN public.taxon_type txt ON ((txt.txn_id = tge.txn_id))) ON (((txg.txg_id = opt.taxa_group_id) AND ((txg.group_type)::text = 'I'::text))))
             LEFT JOIN ((public.substance_group ssg
             JOIN public.substance_group_element ssge ON ((ssge.ssge_id = ssg.ssg_id)))
             JOIN public.chemische_stof_type chs ON ((chs.chs_id = ssge.chs_id))) ON (((ssg.ssg_id = opt.substance_group_id) AND ((ssg.group_type)::text = 'I'::text))))
             LEFT JOIN ((public.object_group ojg
             JOIN public.object_group_element ojge ON ((ojg.ojg_id = ojge.ojg_id)))
             JOIN public.object_type obj ON ((obj.obj_id = ojge.obj_id))) ON (((ojg.ojg_id = opt.object_group_id) AND ((ojg.group_type)::text = 'I'::text))))
        )
 SELECT ((qem.qem_id)::text || (obs.obs_id)::text) AS unique_key,
    (qem.osc_id)::text AS "MonProgId",
    ((('NL'::text || (mno_nst.code)::text) || '_'::text) || (mno.inspire_id_local_id)::text) AS "Meetpunt.Identificatie",
    public.st_x(public.st_transform(public.st_centroid(mno.geometry_etrs89), 4258)) AS "GeometriePunt.X",
    public.st_y(public.st_transform(public.st_centroid(mno.geometry_etrs89), 4258)) AS "GeometriePunt.Y",
        CASE
            WHEN (obf.obs_id IS NOT NULL) THEN (('NL'::text || (ns_hdo.code)::text) || (hdo.inspire_id_local_id)::text)
            ELSE
            CASE
                WHEN ((mno.monitoring_object_type)::text = 'Sample'::text) THEN NULL::text
                ELSE ((('NL'::text || (mno_nst.code)::text) || '_AQUO_COMPARTIMENT:'::text) || (compartiment_type.code)::text)
            END
        END AS "Geoobject.Identificatie",
    NULL::text AS "Monster.Identificatie",
    NULL::text AS "Monster.Namespace",
    NULL::integer AS "Monster.Versie",
    NULL::text AS "Compartiment.Code",
    NULL::text AS "Compartiment.Omschrijving",
    NULL::text AS "Orgaan.Code",
    NULL::text AS "Orgaan.Omschrijving",
    NULL::text AS "Organisme.Naam",
    NULL::numeric AS "BeginDiepte_m",
    NULL::numeric AS "EindDiepte_m",
    NULL::text AS "ReferentieVlak.Code",
    NULL::text AS "Monsterbewerkingsmethode.Code",
    NULL::text AS "Monsterbewerkingsmethode.Omschrijving",
    NULL::text AS "Monsterbewerkingsmethode.codespace",
    NULL::text AS "Bemonsteringsmethode.Code",
    NULL::text AS "Bemonsteringsmethode.Omschrijving",
    NULL::text AS "Bemonsteringsmethode.codespace",
    NULL::text AS "Monstercriterium.Code",
    NULL::text AS "veldapparaat.Code",
    NULL::text AS "veldapparaat.Omschrijving",
    NULL::text AS "veldapparaat.Codespace",
    NULL::text AS "Monsternemingsdatum",
    NULL::text AS "Monsternemingstijd",
    NULL::integer AS "Monster.Tijd_UTCoffset",
    NULL::text AS "ReferentieHorizontaal.code",
    NULL::text AS "Monster.Opmerking",
    NULL::text AS "GerelateerdMonsterobject",
    NULL::text AS "GerelateerdMonsterRol.id",
    obs.obs_id AS "Meetwaarde.Identificatie",
    ('NL'::text || (mno_nst.code)::text) AS "Meetwaarde.Namespace",
    mno.wkrv_id AS "Meetwaarde.Versie",
    opt.grh_code AS "Grootheid.code",
    opt.grh_omschrijving AS "Grootheid.omschrijving",
    opt.typ_code AS "Typering.code",
    opt.typ_omschrijving AS "Typering.omschrijving",
        CASE
            WHEN (opt.txg_omschrijving IS NOT NULL) THEN 'Biotaxon'::text
            WHEN (opt.chs_code IS NOT NULL) THEN 'ChemischeStof'::text
            WHEN (opt.obj_code IS NOT NULL) THEN 'Object'::text
            ELSE NULL::text
        END AS "Parameter.Groep",
        CASE
            WHEN (opt.txg_omschrijving IS NOT NULL) THEN (NULL::text)::character varying
            WHEN (opt.chs_code IS NOT NULL) THEN opt.chs_code
            WHEN (opt.obj_code IS NOT NULL) THEN opt.obj_code
            ELSE NULL::character varying
        END AS "Parameter.Code",
        CASE
            WHEN (opt.txg_omschrijving IS NOT NULL) THEN opt.txg_omschrijving
            WHEN (opt.chs_code IS NOT NULL) THEN opt.chs_naam
            WHEN (opt.obj_code IS NOT NULL) THEN opt.obj_omschrijving
            ELSE NULL::character varying
        END AS "Parameter.Omschrijving",
    eenh.code AS "Eenheid.code",
    eenh.omschrijving AS "Eenheid.omschrijving",
    opt.hdh_code AS "Hoedanigheid.code",
    opt.hdh_omschrijving AS "Hoedanigheid.omschrijving",
    wbm.code AS "Waardebewerkigngsmethode.code",
        CASE
            WHEN (wbm.code IS NULL) THEN NULL::text
            ELSE 'www.aquo.nl'::text
        END AS "Waardebewerkigngsmethode.codespace",
    wbpm.code AS "Waardebepalingsmethode.code",
        CASE
            WHEN (wbpm.code IS NULL) THEN NULL::text
            ELSE 'www.aquo.nl'::text
        END AS "Waardebepalingsmethode.codespace",
    to_char(obs.phenomenon_time_begin, 'YYYY-MM-DD'::text) AS "Begindatum",
    to_char(obs.phenomenon_time_begin, 'HH24:MM:SS'::text) AS "Begintijd",
    to_char(obs.phenomenon_time_end, 'YYYY-MM-DD'::text) AS "Einddatum",
    to_char(obs.phenomenon_time_end, 'HH24:MM:SS'::text) AS "Eindtijd",
    NULL::integer AS "Meetwaarde.Tijd_UTCoffset",
    to_char(obs.result_time, 'YYYY-MM-DD'::text) AS "Resultaatdatum",
    NULL::integer AS "Resultaat_UTCoffset",
    obs.limit_symbol_id AS "Limietsymbool",
    obs.numeric_value AS "Numeriekewaarde",
    obs.description AS "Alfanumeriekewaarde",
    kwaliteitsoordeel_type.code AS "Kwaliteitsoordeel.code",
    kwaliteitsoordeel_type.description AS "Kwaliteitsoordeel.omschrijving",
    mar.code AS "Meetapparaat.code",
        CASE
            WHEN (mar.code IS NULL) THEN NULL::text
            ELSE 'www.aquo.nl'::text
        END AS "Meetapparaat.codespace",
    bio.levensstadium_code AS "Levensstadium.code",
    bio.lengte_code AS "Lengteklasse.code",
    bio.geslacht_code AS "Geslachtcode",
    bio.verschijning_code AS "Verschijningsvorm.code",
    bio.levensvorm_code AS "Levensvorm.code",
    bio.gedrag_code AS "Gedrag.code",
        CASE
            WHEN (obx.obs_id_target IS NULL) THEN NULL::text
            ELSE ((('NL'::text || (mno_nst.code)::text) || '_'::text) || (obx.obs_id_target)::text)
        END AS "GerelateerdObservatieobject",
    ocr.code AS "GerelateerdObservatieobjectRol.id",
    obs.remarks AS "Meetwaarde.Opmerking",
    indicator.additional_description AS "Indicator.EUOmschrijving",
    typi.code AS "Indicator.Code",
    typd.code AS "Descriptor.Code",
    descriptor.additional_description AS "Descriptor.EUOmschrijving"
   FROM (((((((((((((((((((domains.indicator_descriptor indicator
     JOIN public.observed_property_type opti ON ((indicator.opt_id = opti.opt_id)))
     JOIN public.typering_type typi ON ((opti.indicator_id = typi.typ_id)))
     JOIN domains.indicator_descriptor descriptor ON (((indicator.part_of_idd_id = descriptor.idd_id) AND (descriptor.part_of_idd_id IS NULL))))
     JOIN public.observed_property_type optd ON ((descriptor.opt_id = optd.opt_id)))
     JOIN public.typering_type typd ON ((optd.indicator_id = typd.typ_id)))
     JOIN monprog.quality_element_indicator_descriptor qeid ON ((qeid.idd_id = indicator.idd_id)))
     JOIN public.quality_element qem ON ((qem.qem_id = qeid.qem_id)))
     JOIN public.monitoring_object_quality_element moqe ON ((moqe.qem_id = qem.qem_id)))
     JOIN public.quality_element_observation qeo ON ((qeo.qem_id = qem.qem_id)))
     JOIN public.observation obs ON ((qeo.obs_id = obs.obs_id)))
     JOIN ((public.monitoring_object mno
     LEFT JOIN (public.monitored_compartiment
     JOIN public.compartiment_type ON ((monitored_compartiment.cptm_id = compartiment_type.cptm_id))) ON ((monitored_compartiment.mno_id = mno.mno_id)))
     JOIN public.namespace_type mno_nst ON ((mno_nst.ns_id = mno.inspire_id_namespace_id))) ON (((mno.mno_id = obs.mno_id) AND ((mno.monitoring_object_type)::text <> 'Sample'::text) AND (mno.mno_id = moqe.mno_id))))
     JOIN public.eenheid_type eenh ON ((eenh.eenh_id = obs.numeric_value_uom_id)))
     JOIN opt ON ((opt.opt_id = obs.observed_property_type)))
     LEFT JOIN public.kwaliteitsoordeel_type ON ((obs.quality_indicator_id = kwaliteitsoordeel_type.kwod_id)))
     LEFT JOIN ((public.observation_process obp
     JOIN public.waarde_bepalings_methode_type wbpm ON ((wbpm.wbpm_id = obp.wbpm_id)))
     LEFT JOIN (public.obs_process_meetapparaat opm
     JOIN domains.meetapparaat mar ON ((mar.mar_id = opm.mar_id))) ON ((opm.obp_id = obp.obp_id))) ON ((obp.obp_id = obs.result_nature_id)))
     LEFT JOIN bio ON ((bio.obs_id = obs.obs_id)))
     LEFT JOIN (public.observation_context obx
     JOIN public.obs_ctx_role_type ocr ON ((ocr.ocr_id = obx.role_id))) ON ((obx.obs_id_source = obs.obs_id)))
     LEFT JOIN public.waarde_bewerkings_methode_type wbm ON ((wbm.wbm_id = obs.value_processing_method_id)))
     LEFT JOIN ((public.observed_feature obf
     JOIN public.hydro_object hdo ON ((obf.hdo_id = hdo.hdo_id)))
     JOIN public.namespace_type ns_hdo ON ((hdo.inspire_id_namespace = ns_hdo.ns_id))) ON (((obs.obs_id = obf.obs_id) AND (mno.wkrv_id = hdo.wkrv_id))))
UNION ALL
 SELECT ((qem.osc_id)::text || (obs.obs_id)::text) AS unique_key,
    (qem.osc_id)::text AS "MonProgId",
    ((('NL'::text || (mpn_nst.code)::text) || '_'::text) || (mno_mpn.inspire_id_local_id)::text) AS "Meetpunt.Identificatie",
    public.st_x(public.st_transform(public.st_centroid(mno_mpn.geometry_etrs89), 4258)) AS "GeometriePunt.X",
    public.st_y(public.st_transform(public.st_centroid(mno_mpn.geometry_etrs89), 4258)) AS "GeometriePunt.Y",
        CASE
            WHEN (obf.obs_id IS NOT NULL) THEN ((('NL'::text || (ns_hdo.code)::text) || '_'::text) || (hdo.inspire_id_local_id)::text)
            ELSE NULL::text
        END AS "Geoobject.Identificatie",
    mno_smpl.inspire_id_local_id AS "Monster.Identificatie",
    mpn_nst.code AS "Monster.Namespace",
    mno_smpl.wkrv_id AS "Monster.Versie",
    cmp.code AS "Compartiment.Code",
    cmp.description AS "Compartiment.Omschrijving",
    orgaan.code AS "Orgaan.Code",
    orgaan.description AS "Orgaan.Omschrijving",
    taxon_type.omschrijving AS "Organisme.Naam",
    smpl.upper_depth_value AS "BeginDiepte_m",
    smpl.lower_depth_value AS "EindDiepte_m",
        CASE
            WHEN (hdh_ud.hdh_id IS NULL) THEN
            CASE
                WHEN (hdh_ld.hdh_id IS NULL) THEN (NULL::text)::character varying
                ELSE hdh_ld.code
            END
            ELSE hdh_ud.code
        END AS "ReferentieVlak.Code",
    mbm.code AS "Monsterbewerkingsmethode.Code",
    mbm.description AS "Monsterbewerkingsmethode.Omschrijving",
    mbm.codespace AS "Monsterbewerkingsmethode.codespace",
    bmm.code AS "Bemonsteringsmethode.Code",
    bmm.description AS "Bemonsteringsmethode.Omschrijving",
        CASE
            WHEN (bmm.code IS NULL) THEN NULL::text
            ELSE 'www.aquo.nl'::text
        END AS "Bemonsteringsmethode.codespace",
        CASE
            WHEN (frac.code IS NULL) THEN biota.code
            ELSE frac.code
        END AS "Monstercriterium.Code",
    var.code AS "veldapparaat.Code",
    var.description AS "veldapparaat.Omschrijving",
    var.codespace AS "veldapparaat.Codespace",
    to_char(smpl.sampling_time, 'YYYY-MM-DD'::text) AS "Monsternemingsdatum",
    to_char(smpl.sampling_time, 'HH24:MM:SS'::text) AS "Monsternemingstijd",
    NULL::integer AS "Monster.Tijd_UTCoffset",
    'EPSG4258'::text AS "ReferentieHorizontaal.code",
    smpl.remarks AS "Monster.Opmerking",
        CASE
            WHEN (mno_smpl.wkrv_id IS NULL) THEN NULL::text
            ELSE ((('NL'::text || (smpl_nst.code)::text) || '_'::text) || (mno_smpl.inspire_id_local_id)::text)
        END AS "GerelateerdMonsterobject",
        CASE
            WHEN (mno_smpl.wkrv_id IS NULL) THEN (NULL::text)::character varying
            ELSE rsfr.code
        END AS "GerelateerdMonsterRol.id",
    obs.obs_id AS "Meetwaarde.Identificatie",
    ('NL'::text || (mpn_nst.code)::text) AS "Meetwaarde.Namespace",
    mno_mpn.wkrv_id AS "Meetwaarde.Versie",
    opt.grh_code AS "Grootheid.code",
    opt.grh_omschrijving AS "Grootheid.omschrijving",
    opt.typ_code AS "Typering.code",
    opt.typ_omschrijving AS "Typering.omschrijving",
        CASE
            WHEN (opt.txg_omschrijving IS NOT NULL) THEN 'Biotaxon'::text
            WHEN (opt.chs_code IS NOT NULL) THEN 'ChemischeStof'::text
            WHEN (opt.obj_code IS NOT NULL) THEN 'Object'::text
            ELSE NULL::text
        END AS "Parameter.Groep",
        CASE
            WHEN (opt.txg_omschrijving IS NOT NULL) THEN (NULL::text)::character varying
            WHEN (opt.chs_code IS NOT NULL) THEN opt.chs_code
            WHEN (opt.obj_code IS NOT NULL) THEN opt.obj_code
            ELSE NULL::character varying
        END AS "Parameter.Code",
        CASE
            WHEN (opt.txg_omschrijving IS NOT NULL) THEN opt.txg_omschrijving
            WHEN (opt.chs_code IS NOT NULL) THEN opt.chs_naam
            WHEN (opt.obj_code IS NOT NULL) THEN opt.obj_omschrijving
            ELSE NULL::character varying
        END AS "Parameter.Omschrijving",
    eenh.code AS "Eenheid.code",
    eenh.omschrijving AS "Eenheid.omschrijving",
    opt.hdh_code AS "Hoedanigheid.code",
    opt.hdh_omschrijving AS "Hoedanigheid.omschrijving",
    wbm.code AS "Waardebewerkigngsmethode.code",
        CASE
            WHEN (wbm.code IS NULL) THEN NULL::text
            ELSE 'www.aquo.nl'::text
        END AS "Waardebewerkigngsmethode.codespace",
    wbpm.code AS "Waardebepalingsmethode.code",
        CASE
            WHEN (wbpm.code IS NULL) THEN NULL::text
            ELSE 'www.aquo.nl'::text
        END AS "Waardebepalingsmethode.codespace",
    to_char(obs.phenomenon_time_begin, 'YYYY-MM-DD'::text) AS "Begindatum",
    to_char(obs.phenomenon_time_begin, 'HH24:MM:SS'::text) AS "Begintijd",
    to_char(obs.phenomenon_time_end, 'YYYY-MM-DD'::text) AS "Einddatum",
    to_char(obs.phenomenon_time_end, 'HH24:MM:SS'::text) AS "Eindtijd",
    NULL::integer AS "Meetwaarde.Tijd_UTCoffset",
    to_char(obs.result_time, 'YYYY-MM-DD'::text) AS "Resultaatdatum",
    NULL::integer AS "Resultaat_UTCoffset",
    obs.limit_symbol_id AS "Limietsymbool",
    obs.numeric_value AS "Numeriekewaarde",
    obs.description AS "Alfanumeriekewaarde",
    kwaliteitsoordeel_type.code AS "Kwaliteitsoordeel.code",
    kwaliteitsoordeel_type.description AS "Kwaliteitsoordeel.omschrijving",
    mar.code AS "Meetapparaat.code",
        CASE
            WHEN (mar.code IS NULL) THEN NULL::text
            ELSE 'www.aquo.nl'::text
        END AS "Meetapparaat.codespace",
    bio.levensstadium_code AS "Levensstadium.code",
    bio.lengte_code AS "Lengteklasse.code",
    bio.geslacht_code AS "Geslachtcode",
    bio.verschijning_code AS "Verschijningsvorm.code",
    bio.levensvorm_code AS "Levensvorm.code",
    bio.gedrag_code AS "Gedrag.code",
        CASE
            WHEN (obx.obs_id_target IS NULL) THEN NULL::text
            ELSE ((('NL'::text || (mpn_nst.code)::text) || '_'::text) || (obx.obs_id_target)::text)
        END AS "GerelateerdObservatieobject",
    ocr.code AS "GerelateerdObservatieobjectRol.id",
    obs.remarks AS "Meetwaarde.Opmerking",
    indicator.additional_description AS "Indicator.EUOmschrijving",
    typi.code AS "Indicator.Code",
    typd.code AS "Descriptor.Code",
    descriptor.additional_description AS "Descriptor.EUOmschrijving"
   FROM (((((((((((((((((((((((((((((((((domains.indicator_descriptor indicator
     JOIN public.observed_property_type opti ON ((indicator.opt_id = opti.opt_id)))
     JOIN public.typering_type typi ON ((opti.indicator_id = typi.typ_id)))
     JOIN domains.indicator_descriptor descriptor ON (((indicator.part_of_idd_id = descriptor.idd_id) AND (descriptor.part_of_idd_id IS NULL))))
     JOIN public.observed_property_type optd ON ((descriptor.opt_id = optd.opt_id)))
     JOIN public.typering_type typd ON ((optd.indicator_id = typd.typ_id)))
     JOIN monprog.quality_element_indicator_descriptor qeid ON ((qeid.idd_id = indicator.idd_id)))
     JOIN public.quality_element qem ON ((qem.qem_id = qeid.qem_id)))
     JOIN public.quality_element_sample qes ON ((qem.qem_id = qes.qem_id)))
     JOIN public.sample smpl ON ((smpl.smpl_id = qes.smpl_id)))
     JOIN public.observation obs ON ((smpl.smpl_id = obs.mno_id)))
     JOIN public.compartiment_type cmp ON ((smpl.material_class_id = cmp.cptm_id)))
     LEFT JOIN public.hoedanigheid_type hdh_ud ON ((hdh_ud.hdh_id = smpl.upper_depth_condition_id)))
     LEFT JOIN public.hoedanigheid_type hdh_ld ON ((hdh_ld.hdh_id = smpl.lower_depth_condition_id)))
     LEFT JOIN public.taxon_type ON ((smpl.txn_id = taxon_type.txn_id)))
     LEFT JOIN domains.orgaan ON ((orgaan.org_id = smpl.organ_id)))
     LEFT JOIN public.hoedanigheid_type frac ON ((frac.hdh_id = smpl.fraction_criterium_id)))
     LEFT JOIN public.hoedanigheid_type biota ON ((biota.hdh_id = smpl.biota_criterium_id)))
     LEFT JOIN public.eenheid_type eenh_ud ON ((eenh_ud.eenh_id = smpl.upper_depth_uom_id)))
     LEFT JOIN public.eenheid_type eenh_ld ON ((eenh_ld.eenh_id = smpl.lower_depth_uom_id)))
     LEFT JOIN (((public.sampling_proces smp
     LEFT JOIN domains.monsterbewerkingsmethode mbm ON ((mbm.mbm_id = smp.sampling_method_id)))
     LEFT JOIN domains.bemonsteringsmethode bmm ON ((bmm.bmm_id = smp.sampling_processing_method_id)))
     LEFT JOIN domains.veldapparaat var ON ((var.var_id = smp.var_id))) ON ((smp.smp_id = smpl.smp_id)))
     LEFT JOIN public.related_sampling_feature rel_smpl ON ((smpl.smpl_id = rel_smpl.mnf_id_source)))
     LEFT JOIN public.sample smpl2 ON ((smpl.smpl_id = rel_smpl.mnf_id_target)))
     LEFT JOIN (public.monitoring_object mno_mpn
     JOIN public.namespace_type mpn_nst ON ((mpn_nst.ns_id = mno_mpn.inspire_id_namespace_id))) ON (((mno_mpn.mno_id = rel_smpl.mnf_id_target) AND ((mno_mpn.monitoring_object_type)::text <> 'Sample'::text))))
     LEFT JOIN (public.monitoring_object mno_smpl
     JOIN public.namespace_type smpl_nst ON ((smpl_nst.ns_id = mno_smpl.inspire_id_namespace_id))) ON (((smpl2.smpl_id = mno_smpl.mno_id) AND ((mno_smpl.monitoring_object_type)::text = 'Sample'::text))))
     LEFT JOIN public.rel_samp_feat_role_type rsfr ON ((rsfr.rsfr_id = rel_smpl.role_id)))
     JOIN public.eenheid_type eenh ON ((eenh.eenh_id = obs.numeric_value_uom_id)))
     JOIN opt ON ((opt.opt_id = obs.observed_property_type)))
     LEFT JOIN public.kwaliteitsoordeel_type ON ((obs.quality_indicator_id = kwaliteitsoordeel_type.kwod_id)))
     LEFT JOIN ((public.observation_process obp
     LEFT JOIN public.waarde_bepalings_methode_type wbpm ON ((wbpm.wbpm_id = obp.wbpm_id)))
     LEFT JOIN (public.obs_process_meetapparaat opm
     JOIN domains.meetapparaat mar ON ((mar.mar_id = opm.mar_id))) ON ((opm.obp_id = obp.obp_id))) ON ((obp.obp_id = obs.result_nature_id)))
     LEFT JOIN bio ON ((bio.obs_id = obs.obs_id)))
     LEFT JOIN (public.observation_context obx
     JOIN public.obs_ctx_role_type ocr ON ((ocr.ocr_id = obx.role_id))) ON ((obx.obs_id_source = obs.obs_id)))
     LEFT JOIN public.waarde_bewerkings_methode_type wbm ON ((wbm.wbm_id = obs.value_processing_method_id)))
     LEFT JOIN ((public.observed_feature obf
     JOIN public.hydro_object hdo ON ((obf.hdo_id = hdo.hdo_id)))
     JOIN public.namespace_type ns_hdo ON ((hdo.inspire_id_namespace = ns_hdo.ns_id))) ON ((obs.obs_id = obf.obs_id)));


--
-- Name: hj_vw_krm_metingen_1a; Type: VIEW; Schema: krm; Owner: -
--

CREATE VIEW hj_vw_krm_metingen_1a AS
 WITH bio AS (
         SELECT bio.obs_id,
            gedrag.code AS gedrag_code,
            geslacht.code AS geslacht_code,
            lengte.code AS lengte_code,
            levensstadium.code AS levensstadium_code,
            levensvorm.code AS levensvorm_code,
            verschijning.code AS verschijning_code
           FROM ((((((public.bio_observation bio
             LEFT JOIN public.hoedanigheid_type gedrag ON (((bio.gedrag_id = gedrag.hdh_id) AND (bio.gedrag_id IS NOT NULL))))
             LEFT JOIN public.hoedanigheid_type geslacht ON (((bio.geslacht_id = geslacht.hdh_id) AND (bio.geslacht_id IS NOT NULL))))
             LEFT JOIN public.hoedanigheid_type lengte ON (((bio.lengte_klasse_id = lengte.hdh_id) AND (bio.lengte_klasse_id IS NOT NULL))))
             LEFT JOIN public.hoedanigheid_type levensstadium ON (((bio.levensstadium_id = levensstadium.hdh_id) AND (bio.levensstadium_id IS NOT NULL))))
             LEFT JOIN public.hoedanigheid_type levensvorm ON (((bio.levensvorm_id = levensvorm.hdh_id) AND (bio.levensvorm_id IS NOT NULL))))
             LEFT JOIN public.hoedanigheid_type verschijning ON (((bio.verschijningsvorm_id = verschijning.hdh_id) AND (bio.verschijningsvorm_id IS NOT NULL))))
          WHERE ((bio.gedrag_id IS NOT NULL) AND (bio.geslacht_id IS NOT NULL) AND (bio.lengte_klasse_id IS NOT NULL) AND (bio.levensstadium_id IS NOT NULL) AND (bio.levensvorm_id IS NOT NULL) AND (bio.verschijningsvorm_id IS NOT NULL))
        ), opt AS (
         SELECT opt.opt_id,
            grh.code AS grh_code,
            grh.omschrijving AS grh_omschrijving,
            typ.code AS typ_code,
            typ.omschrijving AS typ_omschrijving,
            txt.omschrijving AS txg_omschrijving,
            chs.code AS chs_code,
            chs.naam AS chs_naam,
            obj.code AS obj_code,
            obj.omschrijving AS obj_omschrijving,
            hdh.code AS hdh_code,
            hdh.omschrijving AS hdh_omschrijving
           FROM ((((((public.observed_property_type opt
             LEFT JOIN public.grootheid_type grh ON (((grh.grh_id = opt.quantity_id) AND (opt.quantity_id IS NOT NULL))))
             LEFT JOIN public.typering_type typ ON (((typ.typ_id = opt.indicator_id) AND (opt.indicator_id IS NOT NULL))))
             LEFT JOIN public.hoedanigheid_type hdh ON (((hdh.hdh_id = opt.hoedanigheid_id) AND (opt.hoedanigheid_id IS NOT NULL))))
             LEFT JOIN ((public.taxa_group txg
             JOIN public.taxa_group_element tge ON ((tge.txg_id = txg.txg_id)))
             JOIN public.taxon_type txt ON ((txt.txn_id = tge.txn_id))) ON (((txg.txg_id = opt.taxa_group_id) AND ((txg.group_type)::text = 'I'::text))))
             LEFT JOIN ((public.substance_group ssg
             JOIN public.substance_group_element ssge ON ((ssge.ssge_id = ssg.ssg_id)))
             JOIN public.chemische_stof_type chs ON ((chs.chs_id = ssge.chs_id))) ON (((ssg.ssg_id = opt.substance_group_id) AND ((ssg.group_type)::text = 'I'::text))))
             LEFT JOIN ((public.object_group ojg
             JOIN public.object_group_element ojge ON ((ojg.ojg_id = ojge.ojg_id)))
             JOIN public.object_type obj ON ((obj.obj_id = ojge.obj_id))) ON (((ojg.ojg_id = opt.object_group_id) AND ((ojg.group_type)::text = 'I'::text))))
        )
 SELECT ((qem.qem_id)::text || (obs.obs_id)::text) AS unique_key,
    ((('NL'::text || (mno_nst.code)::text) || '_'::text) || (mno.inspire_id_local_id)::text) AS "Meetpunt.Identificatie",
        CASE
            WHEN (obf.obs_id IS NOT NULL) THEN (('NL'::text || (ns_hdo.code)::text) || (hdo.inspire_id_local_id)::text)
            ELSE
            CASE
                WHEN ((mno.monitoring_object_type)::text = 'Sample'::text) THEN NULL::text
                ELSE ((('NL'::text || (mno_nst.code)::text) || '_AQUO_COMPARTIMENT:'::text) || (compartiment_type.code)::text)
            END
        END AS "Geoobject.Identificatie",
    NULL::text AS "Monster.Identificatie",
    NULL::text AS "Monster.Namespace",
    NULL::integer AS "Monster.Versie",
    NULL::text AS "Compartiment.Code",
    NULL::text AS "Compartiment.Omschrijving",
    NULL::text AS "Orgaan.Code",
    NULL::text AS "Orgaan.Omschrijving",
    NULL::text AS "Organisme.Naam",
    NULL::numeric AS "BeginDiepte_m",
    NULL::numeric AS "EindDiepte_m",
    NULL::text AS "ReferentieVlak.Code",
    NULL::text AS "Monsterbewerkingsmethode.Code",
    NULL::text AS "Monsterbewerkingsmethode.Omschrijving",
    NULL::text AS "Monsterbewerkingsmethode.codespace",
    NULL::text AS "Bemonsteringsmethode.Code",
    NULL::text AS "Bemonsteringsmethode.Omschrijving",
    NULL::text AS "Bemonsteringsmethode.codespace",
    NULL::text AS "Monstercriterium.Code",
    NULL::text AS "veldapparaat.Code",
    NULL::text AS "veldapparaat.Omschrijving",
    NULL::text AS "veldapparaat.Codespace",
    NULL::text AS "Monsternemingsdatum",
    NULL::text AS "Monsternemingstijd",
    NULL::integer AS "Monster.Tijd_UTCoffset",
    NULL::text AS "ReferentieHorizontaal.code",
    NULL::text AS "Monster.Opmerking",
    NULL::text AS "GerelateerdMonsterobject",
    NULL::text AS "GerelateerdMonsterRol.id",
    obs.obs_id AS "Meetwaarde.Identificatie",
    ('NL'::text || (mno_nst.code)::text) AS "Meetwaarde.Namespace",
    mno.wkrv_id AS "Meetwaarde.Versie",
    opt.grh_code AS "Grootheid.code",
    opt.grh_omschrijving AS "Grootheid.omschrijving",
    opt.typ_code AS "Typering.code",
    opt.typ_omschrijving AS "Typering.omschrijving",
        CASE
            WHEN (opt.txg_omschrijving IS NOT NULL) THEN 'Biotaxon'::text
            WHEN (opt.chs_code IS NOT NULL) THEN 'ChemischeStof'::text
            WHEN (opt.obj_code IS NOT NULL) THEN 'Object'::text
            ELSE NULL::text
        END AS "Parameter.Groep",
        CASE
            WHEN (opt.txg_omschrijving IS NOT NULL) THEN (NULL::text)::character varying
            WHEN (opt.chs_code IS NOT NULL) THEN opt.chs_code
            WHEN (opt.obj_code IS NOT NULL) THEN opt.obj_code
            ELSE NULL::character varying
        END AS "Parameter.Code",
        CASE
            WHEN (opt.txg_omschrijving IS NOT NULL) THEN opt.txg_omschrijving
            WHEN (opt.chs_code IS NOT NULL) THEN opt.chs_naam
            WHEN (opt.obj_code IS NOT NULL) THEN opt.obj_omschrijving
            ELSE NULL::character varying
        END AS "Parameter.Omschrijving",
    eenh.code AS "Eenheid.code",
    eenh.omschrijving AS "Eenheid.omschrijving",
    opt.hdh_code AS "Hoedanigheid.code",
    opt.hdh_omschrijving AS "Hoedanigheid.omschrijving",
    wbm.code AS "Waardebewerkigngsmethode.code",
        CASE
            WHEN (wbm.code IS NULL) THEN NULL::text
            ELSE 'www.aquo.nl'::text
        END AS "Waardebewerkigngsmethode.codespace",
    wbpm.code AS "Waardebepalingsmethode.code",
        CASE
            WHEN (wbpm.code IS NULL) THEN NULL::text
            ELSE 'www.aquo.nl'::text
        END AS "Waardebepalingsmethode.codespace",
    to_char(obs.phenomenon_time_begin, 'YYYY-MM-DD'::text) AS "Begindatum",
    to_char(obs.phenomenon_time_begin, 'HH24:MM:SS'::text) AS "Begintijd",
    to_char(obs.phenomenon_time_end, 'YYYY-MM-DD'::text) AS "Einddatum",
    to_char(obs.phenomenon_time_end, 'HH24:MM:SS'::text) AS "Eindtijd",
    NULL::integer AS "Meetwaarde.Tijd_UTCoffset",
    to_char(obs.result_time, 'YYYY-MM-DD'::text) AS "Resultaatdatum",
    NULL::integer AS "Resultaat_UTCoffset",
    obs.limit_symbol_id AS "Limietsymbool",
    obs.numeric_value AS "Numeriekewaarde",
    obs.description AS "Alfanumeriekewaarde",
    kwaliteitsoordeel_type.code AS "Kwaliteitsoordeel.code",
    kwaliteitsoordeel_type.description AS "Kwaliteitsoordeel.omschrijving",
    mar.code AS "Meetapparaat.code",
        CASE
            WHEN (mar.code IS NULL) THEN NULL::text
            ELSE 'www.aquo.nl'::text
        END AS "Meetapparaat.codespace",
    bio.levensstadium_code AS "Levensstadium.code",
    bio.lengte_code AS "Lengteklasse.code",
    bio.geslacht_code AS "Geslachtcode",
    bio.verschijning_code AS "Verschijningsvorm.code",
    bio.levensvorm_code AS "Levensvorm.code",
    bio.gedrag_code AS "Gedrag.code",
        CASE
            WHEN (obx.obs_id_target IS NULL) THEN NULL::text
            ELSE ((('NL'::text || (mno_nst.code)::text) || '_'::text) || (obx.obs_id_target)::text)
        END AS "GerelateerdObservatieobject",
    ocr.code AS "GerelateerdObservatieobjectRol.id",
    obs.remarks AS "Meetwaarde.Opmerking",
    indicator.additional_description AS "Indicator.EUOmschrijving",
    typi.code AS "Indicator.Code",
    typd.code AS "Descriptor.Code",
    descriptor.additional_description AS "Descriptor.EUOmschrijving"
   FROM (((((((((((((((((((domains.indicator_descriptor indicator
     JOIN public.observed_property_type opti ON ((indicator.opt_id = opti.opt_id)))
     JOIN public.typering_type typi ON ((opti.indicator_id = typi.typ_id)))
     JOIN domains.indicator_descriptor descriptor ON (((indicator.part_of_idd_id = descriptor.idd_id) AND (descriptor.part_of_idd_id IS NULL))))
     JOIN public.observed_property_type optd ON ((descriptor.opt_id = optd.opt_id)))
     JOIN public.typering_type typd ON ((optd.indicator_id = typd.typ_id)))
     JOIN monprog.quality_element_indicator_descriptor qeid ON ((qeid.idd_id = indicator.idd_id)))
     JOIN public.quality_element qem ON ((qem.qem_id = qeid.qem_id)))
     JOIN public.monitoring_object_quality_element moqe ON ((moqe.qem_id = qem.qem_id)))
     JOIN public.quality_element_observation qeo ON ((qeo.qem_id = qem.qem_id)))
     JOIN public.observation obs ON ((qeo.obs_id = obs.obs_id)))
     JOIN ((public.monitoring_object mno
     LEFT JOIN (public.monitored_compartiment
     JOIN public.compartiment_type ON ((monitored_compartiment.cptm_id = compartiment_type.cptm_id))) ON ((monitored_compartiment.mno_id = mno.mno_id)))
     JOIN public.namespace_type mno_nst ON ((mno_nst.ns_id = mno.inspire_id_namespace_id))) ON (((mno.mno_id = obs.mno_id) AND ((mno.monitoring_object_type)::text <> 'Sample'::text) AND (mno.mno_id = moqe.mno_id))))
     JOIN public.eenheid_type eenh ON ((eenh.eenh_id = obs.numeric_value_uom_id)))
     JOIN opt ON ((opt.opt_id = obs.observed_property_type)))
     LEFT JOIN public.kwaliteitsoordeel_type ON ((obs.quality_indicator_id = kwaliteitsoordeel_type.kwod_id)))
     LEFT JOIN ((public.observation_process obp
     JOIN public.waarde_bepalings_methode_type wbpm ON ((wbpm.wbpm_id = obp.wbpm_id)))
     LEFT JOIN (public.obs_process_meetapparaat opm
     JOIN domains.meetapparaat mar ON ((mar.mar_id = opm.mar_id))) ON ((opm.obp_id = obp.obp_id))) ON ((obp.obp_id = obs.result_nature_id)))
     LEFT JOIN bio ON ((bio.obs_id = obs.obs_id)))
     LEFT JOIN (public.observation_context obx
     JOIN public.obs_ctx_role_type ocr ON ((ocr.ocr_id = obx.role_id))) ON ((obx.obs_id_source = obs.obs_id)))
     LEFT JOIN public.waarde_bewerkings_methode_type wbm ON ((wbm.wbm_id = obs.value_processing_method_id)))
     LEFT JOIN ((public.observed_feature obf
     JOIN public.hydro_object hdo ON ((obf.hdo_id = hdo.hdo_id)))
     JOIN public.namespace_type ns_hdo ON ((hdo.inspire_id_namespace = ns_hdo.ns_id))) ON (((obs.obs_id = obf.obs_id) AND (mno.wkrv_id = hdo.wkrv_id))))
UNION ALL
 SELECT ((qem.osc_id)::text || (obs.obs_id)::text) AS unique_key,
    ((('NL'::text || (mpn_nst.code)::text) || '_'::text) || (mno_mpn.inspire_id_local_id)::text) AS "Meetpunt.Identificatie",
        CASE
            WHEN (obf.obs_id IS NOT NULL) THEN ((('NL'::text || (ns_hdo.code)::text) || '_'::text) || (hdo.inspire_id_local_id)::text)
            ELSE NULL::text
        END AS "Geoobject.Identificatie",
    mno_smpl.inspire_id_local_id AS "Monster.Identificatie",
    mpn_nst.code AS "Monster.Namespace",
    mno_smpl.wkrv_id AS "Monster.Versie",
    cmp.code AS "Compartiment.Code",
    cmp.description AS "Compartiment.Omschrijving",
    orgaan.code AS "Orgaan.Code",
    orgaan.description AS "Orgaan.Omschrijving",
    taxon_type.omschrijving AS "Organisme.Naam",
    smpl.upper_depth_value AS "BeginDiepte_m",
    smpl.lower_depth_value AS "EindDiepte_m",
        CASE
            WHEN (hdh_ud.hdh_id IS NULL) THEN
            CASE
                WHEN (hdh_ld.hdh_id IS NULL) THEN (NULL::text)::character varying
                ELSE hdh_ld.code
            END
            ELSE hdh_ud.code
        END AS "ReferentieVlak.Code",
    mbm.code AS "Monsterbewerkingsmethode.Code",
    mbm.description AS "Monsterbewerkingsmethode.Omschrijving",
    mbm.codespace AS "Monsterbewerkingsmethode.codespace",
    bmm.code AS "Bemonsteringsmethode.Code",
    bmm.description AS "Bemonsteringsmethode.Omschrijving",
        CASE
            WHEN (bmm.code IS NULL) THEN NULL::text
            ELSE 'www.aquo.nl'::text
        END AS "Bemonsteringsmethode.codespace",
        CASE
            WHEN (frac.code IS NULL) THEN biota.code
            ELSE frac.code
        END AS "Monstercriterium.Code",
    var.code AS "veldapparaat.Code",
    var.description AS "veldapparaat.Omschrijving",
    var.codespace AS "veldapparaat.Codespace",
    to_char(smpl.sampling_time, 'YYYY-MM-DD'::text) AS "Monsternemingsdatum",
    to_char(smpl.sampling_time, 'HH24:MM:SS'::text) AS "Monsternemingstijd",
    NULL::integer AS "Monster.Tijd_UTCoffset",
    'EPSG4258'::text AS "ReferentieHorizontaal.code",
    smpl.remarks AS "Monster.Opmerking",
        CASE
            WHEN (mno_smpl.wkrv_id IS NULL) THEN NULL::text
            ELSE ((('NL'::text || (smpl_nst.code)::text) || '_'::text) || (mno_smpl.inspire_id_local_id)::text)
        END AS "GerelateerdMonsterobject",
        CASE
            WHEN (mno_smpl.wkrv_id IS NULL) THEN (NULL::text)::character varying
            ELSE rsfr.code
        END AS "GerelateerdMonsterRol.id",
    obs.obs_id AS "Meetwaarde.Identificatie",
    ('NL'::text || (mpn_nst.code)::text) AS "Meetwaarde.Namespace",
    mno_mpn.wkrv_id AS "Meetwaarde.Versie",
    opt.grh_code AS "Grootheid.code",
    opt.grh_omschrijving AS "Grootheid.omschrijving",
    opt.typ_code AS "Typering.code",
    opt.typ_omschrijving AS "Typering.omschrijving",
        CASE
            WHEN (opt.txg_omschrijving IS NOT NULL) THEN 'Biotaxon'::text
            WHEN (opt.chs_code IS NOT NULL) THEN 'ChemischeStof'::text
            WHEN (opt.obj_code IS NOT NULL) THEN 'Object'::text
            ELSE NULL::text
        END AS "Parameter.Groep",
        CASE
            WHEN (opt.txg_omschrijving IS NOT NULL) THEN (NULL::text)::character varying
            WHEN (opt.chs_code IS NOT NULL) THEN opt.chs_code
            WHEN (opt.obj_code IS NOT NULL) THEN opt.obj_code
            ELSE NULL::character varying
        END AS "Parameter.Code",
        CASE
            WHEN (opt.txg_omschrijving IS NOT NULL) THEN opt.txg_omschrijving
            WHEN (opt.chs_code IS NOT NULL) THEN opt.chs_naam
            WHEN (opt.obj_code IS NOT NULL) THEN opt.obj_omschrijving
            ELSE NULL::character varying
        END AS "Parameter.Omschrijving",
    eenh.code AS "Eenheid.code",
    eenh.omschrijving AS "Eenheid.omschrijving",
    opt.hdh_code AS "Hoedanigheid.code",
    opt.hdh_omschrijving AS "Hoedanigheid.omschrijving",
    wbm.code AS "Waardebewerkigngsmethode.code",
        CASE
            WHEN (wbm.code IS NULL) THEN NULL::text
            ELSE 'www.aquo.nl'::text
        END AS "Waardebewerkigngsmethode.codespace",
    wbpm.code AS "Waardebepalingsmethode.code",
        CASE
            WHEN (wbpm.code IS NULL) THEN NULL::text
            ELSE 'www.aquo.nl'::text
        END AS "Waardebepalingsmethode.codespace",
    to_char(obs.phenomenon_time_begin, 'YYYY-MM-DD'::text) AS "Begindatum",
    to_char(obs.phenomenon_time_begin, 'HH24:MM:SS'::text) AS "Begintijd",
    to_char(obs.phenomenon_time_end, 'YYYY-MM-DD'::text) AS "Einddatum",
    to_char(obs.phenomenon_time_end, 'HH24:MM:SS'::text) AS "Eindtijd",
    NULL::integer AS "Meetwaarde.Tijd_UTCoffset",
    to_char(obs.result_time, 'YYYY-MM-DD'::text) AS "Resultaatdatum",
    NULL::integer AS "Resultaat_UTCoffset",
    obs.limit_symbol_id AS "Limietsymbool",
    obs.numeric_value AS "Numeriekewaarde",
    obs.description AS "Alfanumeriekewaarde",
    kwaliteitsoordeel_type.code AS "Kwaliteitsoordeel.code",
    kwaliteitsoordeel_type.description AS "Kwaliteitsoordeel.omschrijving",
    mar.code AS "Meetapparaat.code",
        CASE
            WHEN (mar.code IS NULL) THEN NULL::text
            ELSE 'www.aquo.nl'::text
        END AS "Meetapparaat.codespace",
    bio.levensstadium_code AS "Levensstadium.code",
    bio.lengte_code AS "Lengteklasse.code",
    bio.geslacht_code AS "Geslachtcode",
    bio.verschijning_code AS "Verschijningsvorm.code",
    bio.levensvorm_code AS "Levensvorm.code",
    bio.gedrag_code AS "Gedrag.code",
        CASE
            WHEN (obx.obs_id_target IS NULL) THEN NULL::text
            ELSE ((('NL'::text || (mpn_nst.code)::text) || '_'::text) || (obx.obs_id_target)::text)
        END AS "GerelateerdObservatieobject",
    ocr.code AS "GerelateerdObservatieobjectRol.id",
    obs.remarks AS "Meetwaarde.Opmerking",
    indicator.additional_description AS "Indicator.EUOmschrijving",
    typi.code AS "Indicator.Code",
    typd.code AS "Descriptor.Code",
    descriptor.additional_description AS "Descriptor.EUOmschrijving"
   FROM (((((((((((((((((((((((((((((((((domains.indicator_descriptor indicator
     JOIN public.observed_property_type opti ON ((indicator.opt_id = opti.opt_id)))
     JOIN public.typering_type typi ON ((opti.indicator_id = typi.typ_id)))
     JOIN domains.indicator_descriptor descriptor ON (((indicator.part_of_idd_id = descriptor.idd_id) AND (descriptor.part_of_idd_id IS NULL))))
     JOIN public.observed_property_type optd ON ((descriptor.opt_id = optd.opt_id)))
     JOIN public.typering_type typd ON ((optd.indicator_id = typd.typ_id)))
     JOIN monprog.quality_element_indicator_descriptor qeid ON ((qeid.idd_id = indicator.idd_id)))
     JOIN public.quality_element qem ON ((qem.qem_id = qeid.qem_id)))
     JOIN public.quality_element_sample qes ON ((qem.qem_id = qes.qem_id)))
     JOIN public.sample smpl ON ((smpl.smpl_id = qes.smpl_id)))
     JOIN public.observation obs ON ((smpl.smpl_id = obs.mno_id)))
     JOIN public.compartiment_type cmp ON ((smpl.material_class_id = cmp.cptm_id)))
     LEFT JOIN public.hoedanigheid_type hdh_ud ON ((hdh_ud.hdh_id = smpl.upper_depth_condition_id)))
     LEFT JOIN public.hoedanigheid_type hdh_ld ON ((hdh_ld.hdh_id = smpl.lower_depth_condition_id)))
     LEFT JOIN public.taxon_type ON ((smpl.txn_id = taxon_type.txn_id)))
     LEFT JOIN domains.orgaan ON ((orgaan.org_id = smpl.organ_id)))
     LEFT JOIN public.hoedanigheid_type frac ON ((frac.hdh_id = smpl.fraction_criterium_id)))
     LEFT JOIN public.hoedanigheid_type biota ON ((biota.hdh_id = smpl.biota_criterium_id)))
     LEFT JOIN public.eenheid_type eenh_ud ON ((eenh_ud.eenh_id = smpl.upper_depth_uom_id)))
     LEFT JOIN public.eenheid_type eenh_ld ON ((eenh_ld.eenh_id = smpl.lower_depth_uom_id)))
     LEFT JOIN (((public.sampling_proces smp
     LEFT JOIN domains.monsterbewerkingsmethode mbm ON ((mbm.mbm_id = smp.sampling_method_id)))
     LEFT JOIN domains.bemonsteringsmethode bmm ON ((bmm.bmm_id = smp.sampling_processing_method_id)))
     LEFT JOIN domains.veldapparaat var ON ((var.var_id = smp.var_id))) ON ((smp.smp_id = smpl.smp_id)))
     LEFT JOIN public.related_sampling_feature rel_smpl ON ((smpl.smpl_id = rel_smpl.mnf_id_source)))
     LEFT JOIN public.sample smpl2 ON ((smpl.smpl_id = rel_smpl.mnf_id_target)))
     LEFT JOIN (public.monitoring_object mno_mpn
     JOIN public.namespace_type mpn_nst ON ((mpn_nst.ns_id = mno_mpn.inspire_id_namespace_id))) ON (((mno_mpn.mno_id = rel_smpl.mnf_id_target) AND ((mno_mpn.monitoring_object_type)::text <> 'Sample'::text))))
     LEFT JOIN (public.monitoring_object mno_smpl
     JOIN public.namespace_type smpl_nst ON ((smpl_nst.ns_id = mno_smpl.inspire_id_namespace_id))) ON (((smpl2.smpl_id = mno_smpl.mno_id) AND ((mno_smpl.monitoring_object_type)::text = 'Sample'::text))))
     LEFT JOIN public.rel_samp_feat_role_type rsfr ON ((rsfr.rsfr_id = rel_smpl.role_id)))
     JOIN public.eenheid_type eenh ON ((eenh.eenh_id = obs.numeric_value_uom_id)))
     JOIN opt ON ((opt.opt_id = obs.observed_property_type)))
     LEFT JOIN public.kwaliteitsoordeel_type ON ((obs.quality_indicator_id = kwaliteitsoordeel_type.kwod_id)))
     LEFT JOIN ((public.observation_process obp
     LEFT JOIN public.waarde_bepalings_methode_type wbpm ON ((wbpm.wbpm_id = obp.wbpm_id)))
     LEFT JOIN (public.obs_process_meetapparaat opm
     JOIN domains.meetapparaat mar ON ((mar.mar_id = opm.mar_id))) ON ((opm.obp_id = obp.obp_id))) ON ((obp.obp_id = obs.result_nature_id)))
     LEFT JOIN bio ON ((bio.obs_id = obs.obs_id)))
     LEFT JOIN (public.observation_context obx
     JOIN public.obs_ctx_role_type ocr ON ((ocr.ocr_id = obx.role_id))) ON ((obx.obs_id_source = obs.obs_id)))
     LEFT JOIN public.waarde_bewerkings_methode_type wbm ON ((wbm.wbm_id = obs.value_processing_method_id)))
     LEFT JOIN ((public.observed_feature obf
     JOIN public.hydro_object hdo ON ((obf.hdo_id = hdo.hdo_id)))
     JOIN public.namespace_type ns_hdo ON ((hdo.inspire_id_namespace = ns_hdo.ns_id))) ON ((obs.obs_id = obf.obs_id)));


SET search_path = public, pg_catalog;

--
-- Name: observing_capability_observation; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE observing_capability_observation (
    ocbs_id integer NOT NULL,
    obs_id integer NOT NULL,
    osc_id integer NOT NULL,
    is_approved boolean DEFAULT false NOT NULL,
    last_change_time timestamp without time zone NOT NULL
);


SET search_path = krm, pg_catalog;

--
-- Name: hj_vw_krm_metingen_2; Type: VIEW; Schema: krm; Owner: -
--

CREATE VIEW hj_vw_krm_metingen_2 AS
 WITH bio AS (
         SELECT bio.obs_id,
            gedrag.code AS gedrag_code,
            geslacht.code AS geslacht_code,
            lengte.code AS lengte_code,
            levensstadium.code AS levensstadium_code,
            levensvorm.code AS levensvorm_code,
            verschijning.code AS verschijning_code
           FROM ((((((public.bio_observation bio
             LEFT JOIN public.hoedanigheid_type gedrag ON (((bio.gedrag_id = gedrag.hdh_id) AND (bio.gedrag_id IS NOT NULL))))
             LEFT JOIN public.hoedanigheid_type geslacht ON (((bio.geslacht_id = geslacht.hdh_id) AND (bio.geslacht_id IS NOT NULL))))
             LEFT JOIN public.hoedanigheid_type lengte ON (((bio.lengte_klasse_id = lengte.hdh_id) AND (bio.lengte_klasse_id IS NOT NULL))))
             LEFT JOIN public.hoedanigheid_type levensstadium ON (((bio.levensstadium_id = levensstadium.hdh_id) AND (bio.levensstadium_id IS NOT NULL))))
             LEFT JOIN public.hoedanigheid_type levensvorm ON (((bio.levensvorm_id = levensvorm.hdh_id) AND (bio.levensvorm_id IS NOT NULL))))
             LEFT JOIN public.hoedanigheid_type verschijning ON (((bio.verschijningsvorm_id = verschijning.hdh_id) AND (bio.verschijningsvorm_id IS NOT NULL))))
          WHERE ((bio.gedrag_id IS NOT NULL) AND (bio.geslacht_id IS NOT NULL) AND (bio.lengte_klasse_id IS NOT NULL) AND (bio.levensstadium_id IS NOT NULL) AND (bio.levensvorm_id IS NOT NULL) AND (bio.verschijningsvorm_id IS NOT NULL))
        ), opt AS (
         SELECT opt.opt_id,
            grh.code AS grh_code,
            grh.omschrijving AS grh_omschrijving,
            typ.code AS typ_code,
            typ.omschrijving AS typ_omschrijving,
            txt.omschrijving AS txg_omschrijving,
            chs.code AS chs_code,
            chs.naam AS chs_naam,
            obj.code AS obj_code,
            obj.omschrijving AS obj_omschrijving,
            hdh.code AS hdh_code,
            hdh.omschrijving AS hdh_omschrijving
           FROM ((((((public.observed_property_type opt
             LEFT JOIN public.grootheid_type grh ON (((grh.grh_id = opt.quantity_id) AND (opt.quantity_id IS NOT NULL))))
             LEFT JOIN public.typering_type typ ON (((typ.typ_id = opt.indicator_id) AND (opt.indicator_id IS NOT NULL))))
             LEFT JOIN public.hoedanigheid_type hdh ON (((hdh.hdh_id = opt.hoedanigheid_id) AND (opt.hoedanigheid_id IS NOT NULL))))
             LEFT JOIN ((public.taxa_group txg
             JOIN public.taxa_group_element tge ON ((tge.txg_id = txg.txg_id)))
             JOIN public.taxon_type txt ON ((txt.txn_id = tge.txn_id))) ON (((txg.txg_id = opt.taxa_group_id) AND ((txg.group_type)::text = 'I'::text))))
             LEFT JOIN ((public.substance_group ssg
             JOIN public.substance_group_element ssge ON ((ssge.ssge_id = ssg.ssg_id)))
             JOIN public.chemische_stof_type chs ON ((chs.chs_id = ssge.chs_id))) ON (((ssg.ssg_id = opt.substance_group_id) AND ((ssg.group_type)::text = 'I'::text))))
             LEFT JOIN ((public.object_group ojg
             JOIN public.object_group_element ojge ON ((ojg.ojg_id = ojge.ojg_id)))
             JOIN public.object_type obj ON ((obj.obj_id = ojge.obj_id))) ON (((ojg.ojg_id = opt.object_group_id) AND ((ojg.group_type)::text = 'I'::text))))
        )
 SELECT ((osc.osc_id)::text || (obs.obs_id)::text) AS unique_key,
    ((('NL'::text || (mno_nst.code)::text) || '_'::text) || (mno.inspire_id_local_id)::text) AS "Meetpunt.Identificatie",
        CASE
            WHEN (obf.obs_id IS NOT NULL) THEN (('NL'::text || (ns_hdo.code)::text) || (hdo.inspire_id_local_id)::text)
            ELSE
            CASE
                WHEN ((mno.monitoring_object_type)::text = 'Sample'::text) THEN NULL::text
                ELSE ((('NL'::text || (mno_nst.code)::text) || '_AQUO_COMPARTIMENT:'::text) || (compartiment_type.code)::text)
            END
        END AS "Geoobject.Identificatie",
    NULL::text AS "Monster.Identificatie",
    NULL::text AS "Monster.Namespace",
    NULL::integer AS "Monster.Versie",
    NULL::text AS "Compartiment.Code",
    NULL::text AS "Compartiment.Omschrijving",
    NULL::text AS "Orgaan.Code",
    NULL::text AS "Orgaan.Omschrijving",
    NULL::text AS "Organisme.Naam",
    NULL::numeric AS "BeginDiepte_m",
    NULL::numeric AS "EindDiepte_m",
    NULL::text AS "ReferentieVlak.Code",
    NULL::text AS "Monsterbewerkingsmethode.Code",
    NULL::text AS "Monsterbewerkingsmethode.Omschrijving",
    NULL::text AS "Monsterbewerkingsmethode.codespace",
    NULL::text AS "Bemonsteringsmethode.Code",
    NULL::text AS "Bemonsteringsmethode.Omschrijving",
    NULL::text AS "Bemonsteringsmethode.codespace",
    NULL::text AS "Monstercriterium.Code",
    NULL::text AS "veldapparaat.Code",
    NULL::text AS "veldapparaat.Omschrijving",
    NULL::text AS "veldapparaat.Codespace",
    NULL::text AS "Monsternemingsdatum",
    NULL::text AS "Monsternemingstijd",
    NULL::integer AS "Monster.Tijd_UTCoffset",
    NULL::text AS "ReferentieHorizontaal.code",
    NULL::text AS "Monster.Opmerking",
    NULL::text AS "GerelateerdMonsterobject",
    NULL::text AS "GerelateerdMonsterRol.id",
    obs.obs_id AS "Meetwaarde.Identificatie",
    ('NL'::text || (mno_nst.code)::text) AS "Meetwaarde.Namespace",
    mno.wkrv_id AS "Meetwaarde.Versie",
    opt.grh_code AS "Grootheid.code",
    opt.grh_omschrijving AS "Grootheid.omschrijving",
    opt.typ_code AS "Typering.code",
    opt.typ_omschrijving AS "Typering.omschrijving",
        CASE
            WHEN (opt.txg_omschrijving IS NOT NULL) THEN 'Biotaxon'::text
            WHEN (opt.chs_code IS NOT NULL) THEN 'ChemischeStof'::text
            WHEN (opt.obj_code IS NOT NULL) THEN 'Object'::text
            ELSE NULL::text
        END AS "Parameter.Groep",
        CASE
            WHEN (opt.txg_omschrijving IS NOT NULL) THEN (NULL::text)::character varying
            WHEN (opt.chs_code IS NOT NULL) THEN opt.chs_code
            WHEN (opt.obj_code IS NOT NULL) THEN opt.obj_code
            ELSE NULL::character varying
        END AS "Parameter.Code",
        CASE
            WHEN (opt.txg_omschrijving IS NOT NULL) THEN opt.txg_omschrijving
            WHEN (opt.chs_code IS NOT NULL) THEN opt.chs_naam
            WHEN (opt.obj_code IS NOT NULL) THEN opt.obj_omschrijving
            ELSE NULL::character varying
        END AS "Parameter.Omschrijving",
    eenh.code AS "Eenheid.code",
    eenh.omschrijving AS "Eenheid.omschrijving",
    opt.hdh_code AS "Hoedanigheid.code",
    opt.hdh_omschrijving AS "Hoedanigheid.omschrijving",
    wbm.code AS "Waardebewerkigngsmethode.code",
        CASE
            WHEN (wbm.code IS NULL) THEN NULL::text
            ELSE 'www.aquo.nl'::text
        END AS "Waardebewerkigngsmethode.codespace",
    wbpm.code AS "Waardebepalingsmethode.code",
        CASE
            WHEN (wbpm.code IS NULL) THEN NULL::text
            ELSE 'www.aquo.nl'::text
        END AS "Waardebepalingsmethode.codespace",
    to_char(obs.phenomenon_time_begin, 'YYYY-MM-DD'::text) AS "Begindatum",
    to_char(obs.phenomenon_time_begin, 'HH24:MM:SS'::text) AS "Begintijd",
    to_char(obs.phenomenon_time_end, 'YYYY-MM-DD'::text) AS "Einddatum",
    to_char(obs.phenomenon_time_end, 'HH24:MM:SS'::text) AS "Eindtijd",
    NULL::integer AS "Meetwaarde.Tijd_UTCoffset",
    to_char(obs.result_time, 'YYYY-MM-DD'::text) AS "Resultaatdatum",
    NULL::integer AS "Resultaat_UTCoffset",
    obs.limit_symbol_id AS "Limietsymbool",
    obs.numeric_value AS "Numeriekewaarde",
    obs.description AS "Alfanumeriekewaarde",
    kwaliteitsoordeel_type.code AS "Kwaliteitsoordeel.code",
    kwaliteitsoordeel_type.description AS "Kwaliteitsoordeel.omschrijving",
    mar.code AS "Meetapparaat.code",
        CASE
            WHEN (mar.code IS NULL) THEN NULL::text
            ELSE 'www.aquo.nl'::text
        END AS "Meetapparaat.codespace",
    bio.levensstadium_code AS "Levensstadium.code",
    bio.lengte_code AS "Lengteklasse.code",
    bio.geslacht_code AS "Geslachtcode",
    bio.verschijning_code AS "Verschijningsvorm.code",
    bio.levensvorm_code AS "Levensvorm.code",
    bio.gedrag_code AS "Gedrag.code",
        CASE
            WHEN (obx.obs_id_target IS NULL) THEN NULL::text
            ELSE ((('NL'::text || (mno_nst.code)::text) || '_'::text) || (obx.obs_id_target)::text)
        END AS "GerelateerdObservatieobject",
    ocr.code AS "GerelateerdObservatieobjectRol.id",
    obs.remarks AS "Meetwaarde.Opmerking",
    indicator.additional_description AS "Indicator.EUOmschrijving",
    typi.code AS "Indicator.Code",
    typd.code AS "Descriptor.Code",
    descriptor.additional_description AS "Descriptor.EUOmschrijving"
   FROM ((((((((((((((((((((domains.indicator_descriptor indicator
     JOIN public.observed_property_type opti ON ((indicator.opt_id = opti.opt_id)))
     JOIN public.typering_type typi ON ((opti.indicator_id = typi.typ_id)))
     JOIN domains.indicator_descriptor descriptor ON (((indicator.part_of_idd_id = descriptor.idd_id) AND (descriptor.part_of_idd_id IS NULL))))
     JOIN public.observed_property_type optd ON ((descriptor.opt_id = optd.opt_id)))
     JOIN public.typering_type typd ON ((optd.indicator_id = typd.typ_id)))
     JOIN monprog.quality_element_indicator_descriptor qeid ON ((qeid.idd_id = indicator.idd_id)))
     JOIN public.quality_element qem ON ((qem.qem_id = qeid.qem_id)))
     JOIN public.monitoring_object_quality_element moqe ON ((moqe.qem_id = qem.qem_id)))
     JOIN public.observing_capability osc ON ((qem.osc_id = osc.osc_id)))
     JOIN public.observing_capability_observation oco ON ((oco.osc_id = osc.osc_id)))
     JOIN public.observation obs ON ((oco.obs_id = obs.obs_id)))
     JOIN ((public.monitoring_object mno
     LEFT JOIN (public.monitored_compartiment
     JOIN public.compartiment_type ON ((monitored_compartiment.cptm_id = compartiment_type.cptm_id))) ON ((monitored_compartiment.mno_id = mno.mno_id)))
     JOIN public.namespace_type mno_nst ON ((mno_nst.ns_id = mno.inspire_id_namespace_id))) ON (((mno.mno_id = obs.mno_id) AND ((mno.monitoring_object_type)::text <> 'Sample'::text) AND (moqe.mno_id = mno.mno_id))))
     JOIN public.eenheid_type eenh ON ((eenh.eenh_id = obs.numeric_value_uom_id)))
     JOIN opt ON ((opt.opt_id = obs.observed_property_type)))
     LEFT JOIN public.kwaliteitsoordeel_type ON ((obs.quality_indicator_id = kwaliteitsoordeel_type.kwod_id)))
     LEFT JOIN ((public.observation_process obp
     JOIN public.waarde_bepalings_methode_type wbpm ON ((wbpm.wbpm_id = obp.wbpm_id)))
     LEFT JOIN (public.obs_process_meetapparaat opm
     JOIN domains.meetapparaat mar ON ((mar.mar_id = opm.mar_id))) ON ((opm.obp_id = obp.obp_id))) ON ((obp.obp_id = obs.result_nature_id)))
     LEFT JOIN bio ON ((bio.obs_id = obs.obs_id)))
     LEFT JOIN (public.observation_context obx
     JOIN public.obs_ctx_role_type ocr ON ((ocr.ocr_id = obx.role_id))) ON ((obx.obs_id_source = obs.obs_id)))
     LEFT JOIN public.waarde_bewerkings_methode_type wbm ON ((wbm.wbm_id = obs.value_processing_method_id)))
     LEFT JOIN ((public.observed_feature obf
     JOIN public.hydro_object hdo ON ((obf.hdo_id = hdo.hdo_id)))
     JOIN public.namespace_type ns_hdo ON ((hdo.inspire_id_namespace = ns_hdo.ns_id))) ON (((obs.obs_id = obf.obs_id) AND (mno.wkrv_id = hdo.wkrv_id))))
UNION ALL
 SELECT ((qem.osc_id)::text || (obs.obs_id)::text) AS unique_key,
    ((('NL'::text || (mpn_nst.code)::text) || '_'::text) || (mno_mpn.inspire_id_local_id)::text) AS "Meetpunt.Identificatie",
        CASE
            WHEN (obf.obs_id IS NOT NULL) THEN ((('NL'::text || (ns_hdo.code)::text) || '_'::text) || (hdo.inspire_id_local_id)::text)
            ELSE NULL::text
        END AS "Geoobject.Identificatie",
    mno_smpl.inspire_id_local_id AS "Monster.Identificatie",
    mpn_nst.code AS "Monster.Namespace",
    mno_smpl.wkrv_id AS "Monster.Versie",
    cmp.code AS "Compartiment.Code",
    cmp.description AS "Compartiment.Omschrijving",
    orgaan.code AS "Orgaan.Code",
    orgaan.description AS "Orgaan.Omschrijving",
    taxon_type.omschrijving AS "Organisme.Naam",
    smpl.upper_depth_value AS "BeginDiepte_m",
    smpl.lower_depth_value AS "EindDiepte_m",
        CASE
            WHEN (hdh_ud.hdh_id IS NULL) THEN
            CASE
                WHEN (hdh_ld.hdh_id IS NULL) THEN (NULL::text)::character varying
                ELSE hdh_ld.code
            END
            ELSE hdh_ud.code
        END AS "ReferentieVlak.Code",
    mbm.code AS "Monsterbewerkingsmethode.Code",
    mbm.description AS "Monsterbewerkingsmethode.Omschrijving",
    mbm.codespace AS "Monsterbewerkingsmethode.codespace",
    bmm.code AS "Bemonsteringsmethode.Code",
    bmm.description AS "Bemonsteringsmethode.Omschrijving",
        CASE
            WHEN (bmm.code IS NULL) THEN NULL::text
            ELSE 'www.aquo.nl'::text
        END AS "Bemonsteringsmethode.codespace",
        CASE
            WHEN (frac.code IS NULL) THEN biota.code
            ELSE frac.code
        END AS "Monstercriterium.Code",
    var.code AS "veldapparaat.Code",
    var.description AS "veldapparaat.Omschrijving",
    var.codespace AS "veldapparaat.Codespace",
    to_char(smpl.sampling_time, 'YYYY-MM-DD'::text) AS "Monsternemingsdatum",
    to_char(smpl.sampling_time, 'HH24:MM:SS'::text) AS "Monsternemingstijd",
    NULL::integer AS "Monster.Tijd_UTCoffset",
    'EPSG4258'::text AS "ReferentieHorizontaal.code",
    smpl.remarks AS "Monster.Opmerking",
        CASE
            WHEN (mno_smpl.wkrv_id IS NULL) THEN NULL::text
            ELSE ((('NL'::text || (smpl_nst.code)::text) || '_'::text) || (mno_smpl.inspire_id_local_id)::text)
        END AS "GerelateerdMonsterobject",
        CASE
            WHEN (mno_smpl.wkrv_id IS NULL) THEN (NULL::text)::character varying
            ELSE rsfr.code
        END AS "GerelateerdMonsterRol.id",
    obs.obs_id AS "Meetwaarde.Identificatie",
    ('NL'::text || (mpn_nst.code)::text) AS "Meetwaarde.Namespace",
    mno_mpn.wkrv_id AS "Meetwaarde.Versie",
    opt.grh_code AS "Grootheid.code",
    opt.grh_omschrijving AS "Grootheid.omschrijving",
    opt.typ_code AS "Typering.code",
    opt.typ_omschrijving AS "Typering.omschrijving",
        CASE
            WHEN (opt.txg_omschrijving IS NOT NULL) THEN 'Biotaxon'::text
            WHEN (opt.chs_code IS NOT NULL) THEN 'ChemischeStof'::text
            WHEN (opt.obj_code IS NOT NULL) THEN 'Object'::text
            ELSE NULL::text
        END AS "Parameter.Groep",
        CASE
            WHEN (opt.txg_omschrijving IS NOT NULL) THEN (NULL::text)::character varying
            WHEN (opt.chs_code IS NOT NULL) THEN opt.chs_code
            WHEN (opt.obj_code IS NOT NULL) THEN opt.obj_code
            ELSE NULL::character varying
        END AS "Parameter.Code",
        CASE
            WHEN (opt.txg_omschrijving IS NOT NULL) THEN opt.txg_omschrijving
            WHEN (opt.chs_code IS NOT NULL) THEN opt.chs_naam
            WHEN (opt.obj_code IS NOT NULL) THEN opt.obj_omschrijving
            ELSE NULL::character varying
        END AS "Parameter.Omschrijving",
    eenh.code AS "Eenheid.code",
    eenh.omschrijving AS "Eenheid.omschrijving",
    opt.hdh_code AS "Hoedanigheid.code",
    opt.hdh_omschrijving AS "Hoedanigheid.omschrijving",
    wbm.code AS "Waardebewerkigngsmethode.code",
        CASE
            WHEN (wbm.code IS NULL) THEN NULL::text
            ELSE 'www.aquo.nl'::text
        END AS "Waardebewerkigngsmethode.codespace",
    wbpm.code AS "Waardebepalingsmethode.code",
        CASE
            WHEN (wbpm.code IS NULL) THEN NULL::text
            ELSE 'www.aquo.nl'::text
        END AS "Waardebepalingsmethode.codespace",
    to_char(obs.phenomenon_time_begin, 'YYYY-MM-DD'::text) AS "Begindatum",
    to_char(obs.phenomenon_time_begin, 'HH24:MM:SS'::text) AS "Begintijd",
    to_char(obs.phenomenon_time_end, 'YYYY-MM-DD'::text) AS "Einddatum",
    to_char(obs.phenomenon_time_end, 'HH24:MM:SS'::text) AS "Eindtijd",
    NULL::integer AS "Meetwaarde.Tijd_UTCoffset",
    to_char(obs.result_time, 'YYYY-MM-DD'::text) AS "Resultaatdatum",
    NULL::integer AS "Resultaat_UTCoffset",
    obs.limit_symbol_id AS "Limietsymbool",
    obs.numeric_value AS "Numeriekewaarde",
    obs.description AS "Alfanumeriekewaarde",
    kwaliteitsoordeel_type.code AS "Kwaliteitsoordeel.code",
    kwaliteitsoordeel_type.description AS "Kwaliteitsoordeel.omschrijving",
    mar.code AS "Meetapparaat.code",
        CASE
            WHEN (mar.code IS NULL) THEN NULL::text
            ELSE 'www.aquo.nl'::text
        END AS "Meetapparaat.codespace",
    bio.levensstadium_code AS "Levensstadium.code",
    bio.lengte_code AS "Lengteklasse.code",
    bio.geslacht_code AS "Geslachtcode",
    bio.verschijning_code AS "Verschijningsvorm.code",
    bio.levensvorm_code AS "Levensvorm.code",
    bio.gedrag_code AS "Gedrag.code",
        CASE
            WHEN (obx.obs_id_target IS NULL) THEN NULL::text
            ELSE ((('NL'::text || (mpn_nst.code)::text) || '_'::text) || (obx.obs_id_target)::text)
        END AS "GerelateerdObservatieobject",
    ocr.code AS "GerelateerdObservatieobjectRol.id",
    obs.remarks AS "Meetwaarde.Opmerking",
    indicator.additional_description AS "Indicator.EUOmschrijving",
    typi.code AS "Indicator.Code",
    typd.code AS "Descriptor.Code",
    descriptor.additional_description AS "Descriptor.EUOmschrijving"
   FROM (((((((((((((((((((((((((((((((((((domains.indicator_descriptor indicator
     JOIN public.observed_property_type opti ON ((indicator.opt_id = opti.opt_id)))
     JOIN public.typering_type typi ON ((opti.indicator_id = typi.typ_id)))
     JOIN domains.indicator_descriptor descriptor ON (((indicator.part_of_idd_id = descriptor.idd_id) AND (descriptor.part_of_idd_id IS NULL))))
     JOIN public.observed_property_type optd ON ((descriptor.opt_id = optd.opt_id)))
     JOIN public.typering_type typd ON ((optd.indicator_id = typd.typ_id)))
     JOIN monprog.quality_element_indicator_descriptor qeid ON ((qeid.idd_id = indicator.idd_id)))
     JOIN public.quality_element qem ON ((qem.qem_id = qeid.qem_id)))
     JOIN public.monitoring_object_quality_element moqe ON ((moqe.qem_id = qem.qem_id)))
     JOIN public.observing_capability osc ON ((osc.osc_id = qem.osc_id)))
     JOIN public.observing_capability_observation oco ON ((oco.osc_id = osc.osc_id)))
     JOIN public.observation obs ON ((oco.obs_id = obs.obs_id)))
     JOIN public.sample smpl ON ((smpl.smpl_id = obs.mno_id)))
     JOIN public.compartiment_type cmp ON ((smpl.material_class_id = cmp.cptm_id)))
     LEFT JOIN public.hoedanigheid_type hdh_ud ON ((hdh_ud.hdh_id = smpl.upper_depth_condition_id)))
     LEFT JOIN public.hoedanigheid_type hdh_ld ON ((hdh_ld.hdh_id = smpl.lower_depth_condition_id)))
     LEFT JOIN public.taxon_type ON ((smpl.txn_id = taxon_type.txn_id)))
     LEFT JOIN domains.orgaan ON ((orgaan.org_id = smpl.organ_id)))
     LEFT JOIN public.hoedanigheid_type frac ON ((frac.hdh_id = smpl.fraction_criterium_id)))
     LEFT JOIN public.hoedanigheid_type biota ON ((biota.hdh_id = smpl.biota_criterium_id)))
     LEFT JOIN public.eenheid_type eenh_ud ON ((eenh_ud.eenh_id = smpl.upper_depth_uom_id)))
     LEFT JOIN public.eenheid_type eenh_ld ON ((eenh_ld.eenh_id = smpl.lower_depth_uom_id)))
     LEFT JOIN (((public.sampling_proces smp
     LEFT JOIN domains.monsterbewerkingsmethode mbm ON ((mbm.mbm_id = smp.sampling_method_id)))
     LEFT JOIN domains.bemonsteringsmethode bmm ON ((bmm.bmm_id = smp.sampling_processing_method_id)))
     LEFT JOIN domains.veldapparaat var ON ((var.var_id = smp.var_id))) ON ((smp.smp_id = smpl.smp_id)))
     LEFT JOIN public.related_sampling_feature rel_smpl ON ((smpl.smpl_id = rel_smpl.mnf_id_source)))
     LEFT JOIN public.sample smpl2 ON ((smpl.smpl_id = rel_smpl.mnf_id_target)))
     LEFT JOIN (public.monitoring_object mno_mpn
     JOIN public.namespace_type mpn_nst ON ((mpn_nst.ns_id = mno_mpn.inspire_id_namespace_id))) ON (((mno_mpn.mno_id = rel_smpl.mnf_id_target) AND ((mno_mpn.monitoring_object_type)::text <> 'Sample'::text) AND (moqe.mno_id = mno_mpn.mno_id))))
     LEFT JOIN (public.monitoring_object mno_smpl
     JOIN public.namespace_type smpl_nst ON ((smpl_nst.ns_id = mno_smpl.inspire_id_namespace_id))) ON (((smpl2.smpl_id = mno_smpl.mno_id) AND ((mno_smpl.monitoring_object_type)::text = 'Sample'::text))))
     LEFT JOIN public.rel_samp_feat_role_type rsfr ON ((rsfr.rsfr_id = rel_smpl.role_id)))
     JOIN public.eenheid_type eenh ON ((eenh.eenh_id = obs.numeric_value_uom_id)))
     JOIN opt ON ((opt.opt_id = obs.observed_property_type)))
     LEFT JOIN public.kwaliteitsoordeel_type ON ((obs.quality_indicator_id = kwaliteitsoordeel_type.kwod_id)))
     LEFT JOIN ((public.observation_process obp
     LEFT JOIN public.waarde_bepalings_methode_type wbpm ON ((wbpm.wbpm_id = obp.wbpm_id)))
     LEFT JOIN (public.obs_process_meetapparaat opm
     JOIN domains.meetapparaat mar ON ((mar.mar_id = opm.mar_id))) ON ((opm.obp_id = obp.obp_id))) ON ((obp.obp_id = obs.result_nature_id)))
     LEFT JOIN bio ON ((bio.obs_id = obs.obs_id)))
     LEFT JOIN (public.observation_context obx
     JOIN public.obs_ctx_role_type ocr ON ((ocr.ocr_id = obx.role_id))) ON ((obx.obs_id_source = obs.obs_id)))
     LEFT JOIN public.waarde_bewerkings_methode_type wbm ON ((wbm.wbm_id = obs.value_processing_method_id)))
     LEFT JOIN ((public.observed_feature obf
     JOIN public.hydro_object hdo ON ((obf.hdo_id = hdo.hdo_id)))
     JOIN public.namespace_type ns_hdo ON ((hdo.inspire_id_namespace = ns_hdo.ns_id))) ON ((obs.obs_id = obf.obs_id)));


--
-- Name: hj_vw_krm_metingen_g; Type: VIEW; Schema: krm; Owner: -
--

CREATE VIEW hj_vw_krm_metingen_g AS
 WITH bio AS (
         SELECT bio.obs_id,
            gedrag.code AS gedrag_code,
            geslacht.code AS geslacht_code,
            lengte.code AS lengte_code,
            levensstadium.code AS levensstadium_code,
            levensvorm.code AS levensvorm_code,
            verschijning.code AS verschijning_code
           FROM ((((((public.bio_observation bio
             LEFT JOIN public.hoedanigheid_type gedrag ON (((bio.gedrag_id = gedrag.hdh_id) AND (bio.gedrag_id IS NOT NULL))))
             LEFT JOIN public.hoedanigheid_type geslacht ON (((bio.geslacht_id = geslacht.hdh_id) AND (bio.geslacht_id IS NOT NULL))))
             LEFT JOIN public.hoedanigheid_type lengte ON (((bio.lengte_klasse_id = lengte.hdh_id) AND (bio.lengte_klasse_id IS NOT NULL))))
             LEFT JOIN public.hoedanigheid_type levensstadium ON (((bio.levensstadium_id = levensstadium.hdh_id) AND (bio.levensstadium_id IS NOT NULL))))
             LEFT JOIN public.hoedanigheid_type levensvorm ON (((bio.levensvorm_id = levensvorm.hdh_id) AND (bio.levensvorm_id IS NOT NULL))))
             LEFT JOIN public.hoedanigheid_type verschijning ON (((bio.verschijningsvorm_id = verschijning.hdh_id) AND (bio.verschijningsvorm_id IS NOT NULL))))
          WHERE ((bio.gedrag_id IS NOT NULL) AND (bio.geslacht_id IS NOT NULL) AND (bio.lengte_klasse_id IS NOT NULL) AND (bio.levensstadium_id IS NOT NULL) AND (bio.levensvorm_id IS NOT NULL) AND (bio.verschijningsvorm_id IS NOT NULL))
        ), opt AS (
         SELECT opt.opt_id,
            grh.code AS grh_code,
            grh.omschrijving AS grh_omschrijving,
            typ.code AS typ_code,
            typ.omschrijving AS typ_omschrijving,
            txt.omschrijving AS txg_omschrijving,
            chs.code AS chs_code,
            chs.naam AS chs_naam,
            obj.code AS obj_code,
            obj.omschrijving AS obj_omschrijving,
            hdh.code AS hdh_code,
            hdh.omschrijving AS hdh_omschrijving
           FROM ((((((public.observed_property_type opt
             LEFT JOIN public.grootheid_type grh ON (((grh.grh_id = opt.quantity_id) AND (opt.quantity_id IS NOT NULL))))
             LEFT JOIN public.typering_type typ ON (((typ.typ_id = opt.indicator_id) AND (opt.indicator_id IS NOT NULL))))
             LEFT JOIN public.hoedanigheid_type hdh ON (((hdh.hdh_id = opt.hoedanigheid_id) AND (opt.hoedanigheid_id IS NOT NULL))))
             LEFT JOIN ((public.taxa_group txg
             JOIN public.taxa_group_element tge ON ((tge.txg_id = txg.txg_id)))
             JOIN public.taxon_type txt ON ((txt.txn_id = tge.txn_id))) ON (((txg.txg_id = opt.taxa_group_id) AND ((txg.group_type)::text = 'I'::text))))
             LEFT JOIN ((public.substance_group ssg
             JOIN public.substance_group_element ssge ON ((ssge.ssge_id = ssg.ssg_id)))
             JOIN public.chemische_stof_type chs ON ((chs.chs_id = ssge.chs_id))) ON (((ssg.ssg_id = opt.substance_group_id) AND ((ssg.group_type)::text = 'I'::text))))
             LEFT JOIN ((public.object_group ojg
             JOIN public.object_group_element ojge ON ((ojg.ojg_id = ojge.ojg_id)))
             JOIN public.object_type obj ON ((obj.obj_id = ojge.obj_id))) ON (((ojg.ojg_id = opt.object_group_id) AND ((ojg.group_type)::text = 'I'::text))))
        )
 SELECT ((qem.qem_id)::text || (obs.obs_id)::text) AS unique_key,
    ((('NL'::text || (mno_nst.code)::text) || '_'::text) || (mno.inspire_id_local_id)::text) AS "Meetpunt.Identificatie",
        CASE
            WHEN (obf.obs_id IS NOT NULL) THEN (('NL'::text || (ns_hdo.code)::text) || (hdo.inspire_id_local_id)::text)
            ELSE
            CASE
                WHEN ((mno.monitoring_object_type)::text = 'Sample'::text) THEN NULL::text
                ELSE ((('NL'::text || (mno_nst.code)::text) || '_AQUO_COMPARTIMENT:'::text) || (compartiment_type.code)::text)
            END
        END AS "Geoobject.Identificatie",
    NULL::text AS "Monster.Identificatie",
    NULL::text AS "Monster.Namespace",
    NULL::integer AS "Monster.Versie",
    NULL::text AS "Compartiment.Code",
    NULL::text AS "Compartiment.Omschrijving",
    NULL::text AS "Orgaan.Code",
    NULL::text AS "Orgaan.Omschrijving",
    NULL::text AS "Organisme.Naam",
    NULL::numeric AS "BeginDiepte_m",
    NULL::numeric AS "EindDiepte_m",
    NULL::text AS "ReferentieVlak.Code",
    NULL::text AS "Monsterbewerkingsmethode.Code",
    NULL::text AS "Monsterbewerkingsmethode.Omschrijving",
    NULL::text AS "Monsterbewerkingsmethode.codespace",
    NULL::text AS "Bemonsteringsmethode.Code",
    NULL::text AS "Bemonsteringsmethode.Omschrijving",
    NULL::text AS "Bemonsteringsmethode.codespace",
    NULL::text AS "Monstercriterium.Code",
    NULL::text AS "veldapparaat.Code",
    NULL::text AS "veldapparaat.Omschrijving",
    NULL::text AS "veldapparaat.Codespace",
    NULL::text AS "Monsternemingsdatum",
    NULL::text AS "Monsternemingstijd",
    NULL::integer AS "Monster.Tijd_UTCoffset",
    NULL::text AS "ReferentieHorizontaal.code",
    NULL::text AS "Monster.Opmerking",
    NULL::text AS "GerelateerdMonsterobject",
    NULL::text AS "GerelateerdMonsterRol.id",
    obs.obs_id AS "Meetwaarde.Identificatie",
    ('NL'::text || (mno_nst.code)::text) AS "Meetwaarde.Namespace",
    mno.wkrv_id AS "Meetwaarde.Versie",
    opt.grh_code AS "Grootheid.code",
    opt.grh_omschrijving AS "Grootheid.omschrijving",
    opt.typ_code AS "Typering.code",
    opt.typ_omschrijving AS "Typering.omschrijving",
        CASE
            WHEN (opt.txg_omschrijving IS NOT NULL) THEN 'Biotaxon'::text
            WHEN (opt.chs_code IS NOT NULL) THEN 'ChemischeStof'::text
            WHEN (opt.obj_code IS NOT NULL) THEN 'Object'::text
            ELSE NULL::text
        END AS "Parameter.Groep",
        CASE
            WHEN (opt.txg_omschrijving IS NOT NULL) THEN (NULL::text)::character varying
            WHEN (opt.chs_code IS NOT NULL) THEN opt.chs_code
            WHEN (opt.obj_code IS NOT NULL) THEN opt.obj_code
            ELSE NULL::character varying
        END AS "Parameter.Code",
        CASE
            WHEN (opt.txg_omschrijving IS NOT NULL) THEN opt.txg_omschrijving
            WHEN (opt.chs_code IS NOT NULL) THEN opt.chs_naam
            WHEN (opt.obj_code IS NOT NULL) THEN opt.obj_omschrijving
            ELSE NULL::character varying
        END AS "Parameter.Omschrijving",
    eenh.code AS "Eenheid.code",
    eenh.omschrijving AS "Eenheid.omschrijving",
    opt.hdh_code AS "Hoedanigheid.code",
    opt.hdh_omschrijving AS "Hoedanigheid.omschrijving",
    wbm.code AS "Waardebewerkigngsmethode.code",
        CASE
            WHEN (wbm.code IS NULL) THEN NULL::text
            ELSE 'www.aquo.nl'::text
        END AS "Waardebewerkigngsmethode.codespace",
    wbpm.code AS "Waardebepalingsmethode.code",
        CASE
            WHEN (wbpm.code IS NULL) THEN NULL::text
            ELSE 'www.aquo.nl'::text
        END AS "Waardebepalingsmethode.codespace",
    to_char(obs.phenomenon_time_begin, 'YYYY-MM-DD'::text) AS "Begindatum",
    to_char(obs.phenomenon_time_begin, 'HH24:MM:SS'::text) AS "Begintijd",
    to_char(obs.phenomenon_time_end, 'YYYY-MM-DD'::text) AS "Einddatum",
    to_char(obs.phenomenon_time_end, 'HH24:MM:SS'::text) AS "Eindtijd",
    NULL::integer AS "Meetwaarde.Tijd_UTCoffset",
    to_char(obs.result_time, 'YYYY-MM-DD'::text) AS "Resultaatdatum",
    NULL::integer AS "Resultaat_UTCoffset",
    obs.limit_symbol_id AS "Limietsymbool",
    obs.numeric_value AS "Numeriekewaarde",
    obs.description AS "Alfanumeriekewaarde",
    kwaliteitsoordeel_type.code AS "Kwaliteitsoordeel.code",
    kwaliteitsoordeel_type.description AS "Kwaliteitsoordeel.omschrijving",
    mar.code AS "Meetapparaat.code",
        CASE
            WHEN (mar.code IS NULL) THEN NULL::text
            ELSE 'www.aquo.nl'::text
        END AS "Meetapparaat.codespace",
    bio.levensstadium_code AS "Levensstadium.code",
    bio.lengte_code AS "Lengteklasse.code",
    bio.geslacht_code AS "Geslachtcode",
    bio.verschijning_code AS "Verschijningsvorm.code",
    bio.levensvorm_code AS "Levensvorm.code",
    bio.gedrag_code AS "Gedrag.code",
        CASE
            WHEN (obx.obs_id_target IS NULL) THEN NULL::text
            ELSE ((('NL'::text || (mno_nst.code)::text) || '_'::text) || (obx.obs_id_target)::text)
        END AS "GerelateerdObservatieobject",
    ocr.code AS "GerelateerdObservatieobjectRol.id",
    obs.remarks AS "Meetwaarde.Opmerking",
    indicator.additional_description AS "Indicator.EUOmschrijving",
    typi.code AS "Indicator.Code",
    typd.code AS "Descriptor.Code",
    descriptor.additional_description AS "Descriptor.EUOmschrijving"
   FROM (((((((((((((((((((domains.indicator_descriptor indicator
     JOIN public.observed_property_type opti ON ((indicator.opt_id = opti.opt_id)))
     JOIN public.typering_type typi ON ((opti.indicator_id = typi.typ_id)))
     JOIN domains.indicator_descriptor descriptor ON (((indicator.part_of_idd_id = descriptor.idd_id) AND (descriptor.part_of_idd_id IS NULL))))
     JOIN public.observed_property_type optd ON ((descriptor.opt_id = optd.opt_id)))
     JOIN public.typering_type typd ON ((optd.indicator_id = typd.typ_id)))
     JOIN monprog.quality_element_indicator_descriptor qeid ON ((qeid.idd_id = indicator.idd_id)))
     JOIN public.quality_element qem ON ((qem.qem_id = qeid.qem_id)))
     JOIN public.monitoring_object_quality_element moqe ON ((moqe.qem_id = qem.qem_id)))
     JOIN public.quality_element_observation qeo ON ((qeo.qem_id = qem.qem_id)))
     JOIN public.observation obs ON ((qeo.obs_id = obs.obs_id)))
     JOIN ((public.monitoring_object mno
     LEFT JOIN (public.monitored_compartiment
     JOIN public.compartiment_type ON ((monitored_compartiment.cptm_id = compartiment_type.cptm_id))) ON ((monitored_compartiment.mno_id = mno.mno_id)))
     JOIN public.namespace_type mno_nst ON ((mno_nst.ns_id = mno.inspire_id_namespace_id))) ON (((mno.mno_id = obs.mno_id) AND ((mno.monitoring_object_type)::text <> 'Sample'::text) AND (mno.mno_id = moqe.mno_id))))
     JOIN public.eenheid_type eenh ON ((eenh.eenh_id = obs.numeric_value_uom_id)))
     JOIN opt ON ((opt.opt_id = obs.observed_property_type)))
     LEFT JOIN public.kwaliteitsoordeel_type ON ((obs.quality_indicator_id = kwaliteitsoordeel_type.kwod_id)))
     LEFT JOIN ((public.observation_process obp
     JOIN public.waarde_bepalings_methode_type wbpm ON ((wbpm.wbpm_id = obp.wbpm_id)))
     LEFT JOIN (public.obs_process_meetapparaat opm
     JOIN domains.meetapparaat mar ON ((mar.mar_id = opm.mar_id))) ON ((opm.obp_id = obp.obp_id))) ON ((obp.obp_id = obs.result_nature_id)))
     LEFT JOIN bio ON ((bio.obs_id = obs.obs_id)))
     LEFT JOIN (public.observation_context obx
     JOIN public.obs_ctx_role_type ocr ON ((ocr.ocr_id = obx.role_id))) ON ((obx.obs_id_source = obs.obs_id)))
     LEFT JOIN public.waarde_bewerkings_methode_type wbm ON ((wbm.wbm_id = obs.value_processing_method_id)))
     LEFT JOIN ((public.observed_feature obf
     JOIN public.hydro_object hdo ON ((obf.hdo_id = hdo.hdo_id)))
     JOIN public.namespace_type ns_hdo ON ((hdo.inspire_id_namespace = ns_hdo.ns_id))) ON (((obs.obs_id = obf.obs_id) AND (mno.wkrv_id = hdo.wkrv_id))))
UNION ALL
 SELECT ((qem.osc_id)::text || (obs.obs_id)::text) AS unique_key,
    ((('NL'::text || (mpn_nst.code)::text) || '_'::text) || (mno_mpn.inspire_id_local_id)::text) AS "Meetpunt.Identificatie",
        CASE
            WHEN (obf.obs_id IS NOT NULL) THEN ((('NL'::text || (ns_hdo.code)::text) || '_'::text) || (hdo.inspire_id_local_id)::text)
            ELSE NULL::text
        END AS "Geoobject.Identificatie",
    mno_smpl.inspire_id_local_id AS "Monster.Identificatie",
    mpn_nst.code AS "Monster.Namespace",
    mno_smpl.wkrv_id AS "Monster.Versie",
    cmp.code AS "Compartiment.Code",
    cmp.description AS "Compartiment.Omschrijving",
    orgaan.code AS "Orgaan.Code",
    orgaan.description AS "Orgaan.Omschrijving",
    taxon_type.omschrijving AS "Organisme.Naam",
    smpl.upper_depth_value AS "BeginDiepte_m",
    smpl.lower_depth_value AS "EindDiepte_m",
        CASE
            WHEN (hdh_ud.hdh_id IS NULL) THEN
            CASE
                WHEN (hdh_ld.hdh_id IS NULL) THEN (NULL::text)::character varying
                ELSE hdh_ld.code
            END
            ELSE hdh_ud.code
        END AS "ReferentieVlak.Code",
    mbm.code AS "Monsterbewerkingsmethode.Code",
    mbm.description AS "Monsterbewerkingsmethode.Omschrijving",
    mbm.codespace AS "Monsterbewerkingsmethode.codespace",
    bmm.code AS "Bemonsteringsmethode.Code",
    bmm.description AS "Bemonsteringsmethode.Omschrijving",
        CASE
            WHEN (bmm.code IS NULL) THEN NULL::text
            ELSE 'www.aquo.nl'::text
        END AS "Bemonsteringsmethode.codespace",
        CASE
            WHEN (frac.code IS NULL) THEN biota.code
            ELSE frac.code
        END AS "Monstercriterium.Code",
    var.code AS "veldapparaat.Code",
    var.description AS "veldapparaat.Omschrijving",
    var.codespace AS "veldapparaat.Codespace",
    to_char(smpl.sampling_time, 'YYYY-MM-DD'::text) AS "Monsternemingsdatum",
    to_char(smpl.sampling_time, 'HH24:MM:SS'::text) AS "Monsternemingstijd",
    NULL::integer AS "Monster.Tijd_UTCoffset",
    'EPSG4258'::text AS "ReferentieHorizontaal.code",
    smpl.remarks AS "Monster.Opmerking",
        CASE
            WHEN (mno_smpl.wkrv_id IS NULL) THEN NULL::text
            ELSE ((('NL'::text || (smpl_nst.code)::text) || '_'::text) || (mno_smpl.inspire_id_local_id)::text)
        END AS "GerelateerdMonsterobject",
        CASE
            WHEN (mno_smpl.wkrv_id IS NULL) THEN (NULL::text)::character varying
            ELSE rsfr.code
        END AS "GerelateerdMonsterRol.id",
    obs.obs_id AS "Meetwaarde.Identificatie",
    ('NL'::text || (mpn_nst.code)::text) AS "Meetwaarde.Namespace",
    mno_mpn.wkrv_id AS "Meetwaarde.Versie",
    opt.grh_code AS "Grootheid.code",
    opt.grh_omschrijving AS "Grootheid.omschrijving",
    opt.typ_code AS "Typering.code",
    opt.typ_omschrijving AS "Typering.omschrijving",
        CASE
            WHEN (opt.txg_omschrijving IS NOT NULL) THEN 'Biotaxon'::text
            WHEN (opt.chs_code IS NOT NULL) THEN 'ChemischeStof'::text
            WHEN (opt.obj_code IS NOT NULL) THEN 'Object'::text
            ELSE NULL::text
        END AS "Parameter.Groep",
        CASE
            WHEN (opt.txg_omschrijving IS NOT NULL) THEN (NULL::text)::character varying
            WHEN (opt.chs_code IS NOT NULL) THEN opt.chs_code
            WHEN (opt.obj_code IS NOT NULL) THEN opt.obj_code
            ELSE NULL::character varying
        END AS "Parameter.Code",
        CASE
            WHEN (opt.txg_omschrijving IS NOT NULL) THEN opt.txg_omschrijving
            WHEN (opt.chs_code IS NOT NULL) THEN opt.chs_naam
            WHEN (opt.obj_code IS NOT NULL) THEN opt.obj_omschrijving
            ELSE NULL::character varying
        END AS "Parameter.Omschrijving",
    eenh.code AS "Eenheid.code",
    eenh.omschrijving AS "Eenheid.omschrijving",
    opt.hdh_code AS "Hoedanigheid.code",
    opt.hdh_omschrijving AS "Hoedanigheid.omschrijving",
    wbm.code AS "Waardebewerkigngsmethode.code",
        CASE
            WHEN (wbm.code IS NULL) THEN NULL::text
            ELSE 'www.aquo.nl'::text
        END AS "Waardebewerkigngsmethode.codespace",
    wbpm.code AS "Waardebepalingsmethode.code",
        CASE
            WHEN (wbpm.code IS NULL) THEN NULL::text
            ELSE 'www.aquo.nl'::text
        END AS "Waardebepalingsmethode.codespace",
    to_char(obs.phenomenon_time_begin, 'YYYY-MM-DD'::text) AS "Begindatum",
    to_char(obs.phenomenon_time_begin, 'HH24:MM:SS'::text) AS "Begintijd",
    to_char(obs.phenomenon_time_end, 'YYYY-MM-DD'::text) AS "Einddatum",
    to_char(obs.phenomenon_time_end, 'HH24:MM:SS'::text) AS "Eindtijd",
    NULL::integer AS "Meetwaarde.Tijd_UTCoffset",
    to_char(obs.result_time, 'YYYY-MM-DD'::text) AS "Resultaatdatum",
    NULL::integer AS "Resultaat_UTCoffset",
    obs.limit_symbol_id AS "Limietsymbool",
    obs.numeric_value AS "Numeriekewaarde",
    obs.description AS "Alfanumeriekewaarde",
    kwaliteitsoordeel_type.code AS "Kwaliteitsoordeel.code",
    kwaliteitsoordeel_type.description AS "Kwaliteitsoordeel.omschrijving",
    mar.code AS "Meetapparaat.code",
        CASE
            WHEN (mar.code IS NULL) THEN NULL::text
            ELSE 'www.aquo.nl'::text
        END AS "Meetapparaat.codespace",
    bio.levensstadium_code AS "Levensstadium.code",
    bio.lengte_code AS "Lengteklasse.code",
    bio.geslacht_code AS "Geslachtcode",
    bio.verschijning_code AS "Verschijningsvorm.code",
    bio.levensvorm_code AS "Levensvorm.code",
    bio.gedrag_code AS "Gedrag.code",
        CASE
            WHEN (obx.obs_id_target IS NULL) THEN NULL::text
            ELSE ((('NL'::text || (mpn_nst.code)::text) || '_'::text) || (obx.obs_id_target)::text)
        END AS "GerelateerdObservatieobject",
    ocr.code AS "GerelateerdObservatieobjectRol.id",
    obs.remarks AS "Meetwaarde.Opmerking",
    indicator.additional_description AS "Indicator.EUOmschrijving",
    typi.code AS "Indicator.Code",
    typd.code AS "Descriptor.Code",
    descriptor.additional_description AS "Descriptor.EUOmschrijving"
   FROM (((((((((((((((((((((((((((((((((domains.indicator_descriptor indicator
     JOIN public.observed_property_type opti ON ((indicator.opt_id = opti.opt_id)))
     JOIN public.typering_type typi ON ((opti.indicator_id = typi.typ_id)))
     JOIN domains.indicator_descriptor descriptor ON (((indicator.part_of_idd_id = descriptor.idd_id) AND (descriptor.part_of_idd_id IS NULL))))
     JOIN public.observed_property_type optd ON ((descriptor.opt_id = optd.opt_id)))
     JOIN public.typering_type typd ON ((optd.indicator_id = typd.typ_id)))
     JOIN monprog.quality_element_indicator_descriptor qeid ON ((qeid.idd_id = indicator.idd_id)))
     JOIN public.quality_element qem ON ((qem.qem_id = qeid.qem_id)))
     JOIN public.quality_element_sample qes ON ((qem.qem_id = qes.qem_id)))
     JOIN public.sample smpl ON ((smpl.smpl_id = qes.smpl_id)))
     JOIN public.observation obs ON ((smpl.smpl_id = obs.mno_id)))
     JOIN public.compartiment_type cmp ON ((smpl.material_class_id = cmp.cptm_id)))
     LEFT JOIN public.hoedanigheid_type hdh_ud ON ((hdh_ud.hdh_id = smpl.upper_depth_condition_id)))
     LEFT JOIN public.hoedanigheid_type hdh_ld ON ((hdh_ld.hdh_id = smpl.lower_depth_condition_id)))
     LEFT JOIN public.taxon_type ON ((smpl.txn_id = taxon_type.txn_id)))
     LEFT JOIN domains.orgaan ON ((orgaan.org_id = smpl.organ_id)))
     LEFT JOIN public.hoedanigheid_type frac ON ((frac.hdh_id = smpl.fraction_criterium_id)))
     LEFT JOIN public.hoedanigheid_type biota ON ((biota.hdh_id = smpl.biota_criterium_id)))
     LEFT JOIN public.eenheid_type eenh_ud ON ((eenh_ud.eenh_id = smpl.upper_depth_uom_id)))
     LEFT JOIN public.eenheid_type eenh_ld ON ((eenh_ld.eenh_id = smpl.lower_depth_uom_id)))
     LEFT JOIN (((public.sampling_proces smp
     LEFT JOIN domains.monsterbewerkingsmethode mbm ON ((mbm.mbm_id = smp.sampling_method_id)))
     LEFT JOIN domains.bemonsteringsmethode bmm ON ((bmm.bmm_id = smp.sampling_processing_method_id)))
     LEFT JOIN domains.veldapparaat var ON ((var.var_id = smp.var_id))) ON ((smp.smp_id = smpl.smp_id)))
     LEFT JOIN public.related_sampling_feature rel_smpl ON ((smpl.smpl_id = rel_smpl.mnf_id_source)))
     LEFT JOIN public.sample smpl2 ON ((smpl.smpl_id = rel_smpl.mnf_id_target)))
     LEFT JOIN (public.monitoring_object mno_mpn
     JOIN public.namespace_type mpn_nst ON ((mpn_nst.ns_id = mno_mpn.inspire_id_namespace_id))) ON (((mno_mpn.mno_id = rel_smpl.mnf_id_target) AND ((mno_mpn.monitoring_object_type)::text <> 'Sample'::text))))
     LEFT JOIN (public.monitoring_object mno_smpl
     JOIN public.namespace_type smpl_nst ON ((smpl_nst.ns_id = mno_smpl.inspire_id_namespace_id))) ON (((smpl2.smpl_id = mno_smpl.mno_id) AND ((mno_smpl.monitoring_object_type)::text = 'Sample'::text))))
     LEFT JOIN public.rel_samp_feat_role_type rsfr ON ((rsfr.rsfr_id = rel_smpl.role_id)))
     JOIN public.eenheid_type eenh ON ((eenh.eenh_id = obs.numeric_value_uom_id)))
     JOIN opt ON ((opt.opt_id = obs.observed_property_type)))
     LEFT JOIN public.kwaliteitsoordeel_type ON ((obs.quality_indicator_id = kwaliteitsoordeel_type.kwod_id)))
     LEFT JOIN ((public.observation_process obp
     LEFT JOIN public.waarde_bepalings_methode_type wbpm ON ((wbpm.wbpm_id = obp.wbpm_id)))
     LEFT JOIN (public.obs_process_meetapparaat opm
     JOIN domains.meetapparaat mar ON ((mar.mar_id = opm.mar_id))) ON ((opm.obp_id = obp.obp_id))) ON ((obp.obp_id = obs.result_nature_id)))
     LEFT JOIN bio ON ((bio.obs_id = obs.obs_id)))
     LEFT JOIN (public.observation_context obx
     JOIN public.obs_ctx_role_type ocr ON ((ocr.ocr_id = obx.role_id))) ON ((obx.obs_id_source = obs.obs_id)))
     LEFT JOIN public.waarde_bewerkings_methode_type wbm ON ((wbm.wbm_id = obs.value_processing_method_id)))
     LEFT JOIN ((public.observed_feature obf
     JOIN public.hydro_object hdo ON ((obf.hdo_id = hdo.hdo_id)))
     JOIN public.namespace_type ns_hdo ON ((hdo.inspire_id_namespace = ns_hdo.ns_id))) ON ((obs.obs_id = obf.obs_id)));


--
-- Name: sf_vw_krm_metingen_g; Type: VIEW; Schema: krm; Owner: -
--

CREATE VIEW sf_vw_krm_metingen_g AS
 WITH bio AS (
         SELECT bio.obs_id,
            gedrag.code AS gedrag_code,
            geslacht.code AS geslacht_code,
            lengte.code AS lengte_code,
            levensstadium.code AS levensstadium_code,
            levensvorm.code AS levensvorm_code,
            verschijning.code AS verschijning_code
           FROM ((((((public.bio_observation bio
             LEFT JOIN public.hoedanigheid_type gedrag ON (((bio.gedrag_id = gedrag.hdh_id) AND (bio.gedrag_id IS NOT NULL))))
             LEFT JOIN public.hoedanigheid_type geslacht ON (((bio.geslacht_id = geslacht.hdh_id) AND (bio.geslacht_id IS NOT NULL))))
             LEFT JOIN public.hoedanigheid_type lengte ON (((bio.lengte_klasse_id = lengte.hdh_id) AND (bio.lengte_klasse_id IS NOT NULL))))
             LEFT JOIN public.hoedanigheid_type levensstadium ON (((bio.levensstadium_id = levensstadium.hdh_id) AND (bio.levensstadium_id IS NOT NULL))))
             LEFT JOIN public.hoedanigheid_type levensvorm ON (((bio.levensvorm_id = levensvorm.hdh_id) AND (bio.levensvorm_id IS NOT NULL))))
             LEFT JOIN public.hoedanigheid_type verschijning ON (((bio.verschijningsvorm_id = verschijning.hdh_id) AND (bio.verschijningsvorm_id IS NOT NULL))))
          WHERE ((bio.gedrag_id IS NOT NULL) AND (bio.geslacht_id IS NOT NULL) AND (bio.lengte_klasse_id IS NOT NULL) AND (bio.levensstadium_id IS NOT NULL) AND (bio.levensvorm_id IS NOT NULL) AND (bio.verschijningsvorm_id IS NOT NULL))
        ), opt AS (
         SELECT opt.opt_id,
            grh.code AS grh_code,
            grh.omschrijving AS grh_omschrijving,
            typ.code AS typ_code,
            typ.omschrijving AS typ_omschrijving,
            txt.omschrijving AS txg_omschrijving,
            chs.code AS chs_code,
            chs.naam AS chs_naam,
            obj.code AS obj_code,
            obj.omschrijving AS obj_omschrijving,
            hdh.code AS hdh_code,
            hdh.omschrijving AS hdh_omschrijving
           FROM ((((((public.observed_property_type opt
             LEFT JOIN public.grootheid_type grh ON (((grh.grh_id = opt.quantity_id) AND (opt.quantity_id IS NOT NULL))))
             LEFT JOIN public.typering_type typ ON (((typ.typ_id = opt.indicator_id) AND (opt.indicator_id IS NOT NULL))))
             LEFT JOIN public.hoedanigheid_type hdh ON (((hdh.hdh_id = opt.hoedanigheid_id) AND (opt.hoedanigheid_id IS NOT NULL))))
             LEFT JOIN ((public.taxa_group txg
             JOIN public.taxa_group_element tge ON ((tge.txg_id = txg.txg_id)))
             JOIN public.taxon_type txt ON ((txt.txn_id = tge.txn_id))) ON (((txg.txg_id = opt.taxa_group_id) AND ((txg.group_type)::text = 'I'::text))))
             LEFT JOIN ((public.substance_group ssg
             JOIN public.substance_group_element ssge ON ((ssge.ssge_id = ssg.ssg_id)))
             JOIN public.chemische_stof_type chs ON ((chs.chs_id = ssge.chs_id))) ON (((ssg.ssg_id = opt.substance_group_id) AND ((ssg.group_type)::text = 'I'::text))))
             LEFT JOIN ((public.object_group ojg
             JOIN public.object_group_element ojge ON ((ojg.ojg_id = ojge.ojg_id)))
             JOIN public.object_type obj ON ((obj.obj_id = ojge.obj_id))) ON (((ojg.ojg_id = opt.object_group_id) AND ((ojg.group_type)::text = 'I'::text))))
        )
 SELECT mno.mno_id,
    qeid.qem_id,
    qeid.idd_id,
    ((qeo.qeo_id)::text || (obs.obs_id)::text) AS unique_key,
    ((('NL'::text || (mno_nst.code)::text) || '_'::text) || (mno.inspire_id_local_id)::text) AS "Meetpunt.Identificatie",
    public.st_x(public.st_transform(public.st_centroid(mno.geometry_etrs89), 4258)) AS "GeometriePunt.X",
    public.st_y(public.st_transform(public.st_centroid(mno.geometry_etrs89), 4258)) AS "GeometriePunt.Y",
        CASE
            WHEN (obf.obs_id IS NOT NULL) THEN (('NL'::text || (ns_hdo.code)::text) || (hdo.inspire_id_local_id)::text)
            ELSE
            CASE
                WHEN ((mno.monitoring_object_type)::text = 'Sample'::text) THEN NULL::text
                ELSE ((('NL'::text || (mno_nst.code)::text) || '_AQUO_COMPARTIMENT:'::text) || (compartiment_type.code)::text)
            END
        END AS "Geoobject.Identificatie",
    NULL::text AS "Monster.Identificatie",
    NULL::text AS "Monster.Namespace",
    NULL::integer AS "Monster.Versie",
    NULL::text AS "Compartiment.Code",
    NULL::text AS "Compartiment.Omschrijving",
    NULL::text AS "Orgaan.Code",
    NULL::text AS "Orgaan.Omschrijving",
    NULL::text AS "Organisme.Naam",
    NULL::numeric AS "BeginDiepte_m",
    NULL::numeric AS "EindDiepte_m",
    NULL::text AS "ReferentieVlak.Code",
    NULL::text AS "Monsterbewerkingsmethode.Code",
    NULL::text AS "Monsterbewerkingsmethode.Omschrijving",
    NULL::text AS "Monsterbewerkingsmethode.codespace",
    NULL::text AS "Bemonsteringsmethode.Code",
    NULL::text AS "Bemonsteringsmethode.Omschrijving",
    NULL::text AS "Bemonsteringsmethode.codespace",
    NULL::text AS "Monstercriterium.Code",
    NULL::text AS "veldapparaat.Code",
    NULL::text AS "veldapparaat.Omschrijving",
    NULL::text AS "veldapparaat.Codespace",
    NULL::text AS "Monsternemingsdatum",
    NULL::text AS "Monsternemingstijd",
    NULL::integer AS "Monster.Tijd_UTCoffset",
    NULL::text AS "ReferentieHorizontaal.code",
    NULL::text AS "Monster.Opmerking",
    NULL::text AS "GerelateerdMonsterobject",
    NULL::text AS "GerelateerdMonsterRol.id",
    obs.obs_id AS "Meetwaarde.Identificatie",
    ('NL'::text || (mno_nst.code)::text) AS "Meetwaarde.Namespace",
    mno.wkrv_id AS "Meetwaarde.Versie",
    opt.grh_code AS "Grootheid.code",
    opt.grh_omschrijving AS "Grootheid.omschrijving",
    opt.typ_code AS "Typering.code",
    opt.typ_omschrijving AS "Typering.omschrijving",
        CASE
            WHEN (opt.txg_omschrijving IS NOT NULL) THEN 'Biotaxon'::text
            WHEN (opt.chs_code IS NOT NULL) THEN 'ChemischeStof'::text
            WHEN (opt.obj_code IS NOT NULL) THEN 'Object'::text
            ELSE NULL::text
        END AS "Parameter.Groep",
        CASE
            WHEN (opt.txg_omschrijving IS NOT NULL) THEN (NULL::text)::character varying
            WHEN (opt.chs_code IS NOT NULL) THEN opt.chs_code
            WHEN (opt.obj_code IS NOT NULL) THEN opt.obj_code
            ELSE NULL::character varying
        END AS "Parameter.Code",
        CASE
            WHEN (opt.txg_omschrijving IS NOT NULL) THEN opt.txg_omschrijving
            WHEN (opt.chs_code IS NOT NULL) THEN opt.chs_naam
            WHEN (opt.obj_code IS NOT NULL) THEN opt.obj_omschrijving
            ELSE NULL::character varying
        END AS "Parameter.Omschrijving",
    eenh.code AS "Eenheid.code",
    eenh.omschrijving AS "Eenheid.omschrijving",
    opt.hdh_code AS "Hoedanigheid.code",
    opt.hdh_omschrijving AS "Hoedanigheid.omschrijving",
    wbm.code AS "Waardebewerkigngsmethode.code",
        CASE
            WHEN (wbm.code IS NULL) THEN NULL::text
            ELSE 'www.aquo.nl'::text
        END AS "Waardebewerkigngsmethode.codespace",
    wbpm.code AS "Waardebepalingsmethode.code",
        CASE
            WHEN (wbpm.code IS NULL) THEN NULL::text
            ELSE 'www.aquo.nl'::text
        END AS "Waardebepalingsmethode.codespace",
    to_char(obs.phenomenon_time_begin, 'YYYY-MM-DD'::text) AS "Begindatum",
    to_char(obs.phenomenon_time_begin, 'HH24:MM:SS'::text) AS "Begintijd",
    to_char(obs.phenomenon_time_end, 'YYYY-MM-DD'::text) AS "Einddatum",
    to_char(obs.phenomenon_time_end, 'HH24:MM:SS'::text) AS "Eindtijd",
    NULL::integer AS "Meetwaarde.Tijd_UTCoffset",
    to_char(obs.result_time, 'YYYY-MM-DD'::text) AS "Resultaatdatum",
    NULL::integer AS "Resultaat_UTCoffset",
    obs.limit_symbol_id AS "Limietsymbool",
    obs.numeric_value AS "Numeriekewaarde",
    obs.description AS "Alfanumeriekewaarde",
    kwaliteitsoordeel_type.code AS "Kwaliteitsoordeel.code",
    kwaliteitsoordeel_type.description AS "Kwaliteitsoordeel.omschrijving",
    mar.code AS "Meetapparaat.code",
        CASE
            WHEN (mar.code IS NULL) THEN NULL::text
            ELSE 'www.aquo.nl'::text
        END AS "Meetapparaat.codespace",
    bio.levensstadium_code AS "Levensstadium.code",
    bio.lengte_code AS "Lengteklasse.code",
    bio.geslacht_code AS "Geslachtcode",
    bio.verschijning_code AS "Verschijningsvorm.code",
    bio.levensvorm_code AS "Levensvorm.code",
    bio.gedrag_code AS "Gedrag.code",
        CASE
            WHEN (obx.obs_id_target IS NULL) THEN NULL::text
            ELSE ((('NL'::text || (mno_nst.code)::text) || '_'::text) || (obx.obs_id_target)::text)
        END AS "GerelateerdObservatieobject",
    ocr.code AS "GerelateerdObservatieobjectRol.id",
    obs.remarks AS "Meetwaarde.Opmerking",
    indicator.additional_description AS "Indicator.EUOmschrijving",
    typi.code AS "Indicator.Code",
    typd.code AS "Descriptor.Code",
    descriptor.additional_description AS "Descriptor.EUOmschrijving"
   FROM ((((((((((((((((((domains.indicator_descriptor indicator
     JOIN public.observed_property_type opti ON ((indicator.opt_id = opti.opt_id)))
     JOIN public.typering_type typi ON ((opti.indicator_id = typi.typ_id)))
     JOIN domains.indicator_descriptor descriptor ON (((indicator.part_of_idd_id = descriptor.idd_id) AND (descriptor.part_of_idd_id IS NULL))))
     JOIN public.observed_property_type optd ON ((descriptor.opt_id = optd.opt_id)))
     JOIN public.typering_type typd ON ((optd.indicator_id = typd.typ_id)))
     JOIN monprog.quality_element_indicator_descriptor qeid ON ((qeid.idd_id = indicator.idd_id)))
     JOIN public.quality_element qem ON ((qem.qem_id = qeid.qem_id)))
     JOIN public.quality_element_observation qeo ON ((qeo.qem_id = qem.qem_id)))
     JOIN public.observation obs ON ((qeo.obs_id = obs.obs_id)))
     JOIN ((public.monitoring_object mno
     LEFT JOIN (public.monitored_compartiment
     JOIN public.compartiment_type ON ((monitored_compartiment.cptm_id = compartiment_type.cptm_id))) ON ((monitored_compartiment.mno_id = mno.mno_id)))
     JOIN public.namespace_type mno_nst ON ((mno_nst.ns_id = mno.inspire_id_namespace_id))) ON (((mno.mno_id = obs.mno_id) AND ((mno.monitoring_object_type)::text <> 'Sample'::text))))
     LEFT JOIN public.eenheid_type eenh ON ((eenh.eenh_id = obs.numeric_value_uom_id)))
     JOIN opt ON ((opt.opt_id = obs.observed_property_type)))
     LEFT JOIN public.kwaliteitsoordeel_type ON ((obs.quality_indicator_id = kwaliteitsoordeel_type.kwod_id)))
     LEFT JOIN ((public.observation_process obp
     LEFT JOIN public.waarde_bepalings_methode_type wbpm ON ((wbpm.wbpm_id = obp.wbpm_id)))
     LEFT JOIN (public.obs_process_meetapparaat opm
     JOIN domains.meetapparaat mar ON ((mar.mar_id = opm.mar_id))) ON ((opm.obp_id = obp.obp_id))) ON ((obp.obp_id = obs.result_nature_id)))
     LEFT JOIN bio ON ((bio.obs_id = obs.obs_id)))
     LEFT JOIN (public.observation_context obx
     JOIN public.obs_ctx_role_type ocr ON ((ocr.ocr_id = obx.role_id))) ON ((obx.obs_id_source = obs.obs_id)))
     LEFT JOIN public.waarde_bewerkings_methode_type wbm ON ((wbm.wbm_id = obs.value_processing_method_id)))
     LEFT JOIN ((public.observed_feature obf
     JOIN public.hydro_object hdo ON ((obf.hdo_id = hdo.hdo_id)))
     JOIN public.namespace_type ns_hdo ON ((hdo.inspire_id_namespace = ns_hdo.ns_id))) ON (((obs.obs_id = obf.obs_id) AND (mno.wkrv_id = hdo.wkrv_id))))
UNION ALL
 SELECT mno.mno_id,
    qeid.qem_id,
    qeid.idd_id,
    ((qeo.qeo_id)::text || (obs.obs_id)::text) AS unique_key,
    ((('NL'::text || (mpn_nst.code)::text) || '_'::text) || (mno_mpn.inspire_id_local_id)::text) AS "Meetpunt.Identificatie",
    public.st_x(public.st_transform(public.st_centroid(mno.geometry_etrs89), 4258)) AS "GeometriePunt.X",
    public.st_y(public.st_transform(public.st_centroid(mno.geometry_etrs89), 4258)) AS "GeometriePunt.Y",
        CASE
            WHEN (obf.obs_id IS NOT NULL) THEN ((('NL'::text || (ns_hdo.code)::text) || '_'::text) || (hdo.inspire_id_local_id)::text)
            ELSE NULL::text
        END AS "Geoobject.Identificatie",
    mno.inspire_id_local_id AS "Monster.Identificatie",
    mpn_nst.code AS "Monster.Namespace",
    mno.wkrv_id AS "Monster.Versie",
    cmp.code AS "Compartiment.Code",
    cmp.description AS "Compartiment.Omschrijving",
    orgaan.code AS "Orgaan.Code",
    orgaan.description AS "Orgaan.Omschrijving",
    taxon_type.omschrijving AS "Organisme.Naam",
    smpl.upper_depth_value AS "BeginDiepte_m",
    smpl.lower_depth_value AS "EindDiepte_m",
        CASE
            WHEN (hdh_ud.hdh_id IS NULL) THEN
            CASE
                WHEN (hdh_ld.hdh_id IS NULL) THEN (NULL::text)::character varying
                ELSE hdh_ld.code
            END
            ELSE hdh_ud.code
        END AS "ReferentieVlak.Code",
    mbm.code AS "Monsterbewerkingsmethode.Code",
    mbm.description AS "Monsterbewerkingsmethode.Omschrijving",
    mbm.codespace AS "Monsterbewerkingsmethode.codespace",
    bmm.code AS "Bemonsteringsmethode.Code",
    bmm.description AS "Bemonsteringsmethode.Omschrijving",
        CASE
            WHEN (bmm.code IS NULL) THEN NULL::text
            ELSE 'www.aquo.nl'::text
        END AS "Bemonsteringsmethode.codespace",
        CASE
            WHEN (frac.code IS NULL) THEN biota.code
            ELSE frac.code
        END AS "Monstercriterium.Code",
    var.code AS "veldapparaat.Code",
    var.description AS "veldapparaat.Omschrijving",
    var.codespace AS "veldapparaat.Codespace",
    to_char(smpl.sampling_time, 'YYYY-MM-DD'::text) AS "Monsternemingsdatum",
    to_char(smpl.sampling_time, 'HH24:MM:SS'::text) AS "Monsternemingstijd",
    NULL::integer AS "Monster.Tijd_UTCoffset",
    'EPSG4258'::text AS "ReferentieHorizontaal.code",
    smpl.remarks AS "Monster.Opmerking",
        CASE
            WHEN (mno_smpl.wkrv_id IS NULL) THEN NULL::text
            ELSE ((('NL'::text || (smpl_nst.code)::text) || '_'::text) || (mno_smpl.inspire_id_local_id)::text)
        END AS "GerelateerdMonsterobject",
        CASE
            WHEN (mno_smpl.wkrv_id IS NULL) THEN (NULL::text)::character varying
            ELSE rsfr.code
        END AS "GerelateerdMonsterRol.id",
    obs.obs_id AS "Meetwaarde.Identificatie",
    ('NL'::text || (mpn_nst.code)::text) AS "Meetwaarde.Namespace",
    mno.wkrv_id AS "Meetwaarde.Versie",
    opt.grh_code AS "Grootheid.code",
    opt.grh_omschrijving AS "Grootheid.omschrijving",
    opt.typ_code AS "Typering.code",
    opt.typ_omschrijving AS "Typering.omschrijving",
        CASE
            WHEN (opt.txg_omschrijving IS NOT NULL) THEN 'Biotaxon'::text
            WHEN (opt.chs_code IS NOT NULL) THEN 'ChemischeStof'::text
            WHEN (opt.obj_code IS NOT NULL) THEN 'Object'::text
            ELSE NULL::text
        END AS "Parameter.Groep",
        CASE
            WHEN (opt.txg_omschrijving IS NOT NULL) THEN (NULL::text)::character varying
            WHEN (opt.chs_code IS NOT NULL) THEN opt.chs_code
            WHEN (opt.obj_code IS NOT NULL) THEN opt.obj_code
            ELSE NULL::character varying
        END AS "Parameter.Code",
        CASE
            WHEN (opt.txg_omschrijving IS NOT NULL) THEN opt.txg_omschrijving
            WHEN (opt.chs_code IS NOT NULL) THEN opt.chs_naam
            WHEN (opt.obj_code IS NOT NULL) THEN opt.obj_omschrijving
            ELSE NULL::character varying
        END AS "Parameter.Omschrijving",
    eenh.code AS "Eenheid.code",
    eenh.omschrijving AS "Eenheid.omschrijving",
    opt.hdh_code AS "Hoedanigheid.code",
    opt.hdh_omschrijving AS "Hoedanigheid.omschrijving",
    wbm.code AS "Waardebewerkigngsmethode.code",
        CASE
            WHEN (wbm.code IS NULL) THEN NULL::text
            ELSE 'www.aquo.nl'::text
        END AS "Waardebewerkigngsmethode.codespace",
    wbpm.code AS "Waardebepalingsmethode.code",
        CASE
            WHEN (wbpm.code IS NULL) THEN NULL::text
            ELSE 'www.aquo.nl'::text
        END AS "Waardebepalingsmethode.codespace",
    to_char(obs.phenomenon_time_begin, 'YYYY-MM-DD'::text) AS "Begindatum",
    to_char(obs.phenomenon_time_begin, 'HH24:MM:SS'::text) AS "Begintijd",
    to_char(obs.phenomenon_time_end, 'YYYY-MM-DD'::text) AS "Einddatum",
    to_char(obs.phenomenon_time_end, 'HH24:MM:SS'::text) AS "Eindtijd",
    NULL::integer AS "Meetwaarde.Tijd_UTCoffset",
    to_char(obs.result_time, 'YYYY-MM-DD'::text) AS "Resultaatdatum",
    NULL::integer AS "Resultaat_UTCoffset",
    obs.limit_symbol_id AS "Limietsymbool",
    obs.numeric_value AS "Numeriekewaarde",
    obs.description AS "Alfanumeriekewaarde",
    kwaliteitsoordeel_type.code AS "Kwaliteitsoordeel.code",
    kwaliteitsoordeel_type.description AS "Kwaliteitsoordeel.omschrijving",
    mar.code AS "Meetapparaat.code",
        CASE
            WHEN (mar.code IS NULL) THEN NULL::text
            ELSE 'www.aquo.nl'::text
        END AS "Meetapparaat.codespace",
    bio.levensstadium_code AS "Levensstadium.code",
    bio.lengte_code AS "Lengteklasse.code",
    bio.geslacht_code AS "Geslachtcode",
    bio.verschijning_code AS "Verschijningsvorm.code",
    bio.levensvorm_code AS "Levensvorm.code",
    bio.gedrag_code AS "Gedrag.code",
        CASE
            WHEN (obx.obs_id_target IS NULL) THEN NULL::text
            ELSE ((('NL'::text || (mpn_nst.code)::text) || '_'::text) || (obx.obs_id_target)::text)
        END AS "GerelateerdObservatieobject",
    ocr.code AS "GerelateerdObservatieobjectRol.id",
    obs.remarks AS "Meetwaarde.Opmerking",
    indicator.additional_description AS "Indicator.EUOmschrijving",
    typi.code AS "Indicator.Code",
    typd.code AS "Descriptor.Code",
    descriptor.additional_description AS "Descriptor.EUOmschrijving"
   FROM ((((((((((((((((((((((((((((((((((domains.indicator_descriptor indicator
     JOIN public.observed_property_type opti ON ((indicator.opt_id = opti.opt_id)))
     JOIN public.typering_type typi ON ((opti.indicator_id = typi.typ_id)))
     JOIN domains.indicator_descriptor descriptor ON (((indicator.part_of_idd_id = descriptor.idd_id) AND (descriptor.part_of_idd_id IS NULL))))
     JOIN public.observed_property_type optd ON ((descriptor.opt_id = optd.opt_id)))
     JOIN public.typering_type typd ON ((optd.indicator_id = typd.typ_id)))
     JOIN monprog.quality_element_indicator_descriptor qeid ON ((qeid.idd_id = indicator.idd_id)))
     JOIN public.quality_element qem ON ((qem.qem_id = qeid.qem_id)))
     JOIN public.quality_element_observation qeo ON ((qeo.qem_id = qem.qem_id)))
     JOIN public.observation obs ON ((qeo.obs_id = obs.obs_id)))
     JOIN public.sample smpl ON ((smpl.smpl_id = obs.mno_id)))
     JOIN public.monitoring_object mno ON ((mno.mno_id = smpl.smpl_id)))
     JOIN public.compartiment_type cmp ON ((smpl.material_class_id = cmp.cptm_id)))
     LEFT JOIN public.hoedanigheid_type hdh_ud ON ((hdh_ud.hdh_id = smpl.upper_depth_condition_id)))
     LEFT JOIN public.hoedanigheid_type hdh_ld ON ((hdh_ld.hdh_id = smpl.lower_depth_condition_id)))
     LEFT JOIN public.taxon_type ON ((smpl.txn_id = taxon_type.txn_id)))
     LEFT JOIN domains.orgaan ON ((orgaan.org_id = smpl.organ_id)))
     LEFT JOIN public.hoedanigheid_type frac ON ((frac.hdh_id = smpl.fraction_criterium_id)))
     LEFT JOIN public.hoedanigheid_type biota ON ((biota.hdh_id = smpl.biota_criterium_id)))
     LEFT JOIN public.eenheid_type eenh_ud ON ((eenh_ud.eenh_id = smpl.upper_depth_uom_id)))
     LEFT JOIN public.eenheid_type eenh_ld ON ((eenh_ld.eenh_id = smpl.lower_depth_uom_id)))
     LEFT JOIN (((public.sampling_proces smp
     LEFT JOIN domains.monsterbewerkingsmethode mbm ON ((mbm.mbm_id = smp.sampling_method_id)))
     LEFT JOIN domains.bemonsteringsmethode bmm ON ((bmm.bmm_id = smp.sampling_processing_method_id)))
     LEFT JOIN domains.veldapparaat var ON ((var.var_id = smp.var_id))) ON ((smp.smp_id = smpl.smp_id)))
     LEFT JOIN public.related_sampling_feature rel_smpl ON ((smpl.smpl_id = rel_smpl.mnf_id_source)))
     LEFT JOIN public.sample smpl2 ON ((smpl.smpl_id = rel_smpl.mnf_id_target)))
     LEFT JOIN (public.monitoring_object mno_mpn
     JOIN public.namespace_type mpn_nst ON ((mpn_nst.ns_id = mno_mpn.inspire_id_namespace_id))) ON (((mno_mpn.mno_id = rel_smpl.mnf_id_target) AND ((mno_mpn.monitoring_object_type)::text <> 'Sample'::text))))
     LEFT JOIN (public.monitoring_object mno_smpl
     JOIN public.namespace_type smpl_nst ON ((smpl_nst.ns_id = mno_smpl.inspire_id_namespace_id))) ON (((smpl2.smpl_id = mno_smpl.mno_id) AND ((mno_smpl.monitoring_object_type)::text = 'Sample'::text))))
     LEFT JOIN public.rel_samp_feat_role_type rsfr ON ((rsfr.rsfr_id = rel_smpl.role_id)))
     LEFT JOIN public.eenheid_type eenh ON ((eenh.eenh_id = obs.numeric_value_uom_id)))
     JOIN opt ON ((opt.opt_id = obs.observed_property_type)))
     LEFT JOIN public.kwaliteitsoordeel_type ON ((obs.quality_indicator_id = kwaliteitsoordeel_type.kwod_id)))
     LEFT JOIN ((public.observation_process obp
     LEFT JOIN public.waarde_bepalings_methode_type wbpm ON ((wbpm.wbpm_id = obp.wbpm_id)))
     LEFT JOIN (public.obs_process_meetapparaat opm
     JOIN domains.meetapparaat mar ON ((mar.mar_id = opm.mar_id))) ON ((opm.obp_id = obp.obp_id))) ON ((obp.obp_id = obs.result_nature_id)))
     LEFT JOIN bio ON ((bio.obs_id = obs.obs_id)))
     LEFT JOIN (public.observation_context obx
     JOIN public.obs_ctx_role_type ocr ON ((ocr.ocr_id = obx.role_id))) ON ((obx.obs_id_source = obs.obs_id)))
     LEFT JOIN public.waarde_bewerkings_methode_type wbm ON ((wbm.wbm_id = obs.value_processing_method_id)))
     LEFT JOIN ((public.observed_feature obf
     JOIN public.hydro_object hdo ON ((obf.hdo_id = hdo.hdo_id)))
     JOIN public.namespace_type ns_hdo ON ((hdo.inspire_id_namespace = ns_hdo.ns_id))) ON ((obs.obs_id = obf.obs_id)));


--
-- Name: sf_vw_krm_regels; Type: VIEW; Schema: krm; Owner: -
--

CREATE VIEW sf_vw_krm_regels AS
 SELECT txg.txg_id AS "txg.txg_id",
    txg.name AS "txg.name",
    txg.group_type AS "txg.group_type",
    txg.d_begin AS "txg.d_begin",
    txg.d_eind AS "txg.d_eind",
    txg.last_changed_date AS "txg.last_changed_date",
    txg.d_status AS "txg.d_status",
    ojg.ojg_id AS "ojg.ojg_id",
    ojg.name AS "ojg.name",
    ojg.group_type AS "ojg.group_type",
    ojg.d_begin AS "ojg.d_begin",
    ojg.d_eind AS "ojg.d_eind",
    ojg.last_changed_date AS "ojg.last_changed_date",
    ojg.d_status AS "ojg.d_status",
    ssg.ssg_id AS "ssg.ssg_id",
    ssg.name AS "ssg.name",
    ssg.group_type AS "ssg.group_type",
    ssg.d_begin AS "ssg.d_begin",
    ssg.d_eind AS "ssg.d_eind",
    ssg.last_changed_date AS "ssg.last_changed_date",
    ssg.d_status AS "ssg.d_status",
    opt.opt_id AS "opt.opt_id",
    opt.observed_property_type_class AS "opt.observed_property_type_class",
    opt.result_type AS "opt.result_type",
    opt.hoedanigheid_id AS "opt.hoedanigheid_id",
    opt.object_group_id AS "opt.object_group_id",
    opt.quantity_id AS "opt.quantity_id",
    opt.taxa_group_id AS "opt.taxa_group_id",
    opt.substance_group_id AS "opt.substance_group_id",
    opt.indicator_id AS "opt.indicator_id",
    opt.classification_group_id AS "opt.classification_group_id",
    opt.remarks AS "opt.remarks",
    opt.d_begin AS "opt.d_begin",
    opt.d_eind AS "opt.d_eind",
    opt.last_changed_date AS "opt.last_changed_date",
    opt.d_status AS "opt.d_status",
    hdh.hdh_id AS "hdh.hdh_id",
    hdh.code AS "hdh.code",
    hdh.omschrijving AS "hdh.omschrijving",
    hdh.d_begin AS "hdh.d_begin",
    hdh.d_eind AS "hdh.d_eind",
    hdh.last_changed_date AS "hdh.last_changed_date",
    hdh.d_status AS "hdh.d_status",
    hdh.id AS "hdh.id",
    grh.grh_id AS "grh.grh_id",
    grh.code AS "grh.code",
    grh.omschrijving AS "grh.omschrijving",
    grh.d_begin AS "grh.d_begin",
    grh.d_eind AS "grh.d_eind",
    grh.last_changed_date AS "grh.last_changed_date",
    grh.d_status AS "grh.d_status",
    grh.id AS "grh.id",
    typ.typ_id AS "typ.typ_id",
    typ.code AS "typ.code",
    typ.omschrijving AS "typ.omschrijving",
    typ.d_begin AS "typ.d_begin",
    typ.d_eind AS "typ.d_eind",
    typ.last_changed_date AS "typ.last_changed_date",
    typ.d_status AS "typ.d_status",
    typ.id AS "typ.id",
    clsg.clsg_id AS "clsg.clsg_id",
    clsg.code AS "clsg.code",
    clsg.description AS "clsg.description",
    clsg.d_begin AS "clsg.d_begin",
    clsg.d_eind AS "clsg.d_eind",
    clsg.last_changed_date AS "clsg.last_changed_date",
    clsg.d_status AS "clsg.d_status",
    qem.qem_id AS "qem.qem_id",
    qem.osc_id AS "qem.osc_id",
    qem.opt_id AS "qem.opt_id",
    qem.parameter_use_id AS "qem.parameter_use_id",
    qem.cycle_value AS "qem.cycle_value",
    qem.cycle_uom_id AS "qem.cycle_uom_id",
    qem.cycle_description AS "qem.cycle_description",
    qem.frequency_value AS "qem.frequency_value",
    qem.frequency_uom_id AS "qem.frequency_uom_id",
    qem.reason_deviation_program AS "qem.reason_deviation_program",
    qem.last_change_time AS "qem.last_change_time",
    qem.sampling_method_id AS "qem.sampling_method_id",
    qem.sampling_device_id AS "qem.sampling_device_id",
    qem.deviation_program_jn AS "qem.deviation_program_jn",
    qem.opt_uom_id AS "qem.opt_uom_id",
    qem.wbm_id AS "qem.wbm_id",
    qem.remark AS "qem.remark",
    ehd.eenh_id AS "ehd.eenh_id",
    ehd.code AS "ehd.code",
    ehd.omschrijving AS "ehd.omschrijving",
    ehd.d_begin AS "ehd.d_begin",
    ehd.d_eind AS "ehd.d_eind",
    ehd.last_changed_date AS "ehd.last_changed_date",
    ehd.d_status AS "ehd.d_status",
    ehd.id AS "ehd.id",
    var.var_id AS "var.var_id",
    var.code AS "var.code",
    var.description AS "var.description",
    var.d_begin AS "var.d_begin",
    var.d_eind AS "var.d_eind",
    var.last_changed_date AS "var.last_changed_date",
    var.d_status AS "var.d_status",
    var.id AS "var.id",
    var.codespace AS "var.codespace",
    var.groep AS "var.groep",
    wbm.wbm_id AS "wbm.wbm_id",
    wbm.code AS "wbm.code",
    wbm.omschrijving AS "wbm.omschrijving",
    wbm.d_begin AS "wbm.d_begin",
    wbm.d_eind AS "wbm.d_eind",
    wbm.last_changed_date AS "wbm.last_changed_date",
    wbm.d_status AS "wbm.d_status",
    wbm.id AS "wbm.id",
    bmm.bmm_id AS "bmm.bmm_id",
    bmm.code AS "bmm.code ",
    bmm.description AS "bmm.description",
    bmm.groep AS "bmm.groep",
    bmm.titel AS "bmm.titel",
    bmm.d_begin AS "bmm.d_begin",
    bmm.d_eind AS "bmm.d_eind ",
    bmm.last_changed_date AS "bmm.last_changed_date",
    bmm.d_status AS "bmm.d_status ",
    bmm.id AS "bmm.id ",
    osc.osc_id AS "osc.osc_id",
    osc.observing_time_begin AS "osc.observing_time_begin",
    osc.observing_time_end AS "osc.observing_time_end",
    osc.online_resource AS "osc.online_resource",
    osc.process_type_id AS "osc.process_type_id",
    osc.last_change_time AS "osc.last_change_time",
    osc.name AS "osc.name",
    osc.is_sample AS "osc.is_sample",
    osc.wkrv_id AS "osc.wkrv_id",
    moqe.moqe_id AS "moqe.moqe_id",
    moqe.mno_id AS "moqe.mno_id",
    moqe.qem_id AS "moqe.qem_id",
    mno.mno_id AS "mno.mno_id",
    mno.inspire_id_local_id AS "mno.inspire_id_local_id",
    mno.inspire_id_namespace_id AS "mno.inspire_id_namespace_id",
    mno.wkrv_id AS "mno.wkrv_id",
    mno.monitoring_object_type AS "mno.monitoring_object_type",
    mno.name AS "mno.name",
    mno.additional_description AS "mno.additional_description",
    mno.last_change_time AS "mno.last_change_time",
    mno.begin_lifespan_version AS "mno.begin_lifespan_version",
    mno.end_lifespan_version AS "mno.end_lifespan_version",
    mno.primary_geo_column AS "mno.primary_geo_column",
    mno.reason_change AS "mno.reason_change",
    mno.primary_geodetic_reference_id AS "mno.primary_geodetic_reference_id",
    pot.pot_id AS "pot.pot_id",
    pot.qem_id AS "pot.qem_id",
    pot.start_date AS "pot.start_date",
    pot.end_date AS "pot.end_date",
    pot.noof_samples AS "pot.noof_samples",
    pot.samples_bepalingsgrens_id AS "pot.samples_bepalingsgrens_id",
    pot.last_change_time AS "pot.last_change_time",
    bpg.bpg_id AS "bpg.bpg_id",
    bpg.code AS "bpg.code",
    bpg.omschrijving AS "bpg.omschrijving",
    bpg.d_begin AS "bpg.d_begin",
    bpg.d_eind AS "bpg.d_eind",
    bpg.last_changed_date AS "bpg.last_changed_date",
    bpg.d_status AS "bpg.d_status"
   FROM (((((((((((((((((public.observed_property_type opt
     LEFT JOIN public.taxa_group txg ON ((opt.taxa_group_id = txg.txg_id)))
     LEFT JOIN public.object_group ojg ON ((opt.object_group_id = ojg.ojg_id)))
     LEFT JOIN public.substance_group ssg ON ((opt.substance_group_id = ssg.ssg_id)))
     LEFT JOIN public.hoedanigheid_type hdh ON ((hdh.hdh_id = opt.hoedanigheid_id)))
     LEFT JOIN public.grootheid_type grh ON ((grh.grh_id = opt.quantity_id)))
     LEFT JOIN public.typering_type typ ON ((typ.typ_id = opt.indicator_id)))
     LEFT JOIN public.classification_group_type clsg ON ((clsg.clsg_id = opt.classification_group_id)))
     JOIN public.quality_element qem ON ((qem.opt_id = opt.opt_id)))
     LEFT JOIN public.eenheid_type ehd ON ((ehd.eenh_id = qem.opt_uom_id)))
     LEFT JOIN domains.veldapparaat var ON ((var.var_id = qem.sampling_device_id)))
     LEFT JOIN public.waarde_bewerkings_methode_type wbm ON ((wbm.wbm_id = qem.wbm_id)))
     LEFT JOIN domains.bemonsteringsmethode bmm ON ((bmm.bmm_id = qem.sampling_method_id)))
     LEFT JOIN public.observing_capability osc ON ((osc.osc_id = qem.osc_id)))
     LEFT JOIN public.monitoring_object_quality_element moqe ON ((moqe.qem_id = qem.qem_id)))
     LEFT JOIN public.monitoring_object mno ON ((mno.mno_id = moqe.mno_id)))
     LEFT JOIN monprog.planned_observation_time pot ON ((pot.qem_id = qem.qem_id)))
     LEFT JOIN public.bepaling_grens_type bpg ON ((bpg.bpg_id = pot.samples_bepalingsgrens_id)));


--
-- Name: vw_krm_meetpunten_g; Type: VIEW; Schema: krm; Owner: -
--

CREATE VIEW vw_krm_meetpunten_g AS
 SELECT DISTINCT ON (mno.mno_id, typi.code) mno.geometry_etrs89,
    ((osc.osc_id)::text || (obs.obs_id)::text) AS unique_key,
    mno.mno_id,
    ((('NL'::text || (mno_nst.code)::text) || '_'::text) || (mno.inspire_id_local_id)::text) AS "Meetpunt.Identificatie",
    indicator.additional_description AS "Indicator.EUOmschrijving",
    typi.code AS "Indicator.Code",
    typd.code AS "Descriptor.Code",
    descriptor.additional_description AS "Descriptor.EUOmschrijving"
   FROM (((((((((((domains.indicator_descriptor indicator
     JOIN public.observed_property_type opti ON ((indicator.opt_id = opti.opt_id)))
     JOIN public.typering_type typi ON ((opti.indicator_id = typi.typ_id)))
     JOIN domains.indicator_descriptor descriptor ON (((indicator.part_of_idd_id = descriptor.idd_id) AND (descriptor.part_of_idd_id IS NULL))))
     JOIN public.observed_property_type optd ON ((descriptor.opt_id = optd.opt_id)))
     JOIN public.typering_type typd ON ((optd.indicator_id = typd.typ_id)))
     JOIN monprog.quality_element_indicator_descriptor qeid ON ((qeid.idd_id = indicator.idd_id)))
     JOIN public.quality_element qem ON ((qem.qem_id = qeid.qem_id)))
     JOIN public.observing_capability osc ON ((osc.osc_id = qem.osc_id)))
     JOIN public.observing_capability_observation oco ON ((oco.osc_id = osc.osc_id)))
     JOIN public.observation obs ON ((oco.obs_id = obs.obs_id)))
     JOIN ((public.monitoring_object mno
     LEFT JOIN (public.monitored_compartiment
     JOIN public.compartiment_type ON ((monitored_compartiment.cptm_id = compartiment_type.cptm_id))) ON ((monitored_compartiment.mno_id = mno.mno_id)))
     JOIN public.namespace_type mno_nst ON ((mno_nst.ns_id = mno.inspire_id_namespace_id))) ON (((mno.mno_id = obs.mno_id) AND ((mno.monitoring_object_type)::text <> 'Sample'::text))))
UNION ALL
 SELECT DISTINCT ON (mno_mpn.mno_id, typi.code) mno.geometry_etrs89,
    ((osc.osc_id)::text || (obs.obs_id)::text) AS unique_key,
    mno_mpn.mno_id,
    ((('NL'::text || (mpn_nst.code)::text) || '_'::text) || (mno_mpn.inspire_id_local_id)::text) AS "Meetpunt.Identificatie",
    indicator.additional_description AS "Indicator.EUOmschrijving",
    typi.code AS "Indicator.Code",
    typd.code AS "Descriptor.Code",
    descriptor.additional_description AS "Descriptor.EUOmschrijving"
   FROM (((((((((((((((((domains.indicator_descriptor indicator
     JOIN public.observed_property_type opti ON ((indicator.opt_id = opti.opt_id)))
     JOIN public.typering_type typi ON ((opti.indicator_id = typi.typ_id)))
     JOIN domains.indicator_descriptor descriptor ON (((indicator.part_of_idd_id = descriptor.idd_id) AND (descriptor.part_of_idd_id IS NULL))))
     JOIN public.observed_property_type optd ON ((descriptor.opt_id = optd.opt_id)))
     JOIN public.typering_type typd ON ((optd.indicator_id = typd.typ_id)))
     JOIN monprog.quality_element_indicator_descriptor qeid ON ((qeid.idd_id = indicator.idd_id)))
     JOIN public.quality_element qem ON ((qem.qem_id = qeid.qem_id)))
     JOIN public.observing_capability osc ON ((osc.osc_id = qem.osc_id)))
     JOIN public.observing_capability_observation oco ON ((oco.osc_id = osc.osc_id)))
     JOIN public.observation obs ON ((oco.obs_id = obs.obs_id)))
     JOIN public.sample smpl ON ((smpl.smpl_id = obs.mno_id)))
     JOIN public.monitoring_object mno ON ((mno.mno_id = smpl.smpl_id)))
     LEFT JOIN public.related_sampling_feature rel_smpl ON ((smpl.smpl_id = rel_smpl.mnf_id_source)))
     LEFT JOIN public.sample smpl2 ON ((smpl.smpl_id = rel_smpl.mnf_id_target)))
     LEFT JOIN (public.monitoring_object mno_mpn
     JOIN public.namespace_type mpn_nst ON ((mpn_nst.ns_id = mno_mpn.inspire_id_namespace_id))) ON (((mno_mpn.mno_id = rel_smpl.mnf_id_target) AND ((mno_mpn.monitoring_object_type)::text <> 'Sample'::text))))
     LEFT JOIN (public.monitoring_object mno_smpl
     JOIN public.namespace_type smpl_nst ON ((smpl_nst.ns_id = mno_smpl.inspire_id_namespace_id))) ON (((smpl2.smpl_id = mno_smpl.mno_id) AND ((mno_smpl.monitoring_object_type)::text = 'Sample'::text))))
     LEFT JOIN public.rel_samp_feat_role_type rsfr ON ((rsfr.rsfr_id = rel_smpl.role_id)))
  ORDER BY 2;


--
-- Name: vw_krm_metingen_g; Type: VIEW; Schema: krm; Owner: -
--

CREATE VIEW vw_krm_metingen_g AS
 WITH bio AS (
         SELECT bio.obs_id,
            gedrag.code AS gedrag_code,
            geslacht.code AS geslacht_code,
            lengte.code AS lengte_code,
            levensstadium.code AS levensstadium_code,
            levensvorm.code AS levensvorm_code,
            verschijning.code AS verschijning_code
           FROM ((((((public.bio_observation bio
             LEFT JOIN public.hoedanigheid_type gedrag ON (((bio.gedrag_id = gedrag.hdh_id) AND (bio.gedrag_id IS NOT NULL))))
             LEFT JOIN public.hoedanigheid_type geslacht ON (((bio.geslacht_id = geslacht.hdh_id) AND (bio.geslacht_id IS NOT NULL))))
             LEFT JOIN public.hoedanigheid_type lengte ON (((bio.lengte_klasse_id = lengte.hdh_id) AND (bio.lengte_klasse_id IS NOT NULL))))
             LEFT JOIN public.hoedanigheid_type levensstadium ON (((bio.levensstadium_id = levensstadium.hdh_id) AND (bio.levensstadium_id IS NOT NULL))))
             LEFT JOIN public.hoedanigheid_type levensvorm ON (((bio.levensvorm_id = levensvorm.hdh_id) AND (bio.levensvorm_id IS NOT NULL))))
             LEFT JOIN public.hoedanigheid_type verschijning ON (((bio.verschijningsvorm_id = verschijning.hdh_id) AND (bio.verschijningsvorm_id IS NOT NULL))))
          WHERE ((bio.gedrag_id IS NOT NULL) AND (bio.geslacht_id IS NOT NULL) AND (bio.lengte_klasse_id IS NOT NULL) AND (bio.levensstadium_id IS NOT NULL) AND (bio.levensvorm_id IS NOT NULL) AND (bio.verschijningsvorm_id IS NOT NULL))
        ), opt AS (
         SELECT opt.opt_id,
            grh.code AS grh_code,
            grh.omschrijving AS grh_omschrijving,
            typ.code AS typ_code,
            typ.omschrijving AS typ_omschrijving,
            txt.omschrijving AS txg_omschrijving,
            chs.code AS chs_code,
            chs.naam AS chs_naam,
            obj.code AS obj_code,
            obj.omschrijving AS obj_omschrijving,
            hdh.code AS hdh_code,
            hdh.omschrijving AS hdh_omschrijving
           FROM ((((((public.observed_property_type opt
             LEFT JOIN public.grootheid_type grh ON (((grh.grh_id = opt.quantity_id) AND (opt.quantity_id IS NOT NULL))))
             LEFT JOIN public.typering_type typ ON (((typ.typ_id = opt.indicator_id) AND (opt.indicator_id IS NOT NULL))))
             LEFT JOIN public.hoedanigheid_type hdh ON (((hdh.hdh_id = opt.hoedanigheid_id) AND (opt.hoedanigheid_id IS NOT NULL))))
             LEFT JOIN ((public.taxa_group txg
             JOIN public.taxa_group_element tge ON ((tge.txg_id = txg.txg_id)))
             JOIN public.taxon_type txt ON ((txt.txn_id = tge.txn_id))) ON (((txg.txg_id = opt.taxa_group_id) AND ((txg.group_type)::text = 'I'::text))))
             LEFT JOIN ((public.substance_group ssg
             JOIN public.substance_group_element ssge ON ((ssge.ssge_id = ssg.ssg_id)))
             JOIN public.chemische_stof_type chs ON ((chs.chs_id = ssge.chs_id))) ON (((ssg.ssg_id = opt.substance_group_id) AND ((ssg.group_type)::text = 'I'::text))))
             LEFT JOIN ((public.object_group ojg
             JOIN public.object_group_element ojge ON ((ojg.ojg_id = ojge.ojg_id)))
             JOIN public.object_type obj ON ((obj.obj_id = ojge.obj_id))) ON (((ojg.ojg_id = opt.object_group_id) AND ((ojg.group_type)::text = 'I'::text))))
        )
 SELECT mno.geometry_etrs89,
    ((osc.osc_id)::text || (obs.obs_id)::text) AS unique_key,
    ((('NL'::text || (mno_nst.code)::text) || '_'::text) || (mno.inspire_id_local_id)::text) AS "Meetpunt.Identificatie",
    public.st_x(public.st_transform(public.st_centroid(mno.geometry_etrs89), 4258)) AS "GeometriePunt.X",
    public.st_y(public.st_transform(public.st_centroid(mno.geometry_etrs89), 4258)) AS "GeometriePunt.Y",
        CASE
            WHEN (obf.obs_id IS NOT NULL) THEN (('NL'::text || (ns_hdo.code)::text) || (hdo.inspire_id_local_id)::text)
            ELSE
            CASE
                WHEN ((mno.monitoring_object_type)::text = 'Sample'::text) THEN NULL::text
                ELSE ((('NL'::text || (mno_nst.code)::text) || '_AQUO_COMPARTIMENT:'::text) || (compartiment_type.code)::text)
            END
        END AS "Geoobject.Identificatie",
    NULL::text AS "Monster.Identificatie",
    NULL::text AS "Monster.Namespace",
    NULL::integer AS "Monster.Versie",
    NULL::text AS "Compartiment.Code",
    NULL::text AS "Compartiment.Omschrijving",
    NULL::text AS "Orgaan.Code",
    NULL::text AS "Orgaan.Omschrijving",
    NULL::text AS "Organisme.Naam",
    NULL::numeric AS "BeginDiepte_m",
    NULL::numeric AS "EindDiepte_m",
    NULL::text AS "ReferentieVlak.Code",
    NULL::text AS "Monsterbewerkingsmethode.Code",
    NULL::text AS "Monsterbewerkingsmethode.Omschrijving",
    NULL::text AS "Monsterbewerkingsmethode.codespace",
    NULL::text AS "Bemonsteringsmethode.Code",
    NULL::text AS "Bemonsteringsmethode.Omschrijving",
    NULL::text AS "Bemonsteringsmethode.codespace",
    NULL::text AS "Monstercriterium.Code",
    NULL::text AS "veldapparaat.Code",
    NULL::text AS "veldapparaat.Omschrijving",
    NULL::text AS "veldapparaat.Codespace",
    NULL::text AS "Monsternemingsdatum",
    NULL::text AS "Monsternemingstijd",
    NULL::integer AS "Monster.Tijd_UTCoffset",
    NULL::text AS "ReferentieHorizontaal.code",
    NULL::text AS "Monster.Opmerking",
    NULL::text AS "GerelateerdMonsterobject",
    NULL::text AS "GerelateerdMonsterRol.id",
    obs.obs_id AS "Meetwaarde.Identificatie",
    ('NL'::text || (mno_nst.code)::text) AS "Meetwaarde.Namespace",
    mno.wkrv_id AS "Meetwaarde.Versie",
    opt.grh_code AS "Grootheid.code",
    opt.grh_omschrijving AS "Grootheid.omschrijving",
    opt.typ_code AS "Typering.code",
    opt.typ_omschrijving AS "Typering.omschrijving",
        CASE
            WHEN (opt.txg_omschrijving IS NOT NULL) THEN 'Biotaxon'::text
            WHEN (opt.chs_code IS NOT NULL) THEN 'ChemischeStof'::text
            WHEN (opt.obj_code IS NOT NULL) THEN 'Object'::text
            ELSE NULL::text
        END AS "Parameter.Groep",
        CASE
            WHEN (opt.txg_omschrijving IS NOT NULL) THEN (NULL::text)::character varying
            WHEN (opt.chs_code IS NOT NULL) THEN opt.chs_code
            WHEN (opt.obj_code IS NOT NULL) THEN opt.obj_code
            ELSE NULL::character varying
        END AS "Parameter.Code",
        CASE
            WHEN (opt.txg_omschrijving IS NOT NULL) THEN opt.txg_omschrijving
            WHEN (opt.chs_code IS NOT NULL) THEN opt.chs_naam
            WHEN (opt.obj_code IS NOT NULL) THEN opt.obj_omschrijving
            ELSE NULL::character varying
        END AS "Parameter.Omschrijving",
    eenh.code AS "Eenheid.code",
    eenh.omschrijving AS "Eenheid.omschrijving",
    opt.hdh_code AS "Hoedanigheid.code",
    opt.hdh_omschrijving AS "Hoedanigheid.omschrijving",
    wbm.code AS "Waardebewerkigngsmethode.code",
        CASE
            WHEN (wbm.code IS NULL) THEN NULL::text
            ELSE 'www.aquo.nl'::text
        END AS "Waardebewerkigngsmethode.codespace",
    wbpm.code AS "Waardebepalingsmethode.code",
        CASE
            WHEN (wbpm.code IS NULL) THEN NULL::text
            ELSE 'www.aquo.nl'::text
        END AS "Waardebepalingsmethode.codespace",
    to_char(obs.phenomenon_time_begin, 'YYYY-MM-DD'::text) AS "Begindatum",
    to_char(obs.phenomenon_time_begin, 'HH24:MM:SS'::text) AS "Begintijd",
    to_char(obs.phenomenon_time_end, 'YYYY-MM-DD'::text) AS "Einddatum",
    to_char(obs.phenomenon_time_end, 'HH24:MM:SS'::text) AS "Eindtijd",
    NULL::integer AS "Meetwaarde.Tijd_UTCoffset",
    to_char(obs.result_time, 'YYYY-MM-DD'::text) AS "Resultaatdatum",
    NULL::integer AS "Resultaat_UTCoffset",
    obs.limit_symbol_id AS "Limietsymbool",
    obs.numeric_value AS "Numeriekewaarde",
    obs.description AS "Alfanumeriekewaarde",
    kwaliteitsoordeel_type.code AS "Kwaliteitsoordeel.code",
    kwaliteitsoordeel_type.description AS "Kwaliteitsoordeel.omschrijving",
    mar.code AS "Meetapparaat.code",
        CASE
            WHEN (mar.code IS NULL) THEN NULL::text
            ELSE 'www.aquo.nl'::text
        END AS "Meetapparaat.codespace",
    bio.levensstadium_code AS "Levensstadium.code",
    bio.lengte_code AS "Lengteklasse.code",
    bio.geslacht_code AS "Geslachtcode",
    bio.verschijning_code AS "Verschijningsvorm.code",
    bio.levensvorm_code AS "Levensvorm.code",
    bio.gedrag_code AS "Gedrag.code",
        CASE
            WHEN (obx.obs_id_target IS NULL) THEN NULL::text
            ELSE ((('NL'::text || (mno_nst.code)::text) || '_'::text) || (obx.obs_id_target)::text)
        END AS "GerelateerdObservatieobject",
    ocr.code AS "GerelateerdObservatieobjectRol.id",
    obs.remarks AS "Meetwaarde.Opmerking",
    indicator.additional_description AS "Indicator.EUOmschrijving",
    typi.code AS "Indicator.Code",
    typd.code AS "Descriptor.Code",
    descriptor.additional_description AS "Descriptor.EUOmschrijving"
   FROM (((((((((((((((((((domains.indicator_descriptor indicator
     JOIN public.observed_property_type opti ON ((indicator.opt_id = opti.opt_id)))
     JOIN public.typering_type typi ON ((opti.indicator_id = typi.typ_id)))
     JOIN domains.indicator_descriptor descriptor ON (((indicator.part_of_idd_id = descriptor.idd_id) AND (descriptor.part_of_idd_id IS NULL))))
     JOIN public.observed_property_type optd ON ((descriptor.opt_id = optd.opt_id)))
     JOIN public.typering_type typd ON ((optd.indicator_id = typd.typ_id)))
     JOIN monprog.quality_element_indicator_descriptor qeid ON ((qeid.idd_id = indicator.idd_id)))
     JOIN public.quality_element qem ON ((qem.qem_id = qeid.qem_id)))
     JOIN public.observing_capability osc ON ((osc.osc_id = qem.osc_id)))
     JOIN public.observing_capability_observation oco ON ((oco.osc_id = osc.osc_id)))
     JOIN public.observation obs ON ((oco.obs_id = obs.obs_id)))
     JOIN ((public.monitoring_object mno
     LEFT JOIN (public.monitored_compartiment
     JOIN public.compartiment_type ON ((monitored_compartiment.cptm_id = compartiment_type.cptm_id))) ON ((monitored_compartiment.mno_id = mno.mno_id)))
     JOIN public.namespace_type mno_nst ON ((mno_nst.ns_id = mno.inspire_id_namespace_id))) ON (((mno.mno_id = obs.mno_id) AND ((mno.monitoring_object_type)::text <> 'Sample'::text))))
     LEFT JOIN public.eenheid_type eenh ON ((eenh.eenh_id = obs.numeric_value_uom_id)))
     JOIN opt ON ((opt.opt_id = obs.observed_property_type)))
     LEFT JOIN public.kwaliteitsoordeel_type ON ((obs.quality_indicator_id = kwaliteitsoordeel_type.kwod_id)))
     LEFT JOIN ((public.observation_process obp
     LEFT JOIN public.waarde_bepalings_methode_type wbpm ON ((wbpm.wbpm_id = obp.wbpm_id)))
     LEFT JOIN (public.obs_process_meetapparaat opm
     JOIN domains.meetapparaat mar ON ((mar.mar_id = opm.mar_id))) ON ((opm.obp_id = obp.obp_id))) ON ((obp.obp_id = obs.result_nature_id)))
     LEFT JOIN bio ON ((bio.obs_id = obs.obs_id)))
     LEFT JOIN (public.observation_context obx
     JOIN public.obs_ctx_role_type ocr ON ((ocr.ocr_id = obx.role_id))) ON ((obx.obs_id_source = obs.obs_id)))
     LEFT JOIN public.waarde_bewerkings_methode_type wbm ON ((wbm.wbm_id = obs.value_processing_method_id)))
     LEFT JOIN ((public.observed_feature obf
     JOIN public.hydro_object hdo ON ((obf.hdo_id = hdo.hdo_id)))
     JOIN public.namespace_type ns_hdo ON ((hdo.inspire_id_namespace = ns_hdo.ns_id))) ON (((obs.obs_id = obf.obs_id) AND (mno.wkrv_id = hdo.wkrv_id))))
UNION ALL
 SELECT mno.geometry_etrs89,
    ((osc.osc_id)::text || (obs.obs_id)::text) AS unique_key,
    ((('NL'::text || (mpn_nst.code)::text) || '_'::text) || (mno_mpn.inspire_id_local_id)::text) AS "Meetpunt.Identificatie",
    public.st_x(public.st_transform(public.st_centroid(mno.geometry_etrs89), 4258)) AS "GeometriePunt.X",
    public.st_y(public.st_transform(public.st_centroid(mno.geometry_etrs89), 4258)) AS "GeometriePunt.Y",
        CASE
            WHEN (obf.obs_id IS NOT NULL) THEN ((('NL'::text || (ns_hdo.code)::text) || '_'::text) || (hdo.inspire_id_local_id)::text)
            ELSE NULL::text
        END AS "Geoobject.Identificatie",
    mno.inspire_id_local_id AS "Monster.Identificatie",
    mpn_nst.code AS "Monster.Namespace",
    mno.wkrv_id AS "Monster.Versie",
    cmp.code AS "Compartiment.Code",
    cmp.description AS "Compartiment.Omschrijving",
    orgaan.code AS "Orgaan.Code",
    orgaan.description AS "Orgaan.Omschrijving",
    taxon_type.omschrijving AS "Organisme.Naam",
    smpl.upper_depth_value AS "BeginDiepte_m",
    smpl.lower_depth_value AS "EindDiepte_m",
        CASE
            WHEN (hdh_ud.hdh_id IS NULL) THEN
            CASE
                WHEN (hdh_ld.hdh_id IS NULL) THEN (NULL::text)::character varying
                ELSE hdh_ld.code
            END
            ELSE hdh_ud.code
        END AS "ReferentieVlak.Code",
    mbm.code AS "Monsterbewerkingsmethode.Code",
    mbm.description AS "Monsterbewerkingsmethode.Omschrijving",
    mbm.codespace AS "Monsterbewerkingsmethode.codespace",
    bmm.code AS "Bemonsteringsmethode.Code",
    bmm.description AS "Bemonsteringsmethode.Omschrijving",
        CASE
            WHEN (bmm.code IS NULL) THEN NULL::text
            ELSE 'www.aquo.nl'::text
        END AS "Bemonsteringsmethode.codespace",
        CASE
            WHEN (frac.code IS NULL) THEN biota.code
            ELSE frac.code
        END AS "Monstercriterium.Code",
    var.code AS "veldapparaat.Code",
    var.description AS "veldapparaat.Omschrijving",
    var.codespace AS "veldapparaat.Codespace",
    to_char(smpl.sampling_time, 'YYYY-MM-DD'::text) AS "Monsternemingsdatum",
    to_char(smpl.sampling_time, 'HH24:MM:SS'::text) AS "Monsternemingstijd",
    NULL::integer AS "Monster.Tijd_UTCoffset",
    'EPSG4258'::text AS "ReferentieHorizontaal.code",
    smpl.remarks AS "Monster.Opmerking",
        CASE
            WHEN (mno_smpl.wkrv_id IS NULL) THEN NULL::text
            ELSE ((('NL'::text || (smpl_nst.code)::text) || '_'::text) || (mno_smpl.inspire_id_local_id)::text)
        END AS "GerelateerdMonsterobject",
        CASE
            WHEN (mno_smpl.wkrv_id IS NULL) THEN (NULL::text)::character varying
            ELSE rsfr.code
        END AS "GerelateerdMonsterRol.id",
    obs.obs_id AS "Meetwaarde.Identificatie",
    ('NL'::text || (mpn_nst.code)::text) AS "Meetwaarde.Namespace",
    mno.wkrv_id AS "Meetwaarde.Versie",
    opt.grh_code AS "Grootheid.code",
    opt.grh_omschrijving AS "Grootheid.omschrijving",
    opt.typ_code AS "Typering.code",
    opt.typ_omschrijving AS "Typering.omschrijving",
        CASE
            WHEN (opt.txg_omschrijving IS NOT NULL) THEN 'Biotaxon'::text
            WHEN (opt.chs_code IS NOT NULL) THEN 'ChemischeStof'::text
            WHEN (opt.obj_code IS NOT NULL) THEN 'Object'::text
            ELSE NULL::text
        END AS "Parameter.Groep",
        CASE
            WHEN (opt.txg_omschrijving IS NOT NULL) THEN (NULL::text)::character varying
            WHEN (opt.chs_code IS NOT NULL) THEN opt.chs_code
            WHEN (opt.obj_code IS NOT NULL) THEN opt.obj_code
            ELSE NULL::character varying
        END AS "Parameter.Code",
        CASE
            WHEN (opt.txg_omschrijving IS NOT NULL) THEN opt.txg_omschrijving
            WHEN (opt.chs_code IS NOT NULL) THEN opt.chs_naam
            WHEN (opt.obj_code IS NOT NULL) THEN opt.obj_omschrijving
            ELSE NULL::character varying
        END AS "Parameter.Omschrijving",
    eenh.code AS "Eenheid.code",
    eenh.omschrijving AS "Eenheid.omschrijving",
    opt.hdh_code AS "Hoedanigheid.code",
    opt.hdh_omschrijving AS "Hoedanigheid.omschrijving",
    wbm.code AS "Waardebewerkigngsmethode.code",
        CASE
            WHEN (wbm.code IS NULL) THEN NULL::text
            ELSE 'www.aquo.nl'::text
        END AS "Waardebewerkigngsmethode.codespace",
    wbpm.code AS "Waardebepalingsmethode.code",
        CASE
            WHEN (wbpm.code IS NULL) THEN NULL::text
            ELSE 'www.aquo.nl'::text
        END AS "Waardebepalingsmethode.codespace",
    to_char(obs.phenomenon_time_begin, 'YYYY-MM-DD'::text) AS "Begindatum",
    to_char(obs.phenomenon_time_begin, 'HH24:MM:SS'::text) AS "Begintijd",
    to_char(obs.phenomenon_time_end, 'YYYY-MM-DD'::text) AS "Einddatum",
    to_char(obs.phenomenon_time_end, 'HH24:MM:SS'::text) AS "Eindtijd",
    NULL::integer AS "Meetwaarde.Tijd_UTCoffset",
    to_char(obs.result_time, 'YYYY-MM-DD'::text) AS "Resultaatdatum",
    NULL::integer AS "Resultaat_UTCoffset",
    obs.limit_symbol_id AS "Limietsymbool",
    obs.numeric_value AS "Numeriekewaarde",
    obs.description AS "Alfanumeriekewaarde",
    kwaliteitsoordeel_type.code AS "Kwaliteitsoordeel.code",
    kwaliteitsoordeel_type.description AS "Kwaliteitsoordeel.omschrijving",
    mar.code AS "Meetapparaat.code",
        CASE
            WHEN (mar.code IS NULL) THEN NULL::text
            ELSE 'www.aquo.nl'::text
        END AS "Meetapparaat.codespace",
    bio.levensstadium_code AS "Levensstadium.code",
    bio.lengte_code AS "Lengteklasse.code",
    bio.geslacht_code AS "Geslachtcode",
    bio.verschijning_code AS "Verschijningsvorm.code",
    bio.levensvorm_code AS "Levensvorm.code",
    bio.gedrag_code AS "Gedrag.code",
        CASE
            WHEN (obx.obs_id_target IS NULL) THEN NULL::text
            ELSE ((('NL'::text || (mpn_nst.code)::text) || '_'::text) || (obx.obs_id_target)::text)
        END AS "GerelateerdObservatieobject",
    ocr.code AS "GerelateerdObservatieobjectRol.id",
    obs.remarks AS "Meetwaarde.Opmerking",
    indicator.additional_description AS "Indicator.EUOmschrijving",
    typi.code AS "Indicator.Code",
    typd.code AS "Descriptor.Code",
    descriptor.additional_description AS "Descriptor.EUOmschrijving"
   FROM (((((((((((((((((((((((((((((((((((domains.indicator_descriptor indicator
     JOIN public.observed_property_type opti ON ((indicator.opt_id = opti.opt_id)))
     JOIN public.typering_type typi ON ((opti.indicator_id = typi.typ_id)))
     JOIN domains.indicator_descriptor descriptor ON (((indicator.part_of_idd_id = descriptor.idd_id) AND (descriptor.part_of_idd_id IS NULL))))
     JOIN public.observed_property_type optd ON ((descriptor.opt_id = optd.opt_id)))
     JOIN public.typering_type typd ON ((optd.indicator_id = typd.typ_id)))
     JOIN monprog.quality_element_indicator_descriptor qeid ON ((qeid.idd_id = indicator.idd_id)))
     JOIN public.quality_element qem ON ((qem.qem_id = qeid.qem_id)))
     JOIN public.observing_capability osc ON ((osc.osc_id = qem.osc_id)))
     JOIN public.observing_capability_observation oco ON ((oco.osc_id = osc.osc_id)))
     JOIN public.observation obs ON ((oco.obs_id = obs.obs_id)))
     JOIN public.sample smpl ON ((smpl.smpl_id = obs.mno_id)))
     JOIN public.monitoring_object mno ON ((mno.mno_id = smpl.smpl_id)))
     JOIN public.compartiment_type cmp ON ((smpl.material_class_id = cmp.cptm_id)))
     LEFT JOIN public.hoedanigheid_type hdh_ud ON ((hdh_ud.hdh_id = smpl.upper_depth_condition_id)))
     LEFT JOIN public.hoedanigheid_type hdh_ld ON ((hdh_ld.hdh_id = smpl.lower_depth_condition_id)))
     LEFT JOIN public.taxon_type ON ((smpl.txn_id = taxon_type.txn_id)))
     LEFT JOIN domains.orgaan ON ((orgaan.org_id = smpl.organ_id)))
     LEFT JOIN public.hoedanigheid_type frac ON ((frac.hdh_id = smpl.fraction_criterium_id)))
     LEFT JOIN public.hoedanigheid_type biota ON ((biota.hdh_id = smpl.biota_criterium_id)))
     LEFT JOIN public.eenheid_type eenh_ud ON ((eenh_ud.eenh_id = smpl.upper_depth_uom_id)))
     LEFT JOIN public.eenheid_type eenh_ld ON ((eenh_ld.eenh_id = smpl.lower_depth_uom_id)))
     LEFT JOIN (((public.sampling_proces smp
     LEFT JOIN domains.monsterbewerkingsmethode mbm ON ((mbm.mbm_id = smp.sampling_method_id)))
     LEFT JOIN domains.bemonsteringsmethode bmm ON ((bmm.bmm_id = smp.sampling_processing_method_id)))
     LEFT JOIN domains.veldapparaat var ON ((var.var_id = smp.var_id))) ON ((smp.smp_id = smpl.smp_id)))
     LEFT JOIN public.related_sampling_feature rel_smpl ON ((smpl.smpl_id = rel_smpl.mnf_id_source)))
     LEFT JOIN public.sample smpl2 ON ((smpl.smpl_id = rel_smpl.mnf_id_target)))
     LEFT JOIN (public.monitoring_object mno_mpn
     JOIN public.namespace_type mpn_nst ON ((mpn_nst.ns_id = mno_mpn.inspire_id_namespace_id))) ON (((mno_mpn.mno_id = rel_smpl.mnf_id_target) AND ((mno_mpn.monitoring_object_type)::text <> 'Sample'::text))))
     LEFT JOIN (public.monitoring_object mno_smpl
     JOIN public.namespace_type smpl_nst ON ((smpl_nst.ns_id = mno_smpl.inspire_id_namespace_id))) ON (((smpl2.smpl_id = mno_smpl.mno_id) AND ((mno_smpl.monitoring_object_type)::text = 'Sample'::text))))
     LEFT JOIN public.rel_samp_feat_role_type rsfr ON ((rsfr.rsfr_id = rel_smpl.role_id)))
     LEFT JOIN public.eenheid_type eenh ON ((eenh.eenh_id = obs.numeric_value_uom_id)))
     JOIN opt ON ((opt.opt_id = obs.observed_property_type)))
     LEFT JOIN public.kwaliteitsoordeel_type ON ((obs.quality_indicator_id = kwaliteitsoordeel_type.kwod_id)))
     LEFT JOIN ((public.observation_process obp
     LEFT JOIN public.waarde_bepalings_methode_type wbpm ON ((wbpm.wbpm_id = obp.wbpm_id)))
     LEFT JOIN (public.obs_process_meetapparaat opm
     JOIN domains.meetapparaat mar ON ((mar.mar_id = opm.mar_id))) ON ((opm.obp_id = obp.obp_id))) ON ((obp.obp_id = obs.result_nature_id)))
     LEFT JOIN bio ON ((bio.obs_id = obs.obs_id)))
     LEFT JOIN (public.observation_context obx
     JOIN public.obs_ctx_role_type ocr ON ((ocr.ocr_id = obx.role_id))) ON ((obx.obs_id_source = obs.obs_id)))
     LEFT JOIN public.waarde_bewerkings_methode_type wbm ON ((wbm.wbm_id = obs.value_processing_method_id)))
     LEFT JOIN ((public.observed_feature obf
     JOIN public.hydro_object hdo ON ((obf.hdo_id = hdo.hdo_id)))
     JOIN public.namespace_type ns_hdo ON ((hdo.inspire_id_namespace = ns_hdo.ns_id))) ON ((obs.obs_id = obf.obs_id)));


--
-- Name: vw_monprogs; Type: VIEW; Schema: krm; Owner: -
--

CREATE VIEW vw_monprogs AS
 SELECT txg.txg_id AS "txg.txg_id",
    txg.name AS "txg.name",
    txg.group_type AS "txg.group_type",
    txg.d_begin AS "txg.d_begin",
    txg.d_eind AS "txg.d_eind",
    txg.last_changed_date AS "txg.last_changed_date",
    txg.d_status AS "txg.d_status",
    ojg.ojg_id AS "ojg.ojg_id",
    ojg.name AS "ojg.name",
    ojg.group_type AS "ojg.group_type",
    ojg.d_begin AS "ojg.d_begin",
    ojg.d_eind AS "ojg.d_eind",
    ojg.last_changed_date AS "ojg.last_changed_date",
    ojg.d_status AS "ojg.d_status",
    ssg.ssg_id AS "ssg.ssg_id",
    ssg.name AS "ssg.name",
    ssg.group_type AS "ssg.group_type",
    ssg.d_begin AS "ssg.d_begin",
    ssg.d_eind AS "ssg.d_eind",
    ssg.last_changed_date AS "ssg.last_changed_date",
    ssg.d_status AS "ssg.d_status",
    opt.opt_id AS "opt.opt_id",
    opt.observed_property_type_class AS "opt.observed_property_type_class",
    opt.result_type AS "opt.result_type",
    opt.hoedanigheid_id AS "opt.hoedanigheid_id",
    opt.object_group_id AS "opt.object_group_id",
    opt.quantity_id AS "opt.quantity_id",
    opt.taxa_group_id AS "opt.taxa_group_id",
    opt.substance_group_id AS "opt.substance_group_id",
    opt.indicator_id AS "opt.indicator_id",
    opt.classification_group_id AS "opt.classification_group_id",
    opt.remarks AS "opt.remarks",
    opt.d_begin AS "opt.d_begin",
    opt.d_eind AS "opt.d_eind",
    opt.last_changed_date AS "opt.last_changed_date",
    opt.d_status AS "opt.d_status",
    hdh.hdh_id AS "hdh.hdh_id",
    hdh.code AS "hdh.code",
    hdh.omschrijving AS "hdh.omschrijving",
    hdh.d_begin AS "hdh.d_begin",
    hdh.d_eind AS "hdh.d_eind",
    hdh.last_changed_date AS "hdh.last_changed_date",
    hdh.d_status AS "hdh.d_status",
    hdh.id AS "hdh.id",
    grh.grh_id AS "grh.grh_id",
    grh.code AS "grh.code",
    grh.omschrijving AS "grh.omschrijving",
    grh.d_begin AS "grh.d_begin",
    grh.d_eind AS "grh.d_eind",
    grh.last_changed_date AS "grh.last_changed_date",
    grh.d_status AS "grh.d_status",
    grh.id AS "grh.id",
    typ.typ_id AS "typ.typ_id",
    typ.code AS "typ.code",
    typ.omschrijving AS "typ.omschrijving",
    typ.d_begin AS "typ.d_begin",
    typ.d_eind AS "typ.d_eind",
    typ.last_changed_date AS "typ.last_changed_date",
    typ.d_status AS "typ.d_status",
    typ.id AS "typ.id",
    clsg.clsg_id AS "clsg.clsg_id",
    clsg.code AS "clsg.code",
    clsg.description AS "clsg.description",
    clsg.d_begin AS "clsg.d_begin",
    clsg.d_eind AS "clsg.d_eind",
    clsg.last_changed_date AS "clsg.last_changed_date",
    clsg.d_status AS "clsg.d_status",
    qem.qem_id AS "qem.qem_id",
    qem.osc_id AS "qem.osc_id",
    qem.opt_id AS "qem.opt_id",
    qem.parameter_use_id AS "qem.parameter_use_id",
    qem.cycle_value AS "qem.cycle_value",
    qem.cycle_uom_id AS "qem.cycle_uom_id",
    qem.cycle_description AS "qem.cycle_description",
    qem.frequency_value AS "qem.frequency_value",
    qem.frequency_uom_id AS "qem.frequency_uom_id",
    qem.reason_deviation_program AS "qem.reason_deviation_program",
    qem.last_change_time AS "qem.last_change_time",
    qem.sampling_method_id AS "qem.sampling_method_id",
    qem.sampling_device_id AS "qem.sampling_device_id",
    qem.deviation_program_jn AS "qem.deviation_program_jn",
    qem.opt_uom_id AS "qem.opt_uom_id",
    qem.wbm_id AS "qem.wbm_id",
    qem.remark AS "qem.remark",
    ehd.eenh_id AS "ehd.eenh_id",
    ehd.code AS "ehd.code",
    ehd.omschrijving AS "ehd.omschrijving",
    ehd.d_begin AS "ehd.d_begin",
    ehd.d_eind AS "ehd.d_eind",
    ehd.last_changed_date AS "ehd.last_changed_date",
    ehd.d_status AS "ehd.d_status",
    ehd.id AS "ehd.id",
    var.var_id AS "var.var_id",
    var.code AS "var.code",
    var.description AS "var.description",
    var.d_begin AS "var.d_begin",
    var.d_eind AS "var.d_eind",
    var.last_changed_date AS "var.last_changed_date",
    var.d_status AS "var.d_status",
    var.id AS "var.id",
    var.codespace AS "var.codespace",
    var.groep AS "var.groep",
    wbm.wbm_id AS "wbm.wbm_id",
    wbm.code AS "wbm.code",
    wbm.omschrijving AS "wbm.omschrijving",
    wbm.d_begin AS "wbm.d_begin",
    wbm.d_eind AS "wbm.d_eind",
    wbm.last_changed_date AS "wbm.last_changed_date",
    wbm.d_status AS "wbm.d_status",
    wbm.id AS "wbm.id",
    bmm.bmm_id AS "bmm.bmm_id",
    bmm.code AS "bmm.code ",
    bmm.description AS "bmm.description",
    bmm.groep AS "bmm.groep",
    bmm.titel AS "bmm.titel",
    bmm.d_begin AS "bmm.d_begin",
    bmm.d_eind AS "bmm.d_eind ",
    bmm.last_changed_date AS "bmm.last_changed_date",
    bmm.d_status AS "bmm.d_status ",
    bmm.id AS "bmm.id ",
    osc.osc_id AS "osc.osc_id",
    osc.observing_time_begin AS "osc.observing_time_begin",
    osc.observing_time_end AS "osc.observing_time_end",
    osc.online_resource AS "osc.online_resource",
    osc.process_type_id AS "osc.process_type_id",
    osc.last_change_time AS "osc.last_change_time",
    osc.name AS "osc.name",
    osc.is_sample AS "osc.is_sample",
    osc.wkrv_id AS "osc.wkrv_id",
    moqe.moqe_id AS "moqe.moqe_id",
    moqe.mno_id AS "moqe.mno_id",
    moqe.qem_id AS "moqe.qem_id",
    mno.mno_id AS "mno.mno_id",
    mno.inspire_id_local_id AS "mno.inspire_id_local_id",
    mno.inspire_id_namespace_id AS "mno.inspire_id_namespace_id",
    mno.wkrv_id AS "mno.wkrv_id",
    mno.monitoring_object_type AS "mno.monitoring_object_type",
    mno.name AS "mno.name",
    mno.additional_description AS "mno.additional_description",
    mno.last_change_time AS "mno.last_change_time",
    mno.begin_lifespan_version AS "mno.begin_lifespan_version",
    mno.end_lifespan_version AS "mno.end_lifespan_version",
    mno.primary_geo_column AS "mno.primary_geo_column",
    mno.reason_change AS "mno.reason_change",
    mno.primary_geodetic_reference_id AS "mno.primary_geodetic_reference_id",
    pot.pot_id AS "pot.pot_id",
    pot.qem_id AS "pot.qem_id",
    pot.start_date AS "pot.start_date",
    pot.end_date AS "pot.end_date",
    pot.noof_samples AS "pot.noof_samples",
    pot.samples_bepalingsgrens_id AS "pot.samples_bepalingsgrens_id",
    pot.last_change_time AS "pot.last_change_time",
    bpg.bpg_id AS "bpg.bpg_id",
    bpg.code AS "bpg.code",
    bpg.omschrijving AS "bpg.omschrijving",
    bpg.d_begin AS "bpg.d_begin",
    bpg.d_eind AS "bpg.d_eind",
    bpg.last_changed_date AS "bpg.last_changed_date",
    bpg.d_status AS "bpg.d_status"
   FROM (((((((((((((((((public.observed_property_type opt
     LEFT JOIN public.taxa_group txg ON ((opt.taxa_group_id = txg.txg_id)))
     LEFT JOIN public.object_group ojg ON ((opt.object_group_id = ojg.ojg_id)))
     LEFT JOIN public.substance_group ssg ON ((opt.substance_group_id = ssg.ssg_id)))
     LEFT JOIN public.hoedanigheid_type hdh ON ((hdh.hdh_id = opt.hoedanigheid_id)))
     LEFT JOIN public.grootheid_type grh ON ((grh.grh_id = opt.quantity_id)))
     LEFT JOIN public.typering_type typ ON ((typ.typ_id = opt.indicator_id)))
     LEFT JOIN public.classification_group_type clsg ON ((clsg.clsg_id = opt.classification_group_id)))
     LEFT JOIN public.quality_element qem ON ((qem.opt_id = opt.opt_id)))
     LEFT JOIN public.eenheid_type ehd ON ((ehd.eenh_id = qem.opt_uom_id)))
     LEFT JOIN domains.veldapparaat var ON ((var.var_id = qem.sampling_device_id)))
     LEFT JOIN public.waarde_bewerkings_methode_type wbm ON ((wbm.wbm_id = qem.wbm_id)))
     LEFT JOIN domains.bemonsteringsmethode bmm ON ((bmm.bmm_id = qem.sampling_method_id)))
     LEFT JOIN public.observing_capability osc ON ((osc.osc_id = qem.osc_id)))
     LEFT JOIN public.monitoring_object_quality_element moqe ON ((moqe.qem_id = qem.qem_id)))
     LEFT JOIN public.monitoring_object mno ON ((mno.mno_id = moqe.mno_id)))
     LEFT JOIN monprog.planned_observation_time pot ON ((pot.qem_id = qem.qem_id)))
     LEFT JOIN public.bepaling_grens_type bpg ON ((bpg.bpg_id = pot.samples_bepalingsgrens_id)));


--
-- Name: vw_sf_krm_oud; Type: VIEW; Schema: krm; Owner: -
--

CREATE VIEW vw_sf_krm_oud AS
 WITH bio AS (
         SELECT bio.obs_id,
            gedrag.code AS gedrag_code,
            geslacht.code AS geslacht_code,
            lengte.code AS lengte_code,
            levensstadium.code AS levensstadium_code,
            levensvorm.code AS levensvorm_code,
            verschijning.code AS verschijning_code
           FROM ((((((public.bio_observation bio
             LEFT JOIN public.hoedanigheid_type gedrag ON (((bio.gedrag_id = gedrag.hdh_id) AND (bio.gedrag_id IS NOT NULL))))
             LEFT JOIN public.hoedanigheid_type geslacht ON (((bio.geslacht_id = geslacht.hdh_id) AND (bio.geslacht_id IS NOT NULL))))
             LEFT JOIN public.hoedanigheid_type lengte ON (((bio.lengte_klasse_id = lengte.hdh_id) AND (bio.lengte_klasse_id IS NOT NULL))))
             LEFT JOIN public.hoedanigheid_type levensstadium ON (((bio.levensstadium_id = levensstadium.hdh_id) AND (bio.levensstadium_id IS NOT NULL))))
             LEFT JOIN public.hoedanigheid_type levensvorm ON (((bio.levensvorm_id = levensvorm.hdh_id) AND (bio.levensvorm_id IS NOT NULL))))
             LEFT JOIN public.hoedanigheid_type verschijning ON (((bio.verschijningsvorm_id = verschijning.hdh_id) AND (bio.verschijningsvorm_id IS NOT NULL))))
          WHERE ((bio.gedrag_id IS NOT NULL) AND (bio.geslacht_id IS NOT NULL) AND (bio.lengte_klasse_id IS NOT NULL) AND (bio.levensstadium_id IS NOT NULL) AND (bio.levensvorm_id IS NOT NULL) AND (bio.verschijningsvorm_id IS NOT NULL))
        ), opt AS (
         SELECT opt.opt_id,
            grh.code AS grh_code,
            grh.omschrijving AS grh_omschrijving,
            typ.code AS typ_code,
            typ.omschrijving AS typ_omschrijving,
            txt.omschrijving AS txg_omschrijving,
            chs.code AS chs_code,
            chs.naam AS chs_naam,
            obj.code AS obj_code,
            obj.omschrijving AS obj_omschrijving,
            hdh.code AS hdh_code,
            hdh.omschrijving AS hdh_omschrijving
           FROM ((((((public.observed_property_type opt
             LEFT JOIN public.grootheid_type grh ON (((grh.grh_id = opt.quantity_id) AND (opt.quantity_id IS NOT NULL))))
             LEFT JOIN public.typering_type typ ON (((typ.typ_id = opt.indicator_id) AND (opt.indicator_id IS NOT NULL))))
             LEFT JOIN public.hoedanigheid_type hdh ON (((hdh.hdh_id = opt.hoedanigheid_id) AND (opt.hoedanigheid_id IS NOT NULL))))
             LEFT JOIN ((public.taxa_group txg
             JOIN public.taxa_group_element tge ON ((tge.txg_id = txg.txg_id)))
             JOIN public.taxon_type txt ON ((txt.txn_id = tge.txn_id))) ON (((txg.txg_id = opt.taxa_group_id) AND ((txg.group_type)::text = 'I'::text))))
             LEFT JOIN ((public.substance_group ssg
             JOIN public.substance_group_element ssge ON ((ssge.ssge_id = ssg.ssg_id)))
             JOIN public.chemische_stof_type chs ON ((chs.chs_id = ssge.chs_id))) ON (((ssg.ssg_id = opt.substance_group_id) AND ((ssg.group_type)::text = 'I'::text))))
             LEFT JOIN ((public.object_group ojg
             JOIN public.object_group_element ojge ON ((ojg.ojg_id = ojge.ojg_id)))
             JOIN public.object_type obj ON ((obj.obj_id = ojge.obj_id))) ON (((ojg.ojg_id = opt.object_group_id) AND ((ojg.group_type)::text = 'I'::text))))
        )
 SELECT mno.mno_id,
    qeid.qem_id,
    qeid.idd_id,
    ((osc.osc_id)::text || (obs.obs_id)::text) AS unique_key,
    ((('NL'::text || (mno_nst.code)::text) || '_'::text) || (mno.inspire_id_local_id)::text) AS "Meetpunt.Identificatie",
    public.st_x(public.st_transform(public.st_centroid(mno.geometry_etrs89), 4258)) AS "GeometriePunt.X",
    public.st_y(public.st_transform(public.st_centroid(mno.geometry_etrs89), 4258)) AS "GeometriePunt.Y",
        CASE
            WHEN (obf.obs_id IS NOT NULL) THEN (('NL'::text || (ns_hdo.code)::text) || (hdo.inspire_id_local_id)::text)
            ELSE
            CASE
                WHEN ((mno.monitoring_object_type)::text = 'Sample'::text) THEN NULL::text
                ELSE ((('NL'::text || (mno_nst.code)::text) || '_AQUO_COMPARTIMENT:'::text) || (compartiment_type.code)::text)
            END
        END AS "Geoobject.Identificatie",
    NULL::text AS "Monster.Identificatie",
    NULL::text AS "Monster.Namespace",
    NULL::integer AS "Monster.Versie",
    NULL::text AS "Compartiment.Code",
    NULL::text AS "Compartiment.Omschrijving",
    NULL::text AS "Orgaan.Code",
    NULL::text AS "Orgaan.Omschrijving",
    NULL::text AS "Organisme.Naam",
    NULL::numeric AS "BeginDiepte_m",
    NULL::numeric AS "EindDiepte_m",
    NULL::text AS "ReferentieVlak.Code",
    NULL::text AS "Monsterbewerkingsmethode.Code",
    NULL::text AS "Monsterbewerkingsmethode.Omschrijving",
    NULL::text AS "Monsterbewerkingsmethode.codespace",
    NULL::text AS "Bemonsteringsmethode.Code",
    NULL::text AS "Bemonsteringsmethode.Omschrijving",
    NULL::text AS "Bemonsteringsmethode.codespace",
    NULL::text AS "Monstercriterium.Code",
    NULL::text AS "veldapparaat.Code",
    NULL::text AS "veldapparaat.Omschrijving",
    NULL::text AS "veldapparaat.Codespace",
    NULL::text AS "Monsternemingsdatum",
    NULL::text AS "Monsternemingstijd",
    NULL::integer AS "Monster.Tijd_UTCoffset",
    NULL::text AS "ReferentieHorizontaal.code",
    NULL::text AS "Monster.Opmerking",
    NULL::text AS "GerelateerdMonsterobject",
    NULL::text AS "GerelateerdMonsterRol.id",
    obs.obs_id AS "Meetwaarde.Identificatie",
    ('NL'::text || (mno_nst.code)::text) AS "Meetwaarde.Namespace",
    mno.wkrv_id AS "Meetwaarde.Versie",
    opt.grh_code AS "Grootheid.code",
    opt.grh_omschrijving AS "Grootheid.omschrijving",
    opt.typ_code AS "Typering.code",
    opt.typ_omschrijving AS "Typering.omschrijving",
        CASE
            WHEN (opt.txg_omschrijving IS NOT NULL) THEN 'Biotaxon'::text
            WHEN (opt.chs_code IS NOT NULL) THEN 'ChemischeStof'::text
            WHEN (opt.obj_code IS NOT NULL) THEN 'Object'::text
            ELSE NULL::text
        END AS "Parameter.Groep",
        CASE
            WHEN (opt.txg_omschrijving IS NOT NULL) THEN (NULL::text)::character varying
            WHEN (opt.chs_code IS NOT NULL) THEN opt.chs_code
            WHEN (opt.obj_code IS NOT NULL) THEN opt.obj_code
            ELSE NULL::character varying
        END AS "Parameter.Code",
        CASE
            WHEN (opt.txg_omschrijving IS NOT NULL) THEN opt.txg_omschrijving
            WHEN (opt.chs_code IS NOT NULL) THEN opt.chs_naam
            WHEN (opt.obj_code IS NOT NULL) THEN opt.obj_omschrijving
            ELSE NULL::character varying
        END AS "Parameter.Omschrijving",
    eenh.code AS "Eenheid.code",
    eenh.omschrijving AS "Eenheid.omschrijving",
    opt.hdh_code AS "Hoedanigheid.code",
    opt.hdh_omschrijving AS "Hoedanigheid.omschrijving",
    wbm.code AS "Waardebewerkigngsmethode.code",
        CASE
            WHEN (wbm.code IS NULL) THEN NULL::text
            ELSE 'www.aquo.nl'::text
        END AS "Waardebewerkigngsmethode.codespace",
    wbpm.code AS "Waardebepalingsmethode.code",
        CASE
            WHEN (wbpm.code IS NULL) THEN NULL::text
            ELSE 'www.aquo.nl'::text
        END AS "Waardebepalingsmethode.codespace",
    to_char(obs.phenomenon_time_begin, 'YYYY-MM-DD'::text) AS "Begindatum",
    to_char(obs.phenomenon_time_begin, 'HH24:MM:SS'::text) AS "Begintijd",
    to_char(obs.phenomenon_time_end, 'YYYY-MM-DD'::text) AS "Einddatum",
    to_char(obs.phenomenon_time_end, 'HH24:MM:SS'::text) AS "Eindtijd",
    NULL::integer AS "Meetwaarde.Tijd_UTCoffset",
    to_char(obs.result_time, 'YYYY-MM-DD'::text) AS "Resultaatdatum",
    NULL::integer AS "Resultaat_UTCoffset",
    obs.limit_symbol_id AS "Limietsymbool",
    obs.numeric_value AS "Numeriekewaarde",
    obs.description AS "Alfanumeriekewaarde",
    kwaliteitsoordeel_type.code AS "Kwaliteitsoordeel.code",
    kwaliteitsoordeel_type.description AS "Kwaliteitsoordeel.omschrijving",
    mar.code AS "Meetapparaat.code",
        CASE
            WHEN (mar.code IS NULL) THEN NULL::text
            ELSE 'www.aquo.nl'::text
        END AS "Meetapparaat.codespace",
    bio.levensstadium_code AS "Levensstadium.code",
    bio.lengte_code AS "Lengteklasse.code",
    bio.geslacht_code AS "Geslachtcode",
    bio.verschijning_code AS "Verschijningsvorm.code",
    bio.levensvorm_code AS "Levensvorm.code",
    bio.gedrag_code AS "Gedrag.code",
        CASE
            WHEN (obx.obs_id_target IS NULL) THEN NULL::text
            ELSE ((('NL'::text || (mno_nst.code)::text) || '_'::text) || (obx.obs_id_target)::text)
        END AS "GerelateerdObservatieobject",
    ocr.code AS "GerelateerdObservatieobjectRol.id",
    obs.remarks AS "Meetwaarde.Opmerking",
    indicator.additional_description AS "Indicator.EUOmschrijving",
    typi.code AS "Indicator.Code",
    typd.code AS "Descriptor.Code",
    descriptor.additional_description AS "Descriptor.EUOmschrijving"
   FROM (((((((((((((((((((domains.indicator_descriptor indicator
     JOIN public.observed_property_type opti ON ((indicator.opt_id = opti.opt_id)))
     JOIN public.typering_type typi ON ((opti.indicator_id = typi.typ_id)))
     JOIN domains.indicator_descriptor descriptor ON (((indicator.part_of_idd_id = descriptor.idd_id) AND (descriptor.part_of_idd_id IS NULL))))
     JOIN public.observed_property_type optd ON ((descriptor.opt_id = optd.opt_id)))
     JOIN public.typering_type typd ON ((optd.indicator_id = typd.typ_id)))
     JOIN monprog.quality_element_indicator_descriptor qeid ON ((qeid.idd_id = indicator.idd_id)))
     JOIN public.quality_element qem ON ((qem.qem_id = qeid.qem_id)))
     JOIN public.observing_capability osc ON ((osc.osc_id = qem.osc_id)))
     JOIN public.observing_capability_observation oco ON ((oco.osc_id = osc.osc_id)))
     JOIN public.observation obs ON ((oco.obs_id = obs.obs_id)))
     JOIN ((public.monitoring_object mno
     LEFT JOIN (public.monitored_compartiment
     JOIN public.compartiment_type ON ((monitored_compartiment.cptm_id = compartiment_type.cptm_id))) ON ((monitored_compartiment.mno_id = mno.mno_id)))
     JOIN public.namespace_type mno_nst ON ((mno_nst.ns_id = mno.inspire_id_namespace_id))) ON (((mno.mno_id = obs.mno_id) AND ((mno.monitoring_object_type)::text <> 'Sample'::text))))
     LEFT JOIN public.eenheid_type eenh ON ((eenh.eenh_id = obs.numeric_value_uom_id)))
     JOIN opt ON ((opt.opt_id = obs.observed_property_type)))
     LEFT JOIN public.kwaliteitsoordeel_type ON ((obs.quality_indicator_id = kwaliteitsoordeel_type.kwod_id)))
     LEFT JOIN ((public.observation_process obp
     LEFT JOIN public.waarde_bepalings_methode_type wbpm ON ((wbpm.wbpm_id = obp.wbpm_id)))
     LEFT JOIN (public.obs_process_meetapparaat opm
     JOIN domains.meetapparaat mar ON ((mar.mar_id = opm.mar_id))) ON ((opm.obp_id = obp.obp_id))) ON ((obp.obp_id = obs.result_nature_id)))
     LEFT JOIN bio ON ((bio.obs_id = obs.obs_id)))
     LEFT JOIN (public.observation_context obx
     JOIN public.obs_ctx_role_type ocr ON ((ocr.ocr_id = obx.role_id))) ON ((obx.obs_id_source = obs.obs_id)))
     LEFT JOIN public.waarde_bewerkings_methode_type wbm ON ((wbm.wbm_id = obs.value_processing_method_id)))
     LEFT JOIN ((public.observed_feature obf
     JOIN public.hydro_object hdo ON ((obf.hdo_id = hdo.hdo_id)))
     JOIN public.namespace_type ns_hdo ON ((hdo.inspire_id_namespace = ns_hdo.ns_id))) ON (((obs.obs_id = obf.obs_id) AND (mno.wkrv_id = hdo.wkrv_id))))
UNION ALL
 SELECT mno.mno_id,
    qeid.qem_id,
    qeid.idd_id,
    ((osc.osc_id)::text || (obs.obs_id)::text) AS unique_key,
    ((('NL'::text || (mpn_nst.code)::text) || '_'::text) || (mno_mpn.inspire_id_local_id)::text) AS "Meetpunt.Identificatie",
    public.st_x(public.st_transform(public.st_centroid(mno.geometry_etrs89), 4258)) AS "GeometriePunt.X",
    public.st_y(public.st_transform(public.st_centroid(mno.geometry_etrs89), 4258)) AS "GeometriePunt.Y",
        CASE
            WHEN (obf.obs_id IS NOT NULL) THEN ((('NL'::text || (ns_hdo.code)::text) || '_'::text) || (hdo.inspire_id_local_id)::text)
            ELSE NULL::text
        END AS "Geoobject.Identificatie",
    mno.inspire_id_local_id AS "Monster.Identificatie",
    mpn_nst.code AS "Monster.Namespace",
    mno.wkrv_id AS "Monster.Versie",
    cmp.code AS "Compartiment.Code",
    cmp.description AS "Compartiment.Omschrijving",
    orgaan.code AS "Orgaan.Code",
    orgaan.description AS "Orgaan.Omschrijving",
    taxon_type.omschrijving AS "Organisme.Naam",
    smpl.upper_depth_value AS "BeginDiepte_m",
    smpl.lower_depth_value AS "EindDiepte_m",
        CASE
            WHEN (hdh_ud.hdh_id IS NULL) THEN
            CASE
                WHEN (hdh_ld.hdh_id IS NULL) THEN (NULL::text)::character varying
                ELSE hdh_ld.code
            END
            ELSE hdh_ud.code
        END AS "ReferentieVlak.Code",
    mbm.code AS "Monsterbewerkingsmethode.Code",
    mbm.description AS "Monsterbewerkingsmethode.Omschrijving",
    mbm.codespace AS "Monsterbewerkingsmethode.codespace",
    bmm.code AS "Bemonsteringsmethode.Code",
    bmm.description AS "Bemonsteringsmethode.Omschrijving",
        CASE
            WHEN (bmm.code IS NULL) THEN NULL::text
            ELSE 'www.aquo.nl'::text
        END AS "Bemonsteringsmethode.codespace",
        CASE
            WHEN (frac.code IS NULL) THEN biota.code
            ELSE frac.code
        END AS "Monstercriterium.Code",
    var.code AS "veldapparaat.Code",
    var.description AS "veldapparaat.Omschrijving",
    var.codespace AS "veldapparaat.Codespace",
    to_char(smpl.sampling_time, 'YYYY-MM-DD'::text) AS "Monsternemingsdatum",
    to_char(smpl.sampling_time, 'HH24:MM:SS'::text) AS "Monsternemingstijd",
    NULL::integer AS "Monster.Tijd_UTCoffset",
    'EPSG4258'::text AS "ReferentieHorizontaal.code",
    smpl.remarks AS "Monster.Opmerking",
        CASE
            WHEN (mno_smpl.wkrv_id IS NULL) THEN NULL::text
            ELSE ((('NL'::text || (smpl_nst.code)::text) || '_'::text) || (mno_smpl.inspire_id_local_id)::text)
        END AS "GerelateerdMonsterobject",
        CASE
            WHEN (mno_smpl.wkrv_id IS NULL) THEN (NULL::text)::character varying
            ELSE rsfr.code
        END AS "GerelateerdMonsterRol.id",
    obs.obs_id AS "Meetwaarde.Identificatie",
    ('NL'::text || (mpn_nst.code)::text) AS "Meetwaarde.Namespace",
    mno.wkrv_id AS "Meetwaarde.Versie",
    opt.grh_code AS "Grootheid.code",
    opt.grh_omschrijving AS "Grootheid.omschrijving",
    opt.typ_code AS "Typering.code",
    opt.typ_omschrijving AS "Typering.omschrijving",
        CASE
            WHEN (opt.txg_omschrijving IS NOT NULL) THEN 'Biotaxon'::text
            WHEN (opt.chs_code IS NOT NULL) THEN 'ChemischeStof'::text
            WHEN (opt.obj_code IS NOT NULL) THEN 'Object'::text
            ELSE NULL::text
        END AS "Parameter.Groep",
        CASE
            WHEN (opt.txg_omschrijving IS NOT NULL) THEN (NULL::text)::character varying
            WHEN (opt.chs_code IS NOT NULL) THEN opt.chs_code
            WHEN (opt.obj_code IS NOT NULL) THEN opt.obj_code
            ELSE NULL::character varying
        END AS "Parameter.Code",
        CASE
            WHEN (opt.txg_omschrijving IS NOT NULL) THEN opt.txg_omschrijving
            WHEN (opt.chs_code IS NOT NULL) THEN opt.chs_naam
            WHEN (opt.obj_code IS NOT NULL) THEN opt.obj_omschrijving
            ELSE NULL::character varying
        END AS "Parameter.Omschrijving",
    eenh.code AS "Eenheid.code",
    eenh.omschrijving AS "Eenheid.omschrijving",
    opt.hdh_code AS "Hoedanigheid.code",
    opt.hdh_omschrijving AS "Hoedanigheid.omschrijving",
    wbm.code AS "Waardebewerkigngsmethode.code",
        CASE
            WHEN (wbm.code IS NULL) THEN NULL::text
            ELSE 'www.aquo.nl'::text
        END AS "Waardebewerkigngsmethode.codespace",
    wbpm.code AS "Waardebepalingsmethode.code",
        CASE
            WHEN (wbpm.code IS NULL) THEN NULL::text
            ELSE 'www.aquo.nl'::text
        END AS "Waardebepalingsmethode.codespace",
    to_char(obs.phenomenon_time_begin, 'YYYY-MM-DD'::text) AS "Begindatum",
    to_char(obs.phenomenon_time_begin, 'HH24:MM:SS'::text) AS "Begintijd",
    to_char(obs.phenomenon_time_end, 'YYYY-MM-DD'::text) AS "Einddatum",
    to_char(obs.phenomenon_time_end, 'HH24:MM:SS'::text) AS "Eindtijd",
    NULL::integer AS "Meetwaarde.Tijd_UTCoffset",
    to_char(obs.result_time, 'YYYY-MM-DD'::text) AS "Resultaatdatum",
    NULL::integer AS "Resultaat_UTCoffset",
    obs.limit_symbol_id AS "Limietsymbool",
    obs.numeric_value AS "Numeriekewaarde",
    obs.description AS "Alfanumeriekewaarde",
    kwaliteitsoordeel_type.code AS "Kwaliteitsoordeel.code",
    kwaliteitsoordeel_type.description AS "Kwaliteitsoordeel.omschrijving",
    mar.code AS "Meetapparaat.code",
        CASE
            WHEN (mar.code IS NULL) THEN NULL::text
            ELSE 'www.aquo.nl'::text
        END AS "Meetapparaat.codespace",
    bio.levensstadium_code AS "Levensstadium.code",
    bio.lengte_code AS "Lengteklasse.code",
    bio.geslacht_code AS "Geslachtcode",
    bio.verschijning_code AS "Verschijningsvorm.code",
    bio.levensvorm_code AS "Levensvorm.code",
    bio.gedrag_code AS "Gedrag.code",
        CASE
            WHEN (obx.obs_id_target IS NULL) THEN NULL::text
            ELSE ((('NL'::text || (mpn_nst.code)::text) || '_'::text) || (obx.obs_id_target)::text)
        END AS "GerelateerdObservatieobject",
    ocr.code AS "GerelateerdObservatieobjectRol.id",
    obs.remarks AS "Meetwaarde.Opmerking",
    indicator.additional_description AS "Indicator.EUOmschrijving",
    typi.code AS "Indicator.Code",
    typd.code AS "Descriptor.Code",
    descriptor.additional_description AS "Descriptor.EUOmschrijving"
   FROM (((((((((((((((((((((((((((((((((((domains.indicator_descriptor indicator
     JOIN public.observed_property_type opti ON ((indicator.opt_id = opti.opt_id)))
     JOIN public.typering_type typi ON ((opti.indicator_id = typi.typ_id)))
     JOIN domains.indicator_descriptor descriptor ON (((indicator.part_of_idd_id = descriptor.idd_id) AND (descriptor.part_of_idd_id IS NULL))))
     JOIN public.observed_property_type optd ON ((descriptor.opt_id = optd.opt_id)))
     JOIN public.typering_type typd ON ((optd.indicator_id = typd.typ_id)))
     JOIN monprog.quality_element_indicator_descriptor qeid ON ((qeid.idd_id = indicator.idd_id)))
     JOIN public.quality_element qem ON ((qem.qem_id = qeid.qem_id)))
     JOIN public.observing_capability osc ON ((osc.osc_id = qem.osc_id)))
     JOIN public.observing_capability_observation oco ON ((oco.osc_id = osc.osc_id)))
     JOIN public.observation obs ON ((oco.obs_id = obs.obs_id)))
     JOIN public.sample smpl ON ((smpl.smpl_id = obs.mno_id)))
     JOIN public.monitoring_object mno ON ((mno.mno_id = smpl.smpl_id)))
     JOIN public.compartiment_type cmp ON ((smpl.material_class_id = cmp.cptm_id)))
     LEFT JOIN public.hoedanigheid_type hdh_ud ON ((hdh_ud.hdh_id = smpl.upper_depth_condition_id)))
     LEFT JOIN public.hoedanigheid_type hdh_ld ON ((hdh_ld.hdh_id = smpl.lower_depth_condition_id)))
     LEFT JOIN public.taxon_type ON ((smpl.txn_id = taxon_type.txn_id)))
     LEFT JOIN domains.orgaan ON ((orgaan.org_id = smpl.organ_id)))
     LEFT JOIN public.hoedanigheid_type frac ON ((frac.hdh_id = smpl.fraction_criterium_id)))
     LEFT JOIN public.hoedanigheid_type biota ON ((biota.hdh_id = smpl.biota_criterium_id)))
     LEFT JOIN public.eenheid_type eenh_ud ON ((eenh_ud.eenh_id = smpl.upper_depth_uom_id)))
     LEFT JOIN public.eenheid_type eenh_ld ON ((eenh_ld.eenh_id = smpl.lower_depth_uom_id)))
     LEFT JOIN (((public.sampling_proces smp
     LEFT JOIN domains.monsterbewerkingsmethode mbm ON ((mbm.mbm_id = smp.sampling_method_id)))
     LEFT JOIN domains.bemonsteringsmethode bmm ON ((bmm.bmm_id = smp.sampling_processing_method_id)))
     LEFT JOIN domains.veldapparaat var ON ((var.var_id = smp.var_id))) ON ((smp.smp_id = smpl.smp_id)))
     LEFT JOIN public.related_sampling_feature rel_smpl ON ((smpl.smpl_id = rel_smpl.mnf_id_source)))
     LEFT JOIN public.sample smpl2 ON ((smpl.smpl_id = rel_smpl.mnf_id_target)))
     LEFT JOIN (public.monitoring_object mno_mpn
     JOIN public.namespace_type mpn_nst ON ((mpn_nst.ns_id = mno_mpn.inspire_id_namespace_id))) ON (((mno_mpn.mno_id = rel_smpl.mnf_id_target) AND ((mno_mpn.monitoring_object_type)::text <> 'Sample'::text))))
     LEFT JOIN (public.monitoring_object mno_smpl
     JOIN public.namespace_type smpl_nst ON ((smpl_nst.ns_id = mno_smpl.inspire_id_namespace_id))) ON (((smpl2.smpl_id = mno_smpl.mno_id) AND ((mno_smpl.monitoring_object_type)::text = 'Sample'::text))))
     LEFT JOIN public.rel_samp_feat_role_type rsfr ON ((rsfr.rsfr_id = rel_smpl.role_id)))
     LEFT JOIN public.eenheid_type eenh ON ((eenh.eenh_id = obs.numeric_value_uom_id)))
     JOIN opt ON ((opt.opt_id = obs.observed_property_type)))
     LEFT JOIN public.kwaliteitsoordeel_type ON ((obs.quality_indicator_id = kwaliteitsoordeel_type.kwod_id)))
     LEFT JOIN ((public.observation_process obp
     LEFT JOIN public.waarde_bepalings_methode_type wbpm ON ((wbpm.wbpm_id = obp.wbpm_id)))
     LEFT JOIN (public.obs_process_meetapparaat opm
     JOIN domains.meetapparaat mar ON ((mar.mar_id = opm.mar_id))) ON ((opm.obp_id = obp.obp_id))) ON ((obp.obp_id = obs.result_nature_id)))
     LEFT JOIN bio ON ((bio.obs_id = obs.obs_id)))
     LEFT JOIN (public.observation_context obx
     JOIN public.obs_ctx_role_type ocr ON ((ocr.ocr_id = obx.role_id))) ON ((obx.obs_id_source = obs.obs_id)))
     LEFT JOIN public.waarde_bewerkings_methode_type wbm ON ((wbm.wbm_id = obs.value_processing_method_id)))
     LEFT JOIN ((public.observed_feature obf
     JOIN public.hydro_object hdo ON ((obf.hdo_id = hdo.hdo_id)))
     JOIN public.namespace_type ns_hdo ON ((hdo.inspire_id_namespace = ns_hdo.ns_id))) ON ((obs.obs_id = obf.obs_id)));


SET search_path = monprog, pg_catalog;

--
-- Name: planned_observation_time_pot_id_seq; Type: SEQUENCE; Schema: monprog; Owner: -
--

CREATE SEQUENCE planned_observation_time_pot_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: planned_observation_time_pot_id_seq; Type: SEQUENCE OWNED BY; Schema: monprog; Owner: -
--

ALTER SEQUENCE planned_observation_time_pot_id_seq OWNED BY planned_observation_time.pot_id;


SET search_path = public, pg_catalog;

--
-- Name: Actie; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE "Actie" (
    id integer NOT NULL,
    code character varying(100) NOT NULL,
    naam character varying(100) NOT NULL,
    omschrijving character varying(255)
);


--
-- Name: Actie_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE "Actie_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: Actie_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE "Actie_id_seq" OWNED BY "Actie".id;


--
-- Name: VerwerkingsVerslag; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE "VerwerkingsVerslag" (
    id integer NOT NULL,
    "correlatieId" character varying(100) NOT NULL,
    "actieId" integer NOT NULL,
    "gestartOp" timestamp without time zone NOT NULL,
    "verwerkingsVerslagStatusId" integer NOT NULL,
    "gestartDoor" character varying(50) NOT NULL,
    "gestoptOp" timestamp without time zone NOT NULL
);


--
-- Name: VerwerkingsVerslagParameter; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE "VerwerkingsVerslagParameter" (
    id integer NOT NULL,
    "verwerkingsVerslagId" integer NOT NULL,
    "parameterNaam" character varying(100) NOT NULL,
    waarde character varying(1000) NOT NULL
);


--
-- Name: VerwerkingsVerslagParameter_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE "VerwerkingsVerslagParameter_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: VerwerkingsVerslagParameter_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE "VerwerkingsVerslagParameter_id_seq" OWNED BY "VerwerkingsVerslagParameter".id;


--
-- Name: VerwerkingsVerslagRegel; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE "VerwerkingsVerslagRegel" (
    id integer NOT NULL,
    "verwerkingsVerslagId" integer NOT NULL,
    "verwerkingsVerslagRegelSoortId" integer NOT NULL,
    "gestartOp" timestamp without time zone NOT NULL,
    "omschrijvingSjabloon" character varying(255) NOT NULL,
    waarde1 text NOT NULL,
    waarde2 text,
    waarde3 text,
    "sortOrder" integer NOT NULL
);


--
-- Name: VerwerkingsVerslagRegelSoort; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE "VerwerkingsVerslagRegelSoort" (
    id integer NOT NULL,
    code character varying(100) NOT NULL,
    naam character varying(100) NOT NULL,
    omschrijving character varying(255)
);


--
-- Name: VerwerkingsVerslagRegelSoort_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE "VerwerkingsVerslagRegelSoort_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: VerwerkingsVerslagRegelSoort_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE "VerwerkingsVerslagRegelSoort_id_seq" OWNED BY "VerwerkingsVerslagRegelSoort".id;


--
-- Name: VerwerkingsVerslagRegel_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE "VerwerkingsVerslagRegel_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: VerwerkingsVerslagRegel_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE "VerwerkingsVerslagRegel_id_seq" OWNED BY "VerwerkingsVerslagRegel".id;


--
-- Name: VerwerkingsVerslagStatus; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE "VerwerkingsVerslagStatus" (
    id integer NOT NULL,
    code character varying(100) NOT NULL,
    naam character varying(100) NOT NULL,
    omschrijving character varying(255)
);


--
-- Name: VerwerkingsVerslagStatus_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE "VerwerkingsVerslagStatus_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: VerwerkingsVerslagStatus_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE "VerwerkingsVerslagStatus_id_seq" OWNED BY "VerwerkingsVerslagStatus".id;


--
-- Name: VerwerkingsVerslag_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE "VerwerkingsVerslag_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: VerwerkingsVerslag_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE "VerwerkingsVerslag_id_seq" OWNED BY "VerwerkingsVerslag".id;


--
-- Name: _aquo_ds_biotaxon_20160202; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE _aquo_ds_biotaxon_20160202 (
    id integer,
    naam character varying(100),
    auteur character varying(100),
    taxonniveau character varying(100),
    taxonouder character varying(100),
    verwijsnaam character varying(100),
    naam_nederlands character varying(100),
    twnmutatiedatum timestamp without time zone,
    twnstatus integer,
    d_begin timestamp without time zone,
    d_eind timestamp without time zone,
    d_status character varying(50) DEFAULT 'Gepubliceerd'::character varying
);


--
-- Name: TABLE _aquo_ds_biotaxon_20160202; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON TABLE _aquo_ds_biotaxon_20160202 IS 'Hulptabel. Alle kolommen met kleine letters overgenomen van Aquo DS Biotaxon op 2016-02-02';


--
-- Name: _hab_ds; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE _hab_ds (
    id integer NOT NULL,
    geom geometry(MultiPolygon,28992),
    naam_n2k character varying(64),
    vhn_new integer,
    nr integer,
    tranche integer,
    beschermin character varying(50),
    status character varying(60),
    sitecode_v character varying(16),
    sitecode_h character varying(16),
    area numeric,
    perimeter numeric
);


--
-- Name: _hab_ds_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE _hab_ds_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: _hab_ds_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE _hab_ds_id_seq OWNED BY _hab_ds.id;


--
-- Name: _vog_ds; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE _vog_ds (
    id integer NOT NULL,
    geom geometry(MultiPolygon,28992),
    naam_n2k character varying(64),
    vhn_new integer,
    nr integer,
    tranche integer,
    beschermin character varying(50),
    status character varying(60),
    sitecode_v character varying(16),
    sitecode_h character varying(16),
    area numeric,
    perimeter numeric
);


--
-- Name: _vog_ds_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE _vog_ds_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: _vog_ds_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE _vog_ds_id_seq OWNED BY _vog_ds.id;


--
-- Name: aquo_kit_voor_opt_id; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE aquo_kit_voor_opt_id (
    grootheid_code character varying(50),
    biotaxon_aquo character varying(90),
    hoedanigheid_code character varying(50),
    taxa_group_name character varying(90),
    type_stof character varying(50) DEFAULT 'Biotaxon'::character varying
);


--
-- Name: _vw_aquo_kit_voor_opt_id; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW _vw_aquo_kit_voor_opt_id AS
 SELECT tgr.txg_id AS tgr_txg_id,
    tgr.name AS tgr_name,
    tgr.group_type AS tgr_group_type,
    tgr.d_begin AS tgr_d_begin,
    tgr.d_eind AS tgr_d_eind,
    tgr.last_changed_date AS tgr_last_changed_date,
    tgr.d_status AS tgr_d_status,
    aoi.grootheid_code AS aoi_grootheid_code,
    aoi.biotaxon_aquo AS aoi_biotaxon_aquo,
    aoi.hoedanigheid_code AS aoi_hoedanigheid_code,
    aoi.taxa_group_name AS aoi_taxa_group_name,
    aoi.type_stof AS aoi_type_stof,
    adb.id AS adb_txn_id,
    adb.naam AS adb_naam,
    adb.auteur AS adb_auteur,
    adb.taxonniveau AS adb_taxonniveau,
    adb.taxonouder AS adb_taxonouder,
    adb.verwijsnaam AS adb_verwijsnaam,
    adb.naam_nederlands AS adb_naam_nederlands,
    adb.twnmutatiedatum AS adb_twnmutatiedatum,
    adb.twnstatus AS adb_twnstatus,
    adb.d_begin AS adb_d_begin,
    adb.d_eind AS adb_d_eind,
    adb.d_status AS adb_d_status
   FROM ((taxa_group tgr
     JOIN _aquo_ds_biotaxon_20160202 adb ON (((adb.naam)::text = (tgr.name)::text)))
     JOIN aquo_kit_voor_opt_id aoi ON (((aoi.biotaxon_aquo)::text = (tgr.name)::text)))
  WHERE (((tgr.group_type)::text = 'I'::text) AND ((adb.twnstatus = 10) OR (adb.twnstatus = 80) OR ((adb.twnstatus = 20) AND (adb.verwijsnaam IS NOT NULL)) OR ((adb.twnstatus = 30) AND (adb.verwijsnaam IS NOT NULL))));


--
-- Name: abstraction_point; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE abstraction_point (
    asp_id integer NOT NULL,
    wbd_id integer NOT NULL,
    geometry geometry(MultiPoint,28992),
    last_change_time timestamp without time zone NOT NULL,
    asp_type character varying(50)
);


--
-- Name: ground_water_body; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE ground_water_body (
    gwb_id integer NOT NULL,
    area double precision NOT NULL,
    centroid geometry(Point,28992) NOT NULL,
    is_out_of_rbd boolean DEFAULT false,
    is_transboundary boolean,
    average_depth_value double precision,
    average_depth_uom_id integer,
    average_thickness_value double precision,
    average_thickness_uom_id integer,
    capacity_value double precision,
    capacity_uom_id integer,
    depth_range_id integer,
    geological_formation_id integer,
    vertical_orientation_id integer,
    horizon_id integer NOT NULL,
    substrate_id integer NOT NULL,
    is_layered boolean,
    is_linked_to_terrestrial_ecosystems boolean,
    other_pressure_description character varying(3000),
    other_impact_description character varying(100),
    last_change_time timestamp without time zone NOT NULL,
    significantlychanged boolean,
    reason_change_old text,
    rct_id integer
);


--
-- Name: gw_abstraction_point; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE gw_abstraction_point (
    gasp_id integer NOT NULL,
    company character varying(50),
    rewab_code integer,
    rewab_id integer NOT NULL,
    last_change_time timestamp without time zone NOT NULL
);


--
-- Name: rewab_type; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE rewab_type (
    rwb_id integer NOT NULL,
    code character varying(50),
    description text,
    d_begin timestamp without time zone,
    d_eind timestamp without time zone,
    last_changed_date timestamp without time zone,
    d_status character varying(50) DEFAULT 'Gepubliceerd'::character varying
);


--
-- Name: substrate_type; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE substrate_type (
    sub_id integer NOT NULL,
    omschrijving character varying(50),
    d_begin timestamp without time zone,
    d_eind timestamp without time zone,
    last_changed_date timestamp without time zone,
    d_status character varying(50) DEFAULT 'Gepubliceerd'::character varying,
    code character varying(50)
);


--
-- Name: vw_grondwaterlichamen; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_grondwaterlichamen AS
 SELECT DISTINCT ON (vw_waterlichamen.db_id) vw_waterlichamen.db_id,
    vw_waterlichamen.identificatie,
    vw_waterlichamen.waterbeheerder_code,
    vw_waterlichamen.omschrijving,
    vw_waterlichamen.schaal,
    vw_waterlichamen.stroomgebieddistrict,
    ground_water_body.area AS oppervlakte_waarde,
    ground_water_body.is_out_of_rbd AS is_buiten_deelstroomgebied,
    ground_water_body.is_transboundary AS is_grensoverschrijdend,
    ground_water_body.average_depth_value AS gemiddelde_diepte_waarde,
    ground_water_body.average_depth_uom_id,
    ground_water_body.average_thickness_value AS gemiddelde_dikte_waarde,
    ground_water_body.average_thickness_uom_id,
    ground_water_body.capacity_value AS volume_waarde,
    ground_water_body.capacity_uom_id,
    ground_water_body.depth_range_id,
    ground_water_body.geological_formation_id,
    ground_water_body.vertical_orientation_id,
    ground_water_body.horizon_id AS horizon,
    substrate_type.omschrijving AS substraat,
    ground_water_body.is_layered AS is_gelaagd,
    ground_water_body.is_linked_to_terrestrial_ecosystems AS heeft_link_terrestrische_ecosystemen,
    ground_water_body.other_pressure_description AS heeft_overige_belastingen,
    ground_water_body.other_impact_description AS heeft_overige_invloeden,
    vw_waterlichamen.karakterschets,
    vw_waterlichamen.drinkwateronttrekking_jn,
    vw_waterlichamen.versie,
    vw_waterlichamen.versie_begintijd,
    vw_waterlichamen.versie_eindtijd,
    vw_waterlichamen."Gerelateerd_HydroObject"
   FROM ((((hydro_object
     LEFT JOIN vw_waterlichamen ON ((hydro_object.hdo_id = vw_waterlichamen.db_id)))
     LEFT JOIN water_body ON ((water_body.wbd_id = hydro_object.hdo_id)))
     LEFT JOIN ground_water_body ON ((hydro_object.hdo_id = ground_water_body.gwb_id)))
     JOIN substrate_type ON ((substrate_type.sub_id = ground_water_body.substrate_id)));


--
-- Name: vw_gw_onttrekking_g; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_gw_onttrekking_g AS
 SELECT hydro_object.hdo_id AS "DB_ID",
    hydro_object.inspire_id_local_id AS "Identificatie",
    hdo_names.name AS omschrijving,
    abstraction_point.geometry,
    gw_abstraction_point.company AS bedrijf,
    rewab_type.rwb_id AS "REWAB_DB_ID",
    gw_abstraction_point.rewab_code AS "REWAB_Code",
    rewab_type.description AS "REWAB_Type",
    hydro_object.wkrv_id AS wkr_versie,
    vw_grondwaterlichamen.stroomgebieddistrict AS "Stroomgebieddistrict"
   FROM (((((hydro_object
     LEFT JOIN hdo_names ON ((hdo_names.hdo_id = hydro_object.hdo_id)))
     JOIN abstraction_point ON ((hydro_object.hdo_id = abstraction_point.asp_id)))
     JOIN gw_abstraction_point ON ((hydro_object.hdo_id = gw_abstraction_point.gasp_id)))
     JOIN rewab_type ON ((rewab_type.rwb_id = gw_abstraction_point.rewab_id)))
     LEFT JOIN vw_grondwaterlichamen ON ((vw_grondwaterlichamen.db_id = abstraction_point.wbd_id)));


--
-- Name: vw_oppervlaktewaterlichaam_l_kaart; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_oppervlaktewaterlichaam_l_kaart AS
 SELECT swb.swb_id AS db_id,
    hydro_object.inspire_id_local_id AS owmident,
    mrz.geometry,
    hydro_object.wkrv_id AS versie
   FROM ((surface_water_body swb
     LEFT JOIN hydro_object ON ((swb.swb_id = hydro_object.hdo_id)))
     LEFT JOIN management_regulation_or_restriction_zone mrz ON ((swb.swb_id = mrz.mrz_id)))
  WHERE (geometrytype(mrz.geometry) = 'MULTILINESTRING'::text);


--
-- Name: vw_oppervlaktewaterlichaam_v_kaart; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_oppervlaktewaterlichaam_v_kaart AS
 SELECT swb.swb_id AS db_id,
    hydro_object.inspire_id_local_id AS owmident,
    mrz.geometry,
    hydro_object.wkrv_id AS versie
   FROM ((surface_water_body swb
     LEFT JOIN hydro_object ON ((swb.swb_id = hydro_object.hdo_id)))
     LEFT JOIN management_regulation_or_restriction_zone mrz ON ((swb.swb_id = mrz.mrz_id)))
  WHERE (geometrytype(mrz.geometry) = 'MULTIPOLYGON'::text);


--
-- Name: _vw_buffer_waterlichamen_onttrekkingen_g; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW _vw_buffer_waterlichamen_onttrekkingen_g AS
 SELECT o."DB_ID",
    o."Identificatie",
    o.omschrijving,
    o.geometry,
    o.bedrijf,
    o."REWAB_DB_ID",
    o."REWAB_Code",
    o."REWAB_Type",
    o.wkr_versie,
    o."Stroomgebieddistrict",
    st_distance(p.geometry, o.geometry) AS st_distance,
    p.owmident
   FROM vw_gw_onttrekking_g o,
    vw_oppervlaktewaterlichaam_l_kaart p
UNION ALL
 SELECT o."DB_ID",
    o."Identificatie",
    o.omschrijving,
    o.geometry,
    o.bedrijf,
    o."REWAB_DB_ID",
    o."REWAB_Code",
    o."REWAB_Type",
    o.wkr_versie,
    o."Stroomgebieddistrict",
    st_distance(p.geometry, o.geometry) AS st_distance,
    p.owmident
   FROM vw_gw_onttrekking_g o,
    vw_oppervlaktewaterlichaam_v_kaart p;


--
-- Name: _vw_deelstroomgebieddistricten_shape; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW _vw_deelstroomgebieddistricten_shape AS
 SELECT DISTINCT ON (hydro_object.inspire_id_local_id) hydro_object.inspire_id_local_id AS "IDENT",
    hdo_names.name AS "NAAM",
    management_regulation_or_restriction_zone.geometry,
    river_basin_disrict.area_value AS "OPP",
    eenheid_type.code AS "OPP_EENH"
   FROM (((((hydro_object
     LEFT JOIN hdo_names ON ((hdo_names.hdo_id = hydro_object.hdo_id)))
     JOIN management_regulation_or_restriction_zone ON ((hydro_object.hdo_id = management_regulation_or_restriction_zone.mrz_id)))
     JOIN river_basin_disrict ON ((hydro_object.hdo_id = river_basin_disrict.rbd_id)))
     JOIN eenheid_type ON ((eenheid_type.eenh_id = river_basin_disrict.area_uom_id)))
     JOIN wkr_version ON ((wkr_version.wkrv_id = hydro_object.wkrv_id)))
  WHERE ((river_basin_disrict.part_of_district IS NOT NULL) AND (hydro_object.wkrv_id = 13))
  ORDER BY hydro_object.inspire_id_local_id, wkr_version.wkrv_id DESC;


--
-- Name: geological_formation_type; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE geological_formation_type (
    gfm_id integer NOT NULL,
    code character varying(50) NOT NULL,
    d_begin timestamp without time zone,
    d_eind timestamp without time zone,
    last_changed_date timestamp without time zone,
    d_status character varying(50) DEFAULT 'Gepubliceerd'::character varying
);


--
-- Name: gw_vertical_orientation_type; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE gw_vertical_orientation_type (
    gvo_id integer NOT NULL,
    code character varying(50) NOT NULL,
    d_begin timestamp without time zone,
    d_eind timestamp without time zone,
    last_changed_date timestamp without time zone,
    d_status character varying(50) DEFAULT 'Gepubliceerd'::character varying
);


--
-- Name: _vw_grondwaterlichamen_shape; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW _vw_grondwaterlichamen_shape AS
 SELECT hydro_object.inspire_id_local_id AS gwbident,
    hydro_object.inspire_id_namespace AS namespac,
    water_body.is_article_7 AS gwbcons,
    hdo_names.name AS gwbnaam,
    management_regulation_or_restriction_zone.geometry,
    hdo2.inspire_id_local_id AS sgbident,
    water_body.level_of_detail AS schaal,
    ground_water_body.area AS oppvte_km2,
    ground_water_body.is_transboundary AS grensovs,
    ground_water_body.average_depth_value AS gemdiepte_m,
    ground_water_body.average_thickness_value AS gemdikte_m,
    ground_water_body.capacity_value AS volme_km3,
    ground_water_body.horizon_id AS gwbhoriz,
    ground_water_body.is_layered AS gelaagd,
    ground_water_body.is_linked_to_terrestrial_ecosystems AS gwb_ter,
    geological_formation_type.code AS gwbaquif,
    gw_vertical_orientation_type.code AS gwbverto
   FROM ((((((((hydro_object
     LEFT JOIN hdo_names ON ((hdo_names.hdo_id = hydro_object.hdo_id)))
     LEFT JOIN management_regulation_or_restriction_zone ON ((management_regulation_or_restriction_zone.mrz_id = hydro_object.hdo_id)))
     LEFT JOIN water_body ON ((water_body.wbd_id = hydro_object.hdo_id)))
     JOIN hydro_object hdo2 ON ((hdo2.hdo_id = water_body.rbd_id)))
     LEFT JOIN ground_water_body ON ((ground_water_body.gwb_id = hydro_object.hdo_id)))
     JOIN substrate_type ON ((substrate_type.sub_id = ground_water_body.substrate_id)))
     LEFT JOIN geological_formation_type ON ((geological_formation_type.gfm_id = ground_water_body.geological_formation_id)))
     LEFT JOIN gw_vertical_orientation_type ON ((gw_vertical_orientation_type.gvo_id = ground_water_body.vertical_orientation_id)))
  WHERE (hydro_object.wkrv_id = 13);


--
-- Name: _vw_meetnet_meetpunt_g; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW _vw_meetnet_meetpunt_g AS
 SELECT ((vw_meetnetten.db_id)::text || (vw_meetpunten_g.db_id)::text) AS uniquekey,
    vw_meetnetten.db_id AS "Meetnet_DB_ID",
    vw_meetnetten.identificatie AS "Meetnet_Identificatie",
    vw_meetnetten.omschrijving AS "Meetnet_Omschrijving",
    vw_meetnetten."Toelichting:" AS "Meetnet_Toelichting",
    vw_meetpunten_g.db_id AS "Meetpunt_DB_ID",
    vw_meetpunten_g.identificatie AS "Meetpunt_Identificatie",
    vw_meetpunten_g.waterbeheerder_code AS "Meetpunt_Waterbeheerdercode",
    vw_meetpunten_g.waterbeheerder_omschrijving AS "Meetpunt_Omschrijving",
    vw_meetpunten_g.wkr_versie,
    vw_meetpunten_g.omschrijving,
    vw_meetpunten_g.toelichting,
    vw_meetpunten_g.geometry
   FROM ((network_facility
     LEFT JOIN vw_meetnetten ON ((vw_meetnetten.db_id = network_facility.emn_id)))
     LEFT JOIN vw_meetpunten_g ON ((vw_meetpunten_g.db_id = network_facility.emf_id)))
  ORDER BY vw_meetnetten.identificatie;


--
-- Name: sw_typology_type; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE sw_typology_type (
    styp_id integer NOT NULL,
    code character varying(12) NOT NULL,
    description character varying(90),
    swc_id integer NOT NULL,
    is_freshwater boolean DEFAULT true NOT NULL,
    icalt_id integer DEFAULT 12 NOT NULL,
    true_swc_id integer NOT NULL,
    d_begin timestamp without time zone,
    d_eind timestamp without time zone,
    last_changed_date timestamp without time zone,
    d_status character varying(50) DEFAULT 'Gepubliceerd'::character varying
);


--
-- Name: _vw_oppervlaktewaterlichamen_g_type; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW _vw_oppervlaktewaterlichamen_g_type AS
 SELECT hydro_object.hdo_id AS db_id,
    hydro_object.inspire_id_local_id AS identificatie,
    hydro_object.inspire_id_namespace AS waterbeheerder_code,
    water_body.is_article_7 AS drinkwateronttrekking_jn,
    hdo_names.name AS omschrijving,
    management_regulation_or_restriction_zone.geometry,
    geometrytype(management_regulation_or_restriction_zone.geometry) AS geometry_type,
    hdo2.inspire_id_local_id AS stroomgebieddistrict,
    hydro_object.wkrv_id AS versie,
    surface_water_body.is_artificial AS is_kunstmatig,
    surface_water_body.is_heaviliy_modified AS is_sterk_veranderd,
    type.code AS type,
    typer.code AS referentietype
   FROM (((((((management_regulation_or_restriction_zone
     JOIN hydro_object ON ((management_regulation_or_restriction_zone.mrz_id = hydro_object.hdo_id)))
     JOIN water_body ON ((water_body.wbd_id = hydro_object.hdo_id)))
     LEFT JOIN hdo_names ON ((hdo_names.hdo_id = hydro_object.hdo_id)))
     JOIN hydro_object hdo2 ON ((hdo2.hdo_id = water_body.rbd_id)))
     JOIN surface_water_body ON ((surface_water_body.swb_id = hydro_object.hdo_id)))
     JOIN sw_typology_type type ON ((type.styp_id = surface_water_body.sw_typology_id)))
     JOIN sw_typology_type typer ON ((typer.styp_id = surface_water_body.sw_target_typology_id)));


--
-- Name: _vw_oppervlaktewaterlichamen_shape; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW _vw_oppervlaktewaterlichamen_shape AS
 SELECT hydro_object.hdo_id AS db_id,
    hydro_object.inspire_id_local_id AS owmident,
    hydro_object.inspire_id_namespace AS namespac,
    water_body.is_article_7 AS owmcons,
    hdo_names.name AS owmnaam,
    management_regulation_or_restriction_zone.geometry,
    hdo2.inspire_id_local_id AS sgbident,
        CASE
            WHEN (surface_water_body.is_artificial = true) THEN 'Kunstmatig'::text
            WHEN (surface_water_body.is_heaviliy_modified = true) THEN 'Sterk veranderd'::text
            ELSE 'Natuurlijk'::text
        END AS owmstat,
    surface_water_body.area_value AS oppvte,
    surface_water_body.length_value AS lengte,
    type.code AS owmtype,
    typer.code AS owmtyped,
    water_body.level_of_detail AS schaal,
    management_regulation_or_restriction_zone.begin_designation AS geldig_b,
    management_regulation_or_restriction_zone.end_designation AS geldig_e,
    geometrytype(management_regulation_or_restriction_zone.geometry) AS gtype
   FROM ((((((((surface_water_body
     LEFT JOIN hydro_object ON ((surface_water_body.swb_id = hydro_object.hdo_id)))
     LEFT JOIN hdo_names ON ((hdo_names.hdo_id = hydro_object.hdo_id)))
     LEFT JOIN wkr_version ON ((wkr_version.wkrv_id = hydro_object.wkrv_id)))
     LEFT JOIN management_regulation_or_restriction_zone ON ((management_regulation_or_restriction_zone.mrz_id = hydro_object.hdo_id)))
     LEFT JOIN water_body ON ((water_body.wbd_id = hydro_object.hdo_id)))
     LEFT JOIN hydro_object hdo2 ON ((hdo2.hdo_id = water_body.rbd_id)))
     LEFT JOIN sw_typology_type type ON ((type.styp_id = surface_water_body.sw_typology_id)))
     LEFT JOIN sw_typology_type typer ON ((typer.styp_id = surface_water_body.sw_target_typology_id)))
  WHERE (hydro_object.wkrv_id = 13)
  ORDER BY hydro_object.inspire_id_local_id, wkr_version.wkrv_id DESC;


--
-- Name: _vw_oppervlaktewaterlichamen_shape_v4; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW _vw_oppervlaktewaterlichamen_shape_v4 AS
 SELECT hydro_object.hdo_id AS db_id,
    hydro_object.inspire_id_local_id AS owmident,
    hydro_object.inspire_id_namespace AS namespac,
    water_body.is_article_7 AS owmcons,
    hdo_names.name AS owmnaam,
    management_regulation_or_restriction_zone.geometry,
    hdo2.inspire_id_local_id AS sgbident,
        CASE
            WHEN (surface_water_body.is_artificial = true) THEN 'Kunstmatig'::text
            WHEN (surface_water_body.is_heaviliy_modified = true) THEN 'Sterk veranderd'::text
            ELSE 'Natuurlijk'::text
        END AS owmstat,
    surface_water_body.area_value AS oppvte,
    surface_water_body.length_value AS lengte,
    type.code AS owmtype,
    typer.code AS owmtyped,
    water_body.level_of_detail AS schaal,
    management_regulation_or_restriction_zone.begin_designation AS geldig_b,
    management_regulation_or_restriction_zone.end_designation AS geldig_e,
    geometrytype(management_regulation_or_restriction_zone.geometry) AS gtype
   FROM ((((((((surface_water_body
     LEFT JOIN hydro_object ON ((surface_water_body.swb_id = hydro_object.hdo_id)))
     LEFT JOIN hdo_names ON ((hdo_names.hdo_id = hydro_object.hdo_id)))
     LEFT JOIN wkr_version ON ((wkr_version.wkrv_id = hydro_object.wkrv_id)))
     LEFT JOIN management_regulation_or_restriction_zone ON ((management_regulation_or_restriction_zone.mrz_id = hydro_object.hdo_id)))
     LEFT JOIN water_body ON ((water_body.wbd_id = hydro_object.hdo_id)))
     LEFT JOIN hydro_object hdo2 ON ((hdo2.hdo_id = water_body.rbd_id)))
     LEFT JOIN sw_typology_type type ON ((type.styp_id = surface_water_body.sw_typology_id)))
     LEFT JOIN sw_typology_type typer ON ((typer.styp_id = surface_water_body.sw_target_typology_id)))
  WHERE (hydro_object.wkrv_id = 4)
  ORDER BY hydro_object.inspire_id_local_id, wkr_version.wkrv_id DESC;


--
-- Name: protected_area_type; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE protected_area_type (
    pat_id integer NOT NULL,
    code character varying(12),
    sw_type boolean,
    gw_type boolean,
    description character varying(90) NOT NULL,
    d_begin timestamp without time zone,
    d_eind timestamp without time zone,
    last_changed_date timestamp without time zone,
    d_status character varying(50) DEFAULT 'Gepubliceerd'::character varying
);


--
-- Name: wfd_protected_area; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE wfd_protected_area (
    wpa_id integer NOT NULL,
    geometry geometry(Geometry,28992),
    comment_value_status_prot_area character varying(50) NOT NULL,
    protected_area_type_id integer NOT NULL,
    protected_area_status_id integer NOT NULL,
    swb_art7_id integer,
    gwb_art7_id integer,
    last_change_time timestamp without time zone NOT NULL
);


--
-- Name: _vw_register_beschermdegebieden_shape; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW _vw_register_beschermdegebieden_shape AS
 SELECT hydro_object.inspire_id_local_id AS besident,
    hdo_names.name AS besnaam,
    protected_area_type.description AS bessoort,
    wfd_protected_area.comment_value_status_prot_area AS richtlijn,
    mrz.geometry,
    hydro_object.wkrv_id AS versie,
    geometrytype(mrz.geometry) AS geometrytype,
    concat(row_number() OVER (ORDER BY hydro_object.inspire_id_local_id), hydro_object.hdo_id, hydro_object.inspire_id_local_id) AS "Unique_Key"
   FROM (((((hydro_object
     LEFT JOIN hdo_names ON ((hdo_names.hdo_id = hydro_object.hdo_id)))
     JOIN wkr_version ON ((wkr_version.wkrv_id = hydro_object.wkrv_id)))
     LEFT JOIN management_regulation_or_restriction_zone mrz ON ((mrz.mrz_id = hydro_object.hdo_id)))
     JOIN wfd_protected_area ON ((wfd_protected_area.wpa_id = hydro_object.hdo_id)))
     JOIN protected_area_type ON ((protected_area_type.pat_id = wfd_protected_area.protected_area_type_id)))
UNION ALL
 SELECT hydro_object.inspire_id_local_id AS besident,
    hdo_names.name AS besnaam,
    (('OnttrekkingMenselijkeConsumptie ('::text ||
        CASE
            WHEN ((hydro_object.hydro_object_type)::text = 'SurfaceWaterBody'::text) THEN 'Oppervlaktewater'::text
            ELSE 'Grondwater'::text
        END) || ')'::text) AS bessoort,
    'Kaderrichtlijn Water (2000/60/EC), Artikel 7'::text AS richtlijn,
    mrz.geometry,
    hydro_object.wkrv_id AS versie,
    geometrytype(mrz.geometry) AS geometrytype,
    concat(row_number() OVER (ORDER BY hydro_object.inspire_id_local_id), hydro_object.hdo_id, hydro_object.inspire_id_local_id) AS "Unique_Key"
   FROM ((((hydro_object
     LEFT JOIN hdo_names ON ((hdo_names.hdo_id = hydro_object.hdo_id)))
     JOIN wkr_version ON ((wkr_version.wkrv_id = hydro_object.wkrv_id)))
     LEFT JOIN management_regulation_or_restriction_zone mrz ON ((mrz.mrz_id = hydro_object.hdo_id)))
     JOIN water_body ON ((water_body.wbd_id = hydro_object.hdo_id)))
  WHERE (water_body.is_article_7 IS TRUE);


--
-- Name: _vw_stroomgebieddistricten_shape; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW _vw_stroomgebieddistricten_shape AS
 SELECT DISTINCT ON (hydro_object.inspire_id_local_id) hydro_object.inspire_id_local_id AS "IDENT",
    hdo_names.name AS "NAAM",
    management_regulation_or_restriction_zone.geometry,
    river_basin_disrict.area_value AS "OPP",
    eenheid_type.code AS "OPP_EENH"
   FROM (((((hydro_object
     LEFT JOIN hdo_names ON ((hdo_names.hdo_id = hydro_object.hdo_id)))
     JOIN management_regulation_or_restriction_zone ON ((hydro_object.hdo_id = management_regulation_or_restriction_zone.mrz_id)))
     JOIN river_basin_disrict ON ((hydro_object.hdo_id = river_basin_disrict.rbd_id)))
     JOIN eenheid_type ON ((eenheid_type.eenh_id = river_basin_disrict.area_uom_id)))
     JOIN wkr_version ON ((wkr_version.wkrv_id = hydro_object.wkrv_id)))
  WHERE (river_basin_disrict.international_rbd IS NOT NULL)
  ORDER BY hydro_object.inspire_id_local_id, wkr_version.wkrv_id DESC;


--
-- Name: vw_grondwaterlichaam_kaart; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_grondwaterlichaam_kaart AS
 SELECT gwb.gwb_id AS db_id,
    hydro_object.inspire_id_local_id AS gwbident,
    mrz.geometry,
    hydro_object.wkrv_id AS versie
   FROM ((ground_water_body gwb
     LEFT JOIN hydro_object ON ((gwb.gwb_id = hydro_object.hdo_id)))
     LEFT JOIN management_regulation_or_restriction_zone mrz ON ((gwb.gwb_id = mrz.mrz_id)));


--
-- Name: _vw_test_buffer_ab_g; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW _vw_test_buffer_ab_g AS
 SELECT a."DB_ID",
    a."Identificatie",
    a.omschrijving,
    st_within(a.geometry, st_buffer(b.geometry, (10000)::double precision)) AS binnen_buffer,
    a.geometry,
    a.bedrijf,
    a."REWAB_DB_ID",
    a."REWAB_Code",
    a."REWAB_Type",
    a.wkr_versie,
    a."Stroomgebieddistrict"
   FROM vw_gw_onttrekking_g a,
    vw_grondwaterlichaam_kaart b
  WHERE (geometrytype(a.geometry) = 'MULTIPOINT'::text);


--
-- Name: activity_organisation_category; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE activity_organisation_category (
    isac_id integer NOT NULL,
    ocat_id integer NOT NULL,
    last_change_time timestamp without time zone NOT NULL
);


--
-- Name: any_thematic_link; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE any_thematic_link (
    atl_id integer NOT NULL,
    emf_id integer NOT NULL,
    related_emf_id integer NOT NULL,
    comment text NOT NULL,
    last_change_time timestamp without time zone NOT NULL
);


--
-- Name: any_thematic_link_atl_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE any_thematic_link_atl_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: any_thematic_link_atl_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE any_thematic_link_atl_id_seq OWNED BY any_thematic_link.atl_id;


--
-- Name: application; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE application (
    applicationid integer NOT NULL,
    applicationname character varying(235) NOT NULL,
    description character varying(256)
);


--
-- Name: application_applicationid_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE application_applicationid_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: application_applicationid_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE application_applicationid_seq OWNED BY application.applicationid;


--
-- Name: basic_measure113a_type; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE basic_measure113a_type (
    bma_id integer NOT NULL,
    name character varying(90) NOT NULL,
    d_begin timestamp without time zone,
    d_eind timestamp without time zone,
    last_changed_date timestamp without time zone,
    d_status character varying(50) DEFAULT 'Gepubliceerd'::character varying
);


--
-- Name: basic_measure113a_type_bma_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE basic_measure113a_type_bma_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: basic_measure113a_type_bma_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE basic_measure113a_type_bma_id_seq OWNED BY basic_measure113a_type.bma_id;


--
-- Name: bepaling_grens_type_bpg_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE bepaling_grens_type_bpg_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: bepaling_grens_type_bpg_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE bepaling_grens_type_bpg_id_seq OWNED BY bepaling_grens_type.bpg_id;


--
-- Name: bronnen; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE bronnen (
    bronnen_id integer NOT NULL,
    hdo_id integer NOT NULL,
    chs_id integer NOT NULL,
    wbpm_id integer NOT NULL,
    eenh_id integer NOT NULL,
    year integer NOT NULL,
    is_significant_wbm boolean DEFAULT false NOT NULL,
    is_significant_factsheet boolean DEFAULT false NOT NULL
);


--
-- Name: bronnen_bronnen_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE bronnen_bronnen_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: bronnen_bronnen_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE bronnen_bronnen_id_seq OWNED BY bronnen.bronnen_id;


--
-- Name: ca_role_code; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE ca_role_code (
    crc_id integer NOT NULL,
    role_code character varying(12) NOT NULL,
    description text,
    lgr_id integer DEFAULT 1
);


--
-- Name: ca_role_code_crc_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE ca_role_code_crc_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: ca_role_code_crc_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE ca_role_code_crc_id_seq OWNED BY ca_role_code.crc_id;


--
-- Name: chemical_exceedance; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE chemical_exceedance (
    sys_id integer NOT NULL,
    chs_id integer NOT NULL,
    last_change_time timestamp without time zone NOT NULL
);


--
-- Name: chemische_stof_type_chs_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE chemische_stof_type_chs_id_seq
    START WITH 3019
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: chemische_stof_type_chs_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE chemische_stof_type_chs_id_seq OWNED BY chemische_stof_type.chs_id;


--
-- Name: classification_group_type_clsg_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE classification_group_type_clsg_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: classification_group_type_clsg_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE classification_group_type_clsg_id_seq OWNED BY classification_group_type.clsg_id;


--
-- Name: classification_type_cls_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE classification_type_cls_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: classification_type_cls_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE classification_type_cls_id_seq OWNED BY classification_type.cls_id;


--
-- Name: compartiment_type_cptm_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE compartiment_type_cptm_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: compartiment_type_cptm_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE compartiment_type_cptm_id_seq OWNED BY compartiment_type.cptm_id;


--
-- Name: competent_authority_roles; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE competent_authority_roles (
    ore_id integer NOT NULL,
    crc_id integer NOT NULL,
    last_change_time timestamp without time zone NOT NULL,
    main boolean DEFAULT true,
    guid uuid DEFAULT uuid_in((md5(((random())::text || (now())::text)))::cstring) NOT NULL
);


--
-- Name: competentauthority_namespacetype_ca_ns_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE competentauthority_namespacetype_ca_ns_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: competentauthority_namespacetype_ca_ns_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE competentauthority_namespacetype_ca_ns_id_seq OWNED BY competentauthority_namespacetype.ca_ns_id;


--
-- Name: condition_of_gw_type; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE condition_of_gw_type (
    cog_id integer NOT NULL,
    code character varying(50) NOT NULL,
    d_begin timestamp without time zone,
    d_eind timestamp without time zone,
    last_changed_date timestamp without time zone,
    d_status character varying(50) DEFAULT 'Gepubliceerd'::character varying
);


--
-- Name: condition_of_gw_type_cog_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE condition_of_gw_type_cog_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: condition_of_gw_type_cog_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE condition_of_gw_type_cog_id_seq OWNED BY condition_of_gw_type.cog_id;


--
-- Name: csvtransformation; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE csvtransformation (
    csvtransformationid integer NOT NULL,
    csvtype character varying(256) NOT NULL,
    columnname character varying(256) NOT NULL,
    datatype character varying(15) NOT NULL,
    mandatory boolean NOT NULL,
    inputorder integer NOT NULL
);


--
-- Name: csvtransformation_csvtransformationid_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE csvtransformation_csvtransformationid_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: csvtransformation_csvtransformationid_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE csvtransformation_csvtransformationid_seq OWNED BY csvtransformation.csvtransformationid;


--
-- Name: depth_range_type; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE depth_range_type (
    dpr_id integer NOT NULL,
    code character varying(50) NOT NULL,
    d_begin timestamp without time zone,
    d_eind timestamp without time zone,
    last_changed_date timestamp without time zone,
    d_status character varying(50) DEFAULT 'Gepubliceerd'::character varying
);


--
-- Name: depth_range_type_dpr_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE depth_range_type_dpr_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: depth_range_type_dpr_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE depth_range_type_dpr_id_seq OWNED BY depth_range_type.dpr_id;


--
-- Name: domaintable_changes; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE domaintable_changes (
    domaintable_changes_id integer NOT NULL,
    wkp_table_name character varying(255) NOT NULL,
    ds_table_name character varying(255) NOT NULL,
    last_imported_date timestamp without time zone NOT NULL,
    isimported boolean DEFAULT false NOT NULL
);


--
-- Name: domaintable_changes_domaintable_changes_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE domaintable_changes_domaintable_changes_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: domaintable_changes_domaintable_changes_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE domaintable_changes_domaintable_changes_id_seq OWNED BY domaintable_changes.domaintable_changes_id;


--
-- Name: eenheid_type_eenh_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE eenheid_type_eenh_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: eenheid_type_eenh_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE eenheid_type_eenh_id_seq OWNED BY eenheid_type.eenh_id;


--
-- Name: environmental_domain_code; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE environmental_domain_code (
    emd_id integer NOT NULL,
    code character varying(50) NOT NULL,
    description character varying(50) NOT NULL
);


--
-- Name: environmental_domain_code_emd_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE environmental_domain_code_emd_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: environmental_domain_code_emd_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE environmental_domain_code_emd_id_seq OWNED BY environmental_domain_code.emd_id;


--
-- Name: eu_article_43b_type; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE eu_article_43b_type (
    a43b_id integer NOT NULL,
    omschrijving character varying(100),
    show boolean,
    d_begin timestamp without time zone,
    d_eind timestamp without time zone,
    last_changed_date timestamp without time zone,
    d_status character varying(50) DEFAULT 'Gepubliceerd'::character varying
);


--
-- Name: eu_article_43b_type_a43b_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE eu_article_43b_type_a43b_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: eu_article_43b_type_a43b_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE eu_article_43b_type_a43b_id_seq OWNED BY eu_article_43b_type.a43b_id;


--
-- Name: eu_depth_level_type; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE eu_depth_level_type (
    dlt_id integer NOT NULL,
    code character varying(50) NOT NULL,
    description character varying(50),
    d_begin timestamp without time zone,
    d_eind timestamp without time zone,
    last_changed_date timestamp without time zone,
    d_status character varying(50) DEFAULT 'Gepubliceerd'::character varying
);


--
-- Name: eu_depth_level_type_dlt_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE eu_depth_level_type_dlt_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: eu_depth_level_type_dlt_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE eu_depth_level_type_dlt_id_seq OWNED BY eu_depth_level_type.dlt_id;


--
-- Name: eu_function_43a_type; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE eu_function_43a_type (
    fu43_id integer NOT NULL,
    function character varying(150),
    d_begin timestamp without time zone,
    d_eind timestamp without time zone,
    last_changed_date timestamp without time zone,
    d_status character varying(50) DEFAULT 'Gepubliceerd'::character varying
);


--
-- Name: eu_fund_type; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE eu_fund_type (
    euf_id integer NOT NULL,
    code character varying(50) NOT NULL,
    description character varying(50) NOT NULL,
    d_begin timestamp without time zone,
    d_eind timestamp without time zone,
    last_changed_date timestamp without time zone,
    d_status character varying(50) DEFAULT 'Gepubliceerd'::character varying,
    id integer
);


--
-- Name: eu_fund_type_euf_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE eu_fund_type_euf_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: eu_fund_type_euf_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE eu_fund_type_euf_id_seq OWNED BY eu_fund_type.euf_id;


--
-- Name: eu_intercalibration_type; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE eu_intercalibration_type (
    icalt integer NOT NULL,
    code character varying(50) NOT NULL,
    description text,
    d_begin timestamp without time zone,
    d_eind timestamp without time zone,
    last_changed_date timestamp without time zone,
    d_status character varying(50) DEFAULT 'Gepubliceerd'::character varying,
    eu_xsd character varying(250)
);


--
-- Name: eu_monitoring_goal_type_eumg_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE eu_monitoring_goal_type_eumg_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: eu_monitoring_goal_type_eumg_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE eu_monitoring_goal_type_eumg_id_seq OWNED BY eu_monitoring_goal_type.eumg_id;


--
-- Name: eu_monitoring_type; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE eu_monitoring_type (
    mtt_id integer NOT NULL,
    code character varying(50) NOT NULL,
    description character varying(50),
    sw_or_gw character varying(2),
    d_begin timestamp without time zone,
    d_eind timestamp without time zone,
    last_changed_date timestamp without time zone,
    d_status character varying(50) DEFAULT 'Gepubliceerd'::character varying
);


--
-- Name: COLUMN eu_monitoring_type.sw_or_gw; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN eu_monitoring_type.sw_or_gw IS 'monitoring type for sw or gw?';


--
-- Name: eu_monitoring_type_mtt_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE eu_monitoring_type_mtt_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: eu_monitoring_type_mtt_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE eu_monitoring_type_mtt_id_seq OWNED BY eu_monitoring_type.mtt_id;


--
-- Name: eu_nl_code_to_sitecode_nts_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE eu_nl_code_to_sitecode_nts_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: eu_nl_code_to_sitecode; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE eu_nl_code_to_sitecode (
    nts_id integer DEFAULT nextval('eu_nl_code_to_sitecode_nts_id_seq'::regclass) NOT NULL,
    nl_code character varying(50),
    sitecode character varying(50),
    gebied character varying(100),
    d_begin timestamp without time zone,
    d_eind timestamp without time zone,
    last_changed_date timestamp without time zone,
    d_status character varying(50) DEFAULT 'Gepubliceerd'::character varying
);


--
-- Name: excemption_mechanism_type; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE excemption_mechanism_type (
    exme_id integer NOT NULL,
    omschrijving character varying(50),
    d_begin timestamp without time zone,
    d_eind timestamp without time zone,
    last_changed_date timestamp without time zone,
    d_status character varying(50) DEFAULT 'Gepubliceerd'::character varying
);


--
-- Name: excemption_mechanism_type_exme_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE excemption_mechanism_type_exme_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: excemption_mechanism_type_exme_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE excemption_mechanism_type_exme_id_seq OWNED BY excemption_mechanism_type.exme_id;


--
-- Name: faq_item; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE faq_item (
    faq_item_id integer NOT NULL,
    question character varying(2000) NOT NULL,
    answer character varying(2000) NOT NULL,
    isactive boolean NOT NULL,
    sortorder integer NOT NULL,
    last_changed_time timestamp without time zone NOT NULL,
    faq_thema_id integer NOT NULL,
    is_public boolean DEFAULT true NOT NULL
);


--
-- Name: faq_item_faq_item_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE faq_item_faq_item_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: faq_item_faq_item_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE faq_item_faq_item_id_seq OWNED BY faq_item.faq_item_id;


--
-- Name: faq_thema; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE faq_thema (
    faq_thema_id integer NOT NULL,
    thema character varying(255) NOT NULL,
    sortorder integer NOT NULL,
    last_changed_time timestamp without time zone NOT NULL
);


--
-- Name: faq_thema_faq_thema_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE faq_thema_faq_thema_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: faq_thema_faq_thema_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE faq_thema_faq_thema_id_seq OWNED BY faq_thema.faq_thema_id;


--
-- Name: generatedfactsheets; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE generatedfactsheets (
    id integer NOT NULL,
    cuid character varying(50) NOT NULL,
    oreid integer NOT NULL,
    name character varying(250) NOT NULL,
    datetime timestamp with time zone NOT NULL,
    factsheettype character varying(50) NOT NULL,
    wie character varying(100) NOT NULL
);


--
-- Name: generatedfactsheets_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE generatedfactsheets_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: generatedfactsheets_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE generatedfactsheets_id_seq OWNED BY generatedfactsheets.id;


--
-- Name: geo_reference_process; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE geo_reference_process (
    grp_id integer NOT NULL,
    mno_id integer NOT NULL,
    plaatsbep_app_id integer NOT NULL
);


--
-- Name: geo_reference_process_grp_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE geo_reference_process_grp_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: geo_reference_process_grp_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE geo_reference_process_grp_id_seq OWNED BY geo_reference_process.grp_id;


--
-- Name: geological_formation_type_gfm_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE geological_formation_type_gfm_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: geological_formation_type_gfm_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE geological_formation_type_gfm_id_seq OWNED BY geological_formation_type.gfm_id;


--
-- Name: grootheid_type_grh_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE grootheid_type_grh_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: grootheid_type_grh_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE grootheid_type_grh_id_seq OWNED BY grootheid_type.grh_id;


--
-- Name: gw_abstraction_point_status; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE gw_abstraction_point_status (
    asp_id integer NOT NULL,
    gwsy_id integer NOT NULL,
    gwst_id integer NOT NULL,
    last_change_time timestamp without time zone NOT NULL,
    remarks text
);


--
-- Name: COLUMN gw_abstraction_point_status.gwst_id; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN gw_abstraction_point_status.gwst_id IS 'id toestand_kwaliteit';


--
-- Name: gw_aggregated_pressure_type; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE gw_aggregated_pressure_type (
    gwap_id integer NOT NULL,
    name character varying(50) NOT NULL,
    d_begin timestamp without time zone,
    d_eind timestamp without time zone,
    last_changed_date timestamp without time zone,
    d_status character varying(50) DEFAULT 'Gepubliceerd'::character varying
);


--
-- Name: gw_aggregated_pressure_type_gwap_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE gw_aggregated_pressure_type_gwap_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: gw_aggregated_pressure_type_gwap_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE gw_aggregated_pressure_type_gwap_id_seq OWNED BY gw_aggregated_pressure_type.gwap_id;


--
-- Name: gw_chemical_status_gwcs_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE gw_chemical_status_gwcs_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: gw_chemical_status_gwcs_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE gw_chemical_status_gwcs_id_seq OWNED BY gw_chemical_status.gwcs_id;


--
-- Name: gw_mon_stat_other_mon_use; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE gw_mon_stat_other_mon_use (
    gms_id integer NOT NULL,
    omut_id integer NOT NULL,
    last_change_time timestamp without time zone NOT NULL
);


--
-- Name: gw_monitoring_station; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE gw_monitoring_station (
    gms_id integer NOT NULL,
    additional_requirements text,
    depth_sampled_id integer,
    station_level_id integer NOT NULL,
    station_type_id integer NOT NULL,
    last_change_time timestamp without time zone NOT NULL
);


--
-- Name: gw_n2000_status; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE gw_n2000_status (
    wpa_id integer NOT NULL,
    gwsy integer NOT NULL,
    cls_id integer NOT NULL,
    last_change_time timestamp without time zone NOT NULL,
    opt_id integer NOT NULL,
    remark character varying(255)
);


--
-- Name: gw_pollutants; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE gw_pollutants (
    gys_id integer NOT NULL,
    chs_id integer NOT NULL,
    last_change_time timestamp without time zone NOT NULL
);


--
-- Name: gw_pressure_requiring_supp_add_measures; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE gw_pressure_requiring_supp_add_measures (
    gprm_id integer NOT NULL,
    gpg_id integer NOT NULL,
    comments character varying(2000),
    gprs_id integer NOT NULL,
    bma_id integer,
    obmb_id integer,
    last_change_time timestamp without time zone NOT NULL
);


--
-- Name: gw_pressure_requiring_supp_add_measures_gprm_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE gw_pressure_requiring_supp_add_measures_gprm_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: gw_pressure_requiring_supp_add_measures_gprm_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE gw_pressure_requiring_supp_add_measures_gprm_id_seq OWNED BY gw_pressure_requiring_supp_add_measures.gprm_id;


--
-- Name: gw_pressure_type; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE gw_pressure_type (
    gprs_id integer NOT NULL,
    name character varying(50) NOT NULL,
    description character varying(90) NOT NULL,
    is_nl_only boolean DEFAULT false NOT NULL,
    pressure_category_id integer NOT NULL,
    d_begin timestamp without time zone,
    d_eind timestamp without time zone,
    last_changed_date timestamp without time zone,
    d_status character varying(50) DEFAULT 'Gepubliceerd'::character varying
);


--
-- Name: COLUMN gw_pressure_type.is_nl_only; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN gw_pressure_type.is_nl_only IS 'Alleen relevant binnen NL?';


--
-- Name: gw_pressure_type_driver; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE gw_pressure_type_driver (
    gprs_id integer NOT NULL,
    driver_id integer NOT NULL
);


--
-- Name: gw_pressure_type_gprs_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE gw_pressure_type_gprs_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: gw_pressure_type_gprs_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE gw_pressure_type_gprs_id_seq OWNED BY gw_pressure_type.gprs_id;


--
-- Name: gw_pressures_preventing_good_status; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE gw_pressures_preventing_good_status (
    gpg_id integer NOT NULL,
    rbmp_id integer NOT NULL,
    gwap_id integer NOT NULL,
    is_basic_measures_enough boolean NOT NULL,
    comments text,
    percentage_failure_value double precision,
    percentage_failure_uom_id integer,
    last_change_time timestamp without time zone NOT NULL
);


--
-- Name: COLUMN gw_pressures_preventing_good_status.gwap_id; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN gw_pressures_preventing_good_status.gwap_id IS 'gw pressure';


--
-- Name: gw_pressures_preventing_good_status_gpg_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE gw_pressures_preventing_good_status_gpg_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: gw_pressures_preventing_good_status_gpg_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE gw_pressures_preventing_good_status_gpg_id_seq OWNED BY gw_pressures_preventing_good_status.gpg_id;


--
-- Name: gw_quantity_status_gwqs_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE gw_quantity_status_gwqs_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: gw_quantity_status_gwqs_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE gw_quantity_status_gwqs_id_seq OWNED BY gw_quantity_status.gwqs_id;


--
-- Name: gw_reason4chemical_failure; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE gw_reason4chemical_failure (
    grcf_id integer NOT NULL,
    value text NOT NULL
);


--
-- Name: gw_reason4chemical_failure_grcf_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE gw_reason4chemical_failure_grcf_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: gw_reason4chemical_failure_grcf_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE gw_reason4chemical_failure_grcf_id_seq OWNED BY gw_reason4chemical_failure.grcf_id;


--
-- Name: gw_reason4quantity_failure; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE gw_reason4quantity_failure (
    grqf_id integer NOT NULL,
    value text NOT NULL
);


--
-- Name: gw_reason4quantity_failure_grqf_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE gw_reason4quantity_failure_grqf_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: gw_reason4quantity_failure_grqf_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE gw_reason4quantity_failure_grqf_id_seq OWNED BY gw_reason4quantity_failure.grqf_id;


--
-- Name: gw_required_supp_measure; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE gw_required_supp_measure (
    gprm_id integer NOT NULL,
    smnl_id integer NOT NULL,
    last_change_time timestamp without time zone NOT NULL
);


--
-- Name: gw_swb_status; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE gw_swb_status (
    swb_id integer NOT NULL,
    gwsy integer NOT NULL,
    cls_id integer NOT NULL,
    last_change_time timestamp without time zone NOT NULL,
    opt_id integer NOT NULL,
    remark character varying(255)
);


--
-- Name: gw_test_value; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE gw_test_value (
    gtcc_id integer NOT NULL,
    nrmv_id integer NOT NULL,
    last_change_time timestamp without time zone NOT NULL
);


--
-- Name: gw_testing_conclusion; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE gw_testing_conclusion (
    gtcc_id integer NOT NULL,
    gys_id integer NOT NULL,
    last_change_time timestamp without time zone NOT NULL,
    eumg_id integer DEFAULT 2 NOT NULL
);


--
-- Name: gw_vertical_orientation_type_gvo_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE gw_vertical_orientation_type_gvo_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: gw_vertical_orientation_type_gvo_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE gw_vertical_orientation_type_gvo_id_seq OWNED BY gw_vertical_orientation_type.gvo_id;


--
-- Name: gwb_chem_exemp_pollutant; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE gwb_chem_exemp_pollutant (
    gwce_id integer NOT NULL,
    opt_id integer NOT NULL,
    is_causing_exemption boolean NOT NULL,
    last_change_time timestamp without time zone NOT NULL
);


--
-- Name: gwb_chemical_exemption; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE gwb_chemical_exemption (
    gwce_id integer NOT NULL,
    gwb_id integer NOT NULL,
    obex_id integer NOT NULL,
    comment text,
    last_change_time timestamp without time zone NOT NULL
);


--
-- Name: gwb_chemical_exemption_gwce_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE gwb_chemical_exemption_gwce_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: gwb_chemical_exemption_gwce_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE gwb_chemical_exemption_gwce_id_seq OWNED BY gwb_chemical_exemption.gwce_id;


--
-- Name: gwb_conceptual_model; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE gwb_conceptual_model (
    gcm_id integer NOT NULL,
    gwb_id integer NOT NULL,
    volgnr integer NOT NULL,
    omschrijving text NOT NULL,
    afbeelding bytea NOT NULL,
    extentie character varying(5) NOT NULL,
    last_change_time timestamp with time zone NOT NULL
);


--
-- Name: gwb_conceptual_model_gcm_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE gwb_conceptual_model_gcm_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: gwb_conceptual_model_gcm_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE gwb_conceptual_model_gcm_id_seq OWNED BY gwb_conceptual_model.gcm_id;


--
-- Name: gwb_pressure; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE gwb_pressure (
    gwbp_id integer NOT NULL,
    gwb_id integer NOT NULL,
    gprs_id integer NOT NULL,
    is_significant boolean NOT NULL,
    last_change_time timestamp without time zone NOT NULL,
    remark text,
    function character varying(250),
    effect text,
    prr_id integer DEFAULT 3 NOT NULL
);


--
-- Name: gwb_pressure_gprs_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE gwb_pressure_gprs_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: gwb_pressure_gprs_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE gwb_pressure_gprs_id_seq OWNED BY gwb_pressure.gprs_id;


--
-- Name: gwb_pressure_gwbp_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE gwb_pressure_gwbp_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: gwb_pressure_gwbp_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE gwb_pressure_gwbp_id_seq OWNED BY gwb_pressure.gwbp_id;


--
-- Name: gwb_pressure_impact; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE gwb_pressure_impact (
    gwbp_id integer NOT NULL,
    impact_id integer NOT NULL
);


--
-- Name: gwb_quantitative_exemption; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE gwb_quantitative_exemption (
    gqe_id integer NOT NULL,
    gwb_id integer NOT NULL,
    obex_id integer NOT NULL,
    comment character varying(500),
    last_change_time timestamp without time zone NOT NULL
);


--
-- Name: gwb_quantitative_exemption_gqe_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE gwb_quantitative_exemption_gqe_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: gwb_quantitative_exemption_gqe_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE gwb_quantitative_exemption_gqe_id_seq OWNED BY gwb_quantitative_exemption.gqe_id;


--
-- Name: gwb_reason4chemical_failure; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE gwb_reason4chemical_failure (
    gys_id integer NOT NULL,
    grcf_id integer NOT NULL,
    last_change_time timestamp without time zone NOT NULL
);


--
-- Name: gwb_reason4quantity_failure; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE gwb_reason4quantity_failure (
    gys_id integer NOT NULL,
    grqf_id integer NOT NULL,
    last_change_time timestamp without time zone NOT NULL
);


--
-- Name: gwb_yearly_status_gys_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE gwb_yearly_status_gys_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: gwb_yearly_status_gys_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE gwb_yearly_status_gys_id_seq OWNED BY gwb_yearly_status.gys_id;


--
-- Name: hab_vog_to_sitecode; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE hab_vog_to_sitecode (
    nl_code character varying(50),
    sitecode character varying(50)
);


--
-- Name: hdo_identfiers; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE hdo_identfiers (
    hdo_id integer NOT NULL,
    local_id character varying(36) NOT NULL,
    namespace_id integer NOT NULL,
    last_change_time timestamp without time zone NOT NULL
);


--
-- Name: hoedanigheid_type_hdh_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE hoedanigheid_type_hdh_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: hoedanigheid_type_hdh_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE hoedanigheid_type_hdh_id_seq OWNED BY hoedanigheid_type.hdh_id;


--
-- Name: hulp_chemischestof; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE hulp_chemischestof (
    chs_id integer DEFAULT nextval('chemische_stof_type_chs_id_seq'::regclass) NOT NULL,
    cas_nr character varying(12) NOT NULL,
    naam character varying(90) NOT NULL,
    code character varying(12) NOT NULL,
    d_begin timestamp without time zone,
    d_eind timestamp without time zone,
    last_changed_date timestamp without time zone,
    d_status character varying(50) DEFAULT 'Gepubliceerd'::character varying,
    id integer
);


--
-- Name: hulp_eenheid; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE hulp_eenheid (
    eenh_id integer,
    code character varying(50),
    omschrijving character varying(50),
    d_begin timestamp without time zone,
    d_eind timestamp without time zone,
    last_changed_date timestamp without time zone,
    d_status character varying(50),
    id integer
);


--
-- Name: hulp_grootheid; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE hulp_grootheid (
    grh_id integer DEFAULT nextval('grootheid_type_grh_id_seq'::regclass) NOT NULL,
    code character varying(50) NOT NULL,
    omschrijving character varying(90) NOT NULL,
    d_begin timestamp without time zone,
    d_eind timestamp without time zone,
    last_changed_date timestamp without time zone,
    d_status character varying(50) DEFAULT 'Gepubliceerd'::character varying,
    id integer
);


--
-- Name: hulp_hoedanigheid_type; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE hulp_hoedanigheid_type (
    hdh_id integer DEFAULT nextval('hoedanigheid_type_hdh_id_seq'::regclass) NOT NULL,
    code character varying(12) NOT NULL,
    omschrijving character varying(90) NOT NULL,
    d_begin timestamp without time zone,
    d_eind timestamp without time zone,
    last_changed_date timestamp without time zone,
    d_status character varying(50) DEFAULT 'Gepubliceerd'::character varying,
    id integer
);


--
-- Name: object_type_obj_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE object_type_obj_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: object_type_obj_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE object_type_obj_id_seq OWNED BY object_type.obj_id;


--
-- Name: hulp_object; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE hulp_object (
    obj_id integer DEFAULT nextval('object_type_obj_id_seq'::regclass) NOT NULL,
    code character varying(12) NOT NULL,
    omschrijving character varying(90) NOT NULL,
    d_begin timestamp without time zone,
    d_eind timestamp without time zone,
    last_changed_date timestamp without time zone,
    d_status character varying(50) DEFAULT 'Gepubliceerd'::character varying,
    id integer
);


--
-- Name: typering_type_typ_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE typering_type_typ_id_seq
    START WITH 26616
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: typering_type_typ_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE typering_type_typ_id_seq OWNED BY typering_type.typ_id;


--
-- Name: hulp_typering; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE hulp_typering (
    typ_id integer DEFAULT nextval('typering_type_typ_id_seq'::regclass) NOT NULL,
    code character varying(12) NOT NULL,
    omschrijving character varying(90) NOT NULL,
    d_begin timestamp without time zone,
    d_eind timestamp without time zone,
    last_changed_date timestamp without time zone,
    d_status character varying(50) DEFAULT 'Gepubliceerd'::character varying,
    id integer
);


--
-- Name: hydro_object_hdo_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE hydro_object_hdo_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: hydro_object_hdo_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE hydro_object_hdo_id_seq OWNED BY hydro_object.hdo_id;


--
-- Name: importrule; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE importrule (
    importruleid integer NOT NULL,
    importtypeid integer NOT NULL,
    name character varying(50) NOT NULL,
    fileextension character varying(3) NOT NULL,
    origin character varying(30) NOT NULL,
    transformation character varying(50) NOT NULL,
    linkedimportruleid integer,
    inputorder integer NOT NULL
);


--
-- Name: importrule_importruleid_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE importrule_importruleid_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: importrule_importruleid_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE importrule_importruleid_seq OWNED BY importrule.importruleid;


--
-- Name: importtype; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE importtype (
    importtypeid integer NOT NULL,
    name character varying(50) NOT NULL,
    fileextension character varying(3) NOT NULL,
    transformation character varying(50) NOT NULL
);


--
-- Name: importtype_importtypeid_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE importtype_importtypeid_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: importtype_importtypeid_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE importtype_importtypeid_seq OWNED BY importtype.importtypeid;


--
-- Name: info_stream_activity; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE info_stream_activity (
    isac_id integer NOT NULL,
    ims_id integer NOT NULL,
    name character varying(50) NOT NULL,
    description text,
    deadline_data_delivery date NOT NULL,
    deadline_reporting date NOT NULL,
    is_completed boolean NOT NULL,
    completion_date date NOT NULL,
    last_change_time timestamp without time zone NOT NULL
);


--
-- Name: info_stream_activity_isac_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE info_stream_activity_isac_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: info_stream_activity_isac_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE info_stream_activity_isac_id_seq OWNED BY info_stream_activity.isac_id;


--
-- Name: info_stream_legal_background; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE info_stream_legal_background (
    ims_id integer NOT NULL,
    lgr_id integer NOT NULL,
    last_change_time timestamp without time zone NOT NULL
);


--
-- Name: information_stream; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE information_stream (
    ims_id integer NOT NULL,
    name character varying(50) NOT NULL,
    descrption text
);


--
-- Name: information_stream_ims_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE information_stream_ims_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: information_stream_ims_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE information_stream_ims_id_seq OWNED BY information_stream.ims_id;


--
-- Name: kaarten_sgbp; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE kaarten_sgbp (
    ksgbp_id integer NOT NULL,
    naam character varying(255),
    categorie character varying(255),
    url text,
    order_id integer,
    last_changed_date timestamp without time zone,
    map_ref text NOT NULL,
    page character varying(50) NOT NULL
);


--
-- Name: kaarten_sgbp_ksgbp_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE kaarten_sgbp_ksgbp_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: kaarten_sgbp_ksgbp_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE kaarten_sgbp_ksgbp_id_seq OWNED BY kaarten_sgbp.ksgbp_id;


--
-- Name: kwaliteitsoordeel_type_kwod_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE kwaliteitsoordeel_type_kwod_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: kwaliteitsoordeel_type_kwod_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE kwaliteitsoordeel_type_kwod_id_seq OWNED BY kwaliteitsoordeel_type.kwod_id;


--
-- Name: legislation_level_type_lgl_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE legislation_level_type_lgl_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: legislation_level_type_lgl_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE legislation_level_type_lgl_id_seq OWNED BY legislation_level_type.lgl_id;


--
-- Name: legislation_reference_type; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE legislation_reference_type (
    lgr_id integer NOT NULL,
    legal_name character varying(90) NOT NULL,
    publication_date timestamp without time zone NOT NULL,
    legislation_level_id integer NOT NULL,
    d_begin timestamp without time zone,
    d_eind timestamp without time zone,
    last_changed_date timestamp without time zone,
    d_status character varying(50) DEFAULT 'Gepubliceerd'::character varying,
    url character varying(255)
);


--
-- Name: legislation_reference_type_lgr_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE legislation_reference_type_lgr_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: legislation_reference_type_lgr_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE legislation_reference_type_lgr_id_seq OWNED BY legislation_reference_type.lgr_id;


--
-- Name: level_of_area_type; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE level_of_area_type (
    loa_id integer NOT NULL,
    code character varying(12) NOT NULL,
    order_of_rank integer NOT NULL,
    description character varying(50) NOT NULL,
    d_begin timestamp without time zone,
    d_eind timestamp without time zone,
    last_changed_date timestamp without time zone,
    d_status character varying(50) DEFAULT 'Gepubliceerd'::character varying,
    id integer
);


--
-- Name: COLUMN level_of_area_type.order_of_rank; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN level_of_area_type.order_of_rank IS 'Rangorde; MemberState=1, RBD=2, Sub-Unit=3 , Waterbody=4';


--
-- Name: level_of_area_type_loa_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE level_of_area_type_loa_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: level_of_area_type_loa_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE level_of_area_type_loa_id_seq OWNED BY level_of_area_type.loa_id;


--
-- Name: logging_loggingid_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE logging_loggingid_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: logging_loggingid_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE logging_loggingid_seq OWNED BY logging.loggingid;


--
-- Name: management_regulation_or_restriction_zone_collection; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE management_regulation_or_restriction_zone_collection (
    mzc_id integer NOT NULL,
    inspire_id_local_id character varying(36) NOT NULL,
    inspire_id_namespace_id integer NOT NULL,
    wkrv_id integer NOT NULL,
    last_change_time timestamp without time zone NOT NULL
);


--
-- Name: management_regulation_or_restriction_zone_collection_mzc_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE management_regulation_or_restriction_zone_collection_mzc_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: management_regulation_or_restriction_zone_collection_mzc_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE management_regulation_or_restriction_zone_collection_mzc_id_seq OWNED BY management_regulation_or_restriction_zone_collection.mzc_id;


--
-- Name: measure_finance; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE measure_finance (
    mtm_id integer NOT NULL,
    last_change_time timestamp without time zone NOT NULL,
    sum numeric(16,2) NOT NULL,
    mft_id integer NOT NULL
);


--
-- Name: measure_finance_type; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE measure_finance_type (
    mtf_id integer NOT NULL,
    omschrijving character varying(50),
    d_begin timestamp without time zone,
    d_eind timestamp without time zone,
    last_changed_date timestamp without time zone,
    d_status character varying(50) DEFAULT 'Gepubliceerd'::character varying
);


--
-- Name: measure_per_abstraction_point; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE measure_per_abstraction_point (
    mtm_id integer NOT NULL,
    asp_id integer NOT NULL,
    last_change_time timestamp without time zone NOT NULL
);


--
-- Name: measure_per_man_protected_area; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE measure_per_man_protected_area (
    mtm_id integer NOT NULL,
    wpa_id integer NOT NULL,
    last_change_time timestamp without time zone NOT NULL
);


--
-- Name: measure_per_man_reg_or_restr_zone; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE measure_per_man_reg_or_restr_zone (
    mtm_id integer NOT NULL,
    mrz_id integer NOT NULL,
    last_change_time timestamp without time zone NOT NULL
);


--
-- Name: measure_progress; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE measure_progress (
    mtm_id integer NOT NULL,
    mst_id integer NOT NULL,
    reason_substanstial_delay text,
    amount_value double precision NOT NULL,
    last_change_time timestamp without time zone NOT NULL,
    year integer NOT NULL
);


--
-- Name: measure_progress_completed; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE measure_progress_completed (
    measure_progress_completedid integer NOT NULL,
    mtm_id integer NOT NULL,
    year_completed integer NOT NULL,
    completed boolean NOT NULL
);


--
-- Name: measure_progress_completed_measure_progress_completedid_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE measure_progress_completed_measure_progress_completedid_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: measure_progress_completed_measure_progress_completedid_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE measure_progress_completed_measure_progress_completedid_seq OWNED BY measure_progress_completed.measure_progress_completedid;


--
-- Name: measure_status_type; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE measure_status_type (
    mst_id integer NOT NULL,
    code character varying(12) NOT NULL,
    omschrijving character varying(90),
    d_begin timestamp without time zone,
    d_eind timestamp without time zone,
    last_changed_date timestamp without time zone,
    d_status character varying(50) DEFAULT 'Gepubliceerd'::character varying
);


--
-- Name: measure_status_type_mst_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE measure_status_type_mst_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: measure_status_type_mst_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE measure_status_type_mst_id_seq OWNED BY measure_status_type.mst_id;


--
-- Name: measurement_regime_type_mmr_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE measurement_regime_type_mmr_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: measurement_regime_type_mmr_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE measurement_regime_type_mmr_id_seq OWNED BY measurement_regime_type.mmr_id;


--
-- Name: membership; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE membership (
    membershipid integer NOT NULL,
    wkpuserid integer NOT NULL,
    applicationid integer NOT NULL,
    password character varying(128) NOT NULL,
    passwordformat integer NOT NULL,
    passwordsalt character varying(128) NOT NULL,
    email character varying(256),
    passwordquestion character varying(256),
    passwordanswer character varying(128),
    isapproved boolean NOT NULL,
    islockedout boolean NOT NULL,
    createdate timestamp with time zone NOT NULL,
    lastlogindate timestamp with time zone NOT NULL,
    lastpasswordchangeddate timestamp with time zone NOT NULL,
    lastlockoutdate timestamp with time zone NOT NULL,
    failedpasswordattemptcount integer NOT NULL,
    failedpasswordattemptwindowstart timestamp with time zone NOT NULL,
    failedpasswordanswerattemptcount integer NOT NULL,
    failedpasswordanswerattemptwindowsstart timestamp with time zone NOT NULL,
    comment character varying(256)
);


--
-- Name: membership_membershipid_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE membership_membershipid_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: membership_membershipid_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE membership_membershipid_seq OWNED BY membership.membershipid;


--
-- Name: mnf_parameter; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE mnf_parameter (
    mnf_id integer NOT NULL,
    name character varying(50) NOT NULL,
    value character varying(50) NOT NULL,
    value_uom_id integer,
    last_change_time timestamp without time zone NOT NULL
);


--
-- Name: monitored_measure; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE monitored_measure (
    mtm_id integer NOT NULL,
    monitored_measure_type character varying(50) NOT NULL,
    level_of_measure_id integer NOT NULL,
    prime_competent_authority_id integer,
    derived_from_measure_id integer,
    last_change_time timestamp without time zone NOT NULL,
    rpv_id integer
);


--
-- Name: COLUMN monitored_measure.monitored_measure_type; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN monitored_measure.monitored_measure_type IS 'geeft het subtype v.d. monitored_measure aan';


--
-- Name: COLUMN monitored_measure.rpv_id; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN monitored_measure.rpv_id IS 'Deze rpv_id geeft de ''Uitvoering in'' van de maatregel aan.';


--
-- Name: monitored_measure_eu_fund; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE monitored_measure_eu_fund (
    mtm_id integer NOT NULL,
    euf_id integer NOT NULL,
    last_change_time timestamp without time zone NOT NULL
);


--
-- Name: monitored_measure_mtm_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE monitored_measure_mtm_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: monitored_measure_mtm_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE monitored_measure_mtm_id_seq OWNED BY monitored_measure.mtm_id;


--
-- Name: monitoring_feature_report_to; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE monitoring_feature_report_to (
    mnf_id integer NOT NULL,
    lgr_id integer NOT NULL,
    report_date timestamp without time zone NOT NULL,
    observation_required boolean NOT NULL,
    observing_capability_required boolean NOT NULL,
    last_change_time timestamp without time zone NOT NULL
);


--
-- Name: monitoring_object_genealogy; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE monitoring_object_genealogy (
    mno_id_supersedes integer NOT NULL,
    mno_id_superseded_by integer NOT NULL,
    last_change_time timestamp without time zone NOT NULL
);


--
-- Name: monitoring_object_hierarchy; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE monitoring_object_hierarchy (
    mno_id_narrower integer NOT NULL,
    mno_id_broader integer NOT NULL,
    linking_time timestamp without time zone NOT NULL,
    last_change_time timestamp without time zone NOT NULL
);


--
-- Name: monitoring_object_mno_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE monitoring_object_mno_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: monitoring_object_mno_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE monitoring_object_mno_id_seq OWNED BY monitoring_object.mno_id;


--
-- Name: monitoring_object_other_ids; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE monitoring_object_other_ids (
    moi_id integer NOT NULL,
    mno_id integer NOT NULL,
    hydro_id_local_id character varying(36) NOT NULL,
    hydro_id_ore_id integer NOT NULL
);


--
-- Name: monitoring_object_other_ids_moi_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE monitoring_object_other_ids_moi_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: monitoring_object_other_ids_moi_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE monitoring_object_other_ids_moi_id_seq OWNED BY monitoring_object_other_ids.moi_id;


--
-- Name: monitoring_object_quality_element_moqe_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE monitoring_object_quality_element_moqe_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: monitoring_object_quality_element_moqe_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE monitoring_object_quality_element_moqe_id_seq OWNED BY monitoring_object_quality_element.moqe_id;


--
-- Name: monitoring_use; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE monitoring_use (
    gms_id integer NOT NULL,
    mtt_id integer NOT NULL,
    last_change_time timestamp without time zone NOT NULL
);


--
-- Name: mv_oordeel_chemie_owm; Type: MATERIALIZED VIEW; Schema: public; Owner: -
--

CREATE MATERIALIZED VIEW mv_oordeel_chemie_owm AS
 WITH oordeel AS (
         SELECT DISTINCT ON (sys.sys_id, swcs.opt_id) sys.sys_id,
            sys.swb_id,
            sys.year_of_status,
            swcs.opt_id,
            swcs.swcs_id,
            swcs.css_id,
            hdo_swb.hdo_id,
            hdo_swb.wkrv_id,
            hdo_swb.inspire_id_local_id
           FROM ((sw_chemical_substance_status swcs
             JOIN swb_yearly_status sys ON ((swcs.sys_id = sys.sys_id)))
             JOIN hydro_object hdo_swb ON ((hdo_swb.hdo_id = sys.swb_id)))
          WHERE (swcs.eumg_id = 3)
        ), opt AS (
         SELECT observed_property_type.opt_id AS "DB_ID",
            typering_type.code AS "Tpering_Code",
            grootheid_type.code AS "Grootheid_Code",
            chemische_stof_type.code AS "ChemischeStof_code"
           FROM (((observed_property_type
             LEFT JOIN grootheid_type ON ((grootheid_type.grh_id = observed_property_type.quantity_id)))
             LEFT JOIN (chemische_stof_type
             JOIN substance_group_element ON ((chemische_stof_type.chs_id = substance_group_element.chs_id))) ON ((substance_group_element.ssge_id = observed_property_type.substance_group_id)))
             LEFT JOIN typering_type ON ((typering_type.typ_id = observed_property_type.indicator_id)))
        )
 SELECT oordeel.swb_id,
    oordeel.inspire_id_local_id AS "Waterlichaam_identificatie",
    oordeel.wkrv_id AS "Waterlichaam_Versie",
    hdo_rbd.inspire_id_local_id AS stroomgebieddistrict,
    oordeel.year_of_status AS "Rapportagejaar",
    opt."Tpering_Code",
    opt."Grootheid_Code",
    opt."ChemischeStof_code",
    classification_type.description AS "Oordeel",
    geometrytype(mrz.geometry) AS geometry_type,
    ('CH'::text || oordeel.css_id) AS "Unique_Key"
   FROM ((((((oordeel
     JOIN management_regulation_or_restriction_zone mrz ON ((oordeel.swb_id = mrz.mrz_id)))
     JOIN water_body wb ON ((wb.wbd_id = mrz.mrz_id)))
     JOIN river_basin_disrict rbd ON ((rbd.rbd_id = wb.rbd_id)))
     JOIN hydro_object hdo_rbd ON ((rbd.rbd_id = hdo_rbd.hdo_id)))
     JOIN classification_type ON ((oordeel.swcs_id = classification_type.cls_id)))
     JOIN opt ON ((opt."DB_ID" = oordeel.opt_id)))
  WITH NO DATA;


--
-- Name: mv_oordeel_ecologie_owm; Type: MATERIALIZED VIEW; Schema: public; Owner: -
--

CREATE MATERIALIZED VIEW mv_oordeel_ecologie_owm AS
 WITH oordeel AS (
         SELECT DISTINCT ON (sys.sys_id, swes.opt_id) sys.sys_id,
            sys.swb_id,
            sys.year_of_status,
            swes.wbpm_id,
            swes.opt_id,
            swes.eumg_id,
            swes.swes_id,
            swes.ecs_id,
            hdo_swb.hdo_id,
            hdo_swb.wkrv_id,
            hdo_swb.inspire_id_local_id
           FROM ((sw_ecological_status swes
             JOIN swb_yearly_status sys ON ((swes.sys_id = sys.sys_id)))
             JOIN hydro_object hdo_swb ON ((hdo_swb.hdo_id = sys.swb_id)))
          WHERE (swes.eumg_id = 3)
        ), opt AS (
         SELECT observed_property_type.opt_id AS "DB_ID",
            typering_type.code AS "Tpering_Code",
            grootheid_type.code AS "Grootheid_Code",
            chemische_stof_type.code AS "ChemischeStof_code"
           FROM (((observed_property_type
             LEFT JOIN grootheid_type ON ((grootheid_type.grh_id = observed_property_type.quantity_id)))
             LEFT JOIN (chemische_stof_type
             JOIN substance_group_element ON ((chemische_stof_type.chs_id = substance_group_element.chs_id))) ON ((substance_group_element.ssge_id = observed_property_type.substance_group_id)))
             LEFT JOIN typering_type ON ((typering_type.typ_id = observed_property_type.indicator_id)))
        )
 SELECT oordeel.swb_id,
    oordeel.inspire_id_local_id AS "Waterlichaam_identificatie",
    oordeel.wkrv_id AS "Waterlichaam_Versie",
    hdo_rbd.inspire_id_local_id AS stroomgebieddistrict,
    oordeel.year_of_status AS "Rapportagejaar",
    oordeel.opt_id AS "Waargenomen_Eigenschap_DB_ID",
    opt."Tpering_Code",
    opt."Grootheid_Code",
    opt."ChemischeStof_code",
    classification_type.description AS "Oordeel",
    oordeel.eumg_id AS "Oordeel_Type_ID",
    oordeel.wbpm_id AS "WaardebepalingsMethode_ID",
    geometrytype(mrz.geometry) AS geometry_type,
    ('EC'::text || oordeel.ecs_id) AS "Unique_Key"
   FROM ((((((oordeel
     JOIN management_regulation_or_restriction_zone mrz ON ((oordeel.swb_id = mrz.mrz_id)))
     JOIN water_body wb ON ((wb.wbd_id = oordeel.swb_id)))
     JOIN river_basin_disrict rbd ON ((rbd.rbd_id = wb.rbd_id)))
     JOIN hydro_object hdo_rbd ON ((rbd.rbd_id = hdo_rbd.hdo_id)))
     JOIN classification_type ON ((oordeel.swes_id = classification_type.cls_id)))
     JOIN opt ON ((opt."DB_ID" = oordeel.opt_id)))
  WITH NO DATA;


--
-- Name: mzc_legal_basis; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE mzc_legal_basis (
    mzc_id integer NOT NULL,
    lgr_id integer NOT NULL,
    last_change_time timestamp without time zone NOT NULL
);


--
-- Name: namespace_type_ns_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE namespace_type_ns_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: namespace_type_ns_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE namespace_type_ns_id_seq OWNED BY namespace_type.ns_id;


--
-- Name: natural_background_levels; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE natural_background_levels (
    nbl_id integer NOT NULL,
    gwb_id integer NOT NULL,
    opt_id integer NOT NULL,
    priority boolean NOT NULL,
    concentration_value double precision NOT NULL,
    concentration_uom_id integer NOT NULL,
    last_change_time timestamp without time zone NOT NULL
);


--
-- Name: natural_background_levels_nbl_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE natural_background_levels_nbl_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: natural_background_levels_nbl_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE natural_background_levels_nbl_id_seq OWNED BY natural_background_levels.nbl_id;


--
-- Name: norm; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE norm (
    nrm_id integer NOT NULL,
    naam_namespace_id integer NOT NULL,
    lokale_naam character varying(50) NOT NULL,
    observed_property integer NOT NULL,
    opmerking text,
    uri character varying(255),
    defined_at_level_id integer,
    norm_groep_id integer NOT NULL,
    wkrv_id integer NOT NULL,
    last_change_time timestamp without time zone NOT NULL
);


--
-- Name: norm_feature; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE norm_feature (
    nrm_id integer NOT NULL,
    hdo_id integer NOT NULL,
    last_change_time timestamp without time zone NOT NULL
);


--
-- Name: norm_groep_type; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE norm_groep_type (
    nmgp_id integer NOT NULL,
    nmkd_id integer NOT NULL,
    code character varying(12) NOT NULL,
    omschrijving character varying(90) NOT NULL,
    d_begin timestamp without time zone,
    d_eind timestamp without time zone,
    last_changed_date timestamp without time zone,
    d_status character varying(50) DEFAULT 'Gepubliceerd'::character varying,
    id integer
);


--
-- Name: norm_groep_type_nmgp_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE norm_groep_type_nmgp_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: norm_groep_type_nmgp_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE norm_groep_type_nmgp_id_seq OWNED BY norm_groep_type.nmgp_id;


--
-- Name: norm_hulp_mapping; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE norm_hulp_mapping (
    nhm_id integer NOT NULL,
    parameter_typering_code character varying(20) NOT NULL,
    lokale_naam character varying(50) NOT NULL,
    opt_id integer NOT NULL,
    typ_id integer,
    eenh_id integer NOT NULL,
    grh_id integer,
    chs_id integer,
    hdh_id integer NOT NULL,
    cptm_id integer NOT NULL,
    wbm_id integer NOT NULL,
    sortering integer NOT NULL
);


--
-- Name: norm_hulp_mapping_nhm_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE norm_hulp_mapping_nhm_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: norm_hulp_mapping_nhm_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE norm_hulp_mapping_nhm_id_seq OWNED BY norm_hulp_mapping.nhm_id;


--
-- Name: norm_kader_type; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE norm_kader_type (
    nmkd_id integer NOT NULL,
    code character varying(12) NOT NULL,
    omschrijving character varying(90) NOT NULL,
    d_begin timestamp without time zone,
    d_eind timestamp without time zone,
    last_changed_date timestamp without time zone,
    d_status character varying(50) DEFAULT 'Gepubliceerd'::character varying
);


--
-- Name: norm_kader_type_nmkd_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE norm_kader_type_nmkd_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: norm_kader_type_nmkd_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE norm_kader_type_nmkd_id_seq OWNED BY norm_kader_type.nmkd_id;


--
-- Name: norm_nrm_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE norm_nrm_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: norm_nrm_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE norm_nrm_id_seq OWNED BY norm.nrm_id;


--
-- Name: norm_value; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE norm_value (
    nrmv_id integer NOT NULL,
    nrm_id integer NOT NULL,
    value_processing_method integer NOT NULL,
    cptm_id integer NOT NULL,
    lowerbound_value double precision,
    lowerbound_uom_id integer,
    upperbound_value double precision,
    upperbound_uom_id integer,
    begin_lifespan_version timestamp without time zone NOT NULL,
    end_lifespan_version timestamp without time zone,
    opmerking text,
    uri character varying(255),
    opname_datum timestamp without time zone,
    norm_klasse_id integer NOT NULL,
    lowerbound_limit_symbol_id integer,
    upperbound_limit_symbol_id integer
);


--
-- Name: norm_value_nrmv_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE norm_value_nrmv_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: norm_value_nrmv_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE norm_value_nrmv_id_seq OWNED BY norm_value.nrmv_id;


--
-- Name: normpakket; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE normpakket (
    nmpk_id integer NOT NULL,
    norm_groep_id integer NOT NULL,
    norm_kader_id integer NOT NULL,
    opmerking text,
    uri character varying(255)
);


--
-- Name: COLUMN normpakket.uri; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN normpakket.uri IS 'Koppeling (hyperlink) naar een locatie waar aanvullende informatie gevonden / verkregen kan worden.';


--
-- Name: normpakket_nmpk_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE normpakket_nmpk_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: normpakket_nmpk_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE normpakket_nmpk_id_seq OWNED BY normpakket.nmpk_id;


--
-- Name: object_group_ojg_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE object_group_ojg_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: object_group_ojg_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE object_group_ojg_id_seq OWNED BY object_group.ojg_id;


--
-- Name: object_state_column_required; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE object_state_column_required (
    ost_id integer NOT NULL,
    table_name text NOT NULL,
    column_name text NOT NULL,
    required boolean NOT NULL
);


--
-- Name: object_state_column_required_ost_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE object_state_column_required_ost_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: object_state_column_required_ost_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE object_state_column_required_ost_id_seq OWNED BY object_state_column_required.ost_id;


--
-- Name: object_state_type; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE object_state_type (
    ost_id integer NOT NULL,
    code character varying(50) NOT NULL,
    decsription text NOT NULL,
    d_begin timestamp without time zone,
    d_eind timestamp without time zone,
    last_changed_date timestamp without time zone,
    d_status character varying(50) DEFAULT 'Gepubliceerd'::character varying
);


--
-- Name: object_state_type_ost_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE object_state_type_ost_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: object_state_type_ost_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE object_state_type_ost_id_seq OWNED BY object_state_type.ost_id;


--
-- Name: objectives_exemption_type; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE objectives_exemption_type (
    obex_id integer NOT NULL,
    name character varying(50) NOT NULL,
    description text,
    article_nr character varying(3),
    article_description character varying(50),
    d_begin timestamp without time zone,
    d_eind timestamp without time zone,
    last_changed_date timestamp without time zone,
    d_status character varying(50) DEFAULT 'Gepubliceerd'::character varying
);


--
-- Name: objectives_exemption_type_obex_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE objectives_exemption_type_obex_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: objectives_exemption_type_obex_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE objectives_exemption_type_obex_id_seq OWNED BY objectives_exemption_type.obex_id;


--
-- Name: obs_ctx_role_type_ocr_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE obs_ctx_role_type_ocr_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: obs_ctx_role_type_ocr_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE obs_ctx_role_type_ocr_id_seq OWNED BY obs_ctx_role_type.ocr_id;


--
-- Name: observation_context_role_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE observation_context_role_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: observation_context_role_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE observation_context_role_id_seq OWNED BY observation_context.role_id;


--
-- Name: observation_obs_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE observation_obs_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: observation_obs_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE observation_obs_id_seq OWNED BY observation.obs_id;


--
-- Name: observation_parameter; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE observation_parameter (
    obs_id integer NOT NULL,
    name text NOT NULL,
    value text NOT NULL
);


--
-- Name: observation_process_copy_dietmar; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE observation_process_copy_dietmar (
    obp_id integer NOT NULL,
    ore_id integer,
    last_change_time timestamp without time zone NOT NULL,
    wbpm_id integer,
    sensing_location_type_id integer,
    sample_pre_treatment_method_id integer,
    sample_destruction_method_id integer,
    certification_id integer,
    analytical_technique_id integer,
    accreditation_org_id integer,
    nen3610_id_namespace_id integer
);


--
-- Name: observation_process_copy_dietmar_obp_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE observation_process_copy_dietmar_obp_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: observation_process_copy_dietmar_obp_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE observation_process_copy_dietmar_obp_id_seq OWNED BY observation_process_copy_dietmar.obp_id;


--
-- Name: observed_property_type_acc; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE observed_property_type_acc (
    opt_id integer,
    observed_property_type_class character varying(50),
    result_type character varying(50),
    hoedanigheid_id integer,
    object_group_id integer,
    quantity_id integer,
    taxa_group_id integer,
    substance_group_id integer,
    indicator_id integer,
    classification_group_id integer,
    remarks text,
    d_begin timestamp without time zone,
    d_eind timestamp without time zone,
    last_changed_date timestamp without time zone,
    d_status character varying(50)
);


--
-- Name: observed_property_type_opt_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE observed_property_type_opt_id_seq
    START WITH 5915
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: observed_property_type_opt_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE observed_property_type_opt_id_seq OWNED BY observed_property_type.opt_id;


--
-- Name: observing_capability_observation_ocbs_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE observing_capability_observation_ocbs_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: observing_capability_observation_ocbs_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE observing_capability_observation_ocbs_id_seq OWNED BY observing_capability_observation.ocbs_id;


--
-- Name: observing_capability_osc_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE observing_capability_osc_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: observing_capability_osc_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE observing_capability_osc_id_seq OWNED BY observing_capability.osc_id;


--
-- Name: observing_capability_responsible_party_ocrp_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE observing_capability_responsible_party_ocrp_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: observing_capability_responsible_party_ocrp_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE observing_capability_responsible_party_ocrp_id_seq OWNED BY observing_capability_responsible_party.ocrp_id;


--
-- Name: observing_capability_sample; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE observing_capability_sample (
    ocsa_id integer NOT NULL,
    smpl_id integer NOT NULL,
    osc_id integer NOT NULL,
    is_approved boolean DEFAULT false NOT NULL,
    last_change_time timestamp without time zone NOT NULL
);


--
-- Name: observing_capability_sample_ocsa_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE observing_capability_sample_ocsa_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: observing_capability_sample_ocsa_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE observing_capability_sample_ocsa_id_seq OWNED BY observing_capability_sample.ocsa_id;


--
-- Name: operational_activity_period; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE operational_activity_period (
    emf_id integer NOT NULL,
    activity_begin timestamp without time zone NOT NULL,
    activity_end timestamp without time zone,
    last_change_time timestamp without time zone NOT NULL
);


--
-- Name: opt_class_result_type_type; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE opt_class_result_type_type (
    observed_property_type_class_type character varying(50) NOT NULL,
    result_type_type character varying(50) NOT NULL,
    last_changed_date timestamp without time zone DEFAULT now() NOT NULL
);


--
-- Name: TABLE opt_class_result_type_type; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON TABLE opt_class_result_type_type IS 'Lijst van mogelijke waarden en combinaties van opt.observed_property_type_class en opt.result_type.
Toegevoegd door SF 2016-08-24';


--
-- Name: organisation_category_type_ocat_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE organisation_category_type_ocat_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: organisation_category_type_ocat_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE organisation_category_type_ocat_id_seq OWNED BY organisation_category_type.ocat_id;


--
-- Name: organisatorische_eenheid_ore_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE organisatorische_eenheid_ore_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: organisatorische_eenheid_ore_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE organisatorische_eenheid_ore_id_seq OWNED BY organisatorische_eenheid.ore_id;


--
-- Name: organisatorische_eenheid_wkpusergroup; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE organisatorische_eenheid_wkpusergroup (
    organisatorische_eenheid_wkpusergroupid integer NOT NULL,
    wkpusergroupid integer NOT NULL,
    ore_id integer NOT NULL
);


--
-- Name: organisatorische_eenheid_wkpu_organisatorische_eenheid_wkpu_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE organisatorische_eenheid_wkpu_organisatorische_eenheid_wkpu_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: organisatorische_eenheid_wkpu_organisatorische_eenheid_wkpu_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE organisatorische_eenheid_wkpu_organisatorische_eenheid_wkpu_seq OWNED BY organisatorische_eenheid_wkpusergroup.organisatorische_eenheid_wkpusergroupid;


--
-- Name: other_basic_measure113b_type; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE other_basic_measure113b_type (
    obmb_id integer NOT NULL,
    name character varying(90) NOT NULL,
    d_begin timestamp without time zone,
    d_eind timestamp without time zone,
    last_changed_date timestamp without time zone,
    d_status character varying(50) DEFAULT 'Gepubliceerd'::character varying
);


--
-- Name: other_basic_measure113b_type_obmb_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE other_basic_measure113b_type_obmb_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: other_basic_measure113b_type_obmb_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE other_basic_measure113b_type_obmb_id_seq OWNED BY other_basic_measure113b_type.obmb_id;


--
-- Name: other_monitoring_use_type; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE other_monitoring_use_type (
    omut_id integer NOT NULL,
    code character varying(12) NOT NULL,
    description character varying(90),
    d_begin timestamp without time zone,
    d_eind timestamp without time zone,
    last_changed_date timestamp without time zone,
    d_status character varying(50) DEFAULT 'Gepubliceerd'::character varying
);


--
-- Name: other_monitoring_use_type_omut_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE other_monitoring_use_type_omut_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: other_monitoring_use_type_omut_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE other_monitoring_use_type_omut_id_seq OWNED BY other_monitoring_use_type.omut_id;


--
-- Name: page; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE page (
    page_id integer NOT NULL,
    name character varying(50) NOT NULL,
    thema character varying(50) NOT NULL,
    richtlijn character varying(50) NOT NULL,
    start_date timestamp with time zone,
    end_date timestamp with time zone
);


--
-- Name: page_group; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE page_group (
    pg_id integer NOT NULL,
    name character varying(50) NOT NULL,
    start_date timestamp with time zone,
    end_date timestamp with time zone
);


--
-- Name: page_group_pg_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE page_group_pg_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: page_group_pg_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE page_group_pg_id_seq OWNED BY page_group.pg_id;


--
-- Name: page_page_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE page_page_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: page_page_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE page_page_id_seq OWNED BY page.page_id;


--
-- Name: page_pagegroup; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE page_pagegroup (
    pagepg_id integer NOT NULL,
    pg_id integer NOT NULL,
    page_id integer NOT NULL
);


--
-- Name: page_pagegroup_pagepg_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE page_pagegroup_pagepg_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: page_pagegroup_pagepg_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE page_pagegroup_pagepg_id_seq OWNED BY page_pagegroup.pagepg_id;


--
-- Name: parameter_aquo_ds_20160105; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE parameter_aquo_ds_20160105 (
    code character varying(12) NOT NULL,
    omschrijving character varying(100) NOT NULL,
    casnummer character varying(12) NOT NULL,
    groep character varying(60) NOT NULL,
    id integer NOT NULL,
    d_begin date NOT NULL,
    d_eind date,
    d_status character varying(40)
);


--
-- Name: TABLE parameter_aquo_ds_20160105; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON TABLE parameter_aquo_ds_20160105 IS 'Parameter: Contains properties of a substance, organism or object that can be measured or determined.';


--
-- Name: COLUMN parameter_aquo_ds_20160105.code; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN parameter_aquo_ds_20160105.code IS 'a property of a system, medium, organism or object that can be measured or determined.';


--
-- Name: COLUMN parameter_aquo_ds_20160105.omschrijving; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN parameter_aquo_ds_20160105.omschrijving IS 'a property of a system, medium, organism or object that can be measured or determined.';


--
-- Name: COLUMN parameter_aquo_ds_20160105.casnummer; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN parameter_aquo_ds_20160105.casnummer IS 'A coding of a substance which makes recognition possible in case of multiple trading names.';


--
-- Name: COLUMN parameter_aquo_ds_20160105.groep; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN parameter_aquo_ds_20160105.groep IS 'Group to which a parameter belongs. The group can be chemical substance, physical property or object .';


--
-- Name: parameter_use_type; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE parameter_use_type (
    prus_id integer NOT NULL,
    name character varying(50) NOT NULL,
    description text,
    d_begin timestamp without time zone,
    d_eind timestamp without time zone,
    last_changed_date timestamp without time zone,
    d_status character varying(50) DEFAULT 'Gepubliceerd'::character varying
);


--
-- Name: parameter_use_type_prus_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE parameter_use_type_prus_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: parameter_use_type_prus_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE parameter_use_type_prus_id_seq OWNED BY parameter_use_type.prus_id;


--
-- Name: physical_alteration_type; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE physical_alteration_type (
    pat_id integer NOT NULL,
    description character varying(255),
    remark character varying(255),
    order_id integer,
    last_changed_date timestamp without time zone
);


--
-- Name: physical_alteration_type_pat_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE physical_alteration_type_pat_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: physical_alteration_type_pat_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE physical_alteration_type_pat_id_seq OWNED BY physical_alteration_type.pat_id;


--
-- Name: plaatsbepalingsapparaat_type_pba_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE plaatsbepalingsapparaat_type_pba_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: plaatsbepalingsapparaat_type_pba_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE plaatsbepalingsapparaat_type_pba_id_seq OWNED BY plaatsbepalingsapparaat_type.pba_id;


--
-- Name: planned_feature_monitoring; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE planned_feature_monitoring (
    pmf_id integer NOT NULL,
    hdo_id integer NOT NULL,
    qem_id integer,
    last_change_time timestamp without time zone NOT NULL
);


--
-- Name: planned_feature_monitoring_pmf_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE planned_feature_monitoring_pmf_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: planned_feature_monitoring_pmf_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE planned_feature_monitoring_pmf_id_seq OWNED BY planned_feature_monitoring.pmf_id;


--
-- Name: pollutant_trend; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE pollutant_trend (
    pltr_id integer NOT NULL,
    gwys_id integer NOT NULL,
    opt_id integer NOT NULL,
    comment character varying(2000),
    last_change_time timestamp without time zone NOT NULL,
    depth_m integer DEFAULT 10 NOT NULL,
    cls_id integer NOT NULL
);


--
-- Name: pollutant_trend_pltr_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE pollutant_trend_pltr_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: pollutant_trend_pltr_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE pollutant_trend_pltr_id_seq OWNED BY pollutant_trend.pltr_id;


--
-- Name: pom_base_measure113a; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE pom_base_measure113a (
    pbm_id integer NOT NULL,
    rbmp_id integer NOT NULL,
    bma_id integer NOT NULL,
    implemented_id integer NOT NULL,
    summary text NOT NULL,
    comments text,
    last_change_time timestamp without time zone NOT NULL
);


--
-- Name: pom_base_measure113a_pbm_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE pom_base_measure113a_pbm_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: pom_base_measure113a_pbm_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE pom_base_measure113a_pbm_id_seq OWNED BY pom_base_measure113a.pbm_id;


--
-- Name: pom_other_basic_measure113b; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE pom_other_basic_measure113b (
    pobb_id integer NOT NULL,
    rbmp_id integer NOT NULL,
    obmb_id integer NOT NULL,
    is_implemented boolean NOT NULL,
    description character varying(2000),
    comments character varying(2000),
    associated_link_desc text,
    associated_link_uri character varying(255),
    last_change_time timestamp without time zone NOT NULL
);


--
-- Name: pressure_category_type; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE pressure_category_type (
    pcat_id integer NOT NULL,
    code character varying(50) NOT NULL,
    omschrijving character varying(90) NOT NULL,
    d_begin timestamp without time zone,
    d_eind timestamp without time zone,
    last_changed_date timestamp without time zone,
    d_status character varying(50) DEFAULT 'Gepubliceerd'::character varying
);


--
-- Name: pressure_category_type_pcat_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE pressure_category_type_pcat_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: pressure_category_type_pcat_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE pressure_category_type_pcat_id_seq OWNED BY pressure_category_type.pcat_id;


--
-- Name: pressure_relevance_type; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE pressure_relevance_type (
    prr_id integer NOT NULL,
    omschrijving character varying(50) NOT NULL,
    d_begin timestamp without time zone,
    d_eind timestamp without time zone,
    last_changed_date timestamp without time zone,
    d_status character varying(50) DEFAULT 'Gepubliceerd'::character varying
);


--
-- Name: pressure_relevance_type_prr_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE pressure_relevance_type_prr_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: pressure_relevance_type_prr_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE pressure_relevance_type_prr_id_seq OWNED BY pressure_relevance_type.prr_id;


--
-- Name: process_type; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE process_type (
    prc_id integer NOT NULL,
    code character varying(12) NOT NULL,
    description character varying(90),
    d_begin timestamp without time zone,
    d_eind timestamp without time zone,
    last_changed_date timestamp without time zone,
    d_status character varying(50) DEFAULT 'Gepubliceerd'::character varying
);


--
-- Name: process_type_prc_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE process_type_prc_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: process_type_prc_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE process_type_prc_id_seq OWNED BY process_type.prc_id;


--
-- Name: profile; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE profile (
    profileid integer NOT NULL,
    wkpuserid integer NOT NULL,
    propertynames character varying(4000) NOT NULL,
    propertyvaluestrings character varying(4000) NOT NULL,
    propertyvaluebinary bytea,
    lastupdateddate timestamp without time zone NOT NULL
);


--
-- Name: profile_profileid_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE profile_profileid_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: profile_profileid_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE profile_profileid_seq OWNED BY profile.profileid;


--
-- Name: program_monitoring_object; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE program_monitoring_object (
    program_mno_id integer NOT NULL,
    object_mno_id integer NOT NULL,
    last_change_time timestamp without time zone NOT NULL
);


--
-- Name: projection; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE projection (
    pmfp_id integer NOT NULL,
    pmf_id integer NOT NULL,
    monitoring_goal_id integer NOT NULL,
    last_change_time timestamp without time zone NOT NULL
);


--
-- Name: projection_pmfp_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE projection_pmfp_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: projection_pmfp_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE projection_pmfp_id_seq OWNED BY projection.pmfp_id;


--
-- Name: protected_area_type_pat_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE protected_area_type_pat_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: protected_area_type_pat_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE protected_area_type_pat_id_seq OWNED BY protected_area_type.pat_id;


--
-- Name: qe_ecological_type; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE qe_ecological_type (
    qeel_id integer NOT NULL,
    name character varying(50) NOT NULL,
    description text,
    d_begin timestamp without time zone,
    d_eind timestamp without time zone,
    last_changed_date timestamp without time zone,
    d_status character varying(50) DEFAULT 'Gepubliceerd'::character varying
);


--
-- Name: qe_ecological_type_qeel_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE qe_ecological_type_qeel_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: qe_ecological_type_qeel_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE qe_ecological_type_qeel_id_seq OWNED BY qe_ecological_type.qeel_id;


--
-- Name: quality_element_observation_qeo_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE quality_element_observation_qeo_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: quality_element_observation_qeo_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE quality_element_observation_qeo_id_seq OWNED BY quality_element_observation.qeo_id;


--
-- Name: quality_element_qem_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE quality_element_qem_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: quality_element_qem_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE quality_element_qem_id_seq OWNED BY quality_element.qem_id;


--
-- Name: quality_element_sample_qes_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE quality_element_sample_qes_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: quality_element_sample_qes_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE quality_element_sample_qes_id_seq OWNED BY quality_element_sample.qes_id;


--
-- Name: reason_change_type; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE reason_change_type (
    rct_id integer NOT NULL,
    description character varying(255),
    remark character varying(255),
    order_id integer,
    wie character varying(255),
    last_changed_date timestamp without time zone
);


--
-- Name: reason_change_type_rct_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE reason_change_type_rct_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: reason_change_type_rct_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE reason_change_type_rct_id_seq OWNED BY reason_change_type.rct_id;


--
-- Name: rel_hdo_role_type; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE rel_hdo_role_type (
    rhr_id integer NOT NULL,
    description character varying(50) NOT NULL,
    d_begin timestamp without time zone,
    d_eind timestamp without time zone,
    last_changed_date timestamp without time zone,
    d_status character varying(50) DEFAULT 'Gepubliceerd'::character varying
);


--
-- Name: rel_role_type; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE rel_role_type (
    rrt_id integer NOT NULL,
    description character varying(50) NOT NULL,
    d_begin timestamp without time zone,
    d_eind timestamp without time zone,
    last_changed_date timestamp without time zone,
    d_status character varying(50) DEFAULT 'Gepubliceerd'::character varying
);


--
-- Name: rel_samp_feat_role_type_rsfr_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE rel_samp_feat_role_type_rsfr_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: rel_samp_feat_role_type_rsfr_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE rel_samp_feat_role_type_rsfr_id_seq OWNED BY rel_samp_feat_role_type.rsfr_id;


--
-- Name: related_hydro_object; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE related_hydro_object (
    from_hdo integer NOT NULL,
    to_hdo integer NOT NULL,
    last_change_time timestamp without time zone NOT NULL,
    comment character varying(200),
    rrt_id integer NOT NULL
);


--
-- Name: related_monitoring_object; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE related_monitoring_object (
    from_mno integer NOT NULL,
    to_mno integer NOT NULL,
    rrt_id integer NOT NULL,
    last_change_time timestamp without time zone NOT NULL,
    comment character varying(200)
);


--
-- Name: relation_gwb_swb; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE relation_gwb_swb (
    gwb_id integer NOT NULL,
    swb_id integer NOT NULL,
    relation_type_id integer NOT NULL,
    last_change_time timestamp without time zone NOT NULL,
    gwsw_id integer NOT NULL
);


--
-- Name: relation_gwb_swb_gwsw_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE relation_gwb_swb_gwsw_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: relation_gwb_swb_gwsw_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE relation_gwb_swb_gwsw_id_seq OWNED BY relation_gwb_swb.gwsw_id;


--
-- Name: relation_ore_wbd; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE relation_ore_wbd (
    ore_wbd_id integer NOT NULL,
    ore_id integer NOT NULL,
    wbd_id integer NOT NULL,
    last_change_time timestamp without time zone NOT NULL
);


--
-- Name: relation_ore_wbd_ore_wbd_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE relation_ore_wbd_ore_wbd_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: relation_ore_wbd_ore_wbd_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE relation_ore_wbd_ore_wbd_id_seq OWNED BY relation_ore_wbd.ore_wbd_id;


--
-- Name: relation_type; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE relation_type (
    rlt_id integer NOT NULL,
    code character varying(24) NOT NULL,
    description character varying(90) NOT NULL,
    d_begin timestamp without time zone,
    d_eind timestamp without time zone,
    last_changed_date timestamp without time zone,
    d_status character varying(50) DEFAULT 'Gepubliceerd'::character varying
);


--
-- Name: relation_type_rlt_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE relation_type_rlt_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: relation_type_rlt_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE relation_type_rlt_id_seq OWNED BY relation_type.rlt_id;


--
-- Name: report_version; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE report_version (
    rpv_id integer NOT NULL,
    rpp_id integer NOT NULL,
    begin_lifespan_version timestamp without time zone NOT NULL,
    end_lifespan_version timestamp without time zone,
    ost_id integer NOT NULL,
    is_public_data boolean NOT NULL,
    wkrv_id integer NOT NULL,
    last_change_time timestamp without time zone NOT NULL
);


--
-- Name: report_version_rpv_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE report_version_rpv_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: report_version_rpv_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE report_version_rpv_id_seq OWNED BY report_version.rpv_id;


--
-- Name: reporting_period; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE reporting_period (
    rpp_id integer NOT NULL,
    leg_ref_id integer NOT NULL,
    period_start date NOT NULL,
    period_end date,
    description text NOT NULL,
    last_change_time timestamp without time zone NOT NULL,
    isactive boolean DEFAULT true NOT NULL
);


--
-- Name: reporting_period_rpp_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE reporting_period_rpp_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: reporting_period_rpp_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE reporting_period_rpp_id_seq OWNED BY reporting_period.rpp_id;


--
-- Name: result_acquisition_source_type_ras_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE result_acquisition_source_type_ras_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: result_acquisition_source_type_ras_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE result_acquisition_source_type_ras_id_seq OWNED BY result_acquisition_source_type.ras_id;


--
-- Name: river_basin_management_plan; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE river_basin_management_plan (
    rbmp_id integer NOT NULL,
    rbd_id integer NOT NULL,
    wkrv_id integer NOT NULL,
    databases_and_repositories_description character varying(255),
    general_supporting_documents character varying(255),
    name character varying(255) NOT NULL,
    summary_of_programmes text NOT NULL,
    summary_preparation_first_update text NOT NULL,
    summary_processes_and_procedures text NOT NULL,
    table_of_contents text NOT NULL,
    pom_general_additional_comments text,
    last_change_time timestamp without time zone NOT NULL,
    pom_reference character varying(255)
);


--
-- Name: COLUMN river_basin_management_plan.databases_and_repositories_description; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN river_basin_management_plan.databases_and_repositories_description IS 'must be valid URL';


--
-- Name: COLUMN river_basin_management_plan.general_supporting_documents; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN river_basin_management_plan.general_supporting_documents IS 'must be valid URL';


--
-- Name: river_basin_management_plan_rbmp_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE river_basin_management_plan_rbmp_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: river_basin_management_plan_rbmp_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE river_basin_management_plan_rbmp_id_seq OWNED BY river_basin_management_plan.rbmp_id;


--
-- Name: role; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE role (
    roleid integer NOT NULL,
    applicationid integer NOT NULL,
    rolename character varying(256) NOT NULL,
    description character varying(256)
);


--
-- Name: role_roleid_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE role_roleid_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: role_roleid_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE role_roleid_seq OWNED BY role.roleid;


--
-- Name: sampled_feature; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE sampled_feature (
    hdo_id integer NOT NULL,
    mnf_id integer NOT NULL,
    last_change_time timestamp without time zone NOT NULL
);


--
-- Name: sampling_proces_smp_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE sampling_proces_smp_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: sampling_proces_smp_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE sampling_proces_smp_id_seq OWNED BY sampling_proces.smp_id;


--
-- Name: specialised_emf_type_semf_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE specialised_emf_type_semf_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: specialised_emf_type_semf_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE specialised_emf_type_semf_id_seq OWNED BY specialised_emf_type.semf_id;


--
-- Name: station_level_type; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE station_level_type (
    slt_id integer NOT NULL,
    code character varying(12) NOT NULL,
    description character varying(90),
    d_begin timestamp without time zone,
    d_eind timestamp without time zone,
    last_changed_date timestamp without time zone,
    d_status character varying(50) DEFAULT 'Gepubliceerd'::character varying
);


--
-- Name: station_level_type_slt_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE station_level_type_slt_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: station_level_type_slt_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE station_level_type_slt_id_seq OWNED BY station_level_type.slt_id;


--
-- Name: station_type_type; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE station_type_type (
    stt_id integer NOT NULL,
    code character varying(12) NOT NULL,
    description character varying(90),
    d_begin timestamp without time zone,
    d_eind timestamp without time zone,
    last_changed_date timestamp without time zone,
    d_status character varying(50) DEFAULT 'Gepubliceerd'::character varying
);


--
-- Name: station_type_type_stt_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE station_type_type_stt_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: station_type_type_stt_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE station_type_type_stt_id_seq OWNED BY station_type_type.stt_id;


--
-- Name: subsite_type_sst_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE subsite_type_sst_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: subsite_type_sst_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE subsite_type_sst_id_seq OWNED BY subsite_type.sst_id;


--
-- Name: substance_group_ssg_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE substance_group_ssg_id_seq
    START WITH 3151
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: substance_group_ssg_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE substance_group_ssg_id_seq OWNED BY substance_group.ssg_id;


--
-- Name: supp_add_measure_type; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE supp_add_measure_type (
    smnl_id integer NOT NULL,
    rbmp_id integer NOT NULL,
    namespace_id integer NOT NULL,
    local_id character varying(50) NOT NULL,
    measure_name character varying(100) NOT NULL,
    measure_description character varying(2000),
    comment character varying(5000),
    associated_link_desc character varying(255),
    associated_link_uri character varying(255),
    is_additional_measure boolean,
    legislation_ref_id integer NOT NULL,
    amount_value double precision NOT NULL,
    amount_uom_id integer NOT NULL,
    initiative_party text,
    smeu_id integer NOT NULL,
    last_change_time timestamp without time zone NOT NULL,
    initiative_party_ocat_id integer NOT NULL,
    "is_N2000_relevant" boolean DEFAULT false NOT NULL,
    is_abstraction_relevant boolean DEFAULT false NOT NULL,
    d_begin timestamp without time zone,
    d_eind timestamp without time zone,
    last_changed_date timestamp without time zone,
    d_status character varying(50) DEFAULT 'Gepubliceerd'::character varying,
    process_info text
);


--
-- Name: COLUMN supp_add_measure_type.initiative_party; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN supp_add_measure_type.initiative_party IS 'If multiple responsibleParties involved: 
 If ResonsibleParty(s) from ''waterboards'' then ''waterboards''; if responsibleParty also from Rijkswaterstaat then add ''; waterboards''; if responsibleParty also from Provinces then add ''; provinces''';


--
-- Name: sw_abstraction_point; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE sw_abstraction_point (
    sasp_id integer NOT NULL,
    rewab_id integer NOT NULL,
    swat_id integer NOT NULL,
    waterabstraction_from character varying(255),
    last_change_time time without time zone NOT NULL
);


--
-- Name: sw_abstracion_point_sasp_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE sw_abstracion_point_sasp_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: sw_abstracion_point_sasp_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE sw_abstracion_point_sasp_id_seq OWNED BY sw_abstraction_point.sasp_id;


--
-- Name: sw_abstraction_type; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE sw_abstraction_type (
    swat_id integer NOT NULL,
    description character varying(50),
    d_begin timestamp without time zone,
    d_eind timestamp without time zone,
    last_changed_date timestamp without time zone,
    d_status character varying(50) DEFAULT 'Gepubliceerd'::character varying
);


--
-- Name: sw_aggregated_pressure_type; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE sw_aggregated_pressure_type (
    swap_id integer NOT NULL,
    name character varying(90) NOT NULL,
    d_begin timestamp without time zone,
    d_eind timestamp without time zone,
    last_changed_date timestamp without time zone,
    d_status character varying(50) DEFAULT 'Gepubliceerd'::character varying
);


--
-- Name: sw_aggregated_pressure_type_swap_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE sw_aggregated_pressure_type_swap_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: sw_aggregated_pressure_type_swap_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE sw_aggregated_pressure_type_swap_id_seq OWNED BY sw_aggregated_pressure_type.swap_id;


--
-- Name: sw_category_type; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE sw_category_type (
    swc_id integer NOT NULL,
    name character varying(50) NOT NULL,
    d_begin timestamp without time zone,
    d_eind timestamp without time zone,
    last_changed_date timestamp without time zone,
    d_status character varying(50) DEFAULT 'Gepubliceerd'::character varying
);


--
-- Name: sw_category_type_swc_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE sw_category_type_swc_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: sw_category_type_swc_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE sw_category_type_swc_id_seq OWNED BY sw_category_type.swc_id;


--
-- Name: sw_chemical_substance_status_css_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE sw_chemical_substance_status_css_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: sw_chemical_substance_status_css_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE sw_chemical_substance_status_css_id_seq OWNED BY sw_chemical_substance_status.css_id;


--
-- Name: sw_ecological_status_ecs_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE sw_ecological_status_ecs_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: sw_ecological_status_ecs_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE sw_ecological_status_ecs_id_seq OWNED BY sw_ecological_status.ecs_id;


--
-- Name: sw_measure43_function; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE sw_measure43_function (
    me43_id integer NOT NULL,
    smee_id integer NOT NULL,
    last_change_time timestamp without time zone
);


--
-- Name: sw_measure43_nl_type; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE sw_measure43_nl_type (
    me43_id integer NOT NULL,
    omschrijving character varying(255),
    d_begin timestamp without time zone,
    d_eind timestamp without time zone,
    last_changed_date timestamp without time zone,
    d_status character varying(50) DEFAULT 'Gepubliceerd'::character varying
);


--
-- Name: sw_pressure_requiring_supp_add_measures; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE sw_pressure_requiring_supp_add_measures (
    sprm_id integer NOT NULL,
    comments text,
    spg_id integer NOT NULL,
    sprs_id integer NOT NULL,
    bma_id integer,
    obmb_id integer,
    last_change_time timestamp without time zone NOT NULL
);


--
-- Name: sw_pressure_requiring_supp_add_measures_sprm_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE sw_pressure_requiring_supp_add_measures_sprm_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: sw_pressure_requiring_supp_add_measures_sprm_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE sw_pressure_requiring_supp_add_measures_sprm_id_seq OWNED BY sw_pressure_requiring_supp_add_measures.sprm_id;


--
-- Name: sw_pressure_type; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE sw_pressure_type (
    sprs_id integer NOT NULL,
    name character varying(50) NOT NULL,
    description character varying(90) NOT NULL,
    is_only_nl boolean DEFAULT false NOT NULL,
    pressure_category_id integer NOT NULL,
    d_begin timestamp without time zone,
    d_eind timestamp without time zone,
    last_changed_date timestamp without time zone,
    d_status character varying(50) DEFAULT 'Gepubliceerd'::character varying
);


--
-- Name: sw_pressure_type_driver; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE sw_pressure_type_driver (
    sprs_id integer NOT NULL,
    driver_id integer NOT NULL
);


--
-- Name: sw_pressure_type_sprs_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE sw_pressure_type_sprs_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: sw_pressure_type_sprs_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE sw_pressure_type_sprs_id_seq OWNED BY sw_pressure_type.sprs_id;


--
-- Name: sw_pressure_type_type_category; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE sw_pressure_type_type_category (
    swc_id integer NOT NULL,
    sprs_id integer NOT NULL,
    last_change_time timestamp without time zone NOT NULL
);


--
-- Name: sw_pressures_preventing_good_status; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE sw_pressures_preventing_good_status (
    spg_id integer NOT NULL,
    rbmp_id integer NOT NULL,
    swap_id integer NOT NULL,
    is_basic_measures_enough boolean NOT NULL,
    comments text,
    percentage_failure_rw_value double precision,
    percentage_failure_rw_uom_id integer,
    percentage_failure_lw_value double precision,
    percentage_failure_lw_uom_id integer,
    percentage_failure_tw_value double precision,
    percentage_failure_tw_uom_id integer,
    percentage_failure_cw_value double precision,
    percentage_failure_cw_uom_id integer,
    last_change_time timestamp without time zone NOT NULL
);


--
-- Name: COLUMN sw_pressures_preventing_good_status.swap_id; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN sw_pressures_preventing_good_status.swap_id IS 'sw pressure';


--
-- Name: sw_pressures_preventing_good_status_spg_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE sw_pressures_preventing_good_status_spg_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: sw_pressures_preventing_good_status_spg_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE sw_pressures_preventing_good_status_spg_id_seq OWNED BY sw_pressures_preventing_good_status.spg_id;


--
-- Name: sw_required_supp_measure; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE sw_required_supp_measure (
    sprm_id integer NOT NULL,
    smnl_id integer NOT NULL,
    last_change_time timestamp without time zone NOT NULL
);


--
-- Name: sw_supp_measure_eu_type; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE sw_supp_measure_eu_type (
    smeu_id integer NOT NULL,
    name character varying(100) NOT NULL,
    eenh_id integer NOT NULL,
    code character varying(4) NOT NULL,
    hoofdcategorie character varying(32) NOT NULL,
    index smallint NOT NULL,
    klasse character varying(32) NOT NULL,
    subcategorie character varying(100) NOT NULL,
    harmonisatie character varying(32) NOT NULL,
    code_sgbp character varying(50),
    artikel_sgbp character varying(5),
    tablkop_sgbp character varying(100),
    d_begin timestamp without time zone,
    d_eind timestamp without time zone,
    last_changed_date timestamp without time zone,
    d_status character varying(50) DEFAULT 'Gepubliceerd'::character varying
);


--
-- Name: COLUMN sw_supp_measure_eu_type.name; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN sw_supp_measure_eu_type.name IS 'One from the list: legal, economic, negotiated, emission, practice, abstraction, demand, efficiency, construction, desalination, rehabilitation, recharge, educational, research, other';


--
-- Name: sw_supp_measure_eu_type_smeu_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE sw_supp_measure_eu_type_smeu_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: sw_supp_measure_eu_type_smeu_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE sw_supp_measure_eu_type_smeu_id_seq OWNED BY sw_supp_measure_eu_type.smeu_id;


--
-- Name: sw_test_value; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE sw_test_value (
    stcc_id integer NOT NULL,
    nrmv_id integer NOT NULL,
    last_change_time timestamp without time zone NOT NULL
);


--
-- Name: sw_typology_type_styp_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE sw_typology_type_styp_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: sw_typology_type_styp_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE sw_typology_type_styp_id_seq OWNED BY sw_typology_type.styp_id;


--
-- Name: swb_art43b_excemption; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE swb_art43b_excemption (
    swb_id integer NOT NULL,
    a43b_id integer NOT NULL,
    last_change_time timestamp without time zone NOT NULL
);


--
-- Name: swb_chem_exemp_pollutant; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE swb_chem_exemp_pollutant (
    swce_id integer NOT NULL,
    chs_id integer NOT NULL,
    last_change_time timestamp without time zone NOT NULL
);


--
-- Name: swb_exemption; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE swb_exemption (
    swce_id integer NOT NULL,
    swb_id integer NOT NULL,
    obex_id integer NOT NULL,
    comment text NOT NULL,
    last_change_time timestamp without time zone NOT NULL
);


--
-- Name: swb_chemical_exemption_swce_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE swb_chemical_exemption_swce_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: swb_chemical_exemption_swce_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE swb_chemical_exemption_swce_id_seq OWNED BY swb_exemption.swce_id;


--
-- Name: swb_ecol_exemp_qe; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE swb_ecol_exemp_qe (
    swce_id integer NOT NULL,
    opt_id integer NOT NULL,
    last_change_time timestamp without time zone NOT NULL
);


--
-- Name: swb_measures_43a; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE swb_measures_43a (
    swee_id integer NOT NULL,
    swb_id integer NOT NULL,
    fu43_id integer NOT NULL,
    motivation text NOT NULL,
    last_change_time timestamp without time zone NOT NULL
);


--
-- Name: swb_ecological_exemption_swee_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE swb_ecological_exemption_swee_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: swb_ecological_exemption_swee_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE swb_ecological_exemption_swee_id_seq OWNED BY swb_measures_43a.swee_id;


--
-- Name: swb_excemption_mechanism_44; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE swb_excemption_mechanism_44 (
    swce_id integer NOT NULL,
    exme_id integer NOT NULL,
    last_change_time timestamp without time zone NOT NULL
);


--
-- Name: swb_physical_alteration; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE swb_physical_alteration (
    swb_id integer NOT NULL,
    pat_id integer NOT NULL
);


--
-- Name: swb_pressure_swbp_id; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE swb_pressure_swbp_id
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: swb_pressure; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE swb_pressure (
    swbp_id integer DEFAULT nextval('swb_pressure_swbp_id'::regclass) NOT NULL,
    swb_id integer NOT NULL,
    sprs_id integer NOT NULL,
    is_significant boolean NOT NULL,
    last_change_time timestamp without time zone NOT NULL,
    remark text,
    function character varying(250),
    effect text
);


--
-- Name: COLUMN swb_pressure.swbp_id; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN swb_pressure.swbp_id IS 'swb_pressure_swpr_id_seq';


--
-- Name: swb_pressure_impact; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE swb_pressure_impact (
    swbp_id integer NOT NULL,
    impact_id integer NOT NULL
);


--
-- Name: wb_prognosis; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE wb_prognosis (
    wbpr_id integer NOT NULL,
    year integer DEFAULT 2021 NOT NULL,
    opt_id integer NOT NULL,
    cls_id integer NOT NULL,
    last_change_time timestamp without time zone NOT NULL,
    swb_id integer NOT NULL
);


--
-- Name: swb_prognosis_swpr_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE swb_prognosis_swpr_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: swb_prognosis_swpr_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE swb_prognosis_swpr_id_seq OWNED BY wb_prognosis.wbpr_id;


--
-- Name: swb_yearly_status_sys_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE swb_yearly_status_sys_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: swb_yearly_status_sys_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE swb_yearly_status_sys_id_seq OWNED BY swb_yearly_status.sys_id;


--
-- Name: system_configuration; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE system_configuration (
    sc_id integer NOT NULL,
    name character varying(255),
    xml_setting text,
    type integer,
    wie character varying(255),
    last_changed_date timestamp without time zone
);


--
-- Name: system_configuration_sc_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE system_configuration_sc_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: system_configuration_sc_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE system_configuration_sc_id_seq OWNED BY system_configuration.sc_id;


--
-- Name: taxa_group_acc; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE taxa_group_acc (
    txg_id integer,
    name character varying(90),
    group_type character varying(1),
    d_begin timestamp without time zone,
    d_eind timestamp without time zone,
    last_changed_date timestamp without time zone,
    d_status character varying(50)
);


--
-- Name: taxa_group_element_acc; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE taxa_group_element_acc (
    txg_id integer,
    txn_id integer
);


--
-- Name: taxa_group_geen_opt; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE taxa_group_geen_opt (
    txg_id integer,
    name character varying(90),
    group_type character varying(1),
    d_begin timestamp without time zone,
    d_eind timestamp without time zone,
    last_changed_date timestamp without time zone,
    d_status character varying(50)
);


--
-- Name: taxa_group_txg_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE taxa_group_txg_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: taxa_group_txg_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE taxa_group_txg_id_seq OWNED BY taxa_group.txg_id;


--
-- Name: taxon_type_txn_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE taxon_type_txn_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: taxon_type_txn_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE taxon_type_txn_id_seq OWNED BY taxon_type.txn_id;


--
-- Name: thema_actie_organisatorische_eenheid_voortgang; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE thema_actie_organisatorische_eenheid_voortgang (
    taov_id integer NOT NULL,
    ta_id integer NOT NULL,
    ore_id integer NOT NULL,
    completed_date timestamp without time zone NOT NULL
);


--
-- Name: thema_actie_organisatorische_eenheid_voortgang_taov_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE thema_actie_organisatorische_eenheid_voortgang_taov_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: thema_actie_organisatorische_eenheid_voortgang_taov_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE thema_actie_organisatorische_eenheid_voortgang_taov_id_seq OWNED BY thema_actie_organisatorische_eenheid_voortgang.taov_id;


--
-- Name: thema_acties; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE thema_acties (
    ta_id integer NOT NULL,
    t_id integer NOT NULL,
    name character varying(200) NOT NULL,
    year integer NOT NULL,
    start_date timestamp without time zone,
    end_date timestamp without time zone NOT NULL,
    comment character varying(1000)
);


--
-- Name: thema_acties_ta_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE thema_acties_ta_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: thema_acties_ta_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE thema_acties_ta_id_seq OWNED BY thema_acties.ta_id;


--
-- Name: thema_overzicht_groep_organisatorische_eenheden; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE thema_overzicht_groep_organisatorische_eenheden (
    tog_id integer NOT NULL,
    ore_id integer NOT NULL
);


--
-- Name: thema_overzicht_groep_river_basin_disrict; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE thema_overzicht_groep_river_basin_disrict (
    tog_id integer NOT NULL,
    rbd_id integer NOT NULL
);


--
-- Name: thema_overzicht_groep_wkpusers; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE thema_overzicht_groep_wkpusers (
    tog_id integer NOT NULL,
    wkpuserid integer NOT NULL
);


--
-- Name: thema_overzicht_groepen; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE thema_overzicht_groepen (
    tog_id integer NOT NULL,
    name character varying(50) NOT NULL,
    comment character varying(1000)
);


--
-- Name: thema_overzicht_groepen_tog_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE thema_overzicht_groepen_tog_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: thema_overzicht_groepen_tog_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE thema_overzicht_groepen_tog_id_seq OWNED BY thema_overzicht_groepen.tog_id;


--
-- Name: thema_overzicht_statussen; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE thema_overzicht_statussen (
    tos_id integer NOT NULL,
    t_id integer NOT NULL,
    name character varying(50) NOT NULL,
    start_range double precision NOT NULL,
    end_range double precision NOT NULL,
    comment character varying(1000)
);


--
-- Name: thema_overzicht_statussen_tos_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE thema_overzicht_statussen_tos_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: thema_overzicht_statussen_tos_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE thema_overzicht_statussen_tos_id_seq OWNED BY thema_overzicht_statussen.tos_id;


--
-- Name: themas; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE themas (
    t_id integer NOT NULL,
    name character varying(50) NOT NULL,
    comment character varying(1000)
);


--
-- Name: themas_t_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE themas_t_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: themas_t_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE themas_t_id_seq OWNED BY themas.t_id;


--
-- Name: transformation; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE transformation (
    transformationid integer NOT NULL,
    name character varying(50) NOT NULL,
    domaintablename character varying(50),
    importruleid integer,
    importruleasimportid integer,
    inputorder integer
);


--
-- Name: transformation_transformationid_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE transformation_transformationid_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: transformation_transformationid_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE transformation_transformationid_seq OWNED BY transformation.transformationid;


--
-- Name: valid_column_uom; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE valid_column_uom (
    vcu_id integer NOT NULL,
    table_name character varying(50) NOT NULL,
    column_name character varying(50) NOT NULL,
    uom_id integer NOT NULL,
    begin_lifespan timestamp without time zone NOT NULL,
    end_lifespan timestamp without time zone,
    last_change_time timestamp without time zone NOT NULL
);


--
-- Name: validation; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE validation (
    validationid integer NOT NULL,
    name character varying(50) NOT NULL,
    xsd character varying(50) NOT NULL
);


--
-- Name: validation_importtype; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE validation_importtype (
    validation_importtypeid integer NOT NULL,
    importtypeid integer NOT NULL,
    validationid integer NOT NULL
);


--
-- Name: validation_importtype_validation_importtypeid_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE validation_importtype_validation_importtypeid_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: validation_importtype_validation_importtypeid_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE validation_importtype_validation_importtypeid_seq OWNED BY validation_importtype.validation_importtypeid;


--
-- Name: validation_validationid_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE validation_validationid_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: validation_validationid_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE validation_validationid_seq OWNED BY validation.validationid;


--
-- Name: volumestroom_type; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE volumestroom_type (
    vst_id integer NOT NULL,
    code character varying(12) NOT NULL,
    omschrijving character varying(90) NOT NULL,
    d_begin timestamp without time zone,
    d_eind timestamp without time zone,
    last_changed_date timestamp without time zone,
    d_status character varying(50) DEFAULT 'Gepubliceerd'::character varying
);


--
-- Name: volumestroom_type_bronnen; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE volumestroom_type_bronnen (
    vtb_id integer NOT NULL,
    bronnen_id integer NOT NULL,
    vst_id integer NOT NULL,
    waarde numeric
);


--
-- Name: volumestroom_type_bronnen_vtb_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE volumestroom_type_bronnen_vtb_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: volumestroom_type_bronnen_vtb_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE volumestroom_type_bronnen_vtb_id_seq OWNED BY volumestroom_type_bronnen.vtb_id;


--
-- Name: volumestroom_type_vst_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE volumestroom_type_vst_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: volumestroom_type_vst_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE volumestroom_type_vst_id_seq OWNED BY volumestroom_type.vst_id;


--
-- Name: vw_achtergrondwaarden_gwl; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_achtergrondwaarden_gwl AS
 SELECT natural_background_levels.nbl_id AS "DB_ID",
    hdo_gwb.hdo_id AS "Grondwaterlichaam_DB_ID",
    hdo_gwb.inspire_id_local_id AS "Grondwaterlichaam_Identificatie",
    hdon_gwb.name AS "Grondwaterlichaam_Omschrijving",
    vw_waargenomen_eigenschap."Grootheid_Code",
    vw_waargenomen_eigenschap."Grootheid_Omschrijving",
    vw_waargenomen_eigenschap."ChemischeStof_code",
    vw_waargenomen_eigenschap."ChemischeStof_Omschrijving",
    natural_background_levels.priority AS "PrioritaireStof_JN",
    vw_waargenomen_eigenschap."Hoedanigheid_Code",
    vw_waargenomen_eigenschap."Hoedanigheid_Omschrijving",
    natural_background_levels.concentration_value AS "Achtergrondwaarde",
    eenheid_type.code AS "Eenheid_Code",
    eenheid_type.omschrijving AS "Eenheid_Omschrijving"
   FROM ((((natural_background_levels
     LEFT JOIN hydro_object hdo_gwb ON ((hdo_gwb.hdo_id = natural_background_levels.gwb_id)))
     LEFT JOIN hdo_names hdon_gwb ON ((hdo_gwb.hdo_id = hdon_gwb.hdo_id)))
     LEFT JOIN vw_waargenomen_eigenschap ON ((vw_waargenomen_eigenschap."DB_ID" = natural_background_levels.opt_id)))
     LEFT JOIN eenheid_type ON ((eenheid_type.eenh_id = natural_background_levels.concentration_uom_id)))
  ORDER BY hdo_gwb.inspire_id_local_id, vw_waargenomen_eigenschap."ChemischeStof_code";


--
-- Name: vw_am_inspire; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_am_inspire AS
 SELECT DISTINCT ON (hydro_object.inspire_id_namespace, hydro_object.inspire_id_local_id, hydro_object.wkrv_id) ((((('NL.WBHCODE.'::text || hydro_object.inspire_id_namespace) || '.'::text) || (hydro_object.inspire_id_local_id)::text) || '.'::text) || hydro_object.wkrv_id) AS inspireid,
    ('NL.WBHCODE.'::text || hydro_object.inspire_id_namespace) AS inspireid_namespace,
    hydro_object.inspire_id_local_id AS inspireid_localid,
    hydro_object.wkrv_id AS inspireid_version,
    hydro_object.inspire_id_local_id AS thematic_id,
    'WFD_EU_Code'::text AS thematic_id_identifierscheme,
    hdo_names.name AS name_text,
    hdo_names.language AS name_language,
    'http://inspire.ec.europa.eu/codelist/NativenessValue/endonym'::text AS name_nativeness,
    'http://inspire.ec.europa.eu/codelist/NameStatusValue/official'::text AS name_namestatus,
        CASE
            WHEN (hydro_object.inspire_id_namespace > 99) THEN namespace_type.descrption
            WHEN (hydro_object.inspire_id_namespace = 99) THEN 'Ministerie van Infrastructuur en Millieu'::character varying
            ELSE organisatorische_eenheid.naam
        END AS name_sourceofname,
    mrz.geometry_etrs89 AS st_transform,
    geometrytype(mrz.geometry_etrs89) AS geometry_type,
    ((((('DP'::text || (hydro_object.inspire_id_namespace)::text) || '.'::text) || (hydro_object.inspire_id_local_id)::text) || '.'::text) || (hydro_object.wkrv_id)::text) AS designation_id,
    mrz.begin_designation,
    mrz.end_designation,
        CASE
            WHEN (mrz.end_designation IS NULL) THEN 'after'::text
            ELSE NULL::text
        END AS indeterminate_end_designation,
        CASE
            WHEN ((hydro_object.hydro_object_type)::text = 'RiverBasinDistrict'::text) THEN 'http://inspire.ec.europa.eu/codelist/ZoneTypeCode/riverBasinDistrict'::text
            ELSE 'http://inspire.ec.europa.eu/codelist/ZoneTypeCode/waterBodyForWFD'::text
        END AS zonetype,
        CASE
            WHEN ((hydro_object.hydro_object_type)::text = 'RiverBasinDistrict'::text) THEN NULL::character varying
            ELSE hydro_object.hydro_object_type
        END AS specialisedzonetype,
    'http://inspire.ec.europa.eu/codelist/EnvironmentalDomain/water'::text AS environmentaldomain,
        CASE
            WHEN (hydro_object.inspire_id_namespace > 99) THEN namespace_type.descrption
            WHEN (hydro_object.inspire_id_namespace = 99) THEN 'Ministerie van Infrastructuur en Millieu'::character varying
            ELSE organisatorische_eenheid.naam
        END AS competentauthority_organisationname,
    'http://inspire.ec.europa.eu/codelist/RelatedPartyRoleValue/authority'::text AS competentauthority_role,
    wkr_version.begin_lifespan_version AS beginlifespanversion,
    wkr_version.end_lifespan_version AS endlifespanversion,
    ((((('LB'::text || (hydro_object.inspire_id_namespace)::text) || '.'::text) || (hydro_object.inspire_id_local_id)::text) || '.'::text) || (hydro_object.wkrv_id)::text) AS legalbasis_id,
    'Directive 2000/60/EC of the European Parliament and of the Council establishing a framework for the Community action in the field of water policy'::text AS legalbasis_name,
    'Water Framework Directive'::text AS legalbasis_shortname,
    '2000-10-23'::text AS legalbasis_date,
    'http://eur-lex.europa.eu/LexUriServ/LexUriServ.do?uri=CELEX:32000L0060:EN:NOT'::text AS legalbasis_link,
    '2000/60/EC'::text AS legalbasis_identificationnumber,
    'European'::text AS legalbasis_level
   FROM (((((((management_regulation_or_restriction_zone mrz
     LEFT JOIN river_basin_disrict ON ((mrz.mrz_id = river_basin_disrict.rbd_id)))
     JOIN hydro_object ON ((hydro_object.hdo_id = mrz.mrz_id)))
     LEFT JOIN hdo_names ON ((hdo_names.hdo_id = mrz.mrz_id)))
     JOIN wkr_version ON ((wkr_version.wkrv_id = hydro_object.wkrv_id)))
     JOIN namespace_type ON ((namespace_type.ns_id = hydro_object.inspire_id_namespace)))
     LEFT JOIN competentauthority_namespacetype ON ((namespace_type.ns_id = competentauthority_namespacetype.ns_id)))
     LEFT JOIN organisatorische_eenheid ON ((organisatorische_eenheid.ore_id = competentauthority_namespacetype.ore_id)))
  WHERE (((river_basin_disrict.international_rbd IS NOT NULL) OR ((hydro_object.hydro_object_type)::text = ANY (ARRAY[('GroundWaterBody'::character varying)::text, ('SurfaceWaterBody'::character varying)::text]))) AND (hydro_object.wkrv_id = 4))
  ORDER BY hydro_object.inspire_id_namespace, hydro_object.inspire_id_local_id, hydro_object.wkrv_id DESC;


--
-- Name: vw_belastingen_gwl; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_belastingen_gwl AS
 SELECT gwb_pressure.gwbp_id AS "DB_ID",
    vw_waterlichamen.db_id AS "Grondwaterlichaam_DB_ID",
    vw_waterlichamen.identificatie AS "Grondwaterlichaam_Identificatie",
    gw_pressure_type.description AS "Type",
    pressure_category_type.omschrijving AS "Categorie",
    gwb_pressure.is_significant AS "SignificantJN",
    pressure_relevance_type.omschrijving AS "Urgentie",
    drivers.naam AS "Functie",
    gwb_pressure.effect AS "Effecten",
    gwb_pressure.remark AS "Opmerking"
   FROM vw_waterlichamen,
    gwb_pressure,
    gw_pressure_type,
    pressure_category_type,
    pressure_relevance_type,
    gw_pressure_type_driver,
    domains.drivers
  WHERE ((vw_waterlichamen.db_id = gwb_pressure.gwb_id) AND (gw_pressure_type.gprs_id = gwb_pressure.gprs_id) AND (pressure_category_type.pcat_id = gw_pressure_type.pressure_category_id) AND (gwb_pressure.prr_id = pressure_relevance_type.prr_id) AND (gw_pressure_type.gprs_id = gw_pressure_type_driver.gprs_id) AND (gw_pressure_type_driver.driver_id = drivers.driver_id));


--
-- Name: vw_belastingen_gwl_csv; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_belastingen_gwl_csv AS
 SELECT vw_grondwaterlichamen.identificatie AS "Grondwaterlichaam.Identificatie",
    vw_grondwaterlichamen.versie,
    gw_pressure_type.description AS "BelastingSoort",
    pressure_category_type.omschrijving AS "BelastingCategorie",
    gwb_pressure.is_significant AS "SignificantJN",
    pressure_relevance_type.omschrijving AS "Urgentie",
    gwb_pressure.function AS "Functie",
    gwb_pressure.effect AS "Effecten",
    gwb_pressure.remark AS "Opmerking"
   FROM vw_grondwaterlichamen,
    gwb_pressure,
    gw_pressure_type,
    pressure_category_type,
    pressure_relevance_type
  WHERE ((vw_grondwaterlichamen.db_id = gwb_pressure.gwb_id) AND (gw_pressure_type.gprs_id = gwb_pressure.gprs_id) AND (pressure_category_type.pcat_id = gw_pressure_type.pressure_category_id) AND (gwb_pressure.prr_id = pressure_relevance_type.prr_id));


--
-- Name: vw_belastingen_gwl_csv_nieuw; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_belastingen_gwl_csv_nieuw AS
 SELECT vw_grondwaterlichamen.identificatie AS "Grondwaterlichaam.Identificatie",
    vw_grondwaterlichamen.versie,
    gw_pressure_type.description AS "BelastingSoort",
    pressure_category_type.omschrijving AS "BelastingCategorie",
    gwb_pressure.is_significant AS "SignificantJN",
    pressure_relevance_type.omschrijving AS "Urgentie",
    gwb_pressure.remark AS "Opmerking",
    ( SELECT array_to_string(ARRAY( SELECT drivers.naam
                   FROM (domains.drivers
                     JOIN gw_pressure_type_driver ON (((drivers.driver_id = gw_pressure_type_driver.driver_id) AND (gw_pressure_type_driver.gprs_id = gw_pressure_type.gprs_id))))), ','::text) AS array_to_string) AS "Functie",
    ( SELECT array_to_string(ARRAY( SELECT impacts.naam
                   FROM (domains.impacts
                     JOIN gwb_pressure_impact ON (((impacts.impact_id = gwb_pressure_impact.impact_id) AND (gwb_pressure_impact.gwbp_id = gwb_pressure.gwbp_id))))), ','::text) AS array_to_string) AS "Impact"
   FROM vw_grondwaterlichamen,
    gwb_pressure,
    gw_pressure_type,
    pressure_category_type,
    pressure_relevance_type
  WHERE ((vw_grondwaterlichamen.db_id = gwb_pressure.gwb_id) AND (gw_pressure_type.gprs_id = gwb_pressure.gprs_id) AND (pressure_category_type.pcat_id = gw_pressure_type.pressure_category_id) AND (gwb_pressure.prr_id = pressure_relevance_type.prr_id) AND (gw_pressure_type.d_eind IS NULL));


--
-- Name: vw_belastingen_owm; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_belastingen_owm AS
 SELECT swb_pressure.swbp_id AS "DB_ID",
    vw_waterlichamen.db_id AS "Oppervlaktewaterlichaam_DB_ID",
    vw_waterlichamen.identificatie AS "Oppervlaktewaterlichaam_Identificatie",
    sw_pressure_type.description AS "Type",
    pressure_category_type.omschrijving AS "Categorie",
    swb_pressure.is_significant AS "SignificantJN",
    drivers.naam AS "Functie",
    swb_pressure.effect AS "Effecten",
    swb_pressure.remark AS "Opmerking"
   FROM vw_waterlichamen,
    swb_pressure,
    sw_pressure_type,
    pressure_category_type,
    sw_pressure_type_driver,
    domains.drivers
  WHERE ((vw_waterlichamen.db_id = swb_pressure.swb_id) AND (sw_pressure_type.sprs_id = swb_pressure.sprs_id) AND (pressure_category_type.pcat_id = sw_pressure_type.pressure_category_id) AND (sw_pressure_type.sprs_id = sw_pressure_type_driver.sprs_id) AND (sw_pressure_type_driver.driver_id = drivers.driver_id))
  ORDER BY vw_waterlichamen.identificatie, swb_pressure.sprs_id DESC, pressure_category_type.omschrijving;


--
-- Name: vw_oppervlaktewaterlichamen; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_oppervlaktewaterlichamen AS
 SELECT DISTINCT ON (vw_waterlichamen.db_id) vw_waterlichamen.db_id,
    vw_waterlichamen.identificatie,
    vw_waterlichamen.waterbeheerder_code,
    vw_waterlichamen.omschrijving,
    vw_waterlichamen.schaal,
    vw_waterlichamen.stroomgebieddistrict,
    surface_water_body.is_artificial AS is_kunstmatig,
    surface_water_body.is_heaviliy_modified AS is_sterk_veranderd,
        CASE
            WHEN (surface_water_body.is_artificial = true) THEN 'Kunstmatig'::text
            WHEN (surface_water_body.is_heaviliy_modified = true) THEN 'Sterk veranderd'::text
            ELSE 'Natuurlijk'::text
        END AS waterlichaam_status,
    surface_water_body.area_value AS oppervlakte_waarde,
    surface_water_body.area_uom_id,
    surface_water_body.length_value AS lengte_waarde,
    surface_water_body.length_uom_id,
    surface_water_body.other_pressure_description,
    surface_water_body.other_impact_description,
    type.code AS type,
    typer.code AS referentietype,
    vw_waterlichamen.karakterschets,
    vw_waterlichamen.drinkwateronttrekking_jn,
    vw_waterlichamen.versie,
    vw_waterlichamen.versie_begintijd,
    vw_waterlichamen.versie_eindtijd,
    surface_water_body.article_43_comment AS article_43a_comment,
    surface_water_body.article_43_litref AS article_43a_litref,
    surface_water_body.article_43b_motivation,
    vw_waterlichamen."Gerelateerd_HydroObject"
   FROM (((surface_water_body
     LEFT JOIN vw_waterlichamen ON ((surface_water_body.swb_id = vw_waterlichamen.db_id)))
     JOIN sw_typology_type type ON ((type.styp_id = surface_water_body.sw_typology_id)))
     JOIN sw_typology_type typer ON ((typer.styp_id = surface_water_body.sw_target_typology_id)));


--
-- Name: vw_belastingen_owm_csv; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_belastingen_owm_csv AS
 SELECT vw_oppervlaktewaterlichamen.identificatie AS "Oppervlaktewaterlichaam.Identificatie",
    vw_oppervlaktewaterlichamen.versie,
    sw_pressure_type.description AS "BelastingSoort",
    pressure_category_type.omschrijving AS "BelastingCategorie",
    swb_pressure.is_significant AS "SignificantJN",
    swb_pressure.function AS "Functie",
    swb_pressure.effect AS "Effecten",
    swb_pressure.remark AS "Opmerking"
   FROM vw_oppervlaktewaterlichamen,
    swb_pressure,
    sw_pressure_type,
    pressure_category_type
  WHERE ((vw_oppervlaktewaterlichamen.db_id = swb_pressure.swb_id) AND (sw_pressure_type.sprs_id = swb_pressure.sprs_id) AND (pressure_category_type.pcat_id = sw_pressure_type.pressure_category_id))
  ORDER BY vw_oppervlaktewaterlichamen.identificatie, swb_pressure.sprs_id DESC, pressure_category_type.omschrijving;


--
-- Name: vw_belastingen_owm_csv_nieuw; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_belastingen_owm_csv_nieuw AS
 SELECT vw_oppervlaktewaterlichamen.identificatie AS "Oppervlaktewaterlichaam.Identificatie",
    vw_oppervlaktewaterlichamen.versie,
    sw_pressure_type.description AS "BelastingSoort",
    pressure_category_type.omschrijving AS "BelastingCategorie",
    swb_pressure.is_significant AS "SignificantJN",
    swb_pressure.remark AS "Opmerking",
    ( SELECT array_to_string(ARRAY( SELECT drivers.naam
                   FROM (domains.drivers
                     JOIN sw_pressure_type_driver ON (((drivers.driver_id = sw_pressure_type_driver.driver_id) AND (sw_pressure_type_driver.sprs_id = sw_pressure_type.sprs_id))))), ','::text) AS array_to_string) AS "Functie",
    ( SELECT array_to_string(ARRAY( SELECT impacts.naam
                   FROM (domains.impacts
                     JOIN swb_pressure_impact ON (((impacts.impact_id = swb_pressure_impact.impact_id) AND (swb_pressure_impact.swbp_id = swb_pressure.swbp_id))))), ','::text) AS array_to_string) AS "Impact"
   FROM vw_oppervlaktewaterlichamen,
    swb_pressure,
    sw_pressure_type,
    pressure_category_type
  WHERE ((vw_oppervlaktewaterlichamen.db_id = swb_pressure.swb_id) AND (sw_pressure_type.sprs_id = swb_pressure.sprs_id) AND (pressure_category_type.pcat_id = sw_pressure_type.pressure_category_id) AND (sw_pressure_type.d_eind IS NULL))
  ORDER BY vw_oppervlaktewaterlichamen.identificatie, swb_pressure.sprs_id DESC, pressure_category_type.omschrijving;


--
-- Name: vw_beschermd_gebied_richtlijn; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_beschermd_gebied_richtlijn AS
 SELECT tempq.mtm_id,
    tempq.wpa_id,
    string_agg((tempq.code)::text, ', '::text) AS code,
    string_agg((tempq.description)::text, ', '::text) AS agg_richtlijn
   FROM ( SELECT DISTINCT ON (mma.mtm_id, wpa.last_change_time) mma.mtm_id,
            mpa.wpa_id,
            wpa.last_change_time,
            pat.code,
            pat.description
           FROM (((monitored_measure mma
             LEFT JOIN measure_per_man_protected_area mpa ON ((mma.mtm_id = mpa.mtm_id)))
             LEFT JOIN wfd_protected_area wpa ON ((wpa.wpa_id = mpa.wpa_id)))
             LEFT JOIN protected_area_type pat ON ((pat.pat_id = wpa.protected_area_type_id)))) tempq
  GROUP BY tempq.mtm_id, tempq.wpa_id;


--
-- Name: vw_beschermdegebieden; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_beschermdegebieden AS
 SELECT hydro_object.hdo_id AS "DB_ID",
    hdo_names.name AS "Omschrijving",
    hydro_object.inspire_id_local_id AS "Identificatie",
    protected_area_type.description AS "Soort_Beschermd_Gebied",
    protected_area_type.code AS "Soort_Beschermd_Gebied_Code",
    wfd_protected_area.comment_value_status_prot_area AS "Toelichting",
    hydro_object.wkrv_id AS "Versie_ID",
    hydro_object.related_hdo_id AS "Gerelateerd_HydroObject"
   FROM (((((hydro_object
     LEFT JOIN hdo_names ON ((hdo_names.hdo_id = hydro_object.hdo_id)))
     JOIN wkr_version ON ((wkr_version.wkrv_id = hydro_object.wkrv_id)))
     LEFT JOIN management_regulation_or_restriction_zone ON ((management_regulation_or_restriction_zone.mrz_id = hydro_object.hdo_id)))
     JOIN wfd_protected_area ON ((wfd_protected_area.wpa_id = hydro_object.hdo_id)))
     JOIN protected_area_type ON ((protected_area_type.pat_id = wfd_protected_area.protected_area_type_id)));


--
-- Name: vw_beschermdegebieden_g; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_beschermdegebieden_g AS
 SELECT hydro_object.hdo_id AS "DB_ID",
    hdo_names.name AS "Omschrijving",
    hydro_object.inspire_id_local_id AS "Identificatie",
    protected_area_type.description AS "Soort_Beschermd_Gebied",
    protected_area_type.code AS "Soort_Beschermd_Gebied_Code",
    wfd_protected_area.comment_value_status_prot_area AS "Toelichting",
    management_regulation_or_restriction_zone.geometry,
    geometrytype(management_regulation_or_restriction_zone.geometry) AS geometry_type,
    hydro_object.wkrv_id AS "Versie_ID",
    hydro_object.related_hdo_id AS "Gerelateerd_HydroObject"
   FROM (((((hydro_object
     LEFT JOIN hdo_names ON ((hdo_names.hdo_id = hydro_object.hdo_id)))
     JOIN wkr_version ON ((wkr_version.wkrv_id = hydro_object.wkrv_id)))
     LEFT JOIN management_regulation_or_restriction_zone ON ((management_regulation_or_restriction_zone.mrz_id = hydro_object.hdo_id)))
     JOIN wfd_protected_area ON ((wfd_protected_area.wpa_id = hydro_object.hdo_id)))
     JOIN protected_area_type ON ((protected_area_type.pat_id = wfd_protected_area.protected_area_type_id)))
UNION ALL
 SELECT hydro_object.hdo_id AS "DB_ID",
    hdo_names.name AS "Omschrijving",
    hydro_object.inspire_id_local_id AS "Identificatie",
    (('OnttrekkingMenselijkeConsumptie ('::text ||
        CASE
            WHEN ((hydro_object.hydro_object_type)::text = 'SurfaceWaterBody'::text) THEN 'Oppervlaktewater'::text
            ELSE 'Grondwater'::text
        END) || ')'::text) AS "Soort_Beschermd_Gebied",
    'A7'::text AS "Soort_Beschermd_Gebied_Code",
    NULL::character varying AS "Toelichting",
    mrz.geometry,
    geometrytype(mrz.geometry) AS geometry_type,
    hydro_object.wkrv_id AS "Versie_ID",
    hydro_object.related_hdo_id AS "Gerelateerd_HydroObject"
   FROM ((((hydro_object
     LEFT JOIN hdo_names ON ((hdo_names.hdo_id = hydro_object.hdo_id)))
     JOIN wkr_version ON ((wkr_version.wkrv_id = hydro_object.wkrv_id)))
     LEFT JOIN management_regulation_or_restriction_zone mrz ON ((mrz.mrz_id = hydro_object.hdo_id)))
     JOIN water_body ON ((water_body.wbd_id = hydro_object.hdo_id)))
  WHERE (water_body.is_article_7 IS TRUE);


--
-- Name: vw_beschermdegebieden_g_kaart; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_beschermdegebieden_g_kaart AS
 SELECT hydro_object.hdo_id AS db_id,
    protected_area_type.code,
    management_regulation_or_restriction_zone.geometry,
    hydro_object.wkrv_id AS versie
   FROM (((((hydro_object
     LEFT JOIN hdo_names ON ((hdo_names.hdo_id = hydro_object.hdo_id)))
     JOIN wkr_version ON ((wkr_version.wkrv_id = hydro_object.wkrv_id)))
     LEFT JOIN management_regulation_or_restriction_zone ON ((management_regulation_or_restriction_zone.mrz_id = hydro_object.hdo_id)))
     JOIN wfd_protected_area ON ((wfd_protected_area.wpa_id = hydro_object.hdo_id)))
     JOIN protected_area_type ON ((protected_area_type.pat_id = wfd_protected_area.protected_area_type_id)));


--
-- Name: vw_beschermdegebieden_g_punt; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_beschermdegebieden_g_punt AS
 SELECT hydro_object.hdo_id AS db_id,
    protected_area_type.code,
    management_regulation_or_restriction_zone.geometry,
    hydro_object.wkrv_id AS versie
   FROM (((((hydro_object
     LEFT JOIN hdo_names ON ((hdo_names.hdo_id = hydro_object.hdo_id)))
     JOIN wkr_version ON ((wkr_version.wkrv_id = hydro_object.wkrv_id)))
     LEFT JOIN management_regulation_or_restriction_zone ON ((management_regulation_or_restriction_zone.mrz_id = hydro_object.hdo_id)))
     JOIN wfd_protected_area ON ((wfd_protected_area.wpa_id = hydro_object.hdo_id)))
     JOIN protected_area_type ON ((protected_area_type.pat_id = wfd_protected_area.protected_area_type_id)))
  WHERE (geometrytype(management_regulation_or_restriction_zone.geometry) ~~ '%POINT'::text);


--
-- Name: vw_beschermdegebieden_g_vlak; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_beschermdegebieden_g_vlak AS
 SELECT hydro_object.hdo_id AS db_id,
    protected_area_type.code,
    management_regulation_or_restriction_zone.geometry,
    hydro_object.wkrv_id AS versie
   FROM (((((hydro_object
     LEFT JOIN hdo_names ON ((hdo_names.hdo_id = hydro_object.hdo_id)))
     JOIN wkr_version ON ((wkr_version.wkrv_id = hydro_object.wkrv_id)))
     LEFT JOIN management_regulation_or_restriction_zone ON ((management_regulation_or_restriction_zone.mrz_id = hydro_object.hdo_id)))
     JOIN wfd_protected_area ON ((wfd_protected_area.wpa_id = hydro_object.hdo_id)))
     JOIN protected_area_type ON ((protected_area_type.pat_id = wfd_protected_area.protected_area_type_id)))
  WHERE (geometrytype(management_regulation_or_restriction_zone.geometry) = ANY (ARRAY['POLYGON'::text, 'MULTIPOLYGON'::text]));


--
-- Name: vw_beschermdegebieden_shape; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_beschermdegebieden_shape AS
 SELECT DISTINCT ON (hydro_object.inspire_id_local_id) hydro_object.inspire_id_local_id AS "IDENT",
    hdo_names.name AS "NAAM",
    protected_area_type.description AS "SOORT",
    wfd_protected_area.comment_value_status_prot_area AS "TOELICHT",
    management_regulation_or_restriction_zone.geometry
   FROM (((((hydro_object
     LEFT JOIN hdo_names ON ((hdo_names.hdo_id = hydro_object.hdo_id)))
     JOIN wkr_version ON ((wkr_version.wkrv_id = hydro_object.wkrv_id)))
     LEFT JOIN management_regulation_or_restriction_zone ON ((management_regulation_or_restriction_zone.mrz_id = hydro_object.hdo_id)))
     JOIN wfd_protected_area ON ((wfd_protected_area.wpa_id = hydro_object.hdo_id)))
     JOIN protected_area_type ON ((protected_area_type.pat_id = wfd_protected_area.protected_area_type_id)))
  ORDER BY hydro_object.inspire_id_local_id, wkr_version.wkrv_id DESC;


--
-- Name: vw_chemischestof_groepen; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_chemischestof_groepen AS
 SELECT substance_group.ssg_id AS "DB_ID",
    substance_group.name AS "Groepsnaam",
    substance_group.group_type AS "Type",
    chemische_stof_type.chs_id AS "ChemischeStof_DB_ID",
    chemische_stof_type.code AS "ChemischeStof_Code",
    chemische_stof_type.naam AS "ChemischeStof_Omschrijving",
    chemische_stof_type.cas_nr AS "ChemischeStof_CASnr"
   FROM chemische_stof_type,
    substance_group,
    substance_group_element
  WHERE ((chemische_stof_type.chs_id = substance_group_element.chs_id) AND (substance_group.ssg_id = substance_group_element.ssge_id))
  ORDER BY ("position"('S,G,I'::text, (substance_group.group_type)::text)), substance_group.name, chemische_stof_type.code;


--
-- Name: vw_comment_table_view; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_comment_table_view AS
 SELECT dcn.objoid AS object_id,
    cls.relname AS tabel_of_view_naam,
    dcn.description AS commentaar
   FROM (pg_description dcn
     JOIN pg_class cls ON ((cls.relfilenode = dcn.objoid)));


--
-- Name: VIEW vw_comment_table_view; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON VIEW vw_comment_table_view IS 'Hiermee kun je het commentaar bij een tabel of view ophalen en inzien.';


--
-- Name: vw_deelstroomgebieddistricten; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_deelstroomgebieddistricten AS
 SELECT hydro_object.hdo_id AS "DB_ID",
    hydro_object.inspire_id_local_id AS "Identificatie",
    hdo_names.name AS omschrijving,
    management_regulation_or_restriction_zone.geometry,
    river_basin_disrict.area_value AS "Oppervlakte_NumeriekeWaarde",
    eenheid_type.code AS "Oppervlakte_Eenheid_Code",
    eenheid_type.omschrijving AS "Oppervlakte_Eenheid_Omschrijving",
    wkr_version.wkrv_id AS wkr_versie,
    wkr_version.begin_lifespan_version AS wkr_beginversie,
    wkr_version.end_lifespan_version AS wkr_eindversie,
    hydro_object.related_hdo_id AS "Gerelateerd_HydroObject"
   FROM (((((hydro_object
     LEFT JOIN hdo_names ON ((hdo_names.hdo_id = hydro_object.hdo_id)))
     JOIN management_regulation_or_restriction_zone ON ((hydro_object.hdo_id = management_regulation_or_restriction_zone.mrz_id)))
     JOIN river_basin_disrict ON ((hydro_object.hdo_id = river_basin_disrict.rbd_id)))
     JOIN eenheid_type ON ((eenheid_type.eenh_id = river_basin_disrict.area_uom_id)))
     JOIN wkr_version ON ((wkr_version.wkrv_id = hydro_object.wkrv_id)))
  WHERE (river_basin_disrict.part_of_district IS NOT NULL);


--
-- Name: vw_deelstroomgebieddistricten_de_g; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_deelstroomgebieddistricten_de_g AS
 SELECT hydro_object.hdo_id AS "DB_ID",
    hydro_object.inspire_id_local_id AS "Identificatie",
    hdo_names.name AS omschrijving,
    management_regulation_or_restriction_zone.geometry,
    hydro_object.wkrv_id AS wkr_versie
   FROM (((hydro_object
     LEFT JOIN hdo_names ON ((hdo_names.hdo_id = hydro_object.hdo_id)))
     JOIN management_regulation_or_restriction_zone ON ((hydro_object.hdo_id = management_regulation_or_restriction_zone.mrz_id)))
     JOIN river_basin_disrict ON ((hydro_object.hdo_id = river_basin_disrict.rbd_id)))
  WHERE ((river_basin_disrict.part_of_district IS NULL) AND (river_basin_disrict.international_rbd IS NULL));


--
-- Name: vw_deelstroomgebieddistricten_g; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_deelstroomgebieddistricten_g AS
 SELECT hydro_object.hdo_id AS "DB_ID",
    hydro_object.inspire_id_local_id AS "Identificatie",
    hdo_names.name AS omschrijving,
    management_regulation_or_restriction_zone.geometry,
    hydro_object.wkrv_id AS wkr_versie
   FROM (((hydro_object
     LEFT JOIN hdo_names ON ((hdo_names.hdo_id = hydro_object.hdo_id)))
     JOIN management_regulation_or_restriction_zone ON ((hydro_object.hdo_id = management_regulation_or_restriction_zone.mrz_id)))
     JOIN river_basin_disrict ON ((hydro_object.hdo_id = river_basin_disrict.rbd_id)))
  WHERE (river_basin_disrict.part_of_district IS NOT NULL);


--
-- Name: vw_deelstroomgebieddistricten_shape; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_deelstroomgebieddistricten_shape AS
 SELECT DISTINCT ON (hydro_object.inspire_id_local_id) hydro_object.inspire_id_local_id AS "IDENT",
    hdo_names.name AS "NAAM",
    management_regulation_or_restriction_zone.geometry,
    river_basin_disrict.area_value AS "OPP",
    eenheid_type.code AS "OPP_EENH"
   FROM (((((hydro_object
     LEFT JOIN hdo_names ON ((hdo_names.hdo_id = hydro_object.hdo_id)))
     JOIN management_regulation_or_restriction_zone ON ((hydro_object.hdo_id = management_regulation_or_restriction_zone.mrz_id)))
     JOIN river_basin_disrict ON ((hydro_object.hdo_id = river_basin_disrict.rbd_id)))
     JOIN eenheid_type ON ((eenheid_type.eenh_id = river_basin_disrict.area_uom_id)))
     JOIN wkr_version ON ((wkr_version.wkrv_id = hydro_object.wkrv_id)))
  WHERE (river_basin_disrict.part_of_district IS NOT NULL)
  ORDER BY hydro_object.inspire_id_local_id, wkr_version.wkrv_id DESC;


--
-- Name: vw_doelen_owm; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_doelen_owm AS
 SELECT DISTINCT ON (norm_value.nrmv_id, vw_waargenomen_eigenschap."DB_ID", classification_type.description) norm_value.nrmv_id AS "DB_ID",
    vw_waterlichamen.db_id AS "Waterlichaam_DB_ID",
    vw_waterlichamen.identificatie AS "Waterlichaam_identificatie",
    level_of_area_type.loa_id AS "Definitie_niveau_code",
    level_of_area_type.description AS "Definitie_niveau_omschrijving",
    compartiment_type.code AS "Compartiment_Code",
    compartiment_type.description AS "Compartiment_Omschrijving",
    vw_waargenomen_eigenschap."DB_ID" AS "Waargenomen_Eigenschap_DB_ID",
    vw_waargenomen_eigenschap."Tpering_Code",
    vw_waargenomen_eigenschap."Typering_Omschrijving",
    vw_waargenomen_eigenschap."Grootheid_Code",
    vw_waargenomen_eigenschap."Grootheid_Omschrijving",
    vw_waargenomen_eigenschap."ChemischeStof_code",
    vw_waargenomen_eigenschap."ChemischeStof_Omschrijving",
    vw_waargenomen_eigenschap."Object_Omschrijving",
    vw_waargenomen_eigenschap."Object_Code",
    vw_waargenomen_eigenschap."Taxon_Naam",
    vw_waargenomen_eigenschap."Taxon_Auteur",
    vw_waargenomen_eigenschap."Hoedanigheid_Code",
    vw_waargenomen_eigenschap."Hoedanigheid_Omschrijving",
    waarde_bewerkings_methode_type.code AS "Waardebewerkingsmethode_Code",
    waarde_bewerkings_methode_type.omschrijving AS "Waardebewerkingsmethode_Omschrijving",
    eenheid_type.code AS "Eenheid_Code",
    eenheid_type.omschrijving AS "Eenheid_Omschrijving",
    classification_type.description AS "Classificatie",
    bepaling_grens_type.omschrijving AS "Ondergrens_BepalingsGrens",
    norm_value.lowerbound_value AS "Ondergrens_Waarde",
    bgt.omschrijving AS "Bovengrens_BepalingsGrens",
    norm_value.upperbound_value AS "Bovengrens_Waarde",
    norm_value.begin_lifespan_version AS "Begindatum",
    norm_value.end_lifespan_version AS "Einddatum",
    norm_value.opmerking AS "Opmerking",
    norm_groep_type.omschrijving AS "Normgroep",
    norm.wkrv_id AS "Versie_ID",
    date_part('year'::text, norm_value.begin_lifespan_version) AS "Rapportagejaar",
    norm_value.nrmv_id AS norm_value_id
   FROM ((((((((((((norm
     LEFT JOIN norm_feature ON ((norm_feature.nrm_id = norm.nrm_id)))
     LEFT JOIN norm_value ON ((norm_value.nrm_id = norm.nrm_id)))
     LEFT JOIN vw_waargenomen_eigenschap ON ((vw_waargenomen_eigenschap."DB_ID" = norm.observed_property)))
     LEFT JOIN vw_waterlichamen ON ((vw_waterlichamen.db_id = norm_feature.hdo_id)))
     JOIN level_of_area_type ON ((level_of_area_type.loa_id = norm.defined_at_level_id)))
     JOIN norm_groep_type ON ((norm_groep_type.nmgp_id = norm.norm_groep_id)))
     JOIN waarde_bewerkings_methode_type ON ((waarde_bewerkings_methode_type.wbm_id = norm_value.value_processing_method)))
     JOIN eenheid_type ON ((eenheid_type.eenh_id = norm_value.lowerbound_uom_id)))
     JOIN compartiment_type ON ((compartiment_type.cptm_id = norm_value.cptm_id)))
     JOIN classification_type ON ((classification_type.cls_id = norm_value.norm_klasse_id)))
     LEFT JOIN bepaling_grens_type ON ((bepaling_grens_type.bpg_id = norm_value.lowerbound_limit_symbol_id)))
     LEFT JOIN bepaling_grens_type bgt ON ((bgt.bpg_id = norm_value.upperbound_limit_symbol_id)))
  WHERE ((level_of_area_type.loa_id = 5) AND (norm_groep_type.nmgp_id = 7) AND ((norm_value.end_lifespan_version IS NULL) OR (norm_value.end_lifespan_version >= now())))
  ORDER BY norm_value.nrmv_id, vw_waargenomen_eigenschap."DB_ID", classification_type.description, norm.last_change_time DESC, norm.wkrv_id DESC;


--
-- Name: vw_doelen_owm_csv; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_doelen_owm_csv AS
 SELECT vw_oppervlaktewaterlichamen.identificatie AS "Oppervlaktewaterlichaam.Identificatie",
    vw_oppervlaktewaterlichamen.versie AS "Versie",
    compartiment_type.code AS "Compartiment.Code",
    compartiment_type.description AS "Compartiment.Omschrijving",
    vw_waargenomen_eigenschap."Tpering_Code" AS "Typering.Code",
    vw_waargenomen_eigenschap."Typering_Omschrijving" AS "Typering.Omschrijving",
    vw_waargenomen_eigenschap."Grootheid_Code" AS "Grootheid.Code",
    vw_waargenomen_eigenschap."Grootheid_Omschrijving" AS "Grootheid.Omschrijving",
    vw_waargenomen_eigenschap."ChemischeStof_code" AS "ChemischeStof.Code",
    vw_waargenomen_eigenschap."ChemischeStof_Omschrijving" AS "ChemischeStof.Omschrijving",
    vw_waargenomen_eigenschap."Hoedanigheid_Code" AS "Hoedanigheid.Code",
    vw_waargenomen_eigenschap."Hoedanigheid_Omschrijving" AS "Hoedanigheid.Omschrijving",
    waarde_bewerkings_methode_type.code AS "Waardebewerkingsmethode.Code",
    waarde_bewerkings_methode_type.omschrijving AS "Waardebewerkingsmethode.Omschrijving",
    eenheid_type.code AS "Eenheid.Code",
    eenheid_type.omschrijving AS "Eenheid.Omschrijving",
    classification_type.description AS "Classificatie",
    bepaling_grens_type.omschrijving AS "Ondergrens.BepalingsGrens",
    norm_value.lowerbound_value AS "Ondergrens.NumeriekeWaarde",
    bgt.omschrijving AS "Bovengrens.BepalingsGrens",
    norm_value.upperbound_value AS "Bovengrens.NumeriekeWaarde",
    norm_value.begin_lifespan_version AS "Begindatum",
    norm_value.end_lifespan_version AS "Einddatum"
   FROM (((((((((((norm
     LEFT JOIN norm_feature ON ((norm_feature.nrm_id = norm.nrm_id)))
     LEFT JOIN norm_value ON ((norm_value.nrm_id = norm.nrm_id)))
     LEFT JOIN vw_waargenomen_eigenschap ON ((vw_waargenomen_eigenschap."DB_ID" = norm.observed_property)))
     LEFT JOIN vw_oppervlaktewaterlichamen ON ((vw_oppervlaktewaterlichamen.db_id = norm_feature.hdo_id)))
     JOIN norm_groep_type ON ((norm_groep_type.nmgp_id = norm.norm_groep_id)))
     JOIN waarde_bewerkings_methode_type ON ((waarde_bewerkings_methode_type.wbm_id = norm_value.value_processing_method)))
     JOIN eenheid_type ON ((eenheid_type.eenh_id = norm_value.lowerbound_uom_id)))
     JOIN compartiment_type ON ((compartiment_type.cptm_id = norm_value.cptm_id)))
     JOIN classification_type ON ((classification_type.cls_id = norm_value.norm_klasse_id)))
     LEFT JOIN bepaling_grens_type ON ((bepaling_grens_type.bpg_id = norm_value.lowerbound_limit_symbol_id)))
     LEFT JOIN bepaling_grens_type bgt ON ((bgt.bpg_id = norm_value.upperbound_limit_symbol_id)))
  WHERE ((norm_groep_type.nmgp_id = 7) AND ((norm_value.end_lifespan_version IS NULL) OR (norm_value.end_lifespan_version >= now())))
  ORDER BY vw_oppervlaktewaterlichamen.identificatie, vw_waargenomen_eigenschap."DB_ID", classification_type.description, norm_value.end_lifespan_version, norm_value.begin_lifespan_version;


--
-- Name: vw_doelen_owm_csv_nieuw; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_doelen_owm_csv_nieuw AS
 WITH doelen AS (
         SELECT DISTINCT ON (norm_feature.hdo_id, norm_value.nrmv_id, vw_waargenomen_eigenschap_db_id."DB_ID", classification_type.description) norm_feature.hdo_id,
            compartiment_type.code AS "Compartiment.Code",
            compartiment_type.description AS "Compartiment.Omschrijving",
            vw_waargenomen_eigenschap_db_id."Tpering_Code" AS "Typering.Code",
            vw_waargenomen_eigenschap_db_id."Typering_Omschrijving" AS "Typering.Omschrijving",
            vw_waargenomen_eigenschap_db_id."Grootheid_Code" AS "Grootheid.Code",
            vw_waargenomen_eigenschap_db_id."Grootheid_Omschrijving" AS "Grootheid.Omschrijving",
            vw_waargenomen_eigenschap_db_id."DB_ID",
            vw_waargenomen_eigenschap_db_id."ChemischeStof_code" AS "ChemischeStof.Code",
            vw_waargenomen_eigenschap_db_id."ChemischeStof_Omschrijving" AS "ChemischeStof.Omschrijving",
            vw_waargenomen_eigenschap_db_id."Hoedanigheid_Code" AS "Hoedanigheid.Code",
            vw_waargenomen_eigenschap_db_id."Hoedanigheid_Omschrijving" AS "Hoedanigheid.Omschrijving",
            waarde_bewerkings_methode_type.code AS "Waardebewerkingsmethode.Code",
            waarde_bewerkings_methode_type.omschrijving AS "Waardebewerkingsmethode.Omschrijving",
            eenheid_type.code AS "Eenheid.Code",
            eenheid_type.omschrijving AS "Eenheid.Omschrijving",
            classification_type.description AS "Classificatie",
            bepaling_grens_type.omschrijving AS "Ondergrens.BepalingsGrens",
            norm_value.lowerbound_value AS "Ondergrens.Waarde",
            bgt.omschrijving AS "Bovengrens.BepalingsGrens",
            norm_value.upperbound_value AS "Bovengrens.Waarde",
            norm.wkrv_id AS versie,
            date_part('year'::text, norm_value.begin_lifespan_version) AS "Rapportagejaar"
           FROM (((((((((((norm_value
             LEFT JOIN norm ON ((norm_value.nrm_id = norm.nrm_id)))
             LEFT JOIN norm_feature ON ((norm_feature.nrm_id = norm.nrm_id)))
             LEFT JOIN vw_waargenomen_eigenschap_db_id ON ((vw_waargenomen_eigenschap_db_id."DB_ID" = norm.observed_property)))
             LEFT JOIN level_of_area_type ON ((level_of_area_type.loa_id = norm.defined_at_level_id)))
             LEFT JOIN norm_groep_type ON ((norm_groep_type.nmgp_id = norm.norm_groep_id)))
             LEFT JOIN waarde_bewerkings_methode_type ON ((waarde_bewerkings_methode_type.wbm_id = norm_value.value_processing_method)))
             LEFT JOIN eenheid_type ON ((eenheid_type.eenh_id = norm_value.lowerbound_uom_id)))
             LEFT JOIN compartiment_type ON ((compartiment_type.cptm_id = norm_value.cptm_id)))
             LEFT JOIN classification_type ON ((classification_type.cls_id = norm_value.norm_klasse_id)))
             LEFT JOIN bepaling_grens_type ON ((bepaling_grens_type.bpg_id = norm_value.lowerbound_limit_symbol_id)))
             LEFT JOIN bepaling_grens_type bgt ON ((bgt.bpg_id = norm_value.upperbound_limit_symbol_id)))
          WHERE ((level_of_area_type.loa_id = 5) AND (norm_groep_type.nmgp_id = 7) AND ((norm_value.end_lifespan_version IS NULL) OR (norm_value.end_lifespan_version >= now())))
          ORDER BY norm_feature.hdo_id, norm_value.nrmv_id, vw_waargenomen_eigenschap_db_id."DB_ID", classification_type.description, norm.last_change_time DESC, norm.wkrv_id DESC
        )
 SELECT vw_oppervlaktewaterlichamen.identificatie AS "Waterlichaam.Identificatie",
    vw_oppervlaktewaterlichamen.type AS "Watertype",
    vw_oppervlaktewaterlichamen.referentietype AS "Doeltype",
    vw_oppervlaktewaterlichamen.waterlichaam_status AS "Waterlichaam.Status",
    doelen."Compartiment.Code",
    doelen."Compartiment.Omschrijving",
    doelen."Typering.Code",
    doelen."Typering.Omschrijving",
    doelen."Grootheid.Code",
    doelen."Grootheid.Omschrijving",
    doelen."ChemischeStof.Code",
    doelen."ChemischeStof.Omschrijving",
    doelen."Hoedanigheid.Code",
    doelen."Hoedanigheid.Omschrijving",
    doelen."Waardebewerkingsmethode.Code",
    doelen."Waardebewerkingsmethode.Omschrijving",
    doelen."Eenheid.Code",
    doelen."Eenheid.Omschrijving",
    doelen."Classificatie",
    doelen."Ondergrens.BepalingsGrens",
    doelen."Ondergrens.Waarde",
    doelen."Bovengrens.BepalingsGrens",
    doelen."Bovengrens.Waarde",
    doelen.versie,
    doelen."Rapportagejaar"
   FROM (vw_oppervlaktewaterlichamen
     LEFT JOIN doelen ON ((vw_oppervlaktewaterlichamen.db_id = doelen.hdo_id)));


--
-- Name: vw_krw_kwaliteitselement; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_krw_kwaliteitselement AS
 SELECT wfd_qe_swtype.qesw_id AS "DB_ID",
    sw_typology_type.code AS "Watertype_Code",
    sw_typology_type.description AS "Watertype_Omschrijving",
    sw_typology_type.is_freshwater AS "Is_Zoetwater",
    vw_waargenomen_eigenschap."DB_ID" AS "Waargenomen_Eigenschap_DB_ID",
    wfd_qe_swtype.name AS "Kwaliteitselement_Naam",
    vw_waargenomen_eigenschap."Tpering_Code",
    vw_waargenomen_eigenschap."Typering_Omschrijving",
    vw_waargenomen_eigenschap."Grootheid_Code",
    vw_waargenomen_eigenschap."Grootheid_Omschrijving",
    vw_waargenomen_eigenschap."ChemischeStof_code",
    vw_waargenomen_eigenschap."ChemischeStof_Omschrijving",
    vw_waargenomen_eigenschap."ChemischeStof_CASnr",
    vw_waargenomen_eigenschap."Hoedanigheid_Code",
    vw_waargenomen_eigenschap."Hoedanigheid_Omschrijving",
    we2."DB_ID" AS "Onderdeel_van_Typering_DB_ID",
    we2."Tpering_Code" AS "Onderdeel_van_Typering_Code",
    we2."Typering_Omschrijving" AS "Onderdeel_van_Typering_Omschrijving",
    wfd_qe_swtype.main_group AS "Is_hoofdgroep",
    wfd_qe_swtype.is_applicable AS "Is_van_toepassing",
    wfd_qe_swtype.is_excemption AS "Is_artikel_4",
    wfd_qe_swtype.clsg_id AS "ClassifciatieGroep_DB_ID",
    classification_group_type.description AS "ClassificatieGroep_Omschrijving"
   FROM ((((wfd_qe_swtype
     LEFT JOIN sw_typology_type ON ((sw_typology_type.styp_id = wfd_qe_swtype.swt_id)))
     LEFT JOIN vw_waargenomen_eigenschap ON ((vw_waargenomen_eigenschap."DB_ID" = wfd_qe_swtype.opt_id)))
     LEFT JOIN vw_waargenomen_eigenschap we2 ON ((we2."DB_ID" = wfd_qe_swtype.part_of_opt_id)))
     LEFT JOIN classification_group_type ON ((wfd_qe_swtype.clsg_id = classification_group_type.clsg_id)))
  ORDER BY sw_typology_type.code, vw_waargenomen_eigenschap."Tpering_Code", vw_waargenomen_eigenschap."Grootheid_Code", vw_waargenomen_eigenschap."ChemischeStof_code";


--
-- Name: vw_doelen_owm_dgrw; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_doelen_owm_dgrw AS
 SELECT DISTINCT ON (norm_value.nrmv_id, vw_waargenomen_eigenschap_db_id."DB_ID", classification_type.description) vw_waterlichamen.omschrijving AS "Waterlichaam_Naam",
        CASE
            WHEN (namespace_type.ns_id >= 99) THEN namespace_type.descrption
            ELSE vw_competent_authority."Omschrijving"
        END AS "Waterbeheerder_omschrijving",
    "left"((vw_oppervlaktewaterlichamen.stroomgebieddistrict)::text, 4) AS "Stroomgebieddistrict",
    vw_oppervlaktewaterlichamen.type AS watertype,
    vw_oppervlaktewaterlichamen.referentietype AS doeltype,
    vw_oppervlaktewaterlichamen.waterlichaam_status AS "Waterlichaam_Status",
        CASE
            WHEN ((vw_waargenomen_eigenschap_db_id."Grootheid_Omschrijving")::text = '(massa)Concentratie'::text) THEN concat(vw_waargenomen_eigenschap_db_id."Typering_Omschrijving", vw_waargenomen_eigenschap_db_id."ChemischeStof_Omschrijving")
            ELSE concat(vw_waargenomen_eigenschap_db_id."Typering_Omschrijving", vw_waargenomen_eigenschap_db_id."Grootheid_Omschrijving")
        END AS "BeoordeeldeParameter",
    compartiment_type.code AS "Compartiment_Code",
    compartiment_type.description AS "Compartiment_Omschrijving",
    vw_waargenomen_eigenschap_db_id."DB_ID" AS "Waargenomen_Eigenschap_DB_ID",
    vw_waargenomen_eigenschap_db_id."Tpering_Code",
    vw_waargenomen_eigenschap_db_id."Typering_Omschrijving",
    vw_waargenomen_eigenschap_db_id."Grootheid_Code",
    vw_waargenomen_eigenschap_db_id."Grootheid_Omschrijving",
    vw_waargenomen_eigenschap_db_id."ChemischeStof_code",
    vw_waargenomen_eigenschap_db_id."ChemischeStof_Omschrijving",
    vw_waargenomen_eigenschap_db_id."Hoedanigheid_Code",
    vw_waargenomen_eigenschap_db_id."Hoedanigheid_Omschrijving",
    waarde_bewerkings_methode_type.code AS "Waardebewerkingsmethode_Code",
    waarde_bewerkings_methode_type.omschrijving AS "Waardebewerkingsmethode_Omschrijving",
    eenheid_type.code AS "Eenheid_Code",
    eenheid_type.omschrijving AS "Eenheid_Omschrijving",
    classification_type.description AS "Classificatie",
    bepaling_grens_type.omschrijving AS "Ondergrens_BepalingsGrens",
    norm_value.lowerbound_value AS "Ondergrens_Waarde",
    bgt.omschrijving AS "Bovengrens_BepalingsGrens",
    norm_value.upperbound_value AS "Bovengrens_Waarde",
    norm.wkrv_id AS "Versie_ID",
        CASE
            WHEN (krw_kwal."Is_van_toepassing" IS TRUE) THEN true
            ELSE false
        END AS "KWAL_ELEMENT",
    date_part('year'::text, norm_value.begin_lifespan_version) AS "Rapportagejaar",
    vw_waterlichamen.identificatie AS "Waterlichaam_identificatie",
    vw_waterlichamen.omschrijving AS "Waterlichaam_naam"
   FROM ((((((((((((((((((norm_value
     LEFT JOIN norm ON ((norm_value.nrm_id = norm.nrm_id)))
     LEFT JOIN norm_feature ON ((norm_feature.nrm_id = norm.nrm_id)))
     LEFT JOIN vw_waargenomen_eigenschap_db_id ON ((vw_waargenomen_eigenschap_db_id."DB_ID" = norm.observed_property)))
     LEFT JOIN vw_waterlichamen ON ((vw_waterlichamen.db_id = norm_feature.hdo_id)))
     LEFT JOIN vw_oppervlaktewaterlichamen ON ((vw_oppervlaktewaterlichamen.db_id = norm_feature.hdo_id)))
     LEFT JOIN level_of_area_type ON ((level_of_area_type.loa_id = norm.defined_at_level_id)))
     LEFT JOIN norm_groep_type ON ((norm_groep_type.nmgp_id = norm.norm_groep_id)))
     LEFT JOIN waarde_bewerkings_methode_type ON ((waarde_bewerkings_methode_type.wbm_id = norm_value.value_processing_method)))
     LEFT JOIN eenheid_type ON ((eenheid_type.eenh_id = norm_value.lowerbound_uom_id)))
     LEFT JOIN compartiment_type ON ((compartiment_type.cptm_id = norm_value.cptm_id)))
     LEFT JOIN classification_type ON ((classification_type.cls_id = norm_value.norm_klasse_id)))
     LEFT JOIN bepaling_grens_type ON ((bepaling_grens_type.bpg_id = norm_value.lowerbound_limit_symbol_id)))
     LEFT JOIN bepaling_grens_type bgt ON ((bgt.bpg_id = norm_value.upperbound_limit_symbol_id)))
     LEFT JOIN namespace_type ON ((namespace_type.ns_id = vw_waterlichamen.waterbeheerder_code)))
     JOIN competentauthority_namespacetype ON ((competentauthority_namespacetype.ns_id = vw_waterlichamen.waterbeheerder_code)))
     JOIN vw_competent_authority ON ((vw_competent_authority."DB_ID" = competentauthority_namespacetype.ore_id)))
     LEFT JOIN ( SELECT substance_group_element.chs_id,
            substance_group_element.ssge_id
           FROM substance_group_element
          WHERE (substance_group_element.ssge_id = 3125)) ssg_3125 ON ((ssg_3125.chs_id = vw_waargenomen_eigenschap_db_id."ChemischeStof_DB_ID")))
     LEFT JOIN vw_krw_kwaliteitselement krw_kwal ON ((((krw_kwal."Watertype_Code")::text = (vw_oppervlaktewaterlichamen.referentietype)::text) AND (krw_kwal."Waargenomen_Eigenschap_DB_ID" = vw_waargenomen_eigenschap_db_id."DB_ID"))))
  WHERE ((level_of_area_type.loa_id = 5) AND (norm_groep_type.nmgp_id = 7) AND ((norm_value.end_lifespan_version IS NULL) OR (norm_value.end_lifespan_version >= now())))
  ORDER BY norm_value.nrmv_id, vw_waargenomen_eigenschap_db_id."DB_ID", classification_type.description, norm.last_change_time DESC, norm.wkrv_id DESC;


--
-- Name: vw_doelen_owm_dgrw_nieuw; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_doelen_owm_dgrw_nieuw AS
 SELECT DISTINCT ON (norm_value.nrmv_id, vw_waargenomen_eigenschap_db_id."DB_ID", classification_type.description) vw_waterlichamen.omschrijving AS "Waterlichaam_Naam",
        CASE
            WHEN (namespace_type.ns_id >= 99) THEN namespace_type.descrption
            ELSE vw_competent_authority."Omschrijving"
        END AS "Waterbeheerder_omschrijving",
    "left"((vw_oppervlaktewaterlichamen.stroomgebieddistrict)::text, 4) AS "Stroomgebieddistrict",
    vw_oppervlaktewaterlichamen.type AS watertype,
    vw_oppervlaktewaterlichamen.referentietype AS doeltype,
    vw_oppervlaktewaterlichamen.waterlichaam_status AS "Waterlichaam_Status",
        CASE
            WHEN ((vw_waargenomen_eigenschap_db_id."Grootheid_Omschrijving")::text = '(massa)Concentratie'::text) THEN concat(vw_waargenomen_eigenschap_db_id."Typering_Omschrijving", vw_waargenomen_eigenschap_db_id."ChemischeStof_Omschrijving")
            ELSE concat(vw_waargenomen_eigenschap_db_id."Typering_Omschrijving", vw_waargenomen_eigenschap_db_id."Grootheid_Omschrijving")
        END AS "BeoordeeldeParameter",
    compartiment_type.code AS "Compartiment_Code",
    compartiment_type.description AS "Compartiment_Omschrijving",
    vw_waargenomen_eigenschap_db_id."DB_ID" AS "Waargenomen_Eigenschap_DB_ID",
    vw_waargenomen_eigenschap_db_id."Tpering_Code",
    vw_waargenomen_eigenschap_db_id."Typering_Omschrijving",
    vw_waargenomen_eigenschap_db_id."Grootheid_Code",
    vw_waargenomen_eigenschap_db_id."Grootheid_Omschrijving",
    vw_waargenomen_eigenschap_db_id."ChemischeStof_code",
    vw_waargenomen_eigenschap_db_id."ChemischeStof_Omschrijving",
    vw_waargenomen_eigenschap_db_id."Hoedanigheid_Code",
    vw_waargenomen_eigenschap_db_id."Hoedanigheid_Omschrijving",
    waarde_bewerkings_methode_type.code AS "Waardebewerkingsmethode_Code",
    waarde_bewerkings_methode_type.omschrijving AS "Waardebewerkingsmethode_Omschrijving",
    eenheid_type.code AS "Eenheid_Code",
    eenheid_type.omschrijving AS "Eenheid_Omschrijving",
    classification_type.description AS "Classificatie",
    bepaling_grens_type.omschrijving AS "Ondergrens_BepalingsGrens",
    norm_value.lowerbound_value AS "Ondergrens_Waarde",
    bgt.omschrijving AS "Bovengrens_BepalingsGrens",
    norm_value.upperbound_value AS "Bovengrens_Waarde",
    norm.wkrv_id AS "Versie_ID",
        CASE
            WHEN (krw_kwal."Is_van_toepassing" IS TRUE) THEN true
            ELSE false
        END AS "KWAL_ELEMENT",
    date_part('year'::text, norm_value.begin_lifespan_version) AS "Rapportagejaar",
    vw_waterlichamen.identificatie AS "Waterlichaam_identificatie",
    vw_waterlichamen.omschrijving AS "Waterlichaam_naam"
   FROM ((((((((((((((((((norm_value
     LEFT JOIN norm ON ((norm_value.nrm_id = norm.nrm_id)))
     LEFT JOIN norm_feature ON ((norm_feature.nrm_id = norm.nrm_id)))
     LEFT JOIN vw_waargenomen_eigenschap_db_id ON ((vw_waargenomen_eigenschap_db_id."DB_ID" = norm.observed_property)))
     LEFT JOIN vw_waterlichamen ON ((vw_waterlichamen.db_id = norm_feature.hdo_id)))
     LEFT JOIN vw_oppervlaktewaterlichamen ON ((vw_oppervlaktewaterlichamen.db_id = norm_feature.hdo_id)))
     LEFT JOIN level_of_area_type ON ((level_of_area_type.loa_id = norm.defined_at_level_id)))
     LEFT JOIN norm_groep_type ON ((norm_groep_type.nmgp_id = norm.norm_groep_id)))
     LEFT JOIN waarde_bewerkings_methode_type ON ((waarde_bewerkings_methode_type.wbm_id = norm_value.value_processing_method)))
     LEFT JOIN eenheid_type ON ((eenheid_type.eenh_id = norm_value.lowerbound_uom_id)))
     LEFT JOIN compartiment_type ON ((compartiment_type.cptm_id = norm_value.cptm_id)))
     LEFT JOIN classification_type ON ((classification_type.cls_id = norm_value.norm_klasse_id)))
     LEFT JOIN bepaling_grens_type ON ((bepaling_grens_type.bpg_id = norm_value.lowerbound_limit_symbol_id)))
     LEFT JOIN bepaling_grens_type bgt ON ((bgt.bpg_id = norm_value.upperbound_limit_symbol_id)))
     LEFT JOIN namespace_type ON ((namespace_type.ns_id = vw_waterlichamen.waterbeheerder_code)))
     JOIN competentauthority_namespacetype ON ((competentauthority_namespacetype.ns_id = vw_waterlichamen.waterbeheerder_code)))
     JOIN vw_competent_authority ON ((vw_competent_authority."DB_ID" = competentauthority_namespacetype.ore_id)))
     LEFT JOIN ( SELECT substance_group_element.chs_id,
            substance_group_element.ssge_id
           FROM substance_group_element
          WHERE (substance_group_element.ssge_id = 3125)) ssg_3125 ON ((ssg_3125.chs_id = vw_waargenomen_eigenschap_db_id."ChemischeStof_DB_ID")))
     LEFT JOIN vw_krw_kwaliteitselement krw_kwal ON ((((krw_kwal."Watertype_Code")::text = (vw_oppervlaktewaterlichamen.referentietype)::text) AND (krw_kwal."Waargenomen_Eigenschap_DB_ID" = vw_waargenomen_eigenschap_db_id."DB_ID"))))
  WHERE ((level_of_area_type.loa_id = 5) AND (norm_groep_type.nmgp_id = 7) AND ((norm_value.end_lifespan_version IS NULL) OR (norm_value.end_lifespan_version >= now())))
  ORDER BY norm_value.nrmv_id, vw_waargenomen_eigenschap_db_id."DB_ID", classification_type.description, norm.last_change_time DESC, norm.wkrv_id DESC;


--
-- Name: vw_download_meetlocaties_krm; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_download_meetlocaties_krm AS
 SELECT mo.geometry_etrs89 AS geometry,
    geometrytype(mo.geometry) AS geotype,
    mo.inspire_id_local_id AS mpnident,
    mo.name AS mpnomsch,
    mo.inspire_id_namespace_id AS wbhcode,
    mo.begin_lifespan_version AS startdatum,
    mo.end_lifespan_version AS einddatum,
    mo.additional_description AS memo,
    oe.naam AS externbron,
    mooi.hydro_id_local_id AS externcode,
    nf.emn_id AS meetnetid,
    nf.linking_time_begin AS meetnetstart,
    nf.linking_time_end AS meetnetend,
    mo.mno_id
   FROM (((((monitoring_object mo
     JOIN monitoring_feature mf ON ((mo.mno_id = mf.mnf_id)))
     JOIN environmental_monitoring_facility emf ON ((mo.mno_id = emf.emf_id)))
     JOIN network_facility nf ON ((nf.emf_id = emf.emf_id)))
     LEFT JOIN monitoring_object_other_ids mooi ON ((mooi.mno_id = mo.mno_id)))
     LEFT JOIN organisatorische_eenheid oe ON ((oe.ore_id = mooi.hydro_id_ore_id)));


--
-- Name: vw_ef_inspire; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_ef_inspire AS
 SELECT ((((('NL.WBHCODE.'::text || monitoring_object.inspire_id_namespace_id) || '.'::text) || (monitoring_object.inspire_id_local_id)::text) || '.'::text) || monitoring_object.wkrv_id) AS inspireid,
        CASE
            WHEN (monitoring_object.additional_description IS NULL) THEN 'UNPOPULATED'::text
            ELSE NULL::text
        END AS additionaldescription_nilreason,
    monitoring_object.additional_description AS additionaldescription,
    monitoring_object.geometry_etrs89 AS st_transform,
    ('NL.WBHCODE.'::text || (namespace_type.code)::text) AS inspireid_namespace,
    monitoring_object.inspire_id_local_id AS inspireid_localid,
    monitoring_object.wkrv_id AS inspireid_version,
    'http://inspire.ec.europa.eu/codelist/MediaTypeValue/water'::text AS mediamonitored,
    monitoring_object.name,
    'http://inspire.ec.europa.eu/codelist/PurposeOfCollectionValue/waterKwaliteit'::text AS purpose,
    namespace_type.descrption AS responsibleparty_organisationname,
    'http://inspire.ec.europa.eu/codelist/RelatedPartyRoleValue/authority'::text AS responsibleparty_role,
    ('http://inspire.ec.europa.eu/codelist/PurposeOfCollectionValue/'::text || (measurement_regime_type.description)::text) AS measurementregime,
    'false'::text AS mobile,
    ('http://inspire.ec.europa.eu/codelist/ResultNatureValue/'::text || (result_acquisition_source_type.description)::text) AS resultacquisitionsource,
    ('http://inspire.ec.europa.eu/codelist/SpecialisedEMFTypeValue/'::text || (specialised_emf_type.description)::text) AS specialisedemftype
   FROM ((((((monitoring_object
     JOIN environmental_monitoring_facility ON ((monitoring_object.mno_id = environmental_monitoring_facility.emf_id)))
     JOIN monitoring_feature ON ((environmental_monitoring_facility.emf_id = monitoring_feature.mnf_id)))
     JOIN namespace_type ON ((namespace_type.ns_id = monitoring_object.inspire_id_namespace_id)))
     LEFT JOIN specialised_emf_type ON ((environmental_monitoring_facility.speciallised_emf_type_id = specialised_emf_type.semf_id)))
     LEFT JOIN result_acquisition_source_type ON ((environmental_monitoring_facility.result_acquisition_source_id = result_acquisition_source_type.ras_id)))
     LEFT JOIN measurement_regime_type ON ((environmental_monitoring_facility.measurement_regime_id = measurement_regime_type.mmr_id)))
  WHERE (monitoring_object.wkrv_id = 7);


--
-- Name: vw_grondwaterlichaam_kaart_bb; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_grondwaterlichaam_kaart_bb AS
 SELECT gwb.gwb_id AS db_id,
    hydro_object.inspire_id_local_id AS gwbident,
    st_extent(mrz.geometry) AS extent,
    hydro_object.wkrv_id AS versie
   FROM ((ground_water_body gwb
     LEFT JOIN hydro_object ON ((gwb.gwb_id = hydro_object.hdo_id)))
     LEFT JOIN management_regulation_or_restriction_zone mrz ON ((gwb.gwb_id = mrz.mrz_id)))
  GROUP BY gwb.gwb_id, hydro_object.inspire_id_local_id, hydro_object.wkrv_id
  ORDER BY hydro_object.inspire_id_local_id, hydro_object.wkrv_id;


--
-- Name: vw_grondwaterlichamen_g; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_grondwaterlichamen_g AS
 SELECT hydro_object.hdo_id AS db_id,
    hydro_object.inspire_id_local_id AS identificatie,
    hydro_object.inspire_id_namespace AS waterbeheerder_code,
    water_body.is_article_7 AS drinkwateronttrekking_jn,
    hdo_names.name AS omschrijving,
    management_regulation_or_restriction_zone.geometry,
    hdo_rbd.inspire_id_local_id AS stroomgebieddistrict,
    hydro_object.wkrv_id AS versie,
    ground_water_body.is_out_of_rbd AS is_buiten_deelstroomgebied,
    ground_water_body.is_transboundary AS is_grensoverschrijdend,
    ground_water_body.geological_formation_id,
    ground_water_body.vertical_orientation_id,
    ground_water_body.horizon_id AS horizon,
    substrate_type.omschrijving AS substraat,
    ground_water_body.is_layered AS is_gelaagd,
    ground_water_body.is_linked_to_terrestrial_ecosystems AS heeft_link_terrestrische_ecosystemen
   FROM (((((((management_regulation_or_restriction_zone
     JOIN hydro_object ON ((management_regulation_or_restriction_zone.mrz_id = hydro_object.hdo_id)))
     LEFT JOIN hdo_names ON ((hdo_names.hdo_id = management_regulation_or_restriction_zone.mrz_id)))
     JOIN water_body ON ((water_body.wbd_id = management_regulation_or_restriction_zone.mrz_id)))
     JOIN ground_water_body ON ((ground_water_body.gwb_id = management_regulation_or_restriction_zone.mrz_id)))
     JOIN river_basin_disrict rbd ON ((rbd.rbd_id = water_body.rbd_id)))
     JOIN hydro_object hdo_rbd ON ((rbd.rbd_id = hdo_rbd.hdo_id)))
     JOIN substrate_type ON ((substrate_type.sub_id = ground_water_body.substrate_id)))
  WHERE ((management_regulation_or_restriction_zone.mrz_type)::text = 'GroundWaterBody'::text);


--
-- Name: vw_grondwaterlichamen_shape; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_grondwaterlichamen_shape AS
 SELECT hydro_object.hdo_id AS db_id,
    hydro_object.inspire_id_local_id AS gwbident,
    hydro_object.inspire_id_namespace AS namespac,
    vw_competent_authority."Omschrijving" AS wbhcode,
    water_body.is_article_7 AS gwbcons,
    hdo_names.name AS gwbnaam,
    management_regulation_or_restriction_zone.geometry,
    hdo2.inspire_id_local_id AS sgbident,
    water_body.level_of_detail AS schaal,
    ground_water_body.area AS oppvte,
    ground_water_body.is_transboundary AS grensovs,
    ground_water_body.average_depth_value AS gemdiepte,
    ground_water_body.average_thickness_value AS gemdikte,
    ground_water_body.capacity_value AS volme,
    ground_water_body.horizon_id AS gwbhoriz,
    ground_water_body.is_layered AS gelaagd,
    ground_water_body.is_linked_to_terrestrial_ecosystems AS gwb_ter,
    management_regulation_or_restriction_zone.begin_designation AS geldig_b,
    management_regulation_or_restriction_zone.end_designation AS geldig_e,
    geological_formation_type.code AS gwbaquif,
    gw_vertical_orientation_type.code AS gwbverto
   FROM (((((((((((hydro_object
     LEFT JOIN hdo_names ON ((hdo_names.hdo_id = hydro_object.hdo_id)))
     JOIN wkr_version ON ((wkr_version.wkrv_id = hydro_object.wkrv_id)))
     LEFT JOIN management_regulation_or_restriction_zone ON ((management_regulation_or_restriction_zone.mrz_id = hydro_object.hdo_id)))
     LEFT JOIN water_body ON ((water_body.wbd_id = hydro_object.hdo_id)))
     JOIN hydro_object hdo2 ON ((hdo2.hdo_id = water_body.rbd_id)))
     LEFT JOIN ground_water_body ON ((ground_water_body.gwb_id = hydro_object.hdo_id)))
     JOIN substrate_type ON ((substrate_type.sub_id = ground_water_body.substrate_id)))
     LEFT JOIN competentauthority_namespacetype ON ((competentauthority_namespacetype.ns_id = hydro_object.inspire_id_namespace)))
     LEFT JOIN vw_competent_authority ON ((vw_competent_authority."DB_ID" = competentauthority_namespacetype.ore_id)))
     LEFT JOIN geological_formation_type ON ((geological_formation_type.gfm_id = ground_water_body.geological_formation_id)))
     LEFT JOIN gw_vertical_orientation_type ON ((gw_vertical_orientation_type.gvo_id = ground_water_body.vertical_orientation_id)))
  ORDER BY hydro_object.inspire_id_local_id, wkr_version.wkrv_id DESC;


--
-- Name: vw_gw_onttrekking; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_gw_onttrekking AS
 SELECT hydro_object.hdo_id AS "DB_ID",
    hydro_object.inspire_id_local_id AS "Identificatie",
    hdo_names.name AS omschrijving,
    gw_abstraction_point.company AS bedrijf,
    gw_abstraction_point.rewab_code AS "REWAB_Code",
    rewab_type.description AS "REWAB_Type",
    wkr_version.wkrv_id AS wkr_versie,
    wkr_version.begin_lifespan_version AS wkr_beginversie,
    wkr_version.end_lifespan_version AS wkr_eindversie
   FROM (((((hydro_object
     LEFT JOIN hdo_names ON ((hdo_names.hdo_id = hydro_object.hdo_id)))
     JOIN abstraction_point ON ((hydro_object.hdo_id = abstraction_point.asp_id)))
     JOIN gw_abstraction_point ON ((hydro_object.hdo_id = gw_abstraction_point.gasp_id)))
     JOIN rewab_type ON ((rewab_type.rwb_id = gw_abstraction_point.rewab_id)))
     JOIN wkr_version ON ((wkr_version.wkrv_id = hydro_object.wkrv_id)));


--
-- Name: vw_gw_onttrekking_csv; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_gw_onttrekking_csv AS
 SELECT namespace_type.code AS "Namespace",
    hydro_object.inspire_id_local_id AS "LokaalID",
    hdo_names.name AS "Omschrijving",
    gw_abstraction_point.company AS "Bedrijf",
    rewab_type.description AS "Onttrekking.Type",
    st_x((st_astext((st_dump(abstraction_point.geometry)).geom))::geometry) AS "RD_X",
    st_y((st_astext((st_dump(abstraction_point.geometry)).geom))::geometry) AS "RD_Y",
    hdo.inspire_id_local_id AS "Grondwaterlichaam.Identificatie",
    hdo.wkrv_id AS "Versie"
   FROM ((((((hydro_object
     LEFT JOIN hdo_names ON ((hdo_names.hdo_id = hydro_object.hdo_id)))
     JOIN abstraction_point ON ((hydro_object.hdo_id = abstraction_point.asp_id)))
     JOIN gw_abstraction_point ON ((hydro_object.hdo_id = gw_abstraction_point.gasp_id)))
     JOIN rewab_type ON ((rewab_type.rwb_id = gw_abstraction_point.rewab_id)))
     JOIN namespace_type ON ((namespace_type.ns_id = hydro_object.inspire_id_namespace)))
     JOIN hydro_object hdo ON ((hdo.hdo_id = abstraction_point.wbd_id)))
  ORDER BY namespace_type.code, hdo.inspire_id_local_id;


--
-- Name: vw_gw_onttrekking_g_buffer; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_gw_onttrekking_g_buffer AS
 SELECT t."DB_ID",
    t."Identificatie",
    t.omschrijving,
    t.geometry,
    t.bedrijf,
    t."REWAB_DB_ID",
    t."REWAB_Code",
    t."REWAB_Type",
    t.wkr_versie,
    t."Stroomgebieddistrict",
    t.distance
   FROM ( SELECT p."DB_ID",
            p."Identificatie",
            p.omschrijving,
            p.geometry,
            p.bedrijf,
            p."REWAB_DB_ID",
            p."REWAB_Code",
            p."REWAB_Type",
            p.wkr_versie,
            p."Stroomgebieddistrict",
            st_distance(p.geometry, ( SELECT vw_oppervlaktewaterlichaam_l_kaart.geometry
                   FROM vw_oppervlaktewaterlichaam_l_kaart
                  WHERE ((upper((vw_oppervlaktewaterlichaam_l_kaart.owmident)::text) = upper('NL95_3A'::text)) AND (vw_oppervlaktewaterlichaam_l_kaart.versie = 11)))) AS distance
           FROM vw_gw_onttrekking_g p
        UNION ALL
         SELECT p."DB_ID",
            p."Identificatie",
            p.omschrijving,
            p.geometry,
            p.bedrijf,
            p."REWAB_DB_ID",
            p."REWAB_Code",
            p."REWAB_Type",
            p.wkr_versie,
            p."Stroomgebieddistrict",
            st_distance(p.geometry, ( SELECT vw_oppervlaktewaterlichaam_v_kaart.geometry
                   FROM vw_oppervlaktewaterlichaam_v_kaart
                  WHERE ((upper((vw_oppervlaktewaterlichaam_v_kaart.owmident)::text) = upper('NL95_3A'::text)) AND (vw_oppervlaktewaterlichaam_v_kaart.versie = 11)))) AS distance
           FROM vw_gw_onttrekking_g p) t;


--
-- Name: vw_gw_onttrekking_g_punt; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_gw_onttrekking_g_punt AS
 SELECT hydro_object.hdo_id AS "DB_ID",
    hydro_object.inspire_id_local_id AS "Identificatie",
    hdo_names.name AS omschrijving,
    abstraction_point.geometry,
    gw_abstraction_point.company AS bedrijf,
    rewab_type.rwb_id AS "REWAB_DB_ID",
    gw_abstraction_point.rewab_code AS "REWAB_Code",
    rewab_type.description AS "REWAB_Type",
    hydro_object.wkrv_id AS wkr_versie
   FROM ((((hydro_object
     LEFT JOIN hdo_names ON ((hdo_names.hdo_id = hydro_object.hdo_id)))
     JOIN abstraction_point ON ((hydro_object.hdo_id = abstraction_point.asp_id)))
     JOIN gw_abstraction_point ON ((hydro_object.hdo_id = gw_abstraction_point.gasp_id)))
     JOIN rewab_type ON ((rewab_type.rwb_id = gw_abstraction_point.rewab_id)))
  WHERE (geometrytype(abstraction_point.geometry) = 'MULTIPOINT'::text);


--
-- Name: vw_gw_onttrekking_shape; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_gw_onttrekking_shape AS
 SELECT DISTINCT ON (hydro_object.inspire_id_local_id) hydro_object.inspire_id_local_id AS "IDENT",
    hdo_names.name AS "NAAM",
    abstraction_point.geometry,
    gw_abstraction_point.company AS "BEDRIJF",
    gw_abstraction_point.rewab_code AS "REWABCOD",
    rewab_type.description AS "REWABSRT"
   FROM (((((hydro_object
     LEFT JOIN hdo_names ON ((hdo_names.hdo_id = hydro_object.hdo_id)))
     JOIN abstraction_point ON ((hydro_object.hdo_id = abstraction_point.asp_id)))
     JOIN gw_abstraction_point ON ((hydro_object.hdo_id = gw_abstraction_point.gasp_id)))
     JOIN rewab_type ON ((rewab_type.rwb_id = gw_abstraction_point.rewab_id)))
     JOIN wkr_version ON ((wkr_version.wkrv_id = hydro_object.wkrv_id)))
  ORDER BY hydro_object.inspire_id_local_id, wkr_version.wkrv_id DESC;


--
-- Name: vw_gwl_owm_relatie; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_gwl_owm_relatie AS
 SELECT relation_gwb_swb.gwsw_id AS "DB_ID",
    hdo_gwb.hdo_id AS "Grondwaterlichaam_DB_ID",
    hdo_gwb.inspire_id_local_id AS "Grondwaterlichaam_Identificatie",
    hdon_gwb.name AS "Grondwaterlichaam_Omschrijving",
    hdo_gwb.wkrv_id AS "Grondwaterlichaam_Versie",
    hdo_swb.hdo_id AS "Oppervlaktewaterlichaam_DB_ID",
    hdo_swb.inspire_id_local_id AS "OppervlakteWaterlichaam_Identificatie",
    hdon_swb.name AS "OppervlakteWaterlichaam_Omschrijving",
    hdo_gwb.wkrv_id AS "OppervlakteWaterlichaam_Versie",
    relation_type.rlt_id AS "RelatieType_DB_ID",
    relation_type.description AS "RelatieType"
   FROM (((((relation_gwb_swb
     JOIN relation_type ON ((relation_type.rlt_id = relation_gwb_swb.relation_type_id)))
     LEFT JOIN hydro_object hdo_swb ON ((hdo_swb.hdo_id = relation_gwb_swb.swb_id)))
     LEFT JOIN hdo_names hdon_swb ON ((hdo_swb.hdo_id = hdon_swb.hdo_id)))
     LEFT JOIN hydro_object hdo_gwb ON ((hdo_gwb.hdo_id = relation_gwb_swb.gwb_id)))
     LEFT JOIN hdo_names hdon_gwb ON ((hdo_gwb.hdo_id = hdon_gwb.hdo_id)))
  ORDER BY hdo_gwb.inspire_id_local_id, hdo_swb.inspire_id_local_id;


--
-- Name: vw_hydro_object_relaties; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_hydro_object_relaties AS
 SELECT hdo_f.hdo_id AS db_id_bron,
    hdo_f.inspire_id_namespace AS namespace_bron,
    hdo_f.inspire_id_local_id AS identificatie_bron,
    hdo_f.hydro_object_type AS type_bron,
    hdo_f.wkrv_id AS versie_bron,
    rel_role_type.rrt_id AS db_id_rol,
    rel_role_type.description AS rol_omschrijving,
    related_hydro_object.comment AS rol_toelichting,
    hdo_t.hdo_id AS db_id_doel,
    hdo_t.inspire_id_namespace AS namespace_doel,
    hdo_t.inspire_id_local_id AS identificatie_doel,
    hdo_t.hydro_object_type AS type_doel,
    hdo_t.wkrv_id AS versie_doel
   FROM (((related_hydro_object
     LEFT JOIN rel_role_type ON ((rel_role_type.rrt_id = related_hydro_object.rrt_id)))
     LEFT JOIN hydro_object hdo_f ON ((hdo_f.hdo_id = related_hydro_object.from_hdo)))
     LEFT JOIN hydro_object hdo_t ON ((hdo_t.hdo_id = related_hydro_object.to_hdo)))
  ORDER BY hdo_f.hdo_id, hdo_f.wkrv_id, rel_role_type.rrt_id;


--
-- Name: vw_hydro_object_was_wordt_versies_geometrisch; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_hydro_object_was_wordt_versies_geometrisch AS
 SELECT hdo_2.inspire_id_local_id AS identificatie_v2,
    hdo_2.hdo_id AS db_id_v2,
    hdo_3.inspire_id_local_id AS identificatie_v3,
    hdo_3.hdo_id AS db_id_v3,
    hdo_6.inspire_id_local_id AS identificatie_v6,
    hdo_6.hdo_id AS db_id_v6,
    hdo_4.inspire_id_local_id AS identificatie_v4,
    hdo_4.hdo_id AS db_id_v4
   FROM ((((((hydro_object hdo_4
     LEFT JOIN related_hydro_object rho_4 ON ((rho_4.from_hdo = hdo_4.hdo_id)))
     LEFT JOIN hydro_object hdo_6 ON ((rho_4.to_hdo = hdo_6.hdo_id)))
     LEFT JOIN related_hydro_object rho_6 ON ((rho_6.from_hdo = hdo_6.hdo_id)))
     LEFT JOIN hydro_object hdo_3 ON ((rho_6.to_hdo = hdo_3.hdo_id)))
     LEFT JOIN related_hydro_object rho_3 ON ((rho_3.from_hdo = hdo_3.hdo_id)))
     LEFT JOIN hydro_object hdo_2 ON ((rho_3.to_hdo = hdo_2.hdo_id)))
  WHERE (((hdo_4.hydro_object_type)::text = ANY (ARRAY[('GroundWaterBody'::character varying)::text, ('SurfaceWaterBody'::character varying)::text])) AND (hdo_4.wkrv_id = 4) AND (rho_4.rrt_id = 1) AND (rho_6.rrt_id = 1) AND (rho_3.rrt_id = 1))
  ORDER BY hdo_2.inspire_id_local_id;


--
-- Name: vw_hydro_object_was_wordt_versies_geometrisch_v11; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_hydro_object_was_wordt_versies_geometrisch_v11 AS
 SELECT hdo_2.inspire_id_local_id AS identificatie_v2,
    hdo_2.hdo_id AS db_id_v2,
    hdo_3.inspire_id_local_id AS identificatie_v3,
    hdo_3.hdo_id AS db_id_v3,
    hdo_4.inspire_id_local_id AS identificatie_v4,
    hdo_4.hdo_id AS db_id_v4,
    hdo_8.inspire_id_local_id AS identificatie_v8,
    hdo_8.hdo_id AS db_id_v8,
    hdo_11.inspire_id_local_id AS identificatie_v11,
    hdo_11.hdo_id AS db_id_v11
   FROM ((((((((hydro_object hdo_11
     LEFT JOIN related_hydro_object rho_11 ON ((rho_11.from_hdo = hdo_11.hdo_id)))
     LEFT JOIN hydro_object hdo_8 ON ((rho_11.to_hdo = hdo_8.hdo_id)))
     LEFT JOIN related_hydro_object rho_8 ON ((rho_8.from_hdo = hdo_8.hdo_id)))
     LEFT JOIN hydro_object hdo_4 ON ((rho_8.to_hdo = hdo_4.hdo_id)))
     LEFT JOIN related_hydro_object rho_4 ON ((rho_4.from_hdo = hdo_4.hdo_id)))
     LEFT JOIN hydro_object hdo_3 ON ((rho_4.to_hdo = hdo_3.hdo_id)))
     LEFT JOIN related_hydro_object rho_3 ON ((rho_3.from_hdo = hdo_3.hdo_id)))
     LEFT JOIN hydro_object hdo_2 ON ((rho_3.to_hdo = hdo_2.hdo_id)))
  WHERE (((hdo_11.hydro_object_type)::text = ANY (ARRAY[('GroundWaterBody'::character varying)::text, ('SurfaceWaterBody'::character varying)::text])) AND (hdo_11.wkrv_id = 11) AND (rho_11.rrt_id = 1) AND (rho_8.rrt_id = 1) AND (rho_4.rrt_id = 1) AND (rho_3.rrt_id = 1))
  ORDER BY hdo_2.inspire_id_local_id;


--
-- Name: vw_krw_kwaliteitselement_gw; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_krw_kwaliteitselement_gw AS
 SELECT wfd_qe_gwtype.qegw_id AS "DB_ID",
    vw_waargenomen_eigenschap."DB_ID" AS "Waargenomen_Eigenschap_DB_ID",
    wfd_qe_gwtype.name AS "Kwaliteitselement_Naam",
    wfd_qe_gwtype.sortorder,
    vw_waargenomen_eigenschap."Tpering_Code",
    vw_waargenomen_eigenschap."Typering_Omschrijving",
    vw_waargenomen_eigenschap."Grootheid_Code",
    vw_waargenomen_eigenschap."Grootheid_Omschrijving",
    vw_waargenomen_eigenschap."ChemischeStof_code",
    vw_waargenomen_eigenschap."ChemischeStof_Omschrijving",
    vw_waargenomen_eigenschap."ChemischeStof_CASnr",
    vw_waargenomen_eigenschap."Hoedanigheid_Code",
    vw_waargenomen_eigenschap."Hoedanigheid_Omschrijving",
    we2."DB_ID" AS "Onderdeel_van_EU_Typering_DB_ID",
    we2."Tpering_Code" AS "Onderdeel_van_EU_Typering_Code",
    we2."Typering_Omschrijving" AS "Onderdeel_van_EU_Typering_Omschrijving",
    we3."DB_ID" AS "Onderdeel_van_NL_Typering_DB_ID",
    we3."Tpering_Code" AS "Onderdeel_van_NL_Typering_Code",
    we3."Typering_Omschrijving" AS "Onderdeel_van_NL_Typering_Omschrijving",
    wfd_qe_gwtype.main_group AS "Is_hoofdgroep",
    wfd_qe_gwtype.is_applicable AS "Is_van_toepassing",
    wfd_qe_gwtype.is_excemption AS "Is_artikel_4",
    wfd_qe_gwtype.is_trendsubstance AS "Is_trend_stof",
    wfd_qe_gwtype.is_backgroundlevelsubstance AS "Is_drempelwaarde_stof",
    wfd_qe_gwtype.clsg_id AS "ClassifciatieGroep_DB_ID",
    classification_group_type.description AS "ClassificatieGroep_Omschrijving"
   FROM ((((wfd_qe_gwtype
     LEFT JOIN vw_waargenomen_eigenschap ON ((vw_waargenomen_eigenschap."DB_ID" = wfd_qe_gwtype.opt_id)))
     LEFT JOIN vw_waargenomen_eigenschap we2 ON ((we2."DB_ID" = wfd_qe_gwtype.part_of_opt_id_eu)))
     LEFT JOIN vw_waargenomen_eigenschap we3 ON ((we3."DB_ID" = wfd_qe_gwtype.part_of_opt_id_nl)))
     LEFT JOIN classification_group_type ON ((wfd_qe_gwtype.clsg_id = classification_group_type.clsg_id)))
  ORDER BY vw_waargenomen_eigenschap."Tpering_Code", vw_waargenomen_eigenschap."Grootheid_Code", vw_waargenomen_eigenschap."ChemischeStof_code";


--
-- Name: vw_lew2015_meetpunten; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_lew2015_meetpunten AS
 SELECT monitoring_object.mno_id AS meetpunt_identificatie_db_id,
    monitoring_object.inspire_id_local_id AS "Meetpunt.identificatie",
    monitoring_object.name AS "Meetpunt.omschrijving",
    namespace_type.code AS "Waterbeheerder.code",
    namespace_type.descrption AS "Waterbeheerder.omschrijving",
    st_x(st_transform(monitoring_object.geometry, 28992)) AS "GeometriePunt.X_RD",
    st_y(st_transform(monitoring_object.geometry, 28992)) AS "GeometriePunt.Y_RD",
    monitoring_object.wkrv_id AS "Versie",
    monitoring_object.last_change_time
   FROM (((monitoring_object
     JOIN monitored_compartiment ON ((monitored_compartiment.mno_id = monitoring_object.mno_id)))
     JOIN namespace_type ON ((namespace_type.ns_id = monitoring_object.inspire_id_namespace_id)))
     JOIN monitoring_feature ON ((monitoring_feature.mnf_id = monitoring_object.mno_id)))
  WHERE (st_geometrytype(monitoring_object.geometry) = 'ST_Point'::text);


--
-- Name: VIEW vw_lew2015_meetpunten; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON VIEW vw_lew2015_meetpunten IS 'Overzicht van de meetpunten van waterbeheerders,';


--
-- Name: vw_lew2015_monsters_meetwaarden; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_lew2015_monsters_meetwaarden AS
 SELECT nst.descrption AS "Waterbeheerder.omschrijving",
    mno.wkrv_id AS "Versie",
    mno.inspire_id_local_id AS "Meetpunt.identificatie",
    mno.inspire_id_namespace_id AS "Waterbeheerder.code",
    mno.name AS "Meetpunt.omschrijving",
    obs.obs_id AS "Observation.id",
    obs.phenomenon_time_begin AS "Observation.begindatum",
    obs.result_time AS "Observation.resultaatdatum",
    obs.last_change_time AS "Tijdstip.geladeninwkp",
    obs.observed_property_type AS "Observedpropertytype.id",
        CASE
            WHEN (opt.taxa_group_id IS NOT NULL) THEN 'Biotaxon'::text
            WHEN (opt.substance_group_id IS NOT NULL) THEN 'ChemischeStof'::text
            WHEN (opt.object_group_id IS NOT NULL) THEN 'Object'::text
            ELSE NULL::text
        END AS "Stof.soort",
        CASE
            WHEN (opt.taxa_group_id IS NOT NULL) THEN txg.name
            WHEN (opt.substance_group_id IS NOT NULL) THEN ssg.name
            WHEN (opt.object_group_id IS NOT NULL) THEN ojg.name
            ELSE NULL::character varying
        END AS "Stof.naam",
    hdh.code AS "Hoedanigheid.code",
    hdh.omschrijving AS "Hoedanigheid.omschrijving",
    grh.code AS "Grootheid.code",
    grh.omschrijving AS "Grootheid.omschrijving",
    eenh.eenh_id AS "Eenheid.id",
    eenh.code AS "Eenheid.code",
    eenh.omschrijving AS "Eenheid.omschrijving",
    obs.limit_symbol_id AS "Limietsymbool.id",
    bpg.omschrijving AS "Limietsymbool.omschrijving",
    obs.numeric_value AS "Numeriekewaarde",
    smpl.smpl_id AS "Monster.id",
    smpl.name AS "Monster.naam",
    smpl.sampling_location AS "Monster.locatie",
    smpl.material_class_id AS "Compartiment.id",
    cptm.code AS "Compartiment.code",
    cptm.description AS "Compartiment.omschrijving"
   FROM (((((((((((((((observation obs
     JOIN observed_property_type opt ON ((opt.opt_id = obs.observed_property_type)))
     JOIN eenheid_type eenh ON ((eenh.eenh_id = obs.numeric_value_uom_id)))
     JOIN observing_capability_observation ocbs ON ((ocbs.obs_id = obs.obs_id)))
     JOIN observing_capability osc ON ((osc.osc_id = ocbs.osc_id)))
     JOIN monitoring_object mno ON ((mno.mno_id = obs.mno_id)))
     JOIN namespace_type nst ON ((nst.ns_id = mno.inspire_id_namespace_id)))
     LEFT JOIN bepaling_grens_type bpg ON ((bpg.bpg_id = obs.limit_symbol_id)))
     LEFT JOIN observing_capability_sample ocsa ON ((ocsa.osc_id = osc.osc_id)))
     LEFT JOIN sample smpl ON ((smpl.smpl_id = ocsa.smpl_id)))
     LEFT JOIN hoedanigheid_type hdh ON ((hdh.hdh_id = opt.hoedanigheid_id)))
     LEFT JOIN grootheid_type grh ON ((grh.grh_id = opt.quantity_id)))
     LEFT JOIN taxa_group txg ON ((txg.txg_id = opt.taxa_group_id)))
     LEFT JOIN substance_group ssg ON ((ssg.ssg_id = opt.substance_group_id)))
     LEFT JOIN object_group ojg ON ((ojg.ojg_id = opt.object_group_id)))
     LEFT JOIN compartiment_type cptm ON ((cptm.cptm_id = smpl.material_class_id)));


--
-- Name: VIEW vw_lew2015_monsters_meetwaarden; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON VIEW vw_lew2015_monsters_meetwaarden IS 'Geeft een overzicht van de geladen meetwaarden met monsters per waterbeheerder en zijn meetpunten.';


--
-- Name: vw_lew2015_waterbeheerders; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_lew2015_waterbeheerders AS
 SELECT namespace_type.code,
    namespace_type.descrption,
    competent_authority.namespace_id,
    competent_authority.legal_status,
    competent_authority.legal_status_reference,
    competent_authority.legal_status_summary,
    competentauthority_namespacetype.ca_ns_id,
    competentauthority_namespacetype.last_change_time,
    namespace_type.ns_id,
    organisatorische_eenheid.ore_id,
    organisatorische_eenheid.organisatie_identificatie,
    organisatorische_eenheid.naam,
    organisatorische_eenheid.naam_verkort
   FROM (((competentauthority_namespacetype
     JOIN competent_authority ON ((competentauthority_namespacetype.ore_id = competent_authority.ore_id)))
     JOIN namespace_type ON (((competentauthority_namespacetype.ns_id = namespace_type.ns_id) AND (competent_authority.namespace_id = namespace_type.ns_id))))
     JOIN organisatorische_eenheid ON ((competent_authority.ore_id = organisatorische_eenheid.ore_id)));


--
-- Name: VIEW vw_lew2015_waterbeheerders; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON VIEW vw_lew2015_waterbeheerders IS 'Geeft veel gegevens over de waterbeheerders.';


--
-- Name: vw_reportversion; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_reportversion AS
 SELECT report_version.rpv_id AS db_id,
    object_state_type.decsription AS rapportagestatus,
    reporting_period.description AS rapportageperiode,
    reporting_period.period_start AS rapportageperiodebegin,
    reporting_period.period_end AS rapportageperiodeeind,
    legislation_reference_type.lgr_id AS rapportagebasis_id,
    legislation_reference_type.legal_name AS rapportagebasis_omschrijving,
    report_version.begin_lifespan_version AS beginrapportage,
    report_version.end_lifespan_version AS eindrapportage,
    report_version.is_public_data AS publiektoegankelijk,
    wkr_version.wkrv_id AS wkr_versie,
    wkr_version.begin_lifespan_version AS wkr_beginversie,
    wkr_version.end_lifespan_version AS wkr_eindversie
   FROM ((legislation_reference_type
     JOIN reporting_period ON ((legislation_reference_type.lgr_id = reporting_period.leg_ref_id)))
     FULL JOIN ((report_version
     JOIN object_state_type ON ((report_version.ost_id = object_state_type.ost_id)))
     FULL JOIN wkr_version ON ((report_version.wkrv_id = wkr_version.wkrv_id))) ON ((reporting_period.rpp_id = report_version.rpp_id)))
  ORDER BY report_version.rpv_id, reporting_period.period_start;


--
-- Name: vw_maatregelen; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_maatregelen AS
 SELECT mm.mtm_id AS "DB_ID",
    samt.local_id AS "Identifcatie",
    samt.measure_name AS "Naam",
    samt.measure_description AS "Omschrijving",
    samt.comment AS "Toelichting",
    samt.associated_link_desc AS "Bron_Omschrijving",
    vwr.rapportageperiodebegin AS "Periode_Begindatum",
    vwr.rapportageperiodeeind AS "Periode_Einddatum",
    loat.description AS "Niveau",
    samteu.smeu_id,
    samteu.name AS "EUType_Omschrijving",
    samt.amount_value AS "Hoeveelheid",
    et.code AS "Eenheid_Code",
    et.omschrijving AS "Eenheid_Omschrijving",
    oe.organisatie_identificatie AS "Verantwoordelijke_Overheid",
    can.ns_id AS "Waterbeheerder_DB_ID",
    samt.initiative_party AS "Initiatiefnemer",
    oct.omschrijving AS "Initiatiefnemer_Categorie",
    vwsend."Identificatie" AS "Stroomgebied_Identificatie",
    samt.is_additional_measure AS "Opgenomen_In_SGBP"
   FROM ((((((((((monitored_measure mm
     JOIN supp_add_measure_type samt ON ((mm.mtm_id = samt.smnl_id)))
     JOIN sw_supp_measure_eu_type samteu ON ((samteu.smeu_id = samt.smeu_id)))
     JOIN eenheid_type et ON ((et.eenh_id = samteu.eenh_id)))
     JOIN organisation_category_type oct ON ((oct.ocat_id = samt.initiative_party_ocat_id)))
     JOIN vw_reportversion vwr ON ((vwr.db_id = mm.rpv_id)))
     JOIN level_of_area_type loat ON ((loat.loa_id = mm.level_of_measure_id)))
     JOIN river_basin_management_plan rbmp ON ((rbmp.rbmp_id = samt.rbmp_id)))
     JOIN vw_sg_en_dsg_districten vwsend ON ((vwsend."DB_ID" = rbmp.rbd_id)))
     JOIN competentauthority_namespacetype can ON ((can.ns_id = samt.namespace_id)))
     JOIN organisatorische_eenheid oe ON ((oe.ore_id = can.ore_id)));


--
-- Name: vw_maatregelen_csv; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_maatregelen_csv AS
 SELECT maatregelen.mtm_id AS "DB_ID",
    rv2.rpp_id AS periodeid,
    ('NL'::text || (wb_nst.code)::text) AS "Namespace",
    regexp_replace((supp_add_measure_type.local_id)::text, '\r|\n'::text, ''::text, 'g'::text) AS "LokaalID",
    regexp_replace((supp_add_measure_type.measure_name)::text, '\r|\n'::text, ''::text, 'g'::text) AS "Naam",
    rpp.description AS "SGBPPeriode.Omschrijving",
    ((date_part('year'::text, reporting_period.period_start) || '-'::text) || date_part('year'::text, reporting_period.period_end)) AS "UitvoeringIn",
    regexp_replace((sw_supp_measure_eu_type.code)::text, '\r|\n'::text, ''::text, 'g'::text) AS "KRWmaatregel.Code",
    regexp_replace((supp_add_measure_type.measure_description)::text, '\r|\n'::text, ''::text, 'g'::text) AS "Toelichting",
    regexp_replace((level_of_area_type.code)::text, '\r|\n'::text, ''::text, 'g'::text) AS "KRWMaatregelNiveau.Code",
    array_to_string(ARRAY( SELECT DISTINCT regexp_replace((ho.inspire_id_local_id)::text, '\r|\n'::text, ''::text, 'g'::text) AS regexp_replace
           FROM (hydro_object ho
             JOIN measure_per_man_reg_or_restr_zone mz ON ((mz.mrz_id = ho.hdo_id)))
          WHERE (mz.mtm_id = maatregelen.mtm_id)), '|'::text) AS "HoortbijKRWwaterlichaam",
    stroomgebieddistrict.inspire_id_local_id AS "KRWstroomgebiedDistrict.Code",
    supp_add_measure_type.amount_value AS "OmvangNumeriekeWaarde",
    regexp_replace((eenheid_type.code)::text, '\r|\n'::text, ''::text, 'g'::text) AS omvangeenheidcode,
    supp_add_measure_type.is_additional_measure AS "OpnameInSGBPJN",
    regexp_replace((organisation_category_type.code)::text, '\r|\n'::text, ''::text, 'g'::text) AS "Initiatiefnemer.Code",
    regexp_replace(supp_add_measure_type.initiative_party, '\r|\n'::text, ''::text, 'g'::text) AS "Initiatiefnemer.Naam",
    array_to_string(ARRAY( SELECT DISTINCT regexp_replace((t.code)::text, '\r|\n'::text, ''::text, 'g'::text) AS regexp_replace
           FROM (monitored_measure_eu_fund m
             JOIN eu_fund_type t ON ((t.euf_id = m.euf_id)))
          WHERE (m.mtm_id = maatregelen.mtm_id)), '|'::text) AS "EUFonds.Code",
    array_to_string(ARRAY( SELECT DISTINCT regexp_replace((vbg."Identificatie")::text, '\r|\n'::text, ''::text, 'g'::text) AS regexp_replace
           FROM (vw_beschermdegebieden vbg
             JOIN measure_per_man_protected_area mpmpa ON ((mpmpa.wpa_id = vbg."DB_ID")))
          WHERE ((mpmpa.mtm_id = maatregelen.mtm_id) AND (vbg."Versie_ID" = rv2.wkrv_id))), '|'::text) AS "RelatieMetNatura2000Gebied",
    array_to_string(ARRAY( SELECT DISTINCT regexp_replace((vgo."Identificatie")::text, '\r|\n'::text, ''::text, 'g'::text) AS regexp_replace
           FROM (vw_gw_onttrekking vgo
             JOIN measure_per_abstraction_point mpap ON ((mpap.asp_id = vgo."DB_ID")))
          WHERE ((mpap.mtm_id = maatregelen.mtm_id) AND (vgo.wkr_versie = rv2.wkrv_id))), '|'::text) AS "RelatieMetWaterwinning",
    river_basin_management_plan.wkrv_id AS versie
   FROM ((((((((((((((monitored_measure maatregelen
     JOIN supp_add_measure_type ON ((supp_add_measure_type.smnl_id = maatregelen.mtm_id)))
     JOIN sw_supp_measure_eu_type ON ((sw_supp_measure_eu_type.smeu_id = supp_add_measure_type.smeu_id)))
     JOIN eenheid_type ON ((eenheid_type.eenh_id = sw_supp_measure_eu_type.eenh_id)))
     JOIN namespace_type wb_nst ON ((wb_nst.ns_id = supp_add_measure_type.namespace_id)))
     JOIN competentauthority_namespacetype ON ((competentauthority_namespacetype.ns_id = wb_nst.ns_id)))
     JOIN competent_authority ON ((competent_authority.ore_id = competentauthority_namespacetype.ore_id)))
     JOIN report_version ON ((report_version.rpv_id = maatregelen.rpv_id)))
     JOIN reporting_period ON ((reporting_period.rpp_id = report_version.rpp_id)))
     JOIN level_of_area_type ON ((level_of_area_type.loa_id = maatregelen.level_of_measure_id)))
     JOIN organisation_category_type ON ((organisation_category_type.ocat_id = supp_add_measure_type.initiative_party_ocat_id)))
     JOIN river_basin_management_plan ON ((river_basin_management_plan.rbmp_id = supp_add_measure_type.rbmp_id)))
     JOIN hydro_object stroomgebieddistrict ON ((stroomgebieddistrict.hdo_id = river_basin_management_plan.rbd_id)))
     JOIN report_version rv2 ON ((rv2.wkrv_id = river_basin_management_plan.wkrv_id)))
     JOIN reporting_period rpp ON ((rpp.rpp_id = rv2.rpp_id)))
  ORDER BY supp_add_measure_type.local_id;


--
-- Name: vw_maatregelen_csv_for_download; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_maatregelen_csv_for_download AS
 SELECT DISTINCT dqw."DB_ID",
    dqw."Namespace",
    dqw."Waterbeheerder_Naam",
    dqw."LokaalID",
    dqw."Naam",
    dqw."SGBPPeriode_Omschrijving",
    dqw."UitvoeringIn",
    dqw."KRWmaatregel_Code",
    dqw."KRWmaatregel_Naam",
    dqw."Voortgang_Toelichting",
    dqw."Hoofdcategorie",
    dqw."Index",
    dqw."SGBP_Klasse",
    dqw."SGBP_Harmonisatie",
    dqw."SGBP_code",
    dqw."SGBP_artikel",
    dqw."SGBP_Hoofdcategorie",
    dqw."KRWMaatregelNiveau_Code",
    dqw."KRWMaatregelNiveau_Omschrijving",
    dqw."HoortbijKRWwaterlichaam",
    dqw."KRWstroomgebiedDistrict_Code",
    dqw."OpnameInSGBPJN",
    dqw."Initiatiefnemer_Code",
    dqw."Initiatiefnemer_Naam",
    dqw."EUFonds_Code",
    dqw."RelatieMetNatura2000Gebied",
    dqw."RelatieMetWaterwinning",
    dqw.versie,
    dqw."OmvangNumeriekeWaarde",
    dqw.omvangeenheidcode,
    dqw."Plan",
    dqw."Uitvoering",
    dqw."Uitgevoerd",
    dqw."Gefaseerd",
    dqw."Vervangen",
    dqw."Ingetrokken",
    dqw."Jaar_voortgang"
   FROM ( SELECT mtm.mtm_id AS "DB_ID",
            ('NL'::text || (wb_nst.code)::text) AS "Namespace",
            wb_nst.descrption AS "Waterbeheerder_Naam",
            regexp_replace((supp_add_measure_type.local_id)::text, '\r|\n'::text, ''::text, 'g'::text) AS "LokaalID",
            regexp_replace((supp_add_measure_type.measure_name)::text, '\r|\n'::text, ''::text, 'g'::text) AS "Naam",
            rpp.description AS "SGBPPeriode_Omschrijving",
            ((date_part('year'::text, reporting_period.period_start) || '-'::text) || date_part('year'::text, reporting_period.period_end)) AS "UitvoeringIn",
            regexp_replace((sw_supp_measure_eu_type.code)::text, '\r|\n'::text, ''::text, 'g'::text) AS "KRWmaatregel_Code",
            sw_supp_measure_eu_type.name AS "KRWmaatregel_Naam",
            regexp_replace((supp_add_measure_type.measure_description)::text, '\r|\n'::text, ''::text, 'g'::text) AS "Voortgang_Toelichting",
            sw_supp_measure_eu_type.hoofdcategorie AS "Hoofdcategorie",
            sw_supp_measure_eu_type.index AS "Index",
            sw_supp_measure_eu_type.klasse AS "SGBP_Klasse",
            sw_supp_measure_eu_type.harmonisatie AS "SGBP_Harmonisatie",
            sw_supp_measure_eu_type.code_sgbp AS "SGBP_code",
            sw_supp_measure_eu_type.artikel_sgbp AS "SGBP_artikel",
            sw_supp_measure_eu_type.tablkop_sgbp AS "SGBP_Hoofdcategorie",
            regexp_replace((level_of_area_type.code)::text, '\r|\n'::text, ''::text, 'g'::text) AS "KRWMaatregelNiveau_Code",
            regexp_replace((level_of_area_type.description)::text, '\r|\n'::text, ''::text, 'g'::text) AS "KRWMaatregelNiveau_Omschrijving",
            array_to_string(ARRAY( SELECT DISTINCT regexp_replace((ho.inspire_id_local_id)::text, '\r|\n'::text, ''::text, 'g'::text) AS regexp_replace
                   FROM (hydro_object ho
                     JOIN measure_per_man_reg_or_restr_zone mz ON ((mz.mrz_id = ho.hdo_id)))
                  WHERE (mz.mtm_id = mtm.mtm_id)), '|'::text) AS "HoortbijKRWwaterlichaam",
            stroomgebieddistrict.inspire_id_local_id AS "KRWstroomgebiedDistrict_Code",
            supp_add_measure_type.is_additional_measure AS "OpnameInSGBPJN",
            regexp_replace((organisation_category_type.code)::text, '\r|\n'::text, ''::text, 'g'::text) AS "Initiatiefnemer_Code",
            regexp_replace(supp_add_measure_type.initiative_party, '\r|\n'::text, ''::text, 'g'::text) AS "Initiatiefnemer_Naam",
            array_to_string(ARRAY( SELECT DISTINCT regexp_replace((t.code)::text, '\r|\n'::text, ''::text, 'g'::text) AS regexp_replace
                   FROM (monitored_measure_eu_fund m
                     JOIN eu_fund_type t ON ((t.euf_id = m.euf_id)))
                  WHERE (m.mtm_id = mtm.mtm_id)), '|'::text) AS "EUFonds_Code",
            array_to_string(ARRAY( SELECT DISTINCT regexp_replace((vbg."Identificatie")::text, '\r|\n'::text, ''::text, 'g'::text) AS regexp_replace
                   FROM (vw_beschermdegebieden vbg
                     JOIN measure_per_man_protected_area mpmpa ON ((mpmpa.wpa_id = vbg."DB_ID")))
                  WHERE ((mpmpa.mtm_id = mtm.mtm_id) AND (vbg."Versie_ID" = river_basin_management_plan.wkrv_id))), '|'::text) AS "RelatieMetNatura2000Gebied",
            array_to_string(ARRAY( SELECT DISTINCT regexp_replace((vgo."Identificatie")::text, '\r|\n'::text, ''::text, 'g'::text) AS regexp_replace
                   FROM (vw_gw_onttrekking vgo
                     JOIN measure_per_abstraction_point mpap ON ((mpap.asp_id = vgo."DB_ID")))
                  WHERE ((mpap.mtm_id = mtm.mtm_id) AND (vgo.wkr_versie = river_basin_management_plan.wkrv_id))), '|'::text) AS "RelatieMetWaterwinning",
            river_basin_management_plan.wkrv_id AS versie,
            (''::text || supp_add_measure_type.amount_value) AS "OmvangNumeriekeWaarde",
            regexp_replace((eenheid_type.code)::text, '\r|\n'::text, ''::text, 'g'::text) AS omvangeenheidcode,
            (''::text || mp1.amount_value) AS "Plan",
            (''::text || mp2.amount_value) AS "Uitvoering",
            (''::text || mp3.amount_value) AS "Uitgevoerd",
            (''::text || mp4.amount_value) AS "Gefaseerd",
            (''::text || mp5.amount_value) AS "Vervangen",
            (''::text || mp6.amount_value) AS "Ingetrokken",
            mp1.year AS "Jaar_voortgang",
            ca.ore_id AS waterbeheerderoreid
           FROM (((((((((((((((((((((((((competent_authority ca
             JOIN namespace_type nst ON ((ca.namespace_id = nst.ns_id)))
             JOIN competentauthority_namespacetype cans ON ((cans.ore_id = ca.ore_id)))
             JOIN hydro_object hdo ON ((cans.ns_id = hdo.inspire_id_namespace)))
             JOIN measure_per_man_reg_or_restr_zone mpmr ON ((hdo.hdo_id = mpmr.mrz_id)))
             JOIN monitored_measure mtm ON ((mpmr.mtm_id = mtm.mtm_id)))
             JOIN supp_add_measure_type ON ((supp_add_measure_type.smnl_id = mtm.mtm_id)))
             JOIN sw_supp_measure_eu_type ON ((sw_supp_measure_eu_type.smeu_id = supp_add_measure_type.smeu_id)))
             JOIN eenheid_type ON ((eenheid_type.eenh_id = sw_supp_measure_eu_type.eenh_id)))
             JOIN namespace_type wb_nst ON ((wb_nst.ns_id = supp_add_measure_type.namespace_id)))
             JOIN competentauthority_namespacetype ON ((competentauthority_namespacetype.ns_id = wb_nst.ns_id)))
             JOIN competent_authority ON ((competent_authority.ore_id = competentauthority_namespacetype.ore_id)))
             JOIN report_version ON ((report_version.rpv_id = mtm.rpv_id)))
             JOIN reporting_period ON ((reporting_period.rpp_id = report_version.rpp_id)))
             JOIN level_of_area_type ON ((level_of_area_type.loa_id = mtm.level_of_measure_id)))
             JOIN organisation_category_type ON ((organisation_category_type.ocat_id = supp_add_measure_type.initiative_party_ocat_id)))
             JOIN river_basin_management_plan ON ((river_basin_management_plan.rbmp_id = supp_add_measure_type.rbmp_id)))
             JOIN hydro_object stroomgebieddistrict ON ((stroomgebieddistrict.hdo_id = river_basin_management_plan.rbd_id)))
             JOIN report_version rv2 ON ((rv2.wkrv_id = river_basin_management_plan.wkrv_id)))
             JOIN reporting_period rpp ON (((rpp.rpp_id = rv2.rpp_id) AND (rv2.begin_lifespan_version <= now()) AND ((rv2.end_lifespan_version > now()) OR (rv2.end_lifespan_version IS NULL)) AND (rpp.leg_ref_id = 1))))
             LEFT JOIN measure_progress mp1 ON (((supp_add_measure_type.smnl_id = mp1.mtm_id) AND (mp1.mst_id = 1) AND (mp1.year = 2015))))
             LEFT JOIN measure_progress mp2 ON (((supp_add_measure_type.smnl_id = mp2.mtm_id) AND (mp2.mst_id = 2) AND (mp2.year = 2015))))
             LEFT JOIN measure_progress mp3 ON (((supp_add_measure_type.smnl_id = mp3.mtm_id) AND (mp3.mst_id = 3) AND (mp3.year = 2015))))
             LEFT JOIN measure_progress mp4 ON (((supp_add_measure_type.smnl_id = mp4.mtm_id) AND (mp4.mst_id = 4) AND (mp4.year = 2015))))
             LEFT JOIN measure_progress mp5 ON (((supp_add_measure_type.smnl_id = mp5.mtm_id) AND (mp5.mst_id = 5) AND (mp5.year = 2015))))
             LEFT JOIN measure_progress mp6 ON (((supp_add_measure_type.smnl_id = mp6.mtm_id) AND (mp6.mst_id = 6) AND (mp6.year = 2015))))
          GROUP BY mtm.mtm_id, wb_nst.code, wb_nst.descrption, supp_add_measure_type.local_id, supp_add_measure_type.measure_name, rpp.description, reporting_period.period_start, reporting_period.period_end, sw_supp_measure_eu_type.code, sw_supp_measure_eu_type.name, supp_add_measure_type.measure_description, sw_supp_measure_eu_type.hoofdcategorie, sw_supp_measure_eu_type.index, sw_supp_measure_eu_type.klasse, sw_supp_measure_eu_type.harmonisatie, sw_supp_measure_eu_type.code_sgbp, sw_supp_measure_eu_type.artikel_sgbp, sw_supp_measure_eu_type.tablkop_sgbp, level_of_area_type.code, level_of_area_type.description, stroomgebieddistrict.inspire_id_local_id, supp_add_measure_type.is_additional_measure, organisation_category_type.code, supp_add_measure_type.initiative_party, river_basin_management_plan.wkrv_id, supp_add_measure_type.amount_value, eenheid_type.code, mp1.amount_value, mp2.amount_value, mp3.amount_value, mp4.amount_value, mp5.amount_value, mp6.amount_value, mp1.year, ca.ore_id
          ORDER BY supp_add_measure_type.local_id) dqw;


--
-- Name: vw_maatregelen_dgrw_2011; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_maatregelen_dgrw_2011 AS
 SELECT maatregelen.mtm_id AS "DB_ID",
    ('NL'::text || (wb_nst.code)::text) AS "Namespace",
    wb_nst.descrption AS "Waterbeheerder_Naam",
    regexp_replace((supp_add_measure_type.local_id)::text, '\r|\n'::text, ''::text, 'g'::text) AS "LokaalID",
    regexp_replace((supp_add_measure_type.measure_name)::text, '\r|\n'::text, ''::text, 'g'::text) AS "Naam",
    rpp.description AS "SGBPPeriode.Omschrijving",
    ((date_part('year'::text, rpp.period_start) || '-'::text) || date_part('year'::text, rpp.period_end)) AS "UitvoeringIn",
    regexp_replace((sw_supp_measure_eu_type.code)::text, '\r|\n'::text, ''::text, 'g'::text) AS "KRWmaatregel.Code",
    sw_supp_measure_eu_type.name AS "KRWmaatregel.Naam",
    sw_supp_measure_eu_type.hoofdcategorie AS "Hoofdcategorie",
    sw_supp_measure_eu_type.index AS "Index",
    sw_supp_measure_eu_type.klasse AS "SGBP_Klasse",
    sw_supp_measure_eu_type.harmonisatie AS "SGBP_Harmonisatie",
    sw_supp_measure_eu_type.code_sgbp AS "SGBP_code",
    sw_supp_measure_eu_type.artikel_sgbp AS "SGBP_artikel",
    sw_supp_measure_eu_type.tablkop_sgbp AS "SGBP_Hoofdcategorie",
    regexp_replace((level_of_area_type.code)::text, '\r|\n'::text, ''::text, 'g'::text) AS "KRWMaatregelNiveau.Code",
    regexp_replace((level_of_area_type.description)::text, '\r|\n'::text, ''::text, 'g'::text) AS "KRWMaatregelNiveau.Omschrijving",
    array_to_string(ARRAY( SELECT DISTINCT regexp_replace((ho.inspire_id_local_id)::text, '\r|\n'::text, ''::text, 'g'::text) AS regexp_replace
           FROM (hydro_object ho
             JOIN measure_per_man_reg_or_restr_zone mz ON ((mz.mrz_id = ho.hdo_id)))
          WHERE (mz.mtm_id = maatregelen.mtm_id)), '|'::text) AS "HoortbijKRWwaterlichaam",
    stroomgebieddistrict.inspire_id_local_id AS "KRWstroomgebiedDistrict.Code",
    supp_add_measure_type.is_additional_measure AS "OpnameInSGBPJN",
    regexp_replace((organisation_category_type.code)::text, '\r|\n'::text, ''::text, 'g'::text) AS "Initiatiefnemer.Code",
    regexp_replace(supp_add_measure_type.initiative_party, '\r|\n'::text, ''::text, 'g'::text) AS "Initiatiefnemer.Naam",
    array_to_string(ARRAY( SELECT DISTINCT regexp_replace((t.code)::text, '\r|\n'::text, ''::text, 'g'::text) AS regexp_replace
           FROM (monitored_measure_eu_fund m
             JOIN eu_fund_type t ON ((t.euf_id = m.euf_id)))
          WHERE (m.mtm_id = maatregelen.mtm_id)), '|'::text) AS "EUFonds.Code",
    array_to_string(ARRAY( SELECT DISTINCT regexp_replace((vbg."Identificatie")::text, '\r|\n'::text, ''::text, 'g'::text) AS regexp_replace
           FROM (vw_beschermdegebieden vbg
             JOIN measure_per_man_protected_area mpmpa ON ((mpmpa.wpa_id = vbg."DB_ID")))
          WHERE ((mpmpa.mtm_id = maatregelen.mtm_id) AND (vbg."Versie_ID" = river_basin_management_plan.wkrv_id))), '|'::text) AS "RelatieMetNatura2000Gebied",
    array_to_string(ARRAY( SELECT DISTINCT regexp_replace((vgo."Identificatie")::text, '\r|\n'::text, ''::text, 'g'::text) AS regexp_replace
           FROM (vw_gw_onttrekking vgo
             JOIN measure_per_abstraction_point mpap ON ((mpap.asp_id = vgo."DB_ID")))
          WHERE ((mpap.mtm_id = maatregelen.mtm_id) AND (vgo.wkr_versie = river_basin_management_plan.wkrv_id))), '|'::text) AS "RelatieMetWaterwinning",
    river_basin_management_plan.wkrv_id AS versie,
    supp_add_measure_type.amount_value AS "OmvangNumeriekeWaarde",
    regexp_replace((eenheid_type.code)::text, '\r|\n'::text, ''::text, 'g'::text) AS omvangeenheidcode,
    mp1.amount_value AS "Plan",
    mp2.amount_value AS "Uitvoering",
    mp3.amount_value AS "Uitgevoerd",
    mp4.amount_value AS "Gefaseerd",
    mp5.amount_value AS "Vervangen",
    mp6.amount_value AS "Ingetrokken",
    mp1.year AS "Jaar_voortgang"
   FROM ((((((((((((((((monitored_measure maatregelen
     JOIN supp_add_measure_type ON ((supp_add_measure_type.smnl_id = maatregelen.mtm_id)))
     JOIN sw_supp_measure_eu_type ON ((sw_supp_measure_eu_type.smeu_id = supp_add_measure_type.smeu_id)))
     JOIN eenheid_type ON ((eenheid_type.eenh_id = sw_supp_measure_eu_type.eenh_id)))
     JOIN namespace_type wb_nst ON ((wb_nst.ns_id = supp_add_measure_type.namespace_id)))
     JOIN report_version ON ((report_version.rpv_id = maatregelen.rpv_id)))
     JOIN reporting_period rpp ON ((rpp.rpp_id = report_version.rpp_id)))
     JOIN level_of_area_type ON ((level_of_area_type.loa_id = maatregelen.level_of_measure_id)))
     JOIN organisation_category_type ON ((organisation_category_type.ocat_id = supp_add_measure_type.initiative_party_ocat_id)))
     JOIN river_basin_management_plan ON ((river_basin_management_plan.rbmp_id = supp_add_measure_type.rbmp_id)))
     JOIN hydro_object stroomgebieddistrict ON ((stroomgebieddistrict.hdo_id = river_basin_management_plan.rbd_id)))
     LEFT JOIN ( SELECT measure_progress.amount_value,
            measure_progress.year,
            measure_progress.mtm_id
           FROM measure_progress
          WHERE ((measure_progress.mst_id = 1) AND (measure_progress.year = 2011))) mp1 ON ((mp1.mtm_id = maatregelen.mtm_id)))
     LEFT JOIN ( SELECT measure_progress.amount_value,
            measure_progress.year,
            measure_progress.mtm_id
           FROM measure_progress
          WHERE ((measure_progress.mst_id = 2) AND (measure_progress.year = 2011))) mp2 ON ((mp2.mtm_id = maatregelen.mtm_id)))
     LEFT JOIN ( SELECT measure_progress.amount_value,
            measure_progress.year,
            measure_progress.mtm_id
           FROM measure_progress
          WHERE ((measure_progress.mst_id = 3) AND (measure_progress.year = 2011))) mp3 ON ((mp3.mtm_id = maatregelen.mtm_id)))
     LEFT JOIN ( SELECT measure_progress.amount_value,
            measure_progress.year,
            measure_progress.mtm_id
           FROM measure_progress
          WHERE ((measure_progress.mst_id = 4) AND (measure_progress.year = 2011))) mp4 ON ((mp4.mtm_id = maatregelen.mtm_id)))
     LEFT JOIN ( SELECT measure_progress.amount_value,
            measure_progress.year,
            measure_progress.mtm_id
           FROM measure_progress
          WHERE ((measure_progress.mst_id = 5) AND (measure_progress.year = 2011))) mp5 ON ((mp5.mtm_id = maatregelen.mtm_id)))
     LEFT JOIN ( SELECT measure_progress.amount_value,
            measure_progress.year,
            measure_progress.mtm_id
           FROM measure_progress
          WHERE ((measure_progress.mst_id = 6) AND (measure_progress.year = 2011))) mp6 ON ((mp6.mtm_id = maatregelen.mtm_id)))
  ORDER BY supp_add_measure_type.local_id;


--
-- Name: vw_maatregelen_dgrw_2012; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_maatregelen_dgrw_2012 AS
 SELECT maatregelen.mtm_id AS "DB_ID",
    ('NL'::text || (wb_nst.code)::text) AS "Namespace",
    wb_nst.descrption AS "Waterbeheerder_Naam",
    regexp_replace((supp_add_measure_type.local_id)::text, '\r|\n'::text, ''::text, 'g'::text) AS "LokaalID",
    regexp_replace((supp_add_measure_type.measure_name)::text, '\r|\n'::text, ''::text, 'g'::text) AS "Naam",
    rpp.description AS "SGBPPeriode.Omschrijving",
    ((date_part('year'::text, rpp.period_start) || '-'::text) || date_part('year'::text, rpp.period_end)) AS "UitvoeringIn",
    regexp_replace((sw_supp_measure_eu_type.code)::text, '\r|\n'::text, ''::text, 'g'::text) AS "KRWmaatregel.Code",
    sw_supp_measure_eu_type.name AS "KRWmaatregel.Naam",
    sw_supp_measure_eu_type.hoofdcategorie AS "Hoofdcategorie",
    sw_supp_measure_eu_type.index AS "Index",
    sw_supp_measure_eu_type.klasse AS "SGBP_Klasse",
    sw_supp_measure_eu_type.harmonisatie AS "SGBP_Harmonisatie",
    sw_supp_measure_eu_type.code_sgbp AS "SGBP_code",
    sw_supp_measure_eu_type.artikel_sgbp AS "SGBP_artikel",
    sw_supp_measure_eu_type.tablkop_sgbp AS "SGBP_Hoofdcategorie",
    regexp_replace((level_of_area_type.code)::text, '\r|\n'::text, ''::text, 'g'::text) AS "KRWMaatregelNiveau.Code",
    regexp_replace((level_of_area_type.description)::text, '\r|\n'::text, ''::text, 'g'::text) AS "KRWMaatregelNiveau.Omschrijving",
    array_to_string(ARRAY( SELECT DISTINCT regexp_replace((ho.inspire_id_local_id)::text, '\r|\n'::text, ''::text, 'g'::text) AS regexp_replace
           FROM (hydro_object ho
             JOIN measure_per_man_reg_or_restr_zone mz ON ((mz.mrz_id = ho.hdo_id)))
          WHERE (mz.mtm_id = maatregelen.mtm_id)), '|'::text) AS "HoortbijKRWwaterlichaam",
    stroomgebieddistrict.inspire_id_local_id AS "KRWstroomgebiedDistrict.Code",
    supp_add_measure_type.is_additional_measure AS "OpnameInSGBPJN",
    regexp_replace((organisation_category_type.code)::text, '\r|\n'::text, ''::text, 'g'::text) AS "Initiatiefnemer.Code",
    regexp_replace(supp_add_measure_type.initiative_party, '\r|\n'::text, ''::text, 'g'::text) AS "Initiatiefnemer.Naam",
    array_to_string(ARRAY( SELECT DISTINCT regexp_replace((t.code)::text, '\r|\n'::text, ''::text, 'g'::text) AS regexp_replace
           FROM (monitored_measure_eu_fund m
             JOIN eu_fund_type t ON ((t.euf_id = m.euf_id)))
          WHERE (m.mtm_id = maatregelen.mtm_id)), '|'::text) AS "EUFonds.Code",
    array_to_string(ARRAY( SELECT DISTINCT regexp_replace((vbg."Identificatie")::text, '\r|\n'::text, ''::text, 'g'::text) AS regexp_replace
           FROM (vw_beschermdegebieden vbg
             JOIN measure_per_man_protected_area mpmpa ON ((mpmpa.wpa_id = vbg."DB_ID")))
          WHERE ((mpmpa.mtm_id = maatregelen.mtm_id) AND (vbg."Versie_ID" = river_basin_management_plan.wkrv_id))), '|'::text) AS "RelatieMetNatura2000Gebied",
    array_to_string(ARRAY( SELECT DISTINCT regexp_replace((vgo."Identificatie")::text, '\r|\n'::text, ''::text, 'g'::text) AS regexp_replace
           FROM (vw_gw_onttrekking vgo
             JOIN measure_per_abstraction_point mpap ON ((mpap.asp_id = vgo."DB_ID")))
          WHERE ((mpap.mtm_id = maatregelen.mtm_id) AND (vgo.wkr_versie = river_basin_management_plan.wkrv_id))), '|'::text) AS "RelatieMetWaterwinning",
    river_basin_management_plan.wkrv_id AS versie,
    supp_add_measure_type.amount_value AS "OmvangNumeriekeWaarde",
    regexp_replace((eenheid_type.code)::text, '\r|\n'::text, ''::text, 'g'::text) AS omvangeenheidcode,
    mp1.amount_value AS "Plan",
    mp2.amount_value AS "Uitvoering",
    mp3.amount_value AS "Uitgevoerd",
    mp4.amount_value AS "Gefaseerd",
    mp5.amount_value AS "Vervangen",
    mp6.amount_value AS "Ingetrokken",
    mp1.year AS "Jaar_voortgang"
   FROM ((((((((((((((((monitored_measure maatregelen
     JOIN supp_add_measure_type ON ((supp_add_measure_type.smnl_id = maatregelen.mtm_id)))
     JOIN sw_supp_measure_eu_type ON ((sw_supp_measure_eu_type.smeu_id = supp_add_measure_type.smeu_id)))
     JOIN eenheid_type ON ((eenheid_type.eenh_id = sw_supp_measure_eu_type.eenh_id)))
     JOIN namespace_type wb_nst ON ((wb_nst.ns_id = supp_add_measure_type.namespace_id)))
     JOIN report_version ON ((report_version.rpv_id = maatregelen.rpv_id)))
     JOIN reporting_period rpp ON ((rpp.rpp_id = report_version.rpp_id)))
     JOIN level_of_area_type ON ((level_of_area_type.loa_id = maatregelen.level_of_measure_id)))
     JOIN organisation_category_type ON ((organisation_category_type.ocat_id = supp_add_measure_type.initiative_party_ocat_id)))
     JOIN river_basin_management_plan ON ((river_basin_management_plan.rbmp_id = supp_add_measure_type.rbmp_id)))
     JOIN hydro_object stroomgebieddistrict ON ((stroomgebieddistrict.hdo_id = river_basin_management_plan.rbd_id)))
     LEFT JOIN ( SELECT measure_progress.amount_value,
            measure_progress.year,
            measure_progress.mtm_id
           FROM measure_progress
          WHERE ((measure_progress.mst_id = 1) AND (measure_progress.year = 2012))) mp1 ON ((mp1.mtm_id = maatregelen.mtm_id)))
     LEFT JOIN ( SELECT measure_progress.amount_value,
            measure_progress.year,
            measure_progress.mtm_id
           FROM measure_progress
          WHERE ((measure_progress.mst_id = 2) AND (measure_progress.year = 2012))) mp2 ON ((mp2.mtm_id = maatregelen.mtm_id)))
     LEFT JOIN ( SELECT measure_progress.amount_value,
            measure_progress.year,
            measure_progress.mtm_id
           FROM measure_progress
          WHERE ((measure_progress.mst_id = 3) AND (measure_progress.year = 2012))) mp3 ON ((mp3.mtm_id = maatregelen.mtm_id)))
     LEFT JOIN ( SELECT measure_progress.amount_value,
            measure_progress.year,
            measure_progress.mtm_id
           FROM measure_progress
          WHERE ((measure_progress.mst_id = 4) AND (measure_progress.year = 2012))) mp4 ON ((mp4.mtm_id = maatregelen.mtm_id)))
     LEFT JOIN ( SELECT measure_progress.amount_value,
            measure_progress.year,
            measure_progress.mtm_id
           FROM measure_progress
          WHERE ((measure_progress.mst_id = 5) AND (measure_progress.year = 2012))) mp5 ON ((mp5.mtm_id = maatregelen.mtm_id)))
     LEFT JOIN ( SELECT measure_progress.amount_value,
            measure_progress.year,
            measure_progress.mtm_id
           FROM measure_progress
          WHERE ((measure_progress.mst_id = 6) AND (measure_progress.year = 2012))) mp6 ON ((mp6.mtm_id = maatregelen.mtm_id)))
  ORDER BY supp_add_measure_type.local_id;


--
-- Name: vw_maatregelen_dgrw_2013; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_maatregelen_dgrw_2013 AS
 SELECT maatregelen.mtm_id AS "DB_ID",
    ('NL'::text || (wb_nst.code)::text) AS "Namespace",
    wb_nst.descrption AS "Waterbeheerder_Naam",
    regexp_replace((supp_add_measure_type.local_id)::text, '\r|\n'::text, ''::text, 'g'::text) AS "LokaalID",
    regexp_replace((supp_add_measure_type.measure_name)::text, '\r|\n'::text, ''::text, 'g'::text) AS "Naam",
    rpp.description AS "SGBPPeriode.Omschrijving",
    ((date_part('year'::text, rpp.period_start) || '-'::text) || date_part('year'::text, rpp.period_end)) AS "UitvoeringIn",
    regexp_replace((sw_supp_measure_eu_type.code)::text, '\r|\n'::text, ''::text, 'g'::text) AS "KRWmaatregel.Code",
    sw_supp_measure_eu_type.name AS "KRWmaatregel.Naam",
    sw_supp_measure_eu_type.hoofdcategorie AS "Hoofdcategorie",
    sw_supp_measure_eu_type.index AS "Index",
    sw_supp_measure_eu_type.klasse AS "SGBP_Klasse",
    sw_supp_measure_eu_type.harmonisatie AS "SGBP_Harmonisatie",
    sw_supp_measure_eu_type.code_sgbp AS "SGBP_code",
    sw_supp_measure_eu_type.artikel_sgbp AS "SGBP_artikel",
    sw_supp_measure_eu_type.tablkop_sgbp AS "SGBP_Hoofdcategorie",
    regexp_replace((level_of_area_type.code)::text, '\r|\n'::text, ''::text, 'g'::text) AS "KRWMaatregelNiveau.Code",
    regexp_replace((level_of_area_type.description)::text, '\r|\n'::text, ''::text, 'g'::text) AS "KRWMaatregelNiveau.Omschrijving",
    array_to_string(ARRAY( SELECT DISTINCT regexp_replace((ho.inspire_id_local_id)::text, '\r|\n'::text, ''::text, 'g'::text) AS regexp_replace
           FROM (hydro_object ho
             JOIN measure_per_man_reg_or_restr_zone mz ON ((mz.mrz_id = ho.hdo_id)))
          WHERE (mz.mtm_id = maatregelen.mtm_id)), '|'::text) AS "HoortbijKRWwaterlichaam",
    stroomgebieddistrict.inspire_id_local_id AS "KRWstroomgebiedDistrict.Code",
    supp_add_measure_type.is_additional_measure AS "OpnameInSGBPJN",
    regexp_replace((organisation_category_type.code)::text, '\r|\n'::text, ''::text, 'g'::text) AS "Initiatiefnemer.Code",
    regexp_replace(supp_add_measure_type.initiative_party, '\r|\n'::text, ''::text, 'g'::text) AS "Initiatiefnemer.Naam",
    array_to_string(ARRAY( SELECT DISTINCT regexp_replace((t.code)::text, '\r|\n'::text, ''::text, 'g'::text) AS regexp_replace
           FROM (monitored_measure_eu_fund m
             JOIN eu_fund_type t ON ((t.euf_id = m.euf_id)))
          WHERE (m.mtm_id = maatregelen.mtm_id)), '|'::text) AS "EUFonds.Code",
    array_to_string(ARRAY( SELECT DISTINCT regexp_replace((vbg."Identificatie")::text, '\r|\n'::text, ''::text, 'g'::text) AS regexp_replace
           FROM (vw_beschermdegebieden vbg
             JOIN measure_per_man_protected_area mpmpa ON ((mpmpa.wpa_id = vbg."DB_ID")))
          WHERE ((mpmpa.mtm_id = maatregelen.mtm_id) AND (vbg."Versie_ID" = river_basin_management_plan.wkrv_id))), '|'::text) AS "RelatieMetNatura2000Gebied",
    array_to_string(ARRAY( SELECT DISTINCT regexp_replace((vgo."Identificatie")::text, '\r|\n'::text, ''::text, 'g'::text) AS regexp_replace
           FROM (vw_gw_onttrekking vgo
             JOIN measure_per_abstraction_point mpap ON ((mpap.asp_id = vgo."DB_ID")))
          WHERE ((mpap.mtm_id = maatregelen.mtm_id) AND (vgo.wkr_versie = river_basin_management_plan.wkrv_id))), '|'::text) AS "RelatieMetWaterwinning",
    river_basin_management_plan.wkrv_id AS versie,
    supp_add_measure_type.amount_value AS "OmvangNumeriekeWaarde",
    regexp_replace((eenheid_type.code)::text, '\r|\n'::text, ''::text, 'g'::text) AS omvangeenheidcode,
    mp1.amount_value AS "Plan",
    mp2.amount_value AS "Uitvoering",
    mp3.amount_value AS "Uitgevoerd",
    mp4.amount_value AS "Gefaseerd",
    mp5.amount_value AS "Vervangen",
    mp6.amount_value AS "Ingetrokken",
    mp1.year AS "Jaar_voortgang"
   FROM ((((((((((((((((monitored_measure maatregelen
     JOIN supp_add_measure_type ON ((supp_add_measure_type.smnl_id = maatregelen.mtm_id)))
     JOIN sw_supp_measure_eu_type ON ((sw_supp_measure_eu_type.smeu_id = supp_add_measure_type.smeu_id)))
     JOIN eenheid_type ON ((eenheid_type.eenh_id = sw_supp_measure_eu_type.eenh_id)))
     JOIN namespace_type wb_nst ON ((wb_nst.ns_id = supp_add_measure_type.namespace_id)))
     JOIN report_version ON ((report_version.rpv_id = maatregelen.rpv_id)))
     JOIN reporting_period rpp ON ((rpp.rpp_id = report_version.rpp_id)))
     JOIN level_of_area_type ON ((level_of_area_type.loa_id = maatregelen.level_of_measure_id)))
     JOIN organisation_category_type ON ((organisation_category_type.ocat_id = supp_add_measure_type.initiative_party_ocat_id)))
     JOIN river_basin_management_plan ON ((river_basin_management_plan.rbmp_id = supp_add_measure_type.rbmp_id)))
     JOIN hydro_object stroomgebieddistrict ON ((stroomgebieddistrict.hdo_id = river_basin_management_plan.rbd_id)))
     LEFT JOIN ( SELECT measure_progress.amount_value,
            measure_progress.year,
            measure_progress.mtm_id
           FROM measure_progress
          WHERE ((measure_progress.mst_id = 1) AND (measure_progress.year = 2013))) mp1 ON ((mp1.mtm_id = maatregelen.mtm_id)))
     LEFT JOIN ( SELECT measure_progress.amount_value,
            measure_progress.year,
            measure_progress.mtm_id
           FROM measure_progress
          WHERE ((measure_progress.mst_id = 2) AND (measure_progress.year = 2013))) mp2 ON ((mp2.mtm_id = maatregelen.mtm_id)))
     LEFT JOIN ( SELECT measure_progress.amount_value,
            measure_progress.year,
            measure_progress.mtm_id
           FROM measure_progress
          WHERE ((measure_progress.mst_id = 3) AND (measure_progress.year = 2013))) mp3 ON ((mp3.mtm_id = maatregelen.mtm_id)))
     LEFT JOIN ( SELECT measure_progress.amount_value,
            measure_progress.year,
            measure_progress.mtm_id
           FROM measure_progress
          WHERE ((measure_progress.mst_id = 4) AND (measure_progress.year = 2013))) mp4 ON ((mp4.mtm_id = maatregelen.mtm_id)))
     LEFT JOIN ( SELECT measure_progress.amount_value,
            measure_progress.year,
            measure_progress.mtm_id
           FROM measure_progress
          WHERE ((measure_progress.mst_id = 5) AND (measure_progress.year = 2013))) mp5 ON ((mp5.mtm_id = maatregelen.mtm_id)))
     LEFT JOIN ( SELECT measure_progress.amount_value,
            measure_progress.year,
            measure_progress.mtm_id
           FROM measure_progress
          WHERE ((measure_progress.mst_id = 6) AND (measure_progress.year = 2013))) mp6 ON ((mp6.mtm_id = maatregelen.mtm_id)))
  ORDER BY supp_add_measure_type.local_id;


--
-- Name: vw_maatregelen_dgrw_2014; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_maatregelen_dgrw_2014 AS
 SELECT maatregelen.mtm_id AS "DB_ID",
    ('NL'::text || (wb_nst.code)::text) AS "Namespace",
    wb_nst.descrption AS "Waterbeheerder_Naam",
    regexp_replace((supp_add_measure_type.local_id)::text, '\r|\n'::text, ''::text, 'g'::text) AS "LokaalID",
    regexp_replace((supp_add_measure_type.measure_name)::text, '\r|\n'::text, ''::text, 'g'::text) AS "Naam",
    rpp.description AS "SGBPPeriode.Omschrijving",
    ((date_part('year'::text, rpp.period_start) || '-'::text) || date_part('year'::text, rpp.period_end)) AS "UitvoeringIn",
    regexp_replace((sw_supp_measure_eu_type.code)::text, '\r|\n'::text, ''::text, 'g'::text) AS "KRWmaatregel.Code",
    sw_supp_measure_eu_type.name AS "KRWmaatregel.Naam",
    sw_supp_measure_eu_type.hoofdcategorie AS "Hoofdcategorie",
    sw_supp_measure_eu_type.index AS "Index",
    sw_supp_measure_eu_type.klasse AS "SGBP_Klasse",
    sw_supp_measure_eu_type.harmonisatie AS "SGBP_Harmonisatie",
    sw_supp_measure_eu_type.code_sgbp AS "SGBP_code",
    sw_supp_measure_eu_type.artikel_sgbp AS "SGBP_artikel",
    sw_supp_measure_eu_type.tablkop_sgbp AS "SGBP_Hoofdcategorie",
    regexp_replace((level_of_area_type.code)::text, '\r|\n'::text, ''::text, 'g'::text) AS "KRWMaatregelNiveau.Code",
    regexp_replace((level_of_area_type.description)::text, '\r|\n'::text, ''::text, 'g'::text) AS "KRWMaatregelNiveau.Omschrijving",
    array_to_string(ARRAY( SELECT DISTINCT regexp_replace((ho.inspire_id_local_id)::text, '\r|\n'::text, ''::text, 'g'::text) AS regexp_replace
           FROM (hydro_object ho
             JOIN measure_per_man_reg_or_restr_zone mz ON ((mz.mrz_id = ho.hdo_id)))
          WHERE (mz.mtm_id = maatregelen.mtm_id)), '|'::text) AS "HoortbijKRWwaterlichaam",
    stroomgebieddistrict.inspire_id_local_id AS "KRWstroomgebiedDistrict.Code",
    supp_add_measure_type.is_additional_measure AS "OpnameInSGBPJN",
    regexp_replace((organisation_category_type.code)::text, '\r|\n'::text, ''::text, 'g'::text) AS "Initiatiefnemer.Code",
    regexp_replace(supp_add_measure_type.initiative_party, '\r|\n'::text, ''::text, 'g'::text) AS "Initiatiefnemer.Naam",
    array_to_string(ARRAY( SELECT DISTINCT regexp_replace((t.code)::text, '\r|\n'::text, ''::text, 'g'::text) AS regexp_replace
           FROM (monitored_measure_eu_fund m
             JOIN eu_fund_type t ON ((t.euf_id = m.euf_id)))
          WHERE (m.mtm_id = maatregelen.mtm_id)), '|'::text) AS "EUFonds.Code",
    array_to_string(ARRAY( SELECT DISTINCT regexp_replace((vbg."Identificatie")::text, '\r|\n'::text, ''::text, 'g'::text) AS regexp_replace
           FROM (vw_beschermdegebieden vbg
             JOIN measure_per_man_protected_area mpmpa ON ((mpmpa.wpa_id = vbg."DB_ID")))
          WHERE ((mpmpa.mtm_id = maatregelen.mtm_id) AND (vbg."Versie_ID" = river_basin_management_plan.wkrv_id))), '|'::text) AS "RelatieMetNatura2000Gebied",
    array_to_string(ARRAY( SELECT DISTINCT regexp_replace((vgo."Identificatie")::text, '\r|\n'::text, ''::text, 'g'::text) AS regexp_replace
           FROM (vw_gw_onttrekking vgo
             JOIN measure_per_abstraction_point mpap ON ((mpap.asp_id = vgo."DB_ID")))
          WHERE ((mpap.mtm_id = maatregelen.mtm_id) AND (vgo.wkr_versie = river_basin_management_plan.wkrv_id))), '|'::text) AS "RelatieMetWaterwinning",
    river_basin_management_plan.wkrv_id AS versie,
    supp_add_measure_type.amount_value AS "OmvangNumeriekeWaarde",
    regexp_replace((eenheid_type.code)::text, '\r|\n'::text, ''::text, 'g'::text) AS omvangeenheidcode,
    mp1.amount_value AS "Plan",
    mp2.amount_value AS "Uitvoering",
    mp3.amount_value AS "Uitgevoerd",
    mp4.amount_value AS "Gefaseerd",
    mp5.amount_value AS "Vervangen",
    mp6.amount_value AS "Ingetrokken",
    mp1.year AS "Jaar_voortgang"
   FROM ((((((((((((((((monitored_measure maatregelen
     JOIN supp_add_measure_type ON ((supp_add_measure_type.smnl_id = maatregelen.mtm_id)))
     JOIN sw_supp_measure_eu_type ON ((sw_supp_measure_eu_type.smeu_id = supp_add_measure_type.smeu_id)))
     JOIN eenheid_type ON ((eenheid_type.eenh_id = sw_supp_measure_eu_type.eenh_id)))
     JOIN namespace_type wb_nst ON ((wb_nst.ns_id = supp_add_measure_type.namespace_id)))
     JOIN report_version ON ((report_version.rpv_id = maatregelen.rpv_id)))
     JOIN reporting_period rpp ON ((rpp.rpp_id = report_version.rpp_id)))
     JOIN level_of_area_type ON ((level_of_area_type.loa_id = maatregelen.level_of_measure_id)))
     JOIN organisation_category_type ON ((organisation_category_type.ocat_id = supp_add_measure_type.initiative_party_ocat_id)))
     JOIN river_basin_management_plan ON ((river_basin_management_plan.rbmp_id = supp_add_measure_type.rbmp_id)))
     JOIN hydro_object stroomgebieddistrict ON ((stroomgebieddistrict.hdo_id = river_basin_management_plan.rbd_id)))
     LEFT JOIN ( SELECT measure_progress.amount_value,
            measure_progress.year,
            measure_progress.mtm_id
           FROM measure_progress
          WHERE ((measure_progress.mst_id = 1) AND (measure_progress.year = 2014))) mp1 ON ((mp1.mtm_id = maatregelen.mtm_id)))
     LEFT JOIN ( SELECT measure_progress.amount_value,
            measure_progress.year,
            measure_progress.mtm_id
           FROM measure_progress
          WHERE ((measure_progress.mst_id = 2) AND (measure_progress.year = 2014))) mp2 ON ((mp2.mtm_id = maatregelen.mtm_id)))
     LEFT JOIN ( SELECT measure_progress.amount_value,
            measure_progress.year,
            measure_progress.mtm_id
           FROM measure_progress
          WHERE ((measure_progress.mst_id = 3) AND (measure_progress.year = 2014))) mp3 ON ((mp3.mtm_id = maatregelen.mtm_id)))
     LEFT JOIN ( SELECT measure_progress.amount_value,
            measure_progress.year,
            measure_progress.mtm_id
           FROM measure_progress
          WHERE ((measure_progress.mst_id = 4) AND (measure_progress.year = 2014))) mp4 ON ((mp4.mtm_id = maatregelen.mtm_id)))
     LEFT JOIN ( SELECT measure_progress.amount_value,
            measure_progress.year,
            measure_progress.mtm_id
           FROM measure_progress
          WHERE ((measure_progress.mst_id = 5) AND (measure_progress.year = 2014))) mp5 ON ((mp5.mtm_id = maatregelen.mtm_id)))
     LEFT JOIN ( SELECT measure_progress.amount_value,
            measure_progress.year,
            measure_progress.mtm_id
           FROM measure_progress
          WHERE ((measure_progress.mst_id = 6) AND (measure_progress.year = 2014))) mp6 ON ((mp6.mtm_id = maatregelen.mtm_id)))
  ORDER BY supp_add_measure_type.local_id;


--
-- Name: vw_maatregelen_dgrw_2015; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_maatregelen_dgrw_2015 AS
 SELECT maatregelen.mtm_id AS "DB_ID",
    ('NL'::text || (wb_nst.code)::text) AS "Namespace",
    wb_nst.descrption AS "Waterbeheerder_Naam",
    regexp_replace((supp_add_measure_type.local_id)::text, '\r|\n'::text, ''::text, 'g'::text) AS "LokaalID",
    regexp_replace((supp_add_measure_type.measure_name)::text, '\r|\n'::text, ''::text, 'g'::text) AS "Naam",
    rpp.description AS "SGBPPeriode.Omschrijving",
    ((date_part('year'::text, rpp.period_start) || '-'::text) || date_part('year'::text, rpp.period_end)) AS "UitvoeringIn",
    regexp_replace((sw_supp_measure_eu_type.code)::text, '\r|\n'::text, ''::text, 'g'::text) AS "KRWmaatregel.Code",
    sw_supp_measure_eu_type.name AS "KRWmaatregel.Naam",
    sw_supp_measure_eu_type.hoofdcategorie AS "Hoofdcategorie",
    sw_supp_measure_eu_type.index AS "Index",
    sw_supp_measure_eu_type.klasse AS "SGBP_Klasse",
    sw_supp_measure_eu_type.harmonisatie AS "SGBP_Harmonisatie",
    sw_supp_measure_eu_type.code_sgbp AS "SGBP_code",
    sw_supp_measure_eu_type.artikel_sgbp AS "SGBP_artikel",
    sw_supp_measure_eu_type.tablkop_sgbp AS "SGBP_Hoofdcategorie",
    regexp_replace((level_of_area_type.code)::text, '\r|\n'::text, ''::text, 'g'::text) AS "KRWMaatregelNiveau.Code",
    regexp_replace((level_of_area_type.description)::text, '\r|\n'::text, ''::text, 'g'::text) AS "KRWMaatregelNiveau.Omschrijving",
    array_to_string(ARRAY( SELECT DISTINCT regexp_replace((ho.inspire_id_local_id)::text, '\r|\n'::text, ''::text, 'g'::text) AS regexp_replace
           FROM (hydro_object ho
             JOIN measure_per_man_reg_or_restr_zone mz ON ((mz.mrz_id = ho.hdo_id)))
          WHERE (mz.mtm_id = maatregelen.mtm_id)), '|'::text) AS "HoortbijKRWwaterlichaam",
    stroomgebieddistrict.inspire_id_local_id AS "KRWstroomgebiedDistrict.Code",
    supp_add_measure_type.is_additional_measure AS "OpnameInSGBPJN",
    regexp_replace((organisation_category_type.code)::text, '\r|\n'::text, ''::text, 'g'::text) AS "Initiatiefnemer.Code",
    regexp_replace(supp_add_measure_type.initiative_party, '\r|\n'::text, ''::text, 'g'::text) AS "Initiatiefnemer.Naam",
    array_to_string(ARRAY( SELECT DISTINCT regexp_replace((t.code)::text, '\r|\n'::text, ''::text, 'g'::text) AS regexp_replace
           FROM (monitored_measure_eu_fund m
             JOIN eu_fund_type t ON ((t.euf_id = m.euf_id)))
          WHERE (m.mtm_id = maatregelen.mtm_id)), '|'::text) AS "EUFonds.Code",
    array_to_string(ARRAY( SELECT DISTINCT regexp_replace((vbg."Identificatie")::text, '\r|\n'::text, ''::text, 'g'::text) AS regexp_replace
           FROM (vw_beschermdegebieden vbg
             JOIN measure_per_man_protected_area mpmpa ON ((mpmpa.wpa_id = vbg."DB_ID")))
          WHERE ((mpmpa.mtm_id = maatregelen.mtm_id) AND (vbg."Versie_ID" = river_basin_management_plan.wkrv_id))), '|'::text) AS "RelatieMetNatura2000Gebied",
    array_to_string(ARRAY( SELECT DISTINCT regexp_replace((vgo."Identificatie")::text, '\r|\n'::text, ''::text, 'g'::text) AS regexp_replace
           FROM (vw_gw_onttrekking vgo
             JOIN measure_per_abstraction_point mpap ON ((mpap.asp_id = vgo."DB_ID")))
          WHERE ((mpap.mtm_id = maatregelen.mtm_id) AND (vgo.wkr_versie = river_basin_management_plan.wkrv_id))), '|'::text) AS "RelatieMetWaterwinning",
    river_basin_management_plan.wkrv_id AS versie,
    supp_add_measure_type.amount_value AS "OmvangNumeriekeWaarde",
    regexp_replace((eenheid_type.code)::text, '\r|\n'::text, ''::text, 'g'::text) AS omvangeenheidcode,
    mp1.amount_value AS "Plan",
    mp2.amount_value AS "Uitvoering",
    mp3.amount_value AS "Uitgevoerd",
    mp4.amount_value AS "Gefaseerd",
    mp5.amount_value AS "Vervangen",
    mp6.amount_value AS "Ingetrokken",
    mp1.year AS "Jaar_voortgang"
   FROM ((((((((((((((((monitored_measure maatregelen
     JOIN supp_add_measure_type ON ((supp_add_measure_type.smnl_id = maatregelen.mtm_id)))
     JOIN sw_supp_measure_eu_type ON ((sw_supp_measure_eu_type.smeu_id = supp_add_measure_type.smeu_id)))
     JOIN eenheid_type ON ((eenheid_type.eenh_id = sw_supp_measure_eu_type.eenh_id)))
     JOIN namespace_type wb_nst ON ((wb_nst.ns_id = supp_add_measure_type.namespace_id)))
     JOIN report_version ON ((report_version.rpv_id = maatregelen.rpv_id)))
     JOIN reporting_period rpp ON ((rpp.rpp_id = report_version.rpp_id)))
     JOIN level_of_area_type ON ((level_of_area_type.loa_id = maatregelen.level_of_measure_id)))
     JOIN organisation_category_type ON ((organisation_category_type.ocat_id = supp_add_measure_type.initiative_party_ocat_id)))
     JOIN river_basin_management_plan ON ((river_basin_management_plan.rbmp_id = supp_add_measure_type.rbmp_id)))
     JOIN hydro_object stroomgebieddistrict ON ((stroomgebieddistrict.hdo_id = river_basin_management_plan.rbd_id)))
     LEFT JOIN ( SELECT measure_progress.amount_value,
            measure_progress.year,
            measure_progress.mtm_id
           FROM measure_progress
          WHERE ((measure_progress.mst_id = 1) AND (measure_progress.year = 2015))) mp1 ON ((mp1.mtm_id = maatregelen.mtm_id)))
     LEFT JOIN ( SELECT measure_progress.amount_value,
            measure_progress.year,
            measure_progress.mtm_id
           FROM measure_progress
          WHERE ((measure_progress.mst_id = 2) AND (measure_progress.year = 2015))) mp2 ON ((mp2.mtm_id = maatregelen.mtm_id)))
     LEFT JOIN ( SELECT measure_progress.amount_value,
            measure_progress.year,
            measure_progress.mtm_id
           FROM measure_progress
          WHERE ((measure_progress.mst_id = 3) AND (measure_progress.year = 2015))) mp3 ON ((mp3.mtm_id = maatregelen.mtm_id)))
     LEFT JOIN ( SELECT measure_progress.amount_value,
            measure_progress.year,
            measure_progress.mtm_id
           FROM measure_progress
          WHERE ((measure_progress.mst_id = 4) AND (measure_progress.year = 2015))) mp4 ON ((mp4.mtm_id = maatregelen.mtm_id)))
     LEFT JOIN ( SELECT measure_progress.amount_value,
            measure_progress.year,
            measure_progress.mtm_id
           FROM measure_progress
          WHERE ((measure_progress.mst_id = 5) AND (measure_progress.year = 2015))) mp5 ON ((mp5.mtm_id = maatregelen.mtm_id)))
     LEFT JOIN ( SELECT measure_progress.amount_value,
            measure_progress.year,
            measure_progress.mtm_id
           FROM measure_progress
          WHERE ((measure_progress.mst_id = 6) AND (measure_progress.year = 2015))) mp6 ON ((mp6.mtm_id = maatregelen.mtm_id)))
  ORDER BY supp_add_measure_type.local_id;


--
-- Name: vw_maatregelen_financieen; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_maatregelen_financieen AS
 SELECT vw_maatregelen."DB_ID" AS "Maatregel_DB_ID",
    vw_maatregelen."Identifcatie" AS "Maatregel_Identificatie",
    vw_maatregelen."Naam" AS "Maatregel_Naam",
    measure_finance.sum AS "Kosten",
    measure_finance_type.omschrijving
   FROM measure_finance,
    vw_maatregelen,
    measure_finance_type
  WHERE ((vw_maatregelen."DB_ID" = measure_finance.mtm_id) AND (measure_finance_type.mtf_id = measure_finance.mft_id));


--
-- Name: vw_maatregelen_for_crystal_reports; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_maatregelen_for_crystal_reports AS
 SELECT measure_progress.last_change_time,
    monitored_measure.mtm_id AS "DB_ID",
    measure_progress.amount_value,
    monitored_measure.prime_competent_authority_id,
    reporting_period.rpp_id AS periodeid,
    (reporting_period.description)::character varying(20) AS sqbp_periode,
    (reporting_period.description)::character varying(20) AS periode_sgbp,
    reporting_period.period_start AS rapportageperiodebegin,
    reporting_period.period_end AS rapportageperiodeeind,
    object_state_type.code AS rapportagestatus,
    reporting_period.description AS rapportageperiode,
    report_version.is_public_data AS publiektoegankelijk,
    supp_add_measure_type.local_id AS "Maatregel_Identifcatie",
    supp_add_measure_type.measure_name AS "Maatregel_Naam",
    supp_add_measure_type.measure_description AS "Omschrijving",
    supp_add_measure_type.comment AS "Toelichting",
    supp_add_measure_type.associated_link_desc AS "Bron_Omschrijving",
    level_of_area_type.description AS "Niveau",
    sw_supp_measure_eu_type.name AS "EUType_Omschrijving",
    supp_add_measure_type.amount_value AS "Hoeveelheid",
    eenheid_type.code AS "Eenheid_Code",
    eenheid_type.omschrijving AS "Eenheid_Omschrijving",
    supp_add_measure_type.initiative_party AS "Initiatiefnemer",
    organisation_category_type.omschrijving AS "Initiatiefnemer_Categorie",
    supp_add_measure_type.is_additional_measure AS "Opgenomen_In_SGBP",
    competent_authority.namespace_id AS waterbeheerderid,
    ('NL'::text || (wb_nst.code)::text) AS namespace,
    organisatorische_eenheid.naam,
    organisation_category_type.code AS waterbeheerdercode,
    reporting_period.description AS periode,
    supp_add_measure_type.local_id AS lokaalid,
    supp_add_measure_type.measure_description AS beschrijving,
    supp_add_measure_type.comment AS toelichting,
    measure_status_type.code AS "VoortgangStatus_Code",
    measure_progress.amount_value AS "Hoeveelheid_voortgang",
    measure_progress.reason_substanstial_delay AS "Motivering",
    supp_add_measure_type.amount_value AS omvangnummeriekewaarde,
    supp_add_measure_type.is_additional_measure AS opnameinsgbpjn,
    supp_add_measure_type.initiative_party AS initiatiefnemernaam,
    supp_add_measure_type.is_abstraction_relevant AS relatiemetwaterwinning,
    supp_add_measure_type."is_N2000_relevant" AS relatiemetnatura2000gebied,
    sw_supp_measure_eu_type.code AS maatregelcode,
    level_of_area_type.code AS maatregelniveaucode,
    eenheid_type.code AS omvangeenheidcode,
    organisation_category_type.code AS initiatiefnemersoortcode,
    array_to_string(ARRAY( SELECT DISTINCT regexp_replace((ho.inspire_id_local_id)::text, '\r|\n'::text, ''::text, 'g'::text) AS regexp_replace
           FROM (hydro_object ho
             JOIN measure_per_man_reg_or_restr_zone mz ON ((mz.mrz_id = ho.hdo_id)))
          WHERE (mz.mtm_id = monitored_measure.mtm_id)), '|'::text) AS hoortbijwaterlichamen,
    stroomgebieddistrict.inspire_id_local_id AS stroomgebieddistrictcode,
    measure_progress.year AS "Jaar",
    wkr_version.wkrv_id AS wkr_versie,
    wkr_version.begin_lifespan_version AS wkr_beginversie,
    wkr_version.end_lifespan_version AS wkr_eindversie,
    sw_supp_measure_eu_type.artikel_sgbp AS art11,
    sw_supp_measure_eu_type.tablkop_sgbp AS tabelkop,
    sw_supp_measure_eu_type.code_sgbp AS codesqbp,
    sw_supp_measure_eu_type.hoofdcategorie,
    sw_supp_measure_eu_type.subcategorie,
    sw_supp_measure_eu_type.harmonisatie AS samengevoegdemaatregel
   FROM ((((((((((((((((((((measure_progress
     JOIN monitored_measure ON ((monitored_measure.mtm_id = measure_progress.mtm_id)))
     LEFT JOIN measure_per_man_reg_or_restr_zone ON ((measure_per_man_reg_or_restr_zone.mtm_id = monitored_measure.mtm_id)))
     JOIN supp_add_measure_type ON ((supp_add_measure_type.smnl_id = monitored_measure.mtm_id)))
     JOIN hydro_object ON ((hydro_object.hdo_id = measure_per_man_reg_or_restr_zone.mrz_id)))
     JOIN competentauthority_namespacetype ON ((competentauthority_namespacetype.ns_id = hydro_object.inspire_id_namespace)))
     JOIN competent_authority ON ((competent_authority.ore_id = competentauthority_namespacetype.ore_id)))
     JOIN namespace_type wb_nst ON ((wb_nst.ns_id = competent_authority.namespace_id)))
     JOIN report_version ON ((report_version.rpv_id = monitored_measure.rpv_id)))
     JOIN object_state_type ON ((report_version.ost_id = object_state_type.ost_id)))
     JOIN reporting_period ON ((reporting_period.rpp_id = report_version.rpp_id)))
     JOIN sw_supp_measure_eu_type ON ((sw_supp_measure_eu_type.smeu_id = supp_add_measure_type.smeu_id)))
     JOIN level_of_area_type ON ((level_of_area_type.loa_id = monitored_measure.level_of_measure_id)))
     JOIN eenheid_type ON ((eenheid_type.eenh_id = sw_supp_measure_eu_type.eenh_id)))
     JOIN water_body ON ((water_body.wbd_id = hydro_object.hdo_id)))
     JOIN hydro_object stroomgebieddistrict ON ((stroomgebieddistrict.hdo_id = water_body.rbd_id)))
     JOIN measure_status_type ON ((measure_status_type.mst_id = measure_progress.mst_id)))
     JOIN organisatorische_eenheid ON ((organisatorische_eenheid.ore_id = competent_authority.ore_id)))
     JOIN organisation_category_type ON ((organisation_category_type.ocat_id = organisatorische_eenheid.organisation_category_id)))
     JOIN legislation_reference_type ON ((legislation_reference_type.lgr_id = reporting_period.leg_ref_id)))
     JOIN wkr_version ON ((report_version.wkrv_id = wkr_version.wkrv_id)))
  ORDER BY measure_progress.last_change_time DESC, reporting_period.rpp_id, wb_nst.code, supp_add_measure_type.local_id, supp_add_measure_type.measure_name;


--
-- Name: vw_maatregelen_for_download; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_maatregelen_for_download AS
 SELECT maatregelen.mtm_id,
    rv2.rpp_id AS periodeid,
    competent_authority.ore_id AS waterbeheerderoreid,
    ('NL'::text || (wb_nst.code)::text) AS waterbeheerdercode,
    regexp_replace((supp_add_measure_type.local_id)::text, '\r|\n'::text, ''::text, 'g'::text) AS maatregelcode,
    regexp_replace((supp_add_measure_type.measure_name)::text, '\r|\n'::text, ''::text, 'g'::text) AS naam,
    rpp.description AS sgbpperiodeomschrijving,
    ((date_part('year'::text, reporting_period.period_start) || '-'::text) || date_part('year'::text, reporting_period.period_end)) AS uitvoeringin,
    regexp_replace((sw_supp_measure_eu_type.code)::text, '\r|\n'::text, ''::text, 'g'::text) AS krwmaatregelcode,
    regexp_replace((supp_add_measure_type.measure_description)::text, '\r|\n'::text, ''::text, 'g'::text) AS toelichting,
    regexp_replace((level_of_area_type.code)::text, '\r|\n'::text, ''::text, 'g'::text) AS krwmaatregelniveaucode,
    array_to_string(ARRAY( SELECT DISTINCT regexp_replace((ho.inspire_id_local_id)::text, '\r|\n'::text, ''::text, 'g'::text) AS regexp_replace
           FROM (hydro_object ho
             JOIN measure_per_man_reg_or_restr_zone mz ON ((mz.mrz_id = ho.hdo_id)))
          WHERE (mz.mtm_id = maatregelen.mtm_id)), '|'::text) AS hoortbijkrwwaterlichaam,
    stroomgebieddistrict.inspire_id_local_id AS krwstroomgebieddistrictcode,
    supp_add_measure_type.amount_value AS omvangnumeriekewaarde,
    regexp_replace((eenheid_type.code)::text, '\r|\n'::text, ''::text, 'g'::text) AS omvangeenheidcode,
    supp_add_measure_type.is_additional_measure AS opnameinsgbp,
    regexp_replace((organisation_category_type.code)::text, '\r|\n'::text, ''::text, 'g'::text) AS initiatiefnemersoortcode,
    regexp_replace(supp_add_measure_type.initiative_party, '\r|\n'::text, ''::text, 'g'::text) AS initiatiefnemernaam,
    array_to_string(ARRAY( SELECT DISTINCT regexp_replace((t.code)::text, '\r|\n'::text, ''::text, 'g'::text) AS regexp_replace
           FROM (monitored_measure_eu_fund m
             JOIN eu_fund_type t ON ((t.euf_id = m.euf_id)))
          WHERE (m.mtm_id = maatregelen.mtm_id)), '|'::text) AS eufondscode,
    array_to_string(ARRAY( SELECT DISTINCT regexp_replace((((mft.omschrijving)::text || '='::text) || mf2.sum), '\r|\n'::text, ''::text, 'g'::text) AS regexp_replace
           FROM (measure_finance mf2
             JOIN measure_finance_type mft ON ((mft.mtf_id = mf2.mft_id)))
          WHERE ((mf2.mtm_id = maatregelen.mtm_id) AND (mf2.mft_id <> 3))), '|'::text) AS kosten,
    array_to_string(ARRAY( SELECT DISTINCT regexp_replace((vbg."Identificatie")::text, '\r|\n'::text, ''::text, 'g'::text) AS regexp_replace
           FROM (vw_beschermdegebieden vbg
             JOIN measure_per_man_protected_area mpmpa ON ((mpmpa.wpa_id = vbg."DB_ID")))
          WHERE ((mpmpa.mtm_id = maatregelen.mtm_id) AND (vbg."Versie_ID" = rv2.wkrv_id))), '|'::text) AS natura2000gebieden,
    array_to_string(ARRAY( SELECT DISTINCT regexp_replace((vgo."Identificatie")::text, '\r|\n'::text, ''::text, 'g'::text) AS regexp_replace
           FROM (vw_gw_onttrekking vgo
             JOIN measure_per_abstraction_point mpap ON ((mpap.asp_id = vgo."DB_ID")))
          WHERE ((mpap.mtm_id = maatregelen.mtm_id) AND (vgo.wkr_versie = rv2.wkrv_id))), '|'::text) AS waterwinningsgebieden
   FROM ((((((((((((((monitored_measure maatregelen
     JOIN supp_add_measure_type ON ((supp_add_measure_type.smnl_id = maatregelen.mtm_id)))
     JOIN sw_supp_measure_eu_type ON ((sw_supp_measure_eu_type.smeu_id = supp_add_measure_type.smeu_id)))
     JOIN eenheid_type ON ((eenheid_type.eenh_id = sw_supp_measure_eu_type.eenh_id)))
     JOIN namespace_type wb_nst ON ((wb_nst.ns_id = supp_add_measure_type.namespace_id)))
     JOIN competentauthority_namespacetype ON ((competentauthority_namespacetype.ns_id = wb_nst.ns_id)))
     JOIN competent_authority ON ((competent_authority.ore_id = competentauthority_namespacetype.ore_id)))
     JOIN report_version ON ((report_version.rpv_id = maatregelen.rpv_id)))
     JOIN reporting_period ON ((reporting_period.rpp_id = report_version.rpp_id)))
     JOIN level_of_area_type ON ((level_of_area_type.loa_id = maatregelen.level_of_measure_id)))
     JOIN organisation_category_type ON ((organisation_category_type.ocat_id = supp_add_measure_type.initiative_party_ocat_id)))
     JOIN river_basin_management_plan ON ((river_basin_management_plan.rbmp_id = supp_add_measure_type.rbmp_id)))
     JOIN hydro_object stroomgebieddistrict ON ((stroomgebieddistrict.hdo_id = river_basin_management_plan.rbd_id)))
     JOIN report_version rv2 ON ((rv2.wkrv_id = river_basin_management_plan.wkrv_id)))
     JOIN reporting_period rpp ON (((rpp.rpp_id = rv2.rpp_id) AND (rv2.begin_lifespan_version <= now()) AND ((rv2.end_lifespan_version > now()) OR (rv2.end_lifespan_version IS NULL)) AND (rpp.leg_ref_id = 1))))
  ORDER BY supp_add_measure_type.local_id;


--
-- Name: vw_maatregelen_volgorde; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_maatregelen_volgorde AS
 SELECT DISTINCT smeu.code,
    smeu.hoofdcategorie,
    smeu.subcategorie,
    smeu.code_sgbp,
        CASE smeu.code_sgbp
            WHEN 'RO078'::text THEN '01'::text
            WHEN 'RO07'::text THEN '01'::text
            WHEN 'RO08'::text THEN '01'::text
            WHEN 'IM06'::text THEN '02'::text
            WHEN 'IM03'::text THEN '03'::text
            WHEN 'IM12'::text THEN '04'::text
            WHEN 'IM012'::text THEN '05'::text
            WHEN 'IM01'::text THEN '05'::text
            WHEN 'IM02'::text THEN '05'::text
            WHEN 'IM04'::text THEN '06'::text
            WHEN 'IM05'::text THEN '07'::text
            WHEN 'IM1011'::text THEN '08'::text
            WHEN 'IM10'::text THEN '08'::text
            WHEN 'IM11'::text THEN '08'::text
            WHEN 'BR01'::text THEN '09'::text
            WHEN 'BR10'::text THEN '10'::text
            WHEN 'BR07'::text THEN '11'::text
            WHEN 'BE045'::text THEN '12'::text
            WHEN 'BE04'::text THEN '12'::text
            WHEN 'BE05'::text THEN '12'::text
            WHEN 'BR045'::text THEN '13'::text
            WHEN 'BR04'::text THEN '13'::text
            WHEN 'BR05'::text THEN '13'::text
            WHEN 'BR039'::text THEN '14'::text
            WHEN 'BR03'::text THEN '14'::text
            WHEN 'BR09'::text THEN '14'::text
            WHEN 'IM078'::text THEN '15'::text
            WHEN 'IM07'::text THEN '15'::text
            WHEN 'IM08'::text THEN '15'::text
            WHEN 'IN10'::text THEN '16'::text
            WHEN 'IN13'::text THEN '17'::text
            WHEN 'IN023'::text THEN '18'::text
            WHEN 'IN02'::text THEN '18'::text
            WHEN 'IN03'::text THEN '18'::text
            WHEN 'IN14'::text THEN '19'::text
            WHEN 'IN16'::text THEN '20'::text
            WHEN 'IN15'::text THEN '21'::text
            WHEN 'IN0789'::text THEN '22'::text
            WHEN 'IN07'::text THEN '22'::text
            WHEN 'IN08'::text THEN '22'::text
            WHEN 'IN09'::text THEN '22'::text
            WHEN 'IN12'::text THEN '23'::text
            WHEN 'IN20'::text THEN '24'::text
            WHEN 'IN11'::text THEN '25'::text
            WHEN 'IN01'::text THEN '26'::text
            WHEN 'IN0456'::text THEN '27'::text
            WHEN 'IN04'::text THEN '27'::text
            WHEN 'IN05'::text THEN '27'::text
            WHEN 'IN06'::text THEN '27'::text
            WHEN 'GGOR'::text THEN '28'::text
            WHEN 'IN17'::text THEN '29'::text
            WHEN 'IN19_IM09'::text THEN '30'::text
            WHEN 'IN19'::text THEN '30'::text
            WHEN 'IM09'::text THEN '30'::text
            WHEN 'BE023'::text THEN '31'::text
            WHEN 'BE02'::text THEN '31'::text
            WHEN 'BE03'::text THEN '31'::text
            WHEN 'BE01'::text THEN '32'::text
            WHEN 'BE08'::text THEN '33'::text
            WHEN 'RO0123456'::text THEN '34'::text
            WHEN 'RO01'::text THEN '34'::text
            WHEN 'RO02'::text THEN '34'::text
            WHEN 'RO03'::text THEN '34'::text
            WHEN 'RO04'::text THEN '34'::text
            WHEN 'RO05'::text THEN '34'::text
            WHEN 'RO06'::text THEN '34'::text
            WHEN 'S05'::text THEN '35'::text
            WHEN 'S02'::text THEN '36'::text
            WHEN 'IN18'::text THEN '37'::text
            WHEN 'S04'::text THEN '38'::text
            WHEN 'S06'::text THEN '39'::text
            WHEN 'BE07'::text THEN '40'::text
            WHEN 'BE06'::text THEN '41'::text
            WHEN 'S03'::text THEN '42'::text
            WHEN 'S01'::text THEN '43'::text
            WHEN 'WB21'::text THEN '55'::text
            ELSE NULL::text
        END AS volgorde
   FROM sw_supp_measure_eu_type smeu
  ORDER BY
        CASE smeu.code_sgbp
            WHEN 'RO078'::text THEN '01'::text
            WHEN 'RO07'::text THEN '01'::text
            WHEN 'RO08'::text THEN '01'::text
            WHEN 'IM06'::text THEN '02'::text
            WHEN 'IM03'::text THEN '03'::text
            WHEN 'IM12'::text THEN '04'::text
            WHEN 'IM012'::text THEN '05'::text
            WHEN 'IM01'::text THEN '05'::text
            WHEN 'IM02'::text THEN '05'::text
            WHEN 'IM04'::text THEN '06'::text
            WHEN 'IM05'::text THEN '07'::text
            WHEN 'IM1011'::text THEN '08'::text
            WHEN 'IM10'::text THEN '08'::text
            WHEN 'IM11'::text THEN '08'::text
            WHEN 'BR01'::text THEN '09'::text
            WHEN 'BR10'::text THEN '10'::text
            WHEN 'BR07'::text THEN '11'::text
            WHEN 'BE045'::text THEN '12'::text
            WHEN 'BE04'::text THEN '12'::text
            WHEN 'BE05'::text THEN '12'::text
            WHEN 'BR045'::text THEN '13'::text
            WHEN 'BR04'::text THEN '13'::text
            WHEN 'BR05'::text THEN '13'::text
            WHEN 'BR039'::text THEN '14'::text
            WHEN 'BR03'::text THEN '14'::text
            WHEN 'BR09'::text THEN '14'::text
            WHEN 'IM078'::text THEN '15'::text
            WHEN 'IM07'::text THEN '15'::text
            WHEN 'IM08'::text THEN '15'::text
            WHEN 'IN10'::text THEN '16'::text
            WHEN 'IN13'::text THEN '17'::text
            WHEN 'IN023'::text THEN '18'::text
            WHEN 'IN02'::text THEN '18'::text
            WHEN 'IN03'::text THEN '18'::text
            WHEN 'IN14'::text THEN '19'::text
            WHEN 'IN16'::text THEN '20'::text
            WHEN 'IN15'::text THEN '21'::text
            WHEN 'IN0789'::text THEN '22'::text
            WHEN 'IN07'::text THEN '22'::text
            WHEN 'IN08'::text THEN '22'::text
            WHEN 'IN09'::text THEN '22'::text
            WHEN 'IN12'::text THEN '23'::text
            WHEN 'IN20'::text THEN '24'::text
            WHEN 'IN11'::text THEN '25'::text
            WHEN 'IN01'::text THEN '26'::text
            WHEN 'IN0456'::text THEN '27'::text
            WHEN 'IN04'::text THEN '27'::text
            WHEN 'IN05'::text THEN '27'::text
            WHEN 'IN06'::text THEN '27'::text
            WHEN 'GGOR'::text THEN '28'::text
            WHEN 'IN17'::text THEN '29'::text
            WHEN 'IN19_IM09'::text THEN '30'::text
            WHEN 'IN19'::text THEN '30'::text
            WHEN 'IM09'::text THEN '30'::text
            WHEN 'BE023'::text THEN '31'::text
            WHEN 'BE02'::text THEN '31'::text
            WHEN 'BE03'::text THEN '31'::text
            WHEN 'BE01'::text THEN '32'::text
            WHEN 'BE08'::text THEN '33'::text
            WHEN 'RO0123456'::text THEN '34'::text
            WHEN 'RO01'::text THEN '34'::text
            WHEN 'RO02'::text THEN '34'::text
            WHEN 'RO03'::text THEN '34'::text
            WHEN 'RO04'::text THEN '34'::text
            WHEN 'RO05'::text THEN '34'::text
            WHEN 'RO06'::text THEN '34'::text
            WHEN 'S05'::text THEN '35'::text
            WHEN 'S02'::text THEN '36'::text
            WHEN 'IN18'::text THEN '37'::text
            WHEN 'S04'::text THEN '38'::text
            WHEN 'S06'::text THEN '39'::text
            WHEN 'BE07'::text THEN '40'::text
            WHEN 'BE06'::text THEN '41'::text
            WHEN 'S03'::text THEN '42'::text
            WHEN 'S01'::text THEN '43'::text
            WHEN 'WB21'::text THEN '55'::text
            ELSE NULL::text
        END;


--
-- Name: vw_maatregelen_voortgang; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_maatregelen_voortgang AS
 SELECT vw_maatregelen."DB_ID" AS "Maatregel_DB_ID",
    vw_maatregelen."Identifcatie" AS "Maatregel_Identificatie",
    vw_maatregelen."Naam" AS "Maatregel_Naam",
    measure_progress.reason_substanstial_delay AS "Motivering",
    measure_progress.amount_value AS "Hoeveelheid",
    measure_progress.year AS "Jaar",
    measure_status_type.code AS "VoortgangStatus_Code",
    measure_status_type.omschrijving
   FROM measure_progress,
    vw_maatregelen,
    measure_status_type
  WHERE ((vw_maatregelen."DB_ID" = measure_progress.mtm_id) AND (measure_status_type.mst_id = measure_progress.mst_id));


--
-- Name: vw_maatregelen_with_voortgang_for_download; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_maatregelen_with_voortgang_for_download AS
 SELECT mtm.mtm_id AS "DB_ID",
    ('NL'::text || (wb_nst.code)::text) AS "Namespace",
    wb_nst.descrption AS "Waterbeheerder_Naam",
    regexp_replace((supp_add_measure_type.local_id)::text, '\r|\n'::text, ''::text, 'g'::text) AS "LokaalID",
    regexp_replace((supp_add_measure_type.measure_name)::text, '\r|\n'::text, ''::text, 'g'::text) AS "Naam",
    rpp.description AS "SGBPPeriode_Omschrijving",
    ((date_part('year'::text, reporting_period.period_start) || '-'::text) || date_part('year'::text, reporting_period.period_end)) AS "UitvoeringIn",
    regexp_replace((sw_supp_measure_eu_type.code)::text, '\r|\n'::text, ''::text, 'g'::text) AS "KRWmaatregel_Code",
    sw_supp_measure_eu_type.name AS "KRWmaatregel_Naam",
    regexp_replace((supp_add_measure_type.measure_description)::text, '\r|\n'::text, ''::text, 'g'::text) AS "Voortgang_Toelichting",
    sw_supp_measure_eu_type.hoofdcategorie AS "Hoofdcategorie",
    sw_supp_measure_eu_type.index AS "Index",
    sw_supp_measure_eu_type.klasse AS "SGBP_Klasse",
    sw_supp_measure_eu_type.harmonisatie AS "SGBP_Harmonisatie",
    sw_supp_measure_eu_type.code_sgbp AS "SGBP_code",
    sw_supp_measure_eu_type.artikel_sgbp AS "SGBP_artikel",
    sw_supp_measure_eu_type.tablkop_sgbp AS "SGBP_Hoofdcategorie",
    regexp_replace((level_of_area_type.code)::text, '\r|\n'::text, ''::text, 'g'::text) AS "KRWMaatregelNiveau_Code",
    regexp_replace((level_of_area_type.description)::text, '\r|\n'::text, ''::text, 'g'::text) AS "KRWMaatregelNiveau_Omschrijving",
    array_to_string(ARRAY( SELECT DISTINCT regexp_replace((ho.inspire_id_local_id)::text, '\r|\n'::text, ''::text, 'g'::text) AS regexp_replace
           FROM (hydro_object ho
             JOIN measure_per_man_reg_or_restr_zone mz ON ((mz.mrz_id = ho.hdo_id)))
          WHERE (mz.mtm_id = mtm.mtm_id)), '|'::text) AS "HoortbijKRWwaterlichaam",
    stroomgebieddistrict.inspire_id_local_id AS "KRWstroomgebiedDistrict_Code",
    supp_add_measure_type.is_additional_measure AS "OpnameInSGBPJN",
    regexp_replace((organisation_category_type.code)::text, '\r|\n'::text, ''::text, 'g'::text) AS "Initiatiefnemer_Code",
    regexp_replace(supp_add_measure_type.initiative_party, '\r|\n'::text, ''::text, 'g'::text) AS "Initiatiefnemer_Naam",
    array_to_string(ARRAY( SELECT DISTINCT regexp_replace((t.code)::text, '\r|\n'::text, ''::text, 'g'::text) AS regexp_replace
           FROM (monitored_measure_eu_fund m
             JOIN eu_fund_type t ON ((t.euf_id = m.euf_id)))
          WHERE (m.mtm_id = mtm.mtm_id)), '|'::text) AS "EUFonds_Code",
    array_to_string(ARRAY( SELECT DISTINCT regexp_replace((vbg."Identificatie")::text, '\r|\n'::text, ''::text, 'g'::text) AS regexp_replace
           FROM (vw_beschermdegebieden vbg
             JOIN measure_per_man_protected_area mpmpa ON ((mpmpa.wpa_id = vbg."DB_ID")))
          WHERE ((mpmpa.mtm_id = mtm.mtm_id) AND (vbg."Versie_ID" = river_basin_management_plan.wkrv_id))), '|'::text) AS "RelatieMetNatura2000Gebied",
    array_to_string(ARRAY( SELECT DISTINCT regexp_replace((vgo."Identificatie")::text, '\r|\n'::text, ''::text, 'g'::text) AS regexp_replace
           FROM (vw_gw_onttrekking vgo
             JOIN measure_per_abstraction_point mpap ON ((mpap.asp_id = vgo."DB_ID")))
          WHERE ((mpap.mtm_id = mtm.mtm_id) AND (vgo.wkr_versie = river_basin_management_plan.wkrv_id))), '|'::text) AS "RelatieMetWaterwinning",
    array_to_string(ARRAY( SELECT DISTINCT regexp_replace((((mft.omschrijving)::text || '='::text) || mf2.sum), '\r|\n'::text, ''::text, 'g'::text) AS regexp_replace
           FROM (measure_finance mf2
             JOIN measure_finance_type mft ON ((mft.mtf_id = mf2.mft_id)))
          WHERE ((mf2.mtm_id = mtm.mtm_id) AND (mf2.mft_id <> 3))), '|'::text) AS kosten,
    river_basin_management_plan.wkrv_id AS versie,
    (''::text || supp_add_measure_type.amount_value) AS "OmvangNumeriekeWaarde",
    regexp_replace((eenheid_type.code)::text, '\r|\n'::text, ''::text, 'g'::text) AS omvangeenheidcode,
    (''::text || mp1.amount_value) AS "Plan",
    (''::text || mp2.amount_value) AS "Uitvoering",
    (''::text || mp3.amount_value) AS "Uitgevoerd",
    (''::text || mp4.amount_value) AS "Gefaseerd",
    (''::text || mp5.amount_value) AS "Vervangen",
    (''::text || mp6.amount_value) AS "Ingetrokken",
    mp1.year AS "Jaar_voortgang",
    ca.ore_id AS waterbeheerderoreid,
    mp1.year AS year1,
    mp2.year AS year2,
    mp3.year AS year3,
    mp4.year AS year4,
    mp5.year AS year5,
    mp6.year AS year6,
    supp_add_measure_type.process_info
   FROM (((((((((((((((((((((((((competent_authority ca
     JOIN namespace_type nst ON ((ca.namespace_id = nst.ns_id)))
     JOIN competentauthority_namespacetype cans ON ((cans.ore_id = ca.ore_id)))
     JOIN hydro_object hdo ON ((cans.ns_id = hdo.inspire_id_namespace)))
     JOIN measure_per_man_reg_or_restr_zone mpmr ON ((hdo.hdo_id = mpmr.mrz_id)))
     JOIN monitored_measure mtm ON ((mpmr.mtm_id = mtm.mtm_id)))
     JOIN supp_add_measure_type ON ((supp_add_measure_type.smnl_id = mtm.mtm_id)))
     JOIN sw_supp_measure_eu_type ON ((sw_supp_measure_eu_type.smeu_id = supp_add_measure_type.smeu_id)))
     JOIN eenheid_type ON ((eenheid_type.eenh_id = sw_supp_measure_eu_type.eenh_id)))
     JOIN namespace_type wb_nst ON ((wb_nst.ns_id = supp_add_measure_type.namespace_id)))
     JOIN competentauthority_namespacetype ON ((competentauthority_namespacetype.ns_id = wb_nst.ns_id)))
     JOIN competent_authority ON ((competent_authority.ore_id = competentauthority_namespacetype.ore_id)))
     JOIN report_version ON ((report_version.rpv_id = mtm.rpv_id)))
     JOIN reporting_period ON ((reporting_period.rpp_id = report_version.rpp_id)))
     JOIN level_of_area_type ON ((level_of_area_type.loa_id = mtm.level_of_measure_id)))
     JOIN organisation_category_type ON ((organisation_category_type.ocat_id = supp_add_measure_type.initiative_party_ocat_id)))
     JOIN river_basin_management_plan ON ((river_basin_management_plan.rbmp_id = supp_add_measure_type.rbmp_id)))
     JOIN hydro_object stroomgebieddistrict ON ((stroomgebieddistrict.hdo_id = river_basin_management_plan.rbd_id)))
     JOIN report_version rv2 ON ((rv2.wkrv_id = river_basin_management_plan.wkrv_id)))
     JOIN reporting_period rpp ON (((rpp.rpp_id = rv2.rpp_id) AND (rv2.begin_lifespan_version <= now()) AND ((rv2.end_lifespan_version > now()) OR (rv2.end_lifespan_version IS NULL)) AND (rpp.leg_ref_id = 1))))
     LEFT JOIN measure_progress mp1 ON (((supp_add_measure_type.smnl_id = mp1.mtm_id) AND (mp1.mst_id = 1) AND (mp1.year = 2015))))
     LEFT JOIN measure_progress mp2 ON (((supp_add_measure_type.smnl_id = mp2.mtm_id) AND (mp2.mst_id = 2) AND (mp2.year = 2015))))
     LEFT JOIN measure_progress mp3 ON (((supp_add_measure_type.smnl_id = mp3.mtm_id) AND (mp3.mst_id = 3) AND (mp3.year = 2015))))
     LEFT JOIN measure_progress mp4 ON (((supp_add_measure_type.smnl_id = mp4.mtm_id) AND (mp4.mst_id = 4) AND (mp4.year = 2015))))
     LEFT JOIN measure_progress mp5 ON (((supp_add_measure_type.smnl_id = mp5.mtm_id) AND (mp5.mst_id = 5) AND (mp5.year = 2015))))
     LEFT JOIN measure_progress mp6 ON (((supp_add_measure_type.smnl_id = mp6.mtm_id) AND (mp6.mst_id = 6) AND (mp6.year = 2015))))
  GROUP BY mtm.mtm_id, wb_nst.code, wb_nst.descrption, supp_add_measure_type.local_id, supp_add_measure_type.measure_name, rpp.description, reporting_period.period_start, reporting_period.period_end, sw_supp_measure_eu_type.code, sw_supp_measure_eu_type.name, supp_add_measure_type.measure_description, sw_supp_measure_eu_type.hoofdcategorie, sw_supp_measure_eu_type.index, sw_supp_measure_eu_type.klasse, sw_supp_measure_eu_type.harmonisatie, sw_supp_measure_eu_type.code_sgbp, sw_supp_measure_eu_type.artikel_sgbp, sw_supp_measure_eu_type.tablkop_sgbp, level_of_area_type.code, level_of_area_type.description, stroomgebieddistrict.inspire_id_local_id, supp_add_measure_type.is_additional_measure, organisation_category_type.code, supp_add_measure_type.initiative_party, river_basin_management_plan.wkrv_id, supp_add_measure_type.amount_value, eenheid_type.code, mp1.amount_value, mp2.amount_value, mp3.amount_value, mp4.amount_value, mp5.amount_value, mp6.amount_value, mp1.year, ca.ore_id, mp2.year, mp3.year, mp4.year, mp5.year, mp6.year, supp_add_measure_type.process_info
  ORDER BY supp_add_measure_type.local_id;


--
-- Name: vw_match_opts_taxa_G_met_I; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW "vw_match_opts_taxa_G_met_I" AS
 SELECT optg.opt_id AS "optG.opt_id",
    optg.observed_property_type_class AS "optG.observed_property_type_class",
    optg.result_type AS "optG.result_type",
    optg.hoedanigheid_id AS "optG.hoedanigheid_id",
    optg.object_group_id AS "optG.object_group_id",
    optg.quantity_id AS "optG.quantity_id",
    optg.taxa_group_id AS "optG.taxa_group_id",
    optg.substance_group_id AS "optG.substance_group_id",
    optg.indicator_id AS "optG.indicator_id",
    optg.classification_group_id AS "optG.classification_group_id",
    optg.remarks AS "optG.remarks",
    optg.d_begin AS "optG.d_begin",
    optg.d_eind AS "optG.d_eind",
    optg.last_changed_date AS "optG.last_changed_date",
    optg.d_status AS "optG.d_status",
    hdhg.hdh_id AS "hdhG.hdh_id",
    hdhg.code AS "hdhG.code",
    hdhg.omschrijving AS "hdhG.omschrijving",
    hdhg.d_begin AS "hdhG.d_begin",
    hdhg.d_eind AS "hdhG.d_eind",
    hdhg.last_changed_date AS "hdhG.last_changed_date",
    hdhg.d_status AS "hdhG.d_status",
    hdhg.id AS "hdhG.id",
    grhg.grh_id AS "grhG.grh_id",
    grhg.code AS "grhG.code",
    grhg.omschrijving AS "grhG.omschrijving",
    grhg.d_begin AS "grhG.d_begin",
    grhg.d_eind AS "grhG.d_eind",
    grhg.last_changed_date AS "grhG.last_changed_date",
    grhg.d_status AS "grhG.d_status",
    grhg.id AS "grhG.id",
    tgeg.txg_id AS "tgeG.txg_id",
    tgeg.txn_id AS "tgeG.txn_id",
    txgg.txg_id AS "txgG.txg_id",
    txgg.name AS "txgG.name",
    txgg.group_type AS "txgG.group_type",
    txgg.d_begin AS "txgG.d_begin",
    txgg.d_eind AS "txgG.d_eind",
    txgg.last_changed_date AS "txgG.last_changed_date",
    txgg.d_status AS "txgG.d_status",
    tgei.txg_id AS "tgeI.txg_id",
    tgei.txn_id AS "tgeI.txn_id",
    txgi.txg_id AS "txgI.txg_id",
    txgi.name AS "txgI.name",
    txgi.group_type AS "txgI.group_type",
    txgi.d_begin AS "txgI.d_begin",
    txgi.d_eind AS "txgI.d_eind",
    txgi.last_changed_date AS "txgI.last_changed_date",
    txgi.d_status AS "txgI.d_status",
    opti.opt_id AS "optI.opt_id",
    opti.observed_property_type_class AS "optI.observed_property_type_class",
    opti.result_type AS "optI.result_type",
    opti.hoedanigheid_id AS "optI.hoedanigheid_id",
    opti.object_group_id AS "optI.object_group_id",
    opti.quantity_id AS "optI.quantity_id",
    opti.taxa_group_id AS "optI.taxa_group_id",
    opti.substance_group_id AS "optI.substance_group_id",
    opti.indicator_id AS "optI.indicator_id",
    opti.classification_group_id AS "optI.classification_group_id",
    opti.remarks AS "optI.remarks",
    opti.d_begin AS "optI.d_begin",
    opti.d_eind AS "optI.d_eind",
    opti.last_changed_date AS "optI.last_changed_date",
    opti.d_status AS "optI.d_status",
    hdhi.hdh_id AS "hdhI.hdh_id",
    hdhi.code AS "hdhI.code",
    hdhi.omschrijving AS "hdhI.omschrijving",
    hdhi.d_begin AS "hdhI.d_begin",
    hdhi.d_eind AS "hdhI.d_eind",
    hdhi.last_changed_date AS "hdhI.last_changed_date",
    hdhi.d_status AS "hdhI.d_status",
    hdhi.id AS "hdhI.id",
    grhi.grh_id AS "grhI.grh_id",
    grhi.code AS "grhI.code",
    grhi.omschrijving AS "grhI.omschrijving",
    grhi.d_begin AS "grhI.d_begin",
    grhi.d_eind AS "grhI.d_eind",
    grhi.last_changed_date AS "grhI.last_changed_date",
    grhi.d_status AS "grhI.d_status",
    grhi.id AS "grhI.id"
   FROM (((((((((( SELECT txg.txg_id,
            txg.name,
            txg.group_type,
            txg.d_begin,
            txg.d_eind,
            txg.last_changed_date,
            txg.d_status
           FROM taxa_group txg
          WHERE ((txg.group_type)::text = 'G'::text)) txgg
     LEFT JOIN observed_property_type optg ON ((optg.taxa_group_id = txgg.txg_id)))
     LEFT JOIN hoedanigheid_type hdhg ON ((hdhg.hdh_id = optg.hoedanigheid_id)))
     LEFT JOIN grootheid_type grhg ON ((grhg.grh_id = optg.quantity_id)))
     LEFT JOIN taxa_group_element tgeg ON ((tgeg.txg_id = txgg.txg_id)))
     LEFT JOIN taxa_group_element tgei ON (((tgei.txn_id = tgeg.txn_id) AND (tgei.txg_id <> tgeg.txg_id))))
     LEFT JOIN taxa_group txgi ON (((txgi.txg_id = tgei.txg_id) AND ((txgi.group_type)::text = 'I'::text))))
     LEFT JOIN observed_property_type opti ON (((opti.taxa_group_id = txgi.txg_id) AND (((opti.quantity_id IS NULL) AND (optg.quantity_id IS NULL)) OR (opti.quantity_id = optg.quantity_id)) AND (((opti.hoedanigheid_id IS NULL) AND (optg.hoedanigheid_id IS NULL)) OR (opti.hoedanigheid_id = optg.hoedanigheid_id)))))
     LEFT JOIN hoedanigheid_type hdhi ON ((hdhi.hdh_id = opti.hoedanigheid_id)))
     LEFT JOIN grootheid_type grhi ON ((grhi.grh_id = opti.quantity_id)));


--
-- Name: vw_meetlocatie_waterlichaam; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_meetlocatie_waterlichaam AS
 SELECT mno.inspire_id_local_id AS "Meetpunt.identificatie",
    mno.name AS "Meetpunt.omschrijving",
    st_x(st_transform(mno.geometry, 28992)) AS "Geometriepunt.X_RD",
    st_y(st_transform(mno.geometry, 28992)) AS "Geometriepunt.Y_RD",
    hdo.inspire_id_local_id AS "Waterlichaam.identificatie",
    wln.omschrijving AS "Waterlichaam.omschrijving",
    ns.code AS "Waterbeheerder.code",
    ns.descrption AS "Waterbeheerder.omschrijving",
    wln.stroomgebieddistrict AS "Stroomgebieddistrict.code",
    mno.wkrv_id AS "Versie.code",
    mno.last_change_time
   FROM ((((((((monitoring_object mno
     JOIN wkr_version wkrv ON ((wkrv.wkrv_id = mno.wkrv_id)))
     JOIN monitoring_feature mnf ON ((mnf.mnf_id = mno.mno_id)))
     JOIN environmental_monitoring_facility emf ON ((emf.emf_id = mnf.mnf_id)))
     JOIN management_regulation_or_restriction_zone mrz ON ((mrz.mrz_id = emf.ligt_in_mrz_id)))
     JOIN water_body wbd ON ((wbd.wbd_id = mrz.mrz_id)))
     JOIN hydro_object hdo ON ((hdo.hdo_id = mrz.mrz_id)))
     JOIN vw_waterlichamen wln ON ((wln.db_id = hdo.hdo_id)))
     JOIN namespace_type ns ON ((ns.ns_id = mno.inspire_id_namespace_id)))
  WHERE (st_geometrytype(mno.geometry) = 'ST_Point'::text)
  ORDER BY wln.waterbeheerder_code, hdo.inspire_id_local_id;


--
-- Name: vw_meetpunt_meetnet_csv; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_meetpunt_meetnet_csv AS
 SELECT mpc.meetpunt_identificatie_db_id,
    mpc."Meetpunt.identificatie",
    mpc."Meetpunt.omschrijving",
    mpc."GeometriePunt.X_RD",
    mpc."GeometriePunt.Y_RD",
    mpc."Waterbeheerder.code",
    mpc."Waterbeheerder.omschrijving",
    mmp."Meetnet_Identificatie" AS "Meetnet.identificatie",
    mmp."Meetnet_Omschrijving" AS "Meetnet.omschrijving",
    mmp.wkr_versie AS "Versie"
   FROM (aquo_formaten.vw_umaquo_meetpunten_csv mpc
     JOIN vw_meetnet_meetpunt_g mmp ON (((mmp."Meetpunt_Identificatie")::text = (mpc."Meetpunt.identificatie")::text)))
  ORDER BY mpc."Waterbeheerder.code", mpc."Meetpunt.identificatie";


--
-- Name: vw_meetpunten_cml_csv; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_meetpunten_cml_csv AS
 SELECT monitoring_object.inspire_id_local_id AS "Meetpunt.identificatie",
    monitoring_object.name AS "Meetpunt.omschrijving",
    namespace_type.code AS "Waterbeheerder.code",
    namespace_type.descrption AS "Waterbeheerder.omschrijving",
    st_x(st_transform(monitoring_object.geometry, 28992)) AS "GeometriePunt.X_RD",
    st_y(st_transform(monitoring_object.geometry, 28992)) AS "GeometriePunt.Y_RD",
    monitoring_object.mno_id AS meetpunt_identificatie_db_id,
    monitoring_object.wkrv_id,
    monitoring_object.last_change_time
   FROM (((monitoring_object
     JOIN monitored_compartiment ON ((monitored_compartiment.mno_id = monitoring_object.mno_id)))
     JOIN namespace_type ON ((namespace_type.ns_id = monitoring_object.inspire_id_namespace_id)))
     JOIN monitoring_feature ON ((monitoring_feature.mnf_id = monitoring_object.mno_id)))
  WHERE (st_geometrytype(monitoring_object.geometry) = 'ST_Point'::text)
  ORDER BY namespace_type.code, monitoring_object.inspire_id_local_id;


--
-- Name: vw_meetpunten_csv; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_meetpunten_csv AS
 SELECT monitoring_object.mno_id AS meetpunt_identificatie_db_id,
    monitoring_object.inspire_id_local_id AS "Meetpunt.identificatie",
    monitoring_object.name AS "Meetpunt.omschrijving",
    namespace_type.code AS "Waterbeheerder.code",
    namespace_type.descrption AS "Waterbeheerder.omschrijving",
    st_x(st_transform(monitoring_object.geometry, 28992)) AS "GeometriePunt.X_RD",
    st_y(st_transform(monitoring_object.geometry, 28992)) AS "GeometriePunt.Y_RD",
    monitoring_object.wkrv_id,
    monitoring_object.last_change_time
   FROM (((monitoring_object
     JOIN monitored_compartiment ON ((monitored_compartiment.mno_id = monitoring_object.mno_id)))
     JOIN namespace_type ON ((namespace_type.ns_id = monitoring_object.inspire_id_namespace_id)))
     JOIN monitoring_feature ON ((monitoring_feature.mnf_id = monitoring_object.mno_id)))
  WHERE (st_geometrytype(monitoring_object.geometry) = 'ST_Point'::text)
  ORDER BY namespace_type.code, monitoring_object.inspire_id_local_id;


--
-- Name: VIEW vw_meetpunten_csv; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON VIEW vw_meetpunten_csv IS 'Deze view laat de meetpunten zien zoals ze zijn ingelezen via de landelijke enquete waterkwaliteit. De laatste versie is versie 14';


--
-- Name: vw_meetpunten_shape; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_meetpunten_shape AS
 SELECT DISTINCT ON (monitoring_object.inspire_id_local_id) monitoring_object.inspire_id_local_id AS "IDENT",
    namespace_type.code AS "WBHCODE",
    namespace_type.descrption AS "WBHNAAM",
    monitoring_object.name AS "MPNNAAM",
    monitoring_object.additional_description AS "TOELICHT",
    monitoring_object.geometry,
    monitoring_feature.pos_accuracy_horizontal_value AS "PRECISIE",
    eenheid_type.code AS "PREC_EEN",
    measurement_regime_type.description AS "REGIME",
    environmental_monitoring_facility.is_mobile AS "ISMOBIEL",
    result_acquisition_source_type.description AS "INWINSRT",
    specialised_emf_type.description AS "TYPESRT",
    subsite_type.description AS "LOCTYPE",
    monitoring_station.number_of_points_in_subsite AS "AANTPNT",
    management_regulation_or_restriction_zone.mrz_id AS "IN_OWM"
   FROM ((((((wkr_version
     RIGHT JOIN (namespace_type
     RIGHT JOIN (monitoring_object
     RIGHT JOIN (((hydro_object
     JOIN management_regulation_or_restriction_zone ON ((hydro_object.hdo_id = management_regulation_or_restriction_zone.mrz_id)))
     JOIN namespace_type namespace_type_1 ON ((hydro_object.inspire_id_namespace = namespace_type_1.ns_id)))
     RIGHT JOIN (environmental_monitoring_facility
     JOIN monitoring_feature ON ((environmental_monitoring_facility.emf_id = monitoring_feature.mnf_id))) ON ((management_regulation_or_restriction_zone.mrz_id = environmental_monitoring_facility.ligt_in_mrz_id))) ON ((monitoring_object.mno_id = monitoring_feature.mnf_id))) ON ((namespace_type.ns_id = monitoring_object.inspire_id_namespace_id))) ON ((wkr_version.wkrv_id = monitoring_object.wkrv_id)))
     LEFT JOIN eenheid_type ON ((monitoring_feature.pos_accuracy_horizontal_uom_id = eenheid_type.eenh_id)))
     LEFT JOIN specialised_emf_type ON ((environmental_monitoring_facility.speciallised_emf_type_id = specialised_emf_type.semf_id)))
     LEFT JOIN result_acquisition_source_type ON ((environmental_monitoring_facility.result_acquisition_source_id = result_acquisition_source_type.ras_id)))
     LEFT JOIN measurement_regime_type ON ((environmental_monitoring_facility.measurement_regime_id = measurement_regime_type.mmr_id)))
     LEFT JOIN (subsite_type
     RIGHT JOIN monitoring_station ON ((subsite_type.sst_id = monitoring_station.subsite_type_id))) ON ((environmental_monitoring_facility.emf_id = monitoring_station.mts_id)))
  WHERE (st_geometrytype(monitoring_object.geometry) = 'ST_Point'::text)
  ORDER BY monitoring_object.inspire_id_local_id, monitoring_object.wkrv_id DESC;


--
-- Name: vw_milieudoelstellingen_art43a_owm; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_milieudoelstellingen_art43a_owm AS
 SELECT swb_measures_43a.swee_id AS "DB_ID",
    hdo_swb.hdo_id AS "Waterlichaam_DB_ID",
    hdo_swb.inspire_id_local_id AS "Waterlichaam_Identificatie",
    eu_function_43a_type.fu43_id AS "Functie_DB_ID",
    eu_function_43a_type.function AS "Functie_Omschrijving",
    sw_measure43_nl_type.me43_id AS "Maatregel_NietGenomen_DB_ID",
    sw_measure43_nl_type.omschrijving AS "Maatregel_NietGenomen_Omschrijving",
    swb_measures_43a.motivation AS "Motivatie",
    surface_water_body.article_43_comment AS "Toelichting",
    surface_water_body.article_43_litref AS "Literatuur"
   FROM (((((swb_measures_43a
     LEFT JOIN hydro_object hdo_swb ON ((hdo_swb.hdo_id = swb_measures_43a.swb_id)))
     LEFT JOIN surface_water_body ON ((surface_water_body.swb_id = hdo_swb.hdo_id)))
     LEFT JOIN sw_measure43_function ON ((swb_measures_43a.swee_id = sw_measure43_function.smee_id)))
     LEFT JOIN sw_measure43_nl_type ON ((sw_measure43_nl_type.me43_id = sw_measure43_function.me43_id)))
     LEFT JOIN eu_function_43a_type ON ((eu_function_43a_type.fu43_id = swb_measures_43a.fu43_id)))
  ORDER BY hdo_swb.inspire_id_local_id, sw_measure43_function.me43_id, sw_measure43_nl_type.me43_id;


--
-- Name: vw_milieudoelstellingen_art43a_owm_csv; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_milieudoelstellingen_art43a_owm_csv AS
 SELECT hdo_swb.inspire_id_local_id AS "Oppervlaktewaterlichaam.Identificatie",
    eu_function_43a_type.function AS "Functie.Omschrijving",
    array_to_string(ARRAY( SELECT DISTINCT regexp_replace((sw_measure43_nl_type.omschrijving)::text, '\r|\n'::text, ''::text, 'g'::text) AS regexp_replace
           FROM (sw_measure43_nl_type
             LEFT JOIN sw_measure43_function ON ((sw_measure43_nl_type.me43_id = sw_measure43_function.me43_id)))
          WHERE (swb_measures_43a.swee_id = sw_measure43_function.smee_id)), '|'::text) AS "MaatregelNietGenomen",
    swb_measures_43a.motivation AS "Motivatie",
    hdo_swb.wkrv_id AS versie
   FROM (((swb_measures_43a
     LEFT JOIN hydro_object hdo_swb ON ((hdo_swb.hdo_id = swb_measures_43a.swb_id)))
     LEFT JOIN surface_water_body ON ((surface_water_body.swb_id = hdo_swb.hdo_id)))
     LEFT JOIN eu_function_43a_type ON ((eu_function_43a_type.fu43_id = swb_measures_43a.fu43_id)))
  ORDER BY hdo_swb.inspire_id_local_id;


--
-- Name: vw_milieudoelstellingen_art43b_owm; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_milieudoelstellingen_art43b_owm AS
 SELECT hdo_swb.hdo_id AS "Waterlichaam_DB_ID",
    hdo_swb.inspire_id_local_id AS "Waterlichaam_Identificatie",
    eu_article_43b_type.a43b_id AS "Motiveringsgrond_DB_ID",
    eu_article_43b_type.omschrijving AS "Motiveringsgrond_Omschrijving",
    surface_water_body.article_43b_motivation AS "Motivering"
   FROM (((swb_art43b_excemption
     LEFT JOIN hydro_object hdo_swb ON ((hdo_swb.hdo_id = swb_art43b_excemption.swb_id)))
     LEFT JOIN surface_water_body ON ((surface_water_body.swb_id = hdo_swb.hdo_id)))
     LEFT JOIN eu_article_43b_type ON ((eu_article_43b_type.a43b_id = swb_art43b_excemption.a43b_id)))
  ORDER BY hdo_swb.inspire_id_local_id, eu_article_43b_type.a43b_id;


--
-- Name: vw_milieudoelstellingen_art43b_owm_csv; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_milieudoelstellingen_art43b_owm_csv AS
 SELECT hdo_swb.inspire_id_local_id AS "Waterlichaam.Identificatie",
    eu_article_43b_type.omschrijving AS "Motiveringsgrond.Omschrijving",
    surface_water_body.article_43b_motivation AS "Motivering",
    hdo_swb.wkrv_id AS versie
   FROM (((swb_art43b_excemption
     LEFT JOIN hydro_object hdo_swb ON ((hdo_swb.hdo_id = swb_art43b_excemption.swb_id)))
     LEFT JOIN surface_water_body ON ((surface_water_body.swb_id = hdo_swb.hdo_id)))
     LEFT JOIN eu_article_43b_type ON ((eu_article_43b_type.a43b_id = swb_art43b_excemption.a43b_id)))
  ORDER BY hdo_swb.inspire_id_local_id, eu_article_43b_type.a43b_id;


--
-- Name: vw_milieudoelstellingen_art44_owm; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_milieudoelstellingen_art44_owm AS
 SELECT swb_exemption.swce_id AS "DB_ID",
    hdo_swb.hdo_id AS "Waterlichaam_DB_ID",
    hdo_swb.inspire_id_local_id AS "Waterlichaam_Identificatie",
    objectives_exemption_type.obex_id AS "Motiveringsgrond_DB_ID",
    objectives_exemption_type.name AS "Motiveringsgrond",
    excemption_mechanism_type.exme_id AS "Mechanisme_DB_ID",
    excemption_mechanism_type.omschrijving AS "Mechanisme",
    swb_exemption.comment AS "Motivatie"
   FROM ((((swb_exemption
     LEFT JOIN objectives_exemption_type ON ((objectives_exemption_type.obex_id = swb_exemption.obex_id)))
     LEFT JOIN hydro_object hdo_swb ON ((hdo_swb.hdo_id = swb_exemption.swb_id)))
     LEFT JOIN swb_excemption_mechanism_44 ON ((swb_excemption_mechanism_44.swce_id = swb_exemption.swce_id)))
     LEFT JOIN excemption_mechanism_type ON ((excemption_mechanism_type.exme_id = swb_excemption_mechanism_44.exme_id)))
  WHERE ((objectives_exemption_type.article_nr)::text = '4.4'::text);


--
-- Name: vw_milieudoelstellingen_kwaliteitselement_ecologie_owm; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_milieudoelstellingen_kwaliteitselement_ecologie_owm AS
 SELECT swb_exemption.swce_id AS "DB_ID",
    hdo_swb.hdo_id AS "Waterlichaam_DB_ID",
    hdo_swb.inspire_id_local_id AS "Waterlichaam_Identificatie",
    objectives_exemption_type.obex_id AS "Motiveringsgrond_DB_ID",
    objectives_exemption_type.name AS "Motiveringsgrond_Omschrijving",
    objectives_exemption_type.article_nr AS "Moviveringsgrond_Artikel",
    swb_exemption.comment AS "Motivering",
    vw_waargenomen_eigenschap."DB_ID" AS "Waargenomen_Eigenschap_DB_ID",
    vw_waargenomen_eigenschap."Tpering_Code",
    vw_waargenomen_eigenschap."Typering_Omschrijving",
    vw_waargenomen_eigenschap."Grootheid_Code",
    vw_waargenomen_eigenschap."Grootheid_Omschrijving",
    vw_waargenomen_eigenschap."ChemischeStof_code",
    vw_waargenomen_eigenschap."ChemischeStof_Omschrijving",
    vw_waargenomen_eigenschap."Hoedanigheid_Code",
    vw_waargenomen_eigenschap."Hoedanigheid_Omschrijving",
    NULL::integer AS "ChemischeStof_DB_ID"
   FROM ((((swb_exemption
     LEFT JOIN objectives_exemption_type ON ((objectives_exemption_type.obex_id = swb_exemption.obex_id)))
     LEFT JOIN swb_ecol_exemp_qe ON ((swb_ecol_exemp_qe.swce_id = swb_exemption.swce_id)))
     LEFT JOIN vw_waargenomen_eigenschap ON ((vw_waargenomen_eigenschap."DB_ID" = swb_ecol_exemp_qe.opt_id)))
     LEFT JOIN hydro_object hdo_swb ON ((hdo_swb.hdo_id = swb_exemption.swb_id)))
  ORDER BY hdo_swb.inspire_id_local_id, objectives_exemption_type.article_nr, objectives_exemption_type.obex_id, vw_waargenomen_eigenschap."Tpering_Code", vw_waargenomen_eigenschap."Grootheid_Code", vw_waargenomen_eigenschap."ChemischeStof_code";


--
-- Name: vw_milieudoelstellingen_kwaliteitselement_gwl; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_milieudoelstellingen_kwaliteitselement_gwl AS
 SELECT gwb_chemical_exemption.gwce_id AS "DB_ID",
    hdo_gwb.hdo_id AS "Waterlichaam_DB_ID",
    hdo_gwb.inspire_id_local_id AS "Waterlichaam_Identificatie",
    objectives_exemption_type.obex_id AS "Motiveringsgrond_DB_ID",
    objectives_exemption_type.name AS "Motiveringsgrond_Omschrijving",
    objectives_exemption_type.article_nr AS "Moviveringsgrond_Artikel",
    gwb_chemical_exemption.comment AS "Motivering",
    wfd_qe_gwtype.name
   FROM ((((gwb_chemical_exemption
     LEFT JOIN objectives_exemption_type ON ((objectives_exemption_type.obex_id = gwb_chemical_exemption.obex_id)))
     LEFT JOIN gwb_chem_exemp_pollutant ON ((gwb_chem_exemp_pollutant.gwce_id = gwb_chemical_exemption.gwce_id)))
     LEFT JOIN wfd_qe_gwtype ON ((wfd_qe_gwtype.opt_id = gwb_chem_exemp_pollutant.opt_id)))
     LEFT JOIN hydro_object hdo_gwb ON ((hdo_gwb.hdo_id = gwb_chemical_exemption.gwb_id)));


--
-- Name: vw_milieudoelstellingen_prioritaire_stof_owm; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_milieudoelstellingen_prioritaire_stof_owm AS
 SELECT swb_exemption.swce_id AS "DB_ID",
    hdo_swb.hdo_id AS "Waterlichaam_DB_ID",
    hdo_swb.inspire_id_local_id AS "Waterlichaam_Identificatie",
    objectives_exemption_type.obex_id AS "Motiveringsgrond_DB_ID",
    objectives_exemption_type.name AS "Motiveringsgrond_Omschrijving",
    objectives_exemption_type.article_nr AS "Moviveringsgrond_Artikel",
    swb_exemption.comment AS "Motivering",
    NULL::integer AS "Waargenomen_Eigenschap_DB_ID",
    NULL::text AS "Tpering_Code",
    NULL::text AS "Typering_Omschrijving",
    'CONCTTE'::text AS "Grootheid_Code",
    '(massa)Concentratie'::text AS "Grootheid_Omschrijving",
    chemische_stof_type.code AS "ChemischeStof_Code",
    chemische_stof_type.naam AS "ChemischeStof_Omschrijving",
    'NVT'::text AS "Hoedanigheid_Code",
    'Niet van toepassing'::text AS "Hoedanigheid_Omschrijving",
    chemische_stof_type.chs_id AS "ChemischeStof_DB_ID"
   FROM ((((swb_exemption
     LEFT JOIN objectives_exemption_type ON ((objectives_exemption_type.obex_id = swb_exemption.obex_id)))
     LEFT JOIN swb_chem_exemp_pollutant ON ((swb_chem_exemp_pollutant.swce_id = swb_exemption.swce_id)))
     LEFT JOIN chemische_stof_type ON ((chemische_stof_type.chs_id = swb_chem_exemp_pollutant.chs_id)))
     LEFT JOIN hydro_object hdo_swb ON ((hdo_swb.hdo_id = swb_exemption.swb_id)))
  WHERE (chemische_stof_type.chs_id IS NOT NULL)
  ORDER BY hdo_swb.inspire_id_local_id, objectives_exemption_type.article_nr, objectives_exemption_type.obex_id, chemische_stof_type.code;


--
-- Name: vw_milieudoelstellingen_art44_tm_art47_csv; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_milieudoelstellingen_art44_tm_art47_csv AS
 SELECT hdo_swb.inspire_id_local_id AS "Waterlichaam.Identificatie",
    objectives_exemption_type.article_nr AS "Uitzondering.Artikel",
    objectives_exemption_type.name AS "Uitzonderingsgrond",
    array_to_string(ARRAY( SELECT DISTINCT regexp_replace((excemption_mechanism_type.omschrijving)::text, '\r|\n'::text, ''::text, 'g'::text) AS regexp_replace
           FROM (excemption_mechanism_type
             LEFT JOIN swb_excemption_mechanism_44 ON ((excemption_mechanism_type.exme_id = swb_excemption_mechanism_44.exme_id)))
          WHERE (swb_excemption_mechanism_44.swce_id = swb_exemption.swce_id)), '|'::text) AS "Artikel4-4.Mechanisme",
    swb_exemption.comment AS "Motivatie",
    array_to_string(ARRAY( SELECT DISTINCT regexp_replace((eco."Typering_Omschrijving")::text, '\r|\n'::text, ''::text, 'g'::text) AS regexp_replace
           FROM vw_milieudoelstellingen_kwaliteitselement_ecologie_owm eco
          WHERE (eco."DB_ID" = swb_exemption.swce_id)), '|'::text) AS "Kwaliteitselement.Omschrijving",
    array_to_string(ARRAY( SELECT DISTINCT regexp_replace((prio."ChemischeStof_Omschrijving")::text, '\r|\n'::text, ''::text, 'g'::text) AS regexp_replace
           FROM vw_milieudoelstellingen_prioritaire_stof_owm prio
          WHERE (prio."DB_ID" = swb_exemption.swce_id)), '|'::text) AS "PrioritaireStof.Omschrijving",
    hdo_swb.wkrv_id AS versie
   FROM ((swb_exemption
     LEFT JOIN objectives_exemption_type ON ((objectives_exemption_type.obex_id = swb_exemption.obex_id)))
     LEFT JOIN hydro_object hdo_swb ON ((hdo_swb.hdo_id = swb_exemption.swb_id)))
UNION ALL
 SELECT hdo_gwb.inspire_id_local_id AS "Waterlichaam.Identificatie",
    objectives_exemption_type.article_nr AS "Uitzondering.Artikel",
    objectives_exemption_type.name AS "Uitzonderingsgrond",
    NULL::text AS "Artikel4-4.Mechanisme",
    gwb_chemical_exemption.comment AS "Motivatie",
    array_to_string(ARRAY( SELECT DISTINCT regexp_replace((gwk.name)::text, '\r|\n'::text, ''::text, 'g'::text) AS regexp_replace
           FROM vw_milieudoelstellingen_kwaliteitselement_gwl gwk
          WHERE (gwk."DB_ID" = gwb_chemical_exemption.gwce_id)), '|'::text) AS "Kwaliteitselement.Omschrijving",
    NULL::text AS "PrioritaireStof.Omschrijving",
    hdo_gwb.wkrv_id AS versie
   FROM ((gwb_chemical_exemption
     LEFT JOIN objectives_exemption_type ON ((objectives_exemption_type.obex_id = gwb_chemical_exemption.obex_id)))
     LEFT JOIN hydro_object hdo_gwb ON ((hdo_gwb.hdo_id = gwb_chemical_exemption.gwb_id)));


--
-- Name: vw_milieudoelstellingen_art45_tm_art47_owm; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_milieudoelstellingen_art45_tm_art47_owm AS
 SELECT swb_exemption.swce_id AS "DB_ID",
    hdo_swb.hdo_id AS "Waterlichaam_DB_ID",
    hdo_swb.inspire_id_local_id AS "Waterlichaam_Identificatie",
    objectives_exemption_type.obex_id AS "Motiveringsgrond_DB_ID",
    objectives_exemption_type.name AS "Motiveringsgrond",
    swb_exemption.comment AS "Motivatie"
   FROM ((swb_exemption
     LEFT JOIN objectives_exemption_type ON ((objectives_exemption_type.obex_id = swb_exemption.obex_id)))
     LEFT JOIN hydro_object hdo_swb ON ((hdo_swb.hdo_id = swb_exemption.swb_id)))
  WHERE ((objectives_exemption_type.article_nr)::text <> '4.4'::text);


--
-- Name: vw_milieudoelstellingen_kwaliteitselement_totaal_owm; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_milieudoelstellingen_kwaliteitselement_totaal_owm AS
 SELECT swb_exemption.swce_id AS "DB_ID",
    hdo_swb.hdo_id AS "Waterlichaam_DB_ID",
    hdo_swb.inspire_id_local_id AS "Waterlichaam_Identificatie",
    objectives_exemption_type.obex_id AS "Motiveringsgrond_DB_ID",
    objectives_exemption_type.name AS "Motiveringsgrond_Omschrijving",
    objectives_exemption_type.article_nr AS "Moviveringsgrond_Artikel",
    swb_exemption.comment AS "Motivering",
    vw_waargenomen_eigenschap."DB_ID" AS "Waargenomen_Eigenschap_DB_ID",
    vw_waargenomen_eigenschap."Tpering_Code",
    vw_waargenomen_eigenschap."Typering_Omschrijving",
    vw_waargenomen_eigenschap."Grootheid_Code",
    vw_waargenomen_eigenschap."Grootheid_Omschrijving",
    vw_waargenomen_eigenschap."ChemischeStof_code",
    vw_waargenomen_eigenschap."ChemischeStof_Omschrijving",
    vw_waargenomen_eigenschap."Hoedanigheid_Code",
    vw_waargenomen_eigenschap."Hoedanigheid_Omschrijving",
    NULL::integer AS "ChemischeStof_DB_ID"
   FROM ((((swb_exemption
     LEFT JOIN objectives_exemption_type ON ((objectives_exemption_type.obex_id = swb_exemption.obex_id)))
     LEFT JOIN swb_ecol_exemp_qe ON ((swb_ecol_exemp_qe.swce_id = swb_exemption.swce_id)))
     LEFT JOIN vw_waargenomen_eigenschap ON ((vw_waargenomen_eigenschap."DB_ID" = swb_ecol_exemp_qe.opt_id)))
     LEFT JOIN hydro_object hdo_swb ON ((hdo_swb.hdo_id = swb_exemption.swb_id)))
UNION ALL
 SELECT swb_exemption.swce_id AS "DB_ID",
    hdo_swb.hdo_id AS "Waterlichaam_DB_ID",
    hdo_swb.inspire_id_local_id AS "Waterlichaam_Identificatie",
    objectives_exemption_type.obex_id AS "Motiveringsgrond_DB_ID",
    objectives_exemption_type.name AS "Motiveringsgrond_Omschrijving",
    objectives_exemption_type.article_nr AS "Moviveringsgrond_Artikel",
    swb_exemption.comment AS "Motivering",
    NULL::integer AS "Waargenomen_Eigenschap_DB_ID",
    NULL::text AS "Tpering_Code",
    NULL::text AS "Typering_Omschrijving",
    'CONCTTE'::text AS "Grootheid_Code",
    '(massa)Concentratie'::text AS "Grootheid_Omschrijving",
    chemische_stof_type.code AS "ChemischeStof_code",
    chemische_stof_type.naam AS "ChemischeStof_Omschrijving",
    'NVT'::text AS "Hoedanigheid_Code",
    'Niet van toepassing'::text AS "Hoedanigheid_Omschrijving",
    chemische_stof_type.chs_id AS "ChemischeStof_DB_ID"
   FROM ((((swb_exemption
     LEFT JOIN objectives_exemption_type ON ((objectives_exemption_type.obex_id = swb_exemption.obex_id)))
     LEFT JOIN swb_chem_exemp_pollutant ON ((swb_chem_exemp_pollutant.swce_id = swb_exemption.swce_id)))
     LEFT JOIN chemische_stof_type ON ((chemische_stof_type.chs_id = swb_chem_exemp_pollutant.chs_id)))
     LEFT JOIN hydro_object hdo_swb ON ((hdo_swb.hdo_id = swb_exemption.swb_id)))
  WHERE (chemische_stof_type.chs_id IS NOT NULL)
  ORDER BY 3, 4, 9, 11, 14;


--
-- Name: vw_monitoring_object_relaties_v15; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_monitoring_object_relaties_v15 AS
 SELECT hdo_7.inspire_id_namespace_id AS namespace_v7,
    hdo_7.inspire_id_local_id AS identificatie_v7,
    hdo_7.mno_id AS db_id_v7,
        CASE
            WHEN (hdo_7.inspire_id_namespace_id < 10) THEN ((('NL0'::text || (hdo_7.inspire_id_namespace_id)::text) || '_'::text) || (hdo_7.inspire_id_local_id)::text)
            ELSE ((('NL'::text || (hdo_7.inspire_id_namespace_id)::text) || '_'::text) || (hdo_7.inspire_id_local_id)::text)
        END AS mpnident_7,
    hdo_10.inspire_id_namespace_id AS namespace_v10,
    hdo_10.inspire_id_local_id AS identificatie_v10,
    hdo_10.mno_id AS db_id_v10,
        CASE
            WHEN (hdo_10.inspire_id_namespace_id < 10) THEN ((('NL0'::text || (hdo_10.inspire_id_namespace_id)::text) || '_'::text) || (hdo_10.inspire_id_local_id)::text)
            ELSE ((('NL'::text || (hdo_10.inspire_id_namespace_id)::text) || '_'::text) || (hdo_10.inspire_id_local_id)::text)
        END AS mpnident_10,
    hdo_12.inspire_id_namespace_id AS namespace_v12,
    hdo_12.inspire_id_local_id AS identificatie_v12,
    hdo_12.mno_id AS db_id_v12,
        CASE
            WHEN (hdo_12.inspire_id_namespace_id < 10) THEN ((('NL0'::text || (hdo_12.inspire_id_namespace_id)::text) || '_'::text) || (hdo_12.inspire_id_local_id)::text)
            ELSE ((('NL'::text || (hdo_12.inspire_id_namespace_id)::text) || '_'::text) || (hdo_12.inspire_id_local_id)::text)
        END AS mpnident_12,
    hdo_15.inspire_id_namespace_id AS namespace_v15,
    hdo_15.inspire_id_local_id AS identificatie_v15,
    hdo_15.mno_id AS db_id_v15,
        CASE
            WHEN (hdo_15.inspire_id_namespace_id < 10) THEN ((('NL0'::text || (hdo_15.inspire_id_namespace_id)::text) || '_'::text) || (hdo_15.inspire_id_local_id)::text)
            ELSE ((('NL'::text || (hdo_15.inspire_id_namespace_id)::text) || '_'::text) || (hdo_15.inspire_id_local_id)::text)
        END AS mpnident_15
   FROM ((((((monitoring_object hdo_15
     LEFT JOIN related_monitoring_object rho_15 ON ((rho_15.to_mno = hdo_15.mno_id)))
     LEFT JOIN monitoring_object hdo_12 ON (((rho_15.from_mno = hdo_12.mno_id) AND (hdo_12.wkrv_id = 12))))
     LEFT JOIN related_monitoring_object rho_12 ON ((rho_12.to_mno = hdo_12.mno_id)))
     LEFT JOIN monitoring_object hdo_10 ON (((rho_12.from_mno = hdo_10.mno_id) AND (hdo_10.wkrv_id = 10))))
     LEFT JOIN related_monitoring_object rho_10 ON ((rho_10.to_mno = hdo_10.mno_id)))
     LEFT JOIN monitoring_object hdo_7 ON (((rho_10.from_mno = hdo_7.mno_id) AND (hdo_7.wkrv_id = 7))))
  WHERE (hdo_15.wkrv_id = 15)
  ORDER BY hdo_15.inspire_id_namespace_id, hdo_15.inspire_id_local_id;


--
-- Name: vw_oordeel_chemie_owm_g; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_oordeel_chemie_owm_g AS
 SELECT mvo."Waterlichaam_identificatie",
    mvo."Waterlichaam_Versie",
    mvo.stroomgebieddistrict,
    mvo."Rapportagejaar",
    mvo."Tpering_Code",
    mvo."Grootheid_Code",
    mvo."ChemischeStof_code",
    mvo."Oordeel",
    mvo.geometry_type,
    mrz.geometry,
    mvo."Unique_Key"
   FROM (mv_oordeel_chemie_owm mvo
     JOIN management_regulation_or_restriction_zone mrz ON ((mvo.swb_id = mrz.mrz_id)));


--
-- Name: vw_oordeel_chemie_owm_g_origineel; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_oordeel_chemie_owm_g_origineel AS
 WITH oordeel AS (
         SELECT DISTINCT ON (sys.sys_id, swcs.opt_id) sys.sys_id,
            sys.swb_id,
            sys.year_of_status,
            swcs.opt_id,
            swcs.swcs_id,
            swcs.css_id,
            hdo_swb.hdo_id,
            hdo_swb.wkrv_id,
            hdo_swb.inspire_id_local_id
           FROM ((sw_chemical_substance_status swcs
             JOIN swb_yearly_status sys ON ((swcs.sys_id = sys.sys_id)))
             JOIN hydro_object hdo_swb ON ((hdo_swb.hdo_id = sys.swb_id)))
          WHERE (swcs.eumg_id = 3)
          ORDER BY sys.sys_id, swcs.opt_id, swcs.wbpm_id DESC
        ), opt AS (
         SELECT observed_property_type.opt_id AS "DB_ID",
            typering_type.code AS "Tpering_Code",
            grootheid_type.code AS "Grootheid_Code",
            chemische_stof_type.code AS "ChemischeStof_code"
           FROM (((observed_property_type
             LEFT JOIN grootheid_type ON ((grootheid_type.grh_id = observed_property_type.quantity_id)))
             LEFT JOIN (chemische_stof_type
             JOIN substance_group_element ON ((chemische_stof_type.chs_id = substance_group_element.chs_id))) ON ((substance_group_element.ssge_id = observed_property_type.substance_group_id)))
             LEFT JOIN typering_type ON ((typering_type.typ_id = observed_property_type.indicator_id)))
        )
 SELECT oordeel.inspire_id_local_id AS "Waterlichaam_identificatie",
    oordeel.wkrv_id AS "Waterlichaam_Versie",
    hdo_rbd.inspire_id_local_id AS stroomgebieddistrict,
    oordeel.year_of_status AS "Rapportagejaar",
    opt."Tpering_Code",
    opt."Grootheid_Code",
    opt."ChemischeStof_code",
    classification_type.description AS "Oordeel",
    geometrytype(mrz.geometry) AS geometry_type,
    mrz.geometry,
    ('CH'::text || oordeel.css_id) AS "Unique_Key"
   FROM ((((((oordeel
     JOIN management_regulation_or_restriction_zone mrz ON ((oordeel.swb_id = mrz.mrz_id)))
     JOIN water_body wb ON ((wb.wbd_id = mrz.mrz_id)))
     JOIN river_basin_disrict rbd ON ((rbd.rbd_id = wb.rbd_id)))
     JOIN hydro_object hdo_rbd ON ((rbd.rbd_id = hdo_rbd.hdo_id)))
     JOIN classification_type ON ((oordeel.swcs_id = classification_type.cls_id)))
     JOIN opt ON ((opt."DB_ID" = oordeel.opt_id)));


--
-- Name: vw_oordeel_chemisch_gwl; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_oordeel_chemisch_gwl AS
 SELECT gwb_yearly_status.gys_id AS "DB_ID",
    hdo_gwb.hdo_id AS "Waterlichaam_DB_ID",
    hdo_gwb.inspire_id_local_id AS "Waterlichaam_Identificatie",
    gwb_yearly_status.year_of_status AS "Rapportagejaar",
    vw_waargenomen_eigenschap."DB_ID" AS "Waargenomen_Eigenschap_DB_ID",
    vw_waargenomen_eigenschap."Tpering_Code",
    vw_waargenomen_eigenschap."Typering_Omschrijving",
    vw_waargenomen_eigenschap."Grootheid_Code",
    vw_waargenomen_eigenschap."Grootheid_Omschrijving",
    vw_waargenomen_eigenschap."ChemischeStof_code",
    vw_waargenomen_eigenschap."ChemischeStof_Omschrijving",
    vw_waargenomen_eigenschap."Hoedanigheid_Code",
    vw_waargenomen_eigenschap."Hoedanigheid_Omschrijving",
    classification_type.description AS "Oordeel",
    eu_monitoring_goal_type.code AS "Oordeel_Type_Code",
    eu_monitoring_goal_type.description AS "Oordeel_Type_Omschrijving",
    waarde_bepalings_methode_type.code AS "WaardebepalingsMethode_Code",
    waarde_bepalings_methode_type.omschrijving AS "WaardebepalingsMethode_Omschrijving",
    gwb_yearly_status.comment_on_chemical_status AS "Toelichting_ChemischeStatus",
    gwb_yearly_status.comment_on_quantity_status AS "Toelichting_EcologischeStatus",
    gwb_yearly_status.motivation_4no_chemical_status AS "Motivatie_Geen_ChemischeStatus",
    gwb_yearly_status.motivation_4no_quantity_status AS "Motivatie_Geen_EcologischeStatus"
   FROM ((((((gwb_yearly_status
     LEFT JOIN hydro_object hdo_gwb ON ((hdo_gwb.hdo_id = gwb_yearly_status.gwb_id)))
     JOIN gw_chemical_status ON ((gw_chemical_status.gys_id = gwb_yearly_status.gys_id)))
     LEFT JOIN classification_type ON ((gw_chemical_status.clst_id = classification_type.cls_id)))
     LEFT JOIN vw_waargenomen_eigenschap ON ((vw_waargenomen_eigenschap."DB_ID" = gw_chemical_status.opt_id)))
     LEFT JOIN waarde_bepalings_methode_type ON ((waarde_bepalings_methode_type.wbpm_id = gw_chemical_status.wbpm_id)))
     LEFT JOIN eu_monitoring_goal_type ON ((eu_monitoring_goal_type.eumg_id = gw_chemical_status.eumg_id)))
  ORDER BY hdo_gwb.inspire_id_local_id, vw_waargenomen_eigenschap."Tpering_Code", vw_waargenomen_eigenschap."Grootheid_Code", vw_waargenomen_eigenschap."ChemischeStof_code", gwb_yearly_status.year_of_status DESC, eu_monitoring_goal_type.code, waarde_bepalings_methode_type.code;


--
-- Name: vw_oordeel_chemisch_owm; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_oordeel_chemisch_owm AS
 SELECT swb_yearly_status.sys_id AS "DB_ID",
    hdo_swb.hdo_id AS "Waterlichaam_DB_ID",
    hdo_swb.inspire_id_local_id AS "Waterlichaam_identificatie",
    swb_yearly_status.year_of_status AS "Rapportagejaar",
    vw_waargenomen_eigenschap."DB_ID" AS "Waargenomen_Eigenschap_DB_ID",
    vw_waargenomen_eigenschap."Tpering_Code",
    vw_waargenomen_eigenschap."Typering_Omschrijving",
    vw_waargenomen_eigenschap."Grootheid_Code",
    vw_waargenomen_eigenschap."Grootheid_Omschrijving",
    vw_waargenomen_eigenschap."ChemischeStof_code",
    vw_waargenomen_eigenschap."ChemischeStof_Omschrijving",
    vw_waargenomen_eigenschap."Hoedanigheid_Code",
    vw_waargenomen_eigenschap."Hoedanigheid_Omschrijving",
    classification_type.description AS "Oordeel",
    eu_monitoring_goal_type.code AS "Oordeel_Type_Code",
    eu_monitoring_goal_type.description AS "Oordeel_Type_Omschrijving",
    waarde_bepalings_methode_type.code AS "WaardebepalingsMethode_Code",
    waarde_bepalings_methode_type.omschrijving AS "WaardebepalingsMethode_Omschrijving",
    swb_yearly_status.comment_on_chemical_status AS "Toelichting_ChemischeStatus",
    swb_yearly_status.comment_on_ecological_status AS "Toelichting_EcologischeStatus",
    swb_yearly_status.motivation_4no_chemical_status AS "Motivatie_Geen_ChemischeStatus",
    swb_yearly_status.motivation_4no_ecological_status AS "Motivatie_Geen_EcologischeStatus"
   FROM ((((((swb_yearly_status
     LEFT JOIN hydro_object hdo_swb ON ((hdo_swb.hdo_id = swb_yearly_status.swb_id)))
     JOIN sw_chemical_substance_status ON ((sw_chemical_substance_status.sys_id = swb_yearly_status.sys_id)))
     LEFT JOIN classification_type ON ((sw_chemical_substance_status.swcs_id = classification_type.cls_id)))
     LEFT JOIN vw_waargenomen_eigenschap ON ((vw_waargenomen_eigenschap."DB_ID" = sw_chemical_substance_status.opt_id)))
     LEFT JOIN waarde_bepalings_methode_type ON ((waarde_bepalings_methode_type.wbpm_id = sw_chemical_substance_status.wbpm_id)))
     LEFT JOIN eu_monitoring_goal_type ON ((eu_monitoring_goal_type.eumg_id = sw_chemical_substance_status.eumg_id)))
  ORDER BY hdo_swb.inspire_id_local_id, vw_waargenomen_eigenschap."Tpering_Code", vw_waargenomen_eigenschap."Grootheid_Code", vw_waargenomen_eigenschap."ChemischeStof_code", swb_yearly_status.year_of_status DESC, eu_monitoring_goal_type.code, waarde_bepalings_methode_type.code;


--
-- Name: vw_oordeel_ecologie_owm_g; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_oordeel_ecologie_owm_g AS
 SELECT mvo."Waterlichaam_identificatie",
    mvo."Waterlichaam_Versie",
    mvo.stroomgebieddistrict,
    mvo."Rapportagejaar",
    mvo."Waargenomen_Eigenschap_DB_ID",
    mvo."Tpering_Code",
    mvo."Grootheid_Code",
    mvo."ChemischeStof_code",
    mvo."Oordeel",
    mvo."Oordeel_Type_ID",
    mvo."WaardebepalingsMethode_ID",
    mvo.geometry_type,
    mrz.geometry,
    mvo."Unique_Key"
   FROM (mv_oordeel_ecologie_owm mvo
     JOIN management_regulation_or_restriction_zone mrz ON ((mvo.swb_id = mrz.mrz_id)));


--
-- Name: vw_oordeel_ecologie_owm_g_origineel; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_oordeel_ecologie_owm_g_origineel AS
 WITH oordeel AS (
         SELECT DISTINCT ON (sys.sys_id, swes.opt_id) sys.sys_id,
            sys.swb_id,
            sys.year_of_status,
            swes.wbpm_id,
            swes.opt_id,
            swes.eumg_id,
            swes.swes_id,
            swes.ecs_id,
            hdo_swb.hdo_id,
            hdo_swb.wkrv_id,
            hdo_swb.inspire_id_local_id
           FROM ((sw_ecological_status swes
             JOIN swb_yearly_status sys ON ((swes.sys_id = sys.sys_id)))
             JOIN hydro_object hdo_swb ON ((hdo_swb.hdo_id = sys.swb_id)))
          WHERE (swes.eumg_id = 3)
          ORDER BY sys.sys_id, swes.opt_id, swes.wbpm_id DESC
        ), opt AS (
         SELECT observed_property_type.opt_id AS "DB_ID",
            typering_type.code AS "Tpering_Code",
            grootheid_type.code AS "Grootheid_Code",
            chemische_stof_type.code AS "ChemischeStof_code"
           FROM (((observed_property_type
             LEFT JOIN grootheid_type ON ((grootheid_type.grh_id = observed_property_type.quantity_id)))
             LEFT JOIN (chemische_stof_type
             JOIN substance_group_element ON ((chemische_stof_type.chs_id = substance_group_element.chs_id))) ON ((substance_group_element.ssge_id = observed_property_type.substance_group_id)))
             LEFT JOIN typering_type ON ((typering_type.typ_id = observed_property_type.indicator_id)))
        )
 SELECT oordeel.inspire_id_local_id AS "Waterlichaam_identificatie",
    oordeel.wkrv_id AS "Waterlichaam_Versie",
    hdo_rbd.inspire_id_local_id AS stroomgebieddistrict,
    oordeel.year_of_status AS "Rapportagejaar",
    oordeel.opt_id AS "Waargenomen_Eigenschap_DB_ID",
    opt."Tpering_Code",
    opt."Grootheid_Code",
    opt."ChemischeStof_code",
    classification_type.description AS "Oordeel",
    oordeel.eumg_id AS "Oordeel_Type_ID",
    oordeel.wbpm_id AS "WaardebepalingsMethode_ID",
    geometrytype(mrz.geometry) AS geometry_type,
    mrz.geometry,
    ('EC'::text || oordeel.ecs_id) AS "Unique_Key"
   FROM ((((((oordeel
     JOIN management_regulation_or_restriction_zone mrz ON ((oordeel.swb_id = mrz.mrz_id)))
     JOIN water_body wb ON ((wb.wbd_id = oordeel.swb_id)))
     JOIN river_basin_disrict rbd ON ((rbd.rbd_id = wb.rbd_id)))
     JOIN hydro_object hdo_rbd ON ((rbd.rbd_id = hdo_rbd.hdo_id)))
     JOIN classification_type ON ((oordeel.swes_id = classification_type.cls_id)))
     JOIN opt ON ((opt."DB_ID" = oordeel.opt_id)));


--
-- Name: vw_oordeel_ecologisch_owm; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_oordeel_ecologisch_owm AS
 SELECT swb_yearly_status.sys_id AS "DB_ID",
    hdo_swb.hdo_id AS "Waterlichaam_DB_ID",
    hdo_swb.inspire_id_local_id AS "Waterlichaam_identificatie",
    swb_yearly_status.year_of_status AS "Rapportagejaar",
    vw_waargenomen_eigenschap."DB_ID" AS "Waargenomen_Eigenschap_DB_ID",
    vw_waargenomen_eigenschap."Tpering_Code",
    vw_waargenomen_eigenschap."Typering_Omschrijving",
    vw_waargenomen_eigenschap."Grootheid_Code",
    vw_waargenomen_eigenschap."Grootheid_Omschrijving",
    vw_waargenomen_eigenschap."ChemischeStof_code",
    vw_waargenomen_eigenschap."ChemischeStof_Omschrijving",
    vw_waargenomen_eigenschap."Hoedanigheid_Code",
    vw_waargenomen_eigenschap."Hoedanigheid_Omschrijving",
    classification_type.description AS "Oordeel",
    eu_monitoring_goal_type.code AS "Oordeel_Type_Code",
    eu_monitoring_goal_type.description AS "Oordeel_Type_Omschrijving",
    waarde_bepalings_methode_type.code AS "WaardebepalingsMethode_Code",
    waarde_bepalings_methode_type.omschrijving AS "WaardebepalingsMethode_Omschrijving",
    swb_yearly_status.comment_on_chemical_status AS "Toelichting_ChemischeStatus",
    swb_yearly_status.comment_on_ecological_status AS "Toelichting_EcologischeStatus",
    swb_yearly_status.motivation_4no_chemical_status AS "Motivatie_Geen_ChemischeStatus",
    swb_yearly_status.motivation_4no_ecological_status AS "Motivatie_Geen_EcologischeStatus"
   FROM ((((((swb_yearly_status
     LEFT JOIN hydro_object hdo_swb ON ((hdo_swb.hdo_id = swb_yearly_status.swb_id)))
     JOIN sw_ecological_status ON ((sw_ecological_status.sys_id = swb_yearly_status.sys_id)))
     LEFT JOIN classification_type ON ((sw_ecological_status.swes_id = classification_type.cls_id)))
     LEFT JOIN vw_waargenomen_eigenschap ON ((vw_waargenomen_eigenschap."DB_ID" = sw_ecological_status.opt_id)))
     LEFT JOIN waarde_bepalings_methode_type ON ((waarde_bepalings_methode_type.wbpm_id = sw_ecological_status.wbpm_id)))
     LEFT JOIN eu_monitoring_goal_type ON ((eu_monitoring_goal_type.eumg_id = sw_ecological_status.eumg_id)))
  ORDER BY hdo_swb.inspire_id_local_id, vw_waargenomen_eigenschap."Tpering_Code", vw_waargenomen_eigenschap."Grootheid_Code", vw_waargenomen_eigenschap."ChemischeStof_code", swb_yearly_status.year_of_status DESC, eu_monitoring_goal_type.code, waarde_bepalings_methode_type.code;


--
-- Name: vw_oordeel_kwantiteit_gwl; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_oordeel_kwantiteit_gwl AS
 SELECT gwb_yearly_status.gys_id AS "DB_ID",
    hdo_gwb.hdo_id AS "Waterlichaam_DB_ID",
    hdo_gwb.inspire_id_local_id AS "Waterlichaam_Identificatie",
    gwb_yearly_status.year_of_status AS "Rapportagejaar",
    vw_waargenomen_eigenschap."DB_ID" AS "Waargenomen_Eigenschap_DB_ID",
    vw_waargenomen_eigenschap."Tpering_Code",
    vw_waargenomen_eigenschap."Typering_Omschrijving",
    vw_waargenomen_eigenschap."Grootheid_Code",
    vw_waargenomen_eigenschap."Grootheid_Omschrijving",
    vw_waargenomen_eigenschap."ChemischeStof_code",
    vw_waargenomen_eigenschap."ChemischeStof_Omschrijving",
    vw_waargenomen_eigenschap."Hoedanigheid_Code",
    vw_waargenomen_eigenschap."Hoedanigheid_Omschrijving",
    classification_type.description AS "Oordeel",
    eu_monitoring_goal_type.code AS "Oordeel_Type_Code",
    eu_monitoring_goal_type.description AS "Oordeel_Type_Omschrijving",
    waarde_bepalings_methode_type.code AS "WaardebepalingsMethode_Code",
    waarde_bepalings_methode_type.omschrijving AS "WaardebepalingsMethode_Omschrijving",
    gwb_yearly_status.comment_on_quantity_status AS "Toelichting_ChemischeStatus",
    gwb_yearly_status.comment_on_quantity_status AS "Toelichting_EcologischeStatus",
    gwb_yearly_status.motivation_4no_quantity_status AS "Motivatie_Geen_ChemischeStatus",
    gwb_yearly_status.motivation_4no_quantity_status AS "Motivatie_Geen_EcologischeStatus"
   FROM ((((((gwb_yearly_status
     LEFT JOIN hydro_object hdo_gwb ON ((hdo_gwb.hdo_id = gwb_yearly_status.gwb_id)))
     JOIN gw_quantity_status ON ((gw_quantity_status.gys_id = gwb_yearly_status.gys_id)))
     LEFT JOIN classification_type ON ((gw_quantity_status.gwst_id = classification_type.cls_id)))
     LEFT JOIN vw_waargenomen_eigenschap ON ((vw_waargenomen_eigenschap."DB_ID" = gw_quantity_status.opt_id)))
     LEFT JOIN waarde_bepalings_methode_type ON ((waarde_bepalings_methode_type.wbpm_id = gw_quantity_status.wbpm_id)))
     LEFT JOIN eu_monitoring_goal_type ON ((eu_monitoring_goal_type.eumg_id = gw_quantity_status.eumg_id)))
  ORDER BY hdo_gwb.inspire_id_local_id, vw_waargenomen_eigenschap."Tpering_Code", vw_waargenomen_eigenschap."Grootheid_Code", vw_waargenomen_eigenschap."ChemischeStof_code", gwb_yearly_status.year_of_status DESC, eu_monitoring_goal_type.code, waarde_bepalings_methode_type.code;


--
-- Name: vw_oordeel_n2000_gwl; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_oordeel_n2000_gwl AS
 SELECT hdo_gwb.hdo_id AS "Grondwaterlichaam_DB_ID",
    hdo_gwb.inspire_id_local_id AS "Grondwaterlichaam_Identificatie",
    hdon_gwb.name AS "Grondwaterlichaam_Omschrijving",
    hdo_gwb.wkrv_id AS "Grondwaterlichaam_Versie",
    vw_beschermdegebieden."DB_ID" AS "BeschermdGebied_DB_ID",
    vw_beschermdegebieden."Identificatie" AS "BeschermdGebied_Identificatie",
    vw_beschermdegebieden."Omschrijving" AS "BeschermdGebied_Omschrijving",
    vw_beschermdegebieden."Versie_ID" AS "BeschermdGebied_Versie",
    gwb_yearly_status.year_of_status AS "RapportageJaar",
    vw_waargenomen_eigenschap."DB_ID" AS "WaargenomenEigenschap_DB_ID",
    vw_waargenomen_eigenschap."Tpering_Code",
    vw_waargenomen_eigenschap."Typering_Omschrijving",
    classification_type.cls_id AS "Oordeel_DB_ID",
    classification_type.description AS "Oordeel",
    gw_n2000_status.remark
   FROM ((((((gw_n2000_status
     LEFT JOIN gwb_yearly_status ON ((gw_n2000_status.gwsy = gwb_yearly_status.gys_id)))
     LEFT JOIN hydro_object hdo_gwb ON ((hdo_gwb.hdo_id = gwb_yearly_status.gwb_id)))
     LEFT JOIN hdo_names hdon_gwb ON ((hdo_gwb.hdo_id = hdon_gwb.hdo_id)))
     LEFT JOIN vw_beschermdegebieden ON ((vw_beschermdegebieden."DB_ID" = gw_n2000_status.wpa_id)))
     LEFT JOIN classification_type ON ((classification_type.cls_id = gw_n2000_status.cls_id)))
     LEFT JOIN vw_waargenomen_eigenschap ON ((vw_waargenomen_eigenschap."DB_ID" = gw_n2000_status.opt_id)));


--
-- Name: vw_oordeel_n2000_gwl_g; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_oordeel_n2000_gwl_g AS
 SELECT hdo_gwb.hdo_id AS "Grondwaterlichaam_DB_ID",
    hdo_gwb.inspire_id_local_id AS "Grondwaterlichaam_Identificatie",
    hdon_gwb.name AS "Grondwaterlichaam_Omschrijving",
    hdo_gwb.wkrv_id AS "Grondwaterlichaam_Versie",
    hdo_rbd.inspire_id_local_id AS stroomgebieddistrict,
    hdo_ps.hdo_id AS "BeschermdGebied_DB_ID",
    hdo_ps.inspire_id_local_id AS "BeschermdGebied_Identificatie",
    hdon_ps.name AS "BeschermdGebied_Omschrijving",
    hdo_ps.wkrv_id AS "BeschermdGebied_Versie",
    gwb_yearly_status.year_of_status AS "RapportageJaar",
    gw_n2000_status.opt_id AS "WaargenomenEigenschap_DB_ID",
    classification_type.cls_id AS "Oordeel_DB_ID",
    classification_type.description AS "Oordeel",
    management_regulation_or_restriction_zone.geometry,
    concat(gw_n2000_status.wpa_id, gw_n2000_status.gwsy, gw_n2000_status.opt_id) AS "Unique_Key"
   FROM ((((((((((gw_n2000_status
     JOIN gwb_yearly_status ON ((gw_n2000_status.gwsy = gwb_yearly_status.gys_id)))
     JOIN hydro_object hdo_gwb ON ((hdo_gwb.hdo_id = gwb_yearly_status.gwb_id)))
     JOIN hdo_names hdon_gwb ON ((hdo_gwb.hdo_id = hdon_gwb.hdo_id)))
     JOIN hydro_object hdo_ps ON ((hdo_ps.hdo_id = gw_n2000_status.wpa_id)))
     JOIN hdo_names hdon_ps ON ((hdon_ps.hdo_id = gw_n2000_status.wpa_id)))
     JOIN classification_type ON ((classification_type.cls_id = gw_n2000_status.cls_id)))
     JOIN management_regulation_or_restriction_zone ON ((management_regulation_or_restriction_zone.mrz_id = gw_n2000_status.wpa_id)))
     JOIN water_body ON ((water_body.wbd_id = hdo_gwb.hdo_id)))
     JOIN river_basin_disrict rbd ON ((rbd.rbd_id = water_body.rbd_id)))
     JOIN hydro_object hdo_rbd ON ((rbd.rbd_id = hdo_rbd.hdo_id)));


--
-- Name: vw_oordeel_ontrekking_gwl_g; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_oordeel_ontrekking_gwl_g AS
 SELECT gw_abstraction_point_status.gwsy_id AS "DB_ID",
    gwb_yearly_status.year_of_status AS "Rapportagejaar",
    hdo_asp.hdo_id AS "Onttrekking_DB_ID",
    hdo_asp.inspire_id_local_id AS "Onttrekking_Identificatie",
    hdon_asp.name AS "Onttrekking_Omschrijving",
    gw_abstraction_point.rewab_code AS "REWAB_Code",
    rewab_type.description AS "REWAB_Type",
    hdo_asp.wkrv_id AS "Onttrekking_Versie",
    hdo_gwb.hdo_id AS "Grondwaterlichaam_DB_ID",
    hdo_gwb.inspire_id_local_id AS "Grondwaterlichaam_Identificatie",
    hdon_gwb.name AS "Grondwaterlichaam_Omschrijving",
    abstraction_point.geometry,
    hdo_rbd.inspire_id_local_id AS "Grondwaterlichaam_Stroomgebieddistrict",
    hdo_gwb.wkrv_id AS "Grondwaterlichaam_Versie",
    classification_type.code AS "Oordeel_Code",
    classification_type.description AS "Oordeel_Omschrijving",
    concat(row_number() OVER (ORDER BY hdo_asp.hdo_id), hdo_gwb.hdo_id, hdo_asp.hdo_id) AS "Unique_Key",
    gw_abstraction_point_status.remarks AS "Opmerkingen"
   FROM ((((((((((((gw_abstraction_point_status
     JOIN abstraction_point ON ((abstraction_point.asp_id = gw_abstraction_point_status.asp_id)))
     JOIN gw_abstraction_point ON ((gw_abstraction_point.gasp_id = gw_abstraction_point_status.asp_id)))
     JOIN hydro_object hdo_asp ON ((hdo_asp.hdo_id = gw_abstraction_point_status.asp_id)))
     JOIN hdo_names hdon_asp ON ((hdon_asp.hdo_id = gw_abstraction_point_status.asp_id)))
     JOIN gwb_yearly_status ON ((gwb_yearly_status.gys_id = gw_abstraction_point_status.gwsy_id)))
     JOIN classification_type ON ((classification_type.cls_id = gw_abstraction_point_status.gwst_id)))
     JOIN hydro_object hdo_gwb ON ((hdo_gwb.hdo_id = gwb_yearly_status.gwb_id)))
     JOIN hdo_names hdon_gwb ON ((hdon_gwb.hdo_id = gwb_yearly_status.gwb_id)))
     JOIN water_body ON ((water_body.wbd_id = hdo_gwb.hdo_id)))
     JOIN river_basin_disrict rbd ON ((rbd.rbd_id = water_body.rbd_id)))
     JOIN hydro_object hdo_rbd ON ((rbd.rbd_id = hdo_rbd.hdo_id)))
     JOIN rewab_type ON ((rewab_type.rwb_id = gw_abstraction_point.rewab_id)));


--
-- Name: vw_oordeel_onttrekking_gwl; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_oordeel_onttrekking_gwl AS
 SELECT gw_abstraction_point_status.gwsy_id AS "DB_ID",
    gwb_yearly_status.year_of_status AS "Rapportagejaar",
    vw_gw_onttrekking."DB_ID" AS "Onttrekking_DB_ID",
    vw_gw_onttrekking."Identificatie" AS "Onttrekking_Identificatie",
    vw_gw_onttrekking.omschrijving AS "Onttrekking_Omschrijving",
    vw_gw_onttrekking."REWAB_Code" AS "Onttrekking_REWAB_Code",
    vw_gw_onttrekking."REWAB_Type" AS "Onttrekking_REWAB_Type",
    vw_gw_onttrekking.wkr_versie AS "Onttrekking_Versie",
    vw_grondwaterlichamen.db_id AS "Grondwaterlichaam_DB_ID",
    vw_grondwaterlichamen.identificatie AS "Grondwaterlichaam_Identificatie",
    vw_grondwaterlichamen.omschrijving AS "Grondwaterlichaam_Omschrijving",
    vw_grondwaterlichamen.stroomgebieddistrict AS "Grondwaterlichaam_Stroomgebieddistrict",
    vw_grondwaterlichamen.versie AS "Grondwaterlichaam_Versie",
    classification_type.code AS "Oordeel_Code",
    classification_type.description AS "Oordeel_Omschrijving",
    gw_abstraction_point_status.remarks AS "Opmerkingen"
   FROM gw_abstraction_point_status,
    gwb_yearly_status,
    vw_gw_onttrekking,
    classification_type,
    vw_grondwaterlichamen
  WHERE ((gwb_yearly_status.gys_id = gw_abstraction_point_status.gwsy_id) AND (vw_gw_onttrekking."DB_ID" = gw_abstraction_point_status.asp_id) AND (classification_type.cls_id = gw_abstraction_point_status.gwst_id) AND (vw_grondwaterlichamen.db_id = gwb_yearly_status.gwb_id));


--
-- Name: vw_oordeel_owm_tel_stoffen; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_oordeel_owm_tel_stoffen AS
 WITH oordeel_kwal AS (
         SELECT DISTINCT ON (sys.sys_id, swcs.opt_id) sys.sys_id,
            sys.year_of_status,
            swcs.opt_id,
            swcs.swcs_id,
            sys.swb_id,
            swcs.wbpm_id
           FROM (swb_yearly_status sys
             JOIN sw_chemical_substance_status swcs ON ((swcs.sys_id = sys.sys_id)))
          WHERE ((swcs.opt_id = ANY (ARRAY[4477, 4519, 5893, 5891, 5892])) AND (swcs.eumg_id = 3))
          ORDER BY sys.sys_id, swcs.opt_id, swcs.wbpm_id DESC
        ), oordeel_stof_vn AS (
         SELECT DISTINCT ON (sys.sys_id, swcs.opt_id) sys.sys_id,
            sys.year_of_status,
            swcs.opt_id,
            swcs.swcs_id,
            sge.chs_id
           FROM (((swb_yearly_status sys
             JOIN sw_chemical_substance_status swcs ON ((swcs.sys_id = sys.sys_id)))
             JOIN observed_property_type ON ((observed_property_type.opt_id = swcs.opt_id)))
             JOIN substance_group_element sge ON ((sge.ssge_id = observed_property_type.substance_group_id)))
          WHERE ((sge.chs_id IS NOT NULL) AND (swcs.eumg_id = 3))
          ORDER BY sys.sys_id, swcs.opt_id, swcs.wbpm_id DESC
        ), stofgroep AS (
         SELECT substance_group_element.chs_id,
            substance_group_element.ssge_id,
                CASE substance_group_element.ssge_id
                    WHEN 3155 THEN 4519
                    WHEN 3149 THEN 5892
                    WHEN 3150 THEN 5891
                    WHEN 2907 THEN 4477
                    WHEN 3148 THEN 5893
                    ELSE 0
                END AS categorie
           FROM substance_group_element
          WHERE (substance_group_element.ssge_id = ANY (ARRAY[3155, 3150, 3149, 3148, 2907]))
        ), tel_stof_vn AS (
         SELECT sys.sys_id,
            count(oordeel_stof_vn.swcs_id) AS cnt_oordeel,
            stofgroep.categorie
           FROM ((swb_yearly_status sys
             JOIN oordeel_stof_vn ON ((oordeel_stof_vn.sys_id = sys.sys_id)))
             LEFT JOIN stofgroep ON ((oordeel_stof_vn.chs_id = stofgroep.chs_id)))
          WHERE (oordeel_stof_vn.swcs_id = 2)
          GROUP BY sys.sys_id, stofgroep.categorie
         HAVING (stofgroep.categorie <> 0)
        )
 SELECT (((hdo_swb.inspire_id_local_id)::text || (hdo_swb.wkrv_id)::text) || (oordeel_kwal.year_of_status)::text) AS "Unique_key",
    oordeel_kwal.year_of_status AS "Rapportagejaar",
        CASE
            WHEN (oordeel_kwal.opt_id = 4477) THEN 'CHEMT'::text
            WHEN (oordeel_kwal.opt_id = 4519) THEN 'STOFOV'::text
            WHEN (oordeel_kwal.opt_id = 5893) THEN 'STOFPR_34-45'::text
            WHEN (oordeel_kwal.opt_id = 5891) THEN 'STOFPR_UBQJ'::text
            WHEN (oordeel_kwal.opt_id = 5892) THEN 'STOFPR_UBQN'::text
            ELSE NULL::text
        END AS "STOF_CATEGORIE",
        CASE
            WHEN (tel_stof_vn.cnt_oordeel >= 7) THEN '7+'::text
            WHEN (tel_stof_vn.cnt_oordeel = ANY (ARRAY[(4)::bigint, (5)::bigint, (6)::bigint])) THEN '4-6'::text
            WHEN (tel_stof_vn.cnt_oordeel = ANY (ARRAY[(2)::bigint, (3)::bigint])) THEN '2-3'::text
            WHEN (tel_stof_vn.cnt_oordeel = 1) THEN '1'::text
            WHEN ((oordeel_kwal.swcs_id = 1) AND (tel_stof_vn.cnt_oordeel IS NULL)) THEN '0'::text
            ELSE 'NVT'::text
        END AS classificatie,
    hdo_swb.wkrv_id AS "Waterlichaam_Versie",
    hdo_swb.inspire_id_local_id AS "Waterlichaam_Identificatie",
    hdo_rbd.inspire_id_local_id AS stroomgebieddistrict
   FROM ((((oordeel_kwal
     LEFT JOIN tel_stof_vn ON (((tel_stof_vn.sys_id = oordeel_kwal.sys_id) AND (tel_stof_vn.categorie = oordeel_kwal.opt_id))))
     JOIN hydro_object hdo_swb ON ((hdo_swb.hdo_id = oordeel_kwal.swb_id)))
     JOIN water_body wb ON ((wb.wbd_id = oordeel_kwal.swb_id)))
     JOIN hydro_object hdo_rbd ON ((wb.rbd_id = hdo_rbd.hdo_id)))
  ORDER BY hdo_swb.inspire_id_local_id, oordeel_kwal.year_of_status, hdo_swb.wkrv_id;


--
-- Name: vw_oordeel_owm_tel_stoffen_g; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_oordeel_owm_tel_stoffen_g AS
 WITH oordeel_kwal AS (
         SELECT DISTINCT ON (sys.sys_id, swcs.opt_id) sys.sys_id,
            sys.year_of_status,
            swcs.opt_id,
            swcs.swcs_id,
            sys.swb_id,
            swcs.wbpm_id
           FROM (swb_yearly_status sys
             JOIN sw_chemical_substance_status swcs ON ((swcs.sys_id = sys.sys_id)))
          WHERE ((swcs.opt_id = ANY (ARRAY[4477, 4519, 5893, 5891, 5892])) AND (swcs.eumg_id = 3))
          ORDER BY sys.sys_id, swcs.opt_id, swcs.wbpm_id DESC
        ), oordeel_stof_vn AS (
         SELECT DISTINCT ON (sys.sys_id, swcs.opt_id) sys.sys_id,
            sys.year_of_status,
            swcs.opt_id,
            swcs.swcs_id,
            sge.chs_id
           FROM (((swb_yearly_status sys
             JOIN sw_chemical_substance_status swcs ON ((swcs.sys_id = sys.sys_id)))
             JOIN observed_property_type ON ((observed_property_type.opt_id = swcs.opt_id)))
             JOIN substance_group_element sge ON ((sge.ssge_id = observed_property_type.substance_group_id)))
          WHERE ((sge.chs_id IS NOT NULL) AND (swcs.eumg_id = 3))
          ORDER BY sys.sys_id, swcs.opt_id, swcs.wbpm_id DESC
        ), stofgroep AS (
         SELECT substance_group_element.chs_id,
            substance_group_element.ssge_id,
                CASE substance_group_element.ssge_id
                    WHEN 3155 THEN 4519
                    WHEN 3149 THEN 5892
                    WHEN 3150 THEN 5891
                    WHEN 2907 THEN 4477
                    WHEN 3148 THEN 5893
                    ELSE 0
                END AS categorie
           FROM substance_group_element
          WHERE (substance_group_element.ssge_id = ANY (ARRAY[3155, 3150, 3149, 3148, 2907]))
        ), tel_stof_vn AS (
         SELECT sys.sys_id,
            count(oordeel_stof_vn.swcs_id) AS cnt_oordeel,
            stofgroep.categorie
           FROM ((swb_yearly_status sys
             JOIN oordeel_stof_vn ON (((oordeel_stof_vn.sys_id = sys.sys_id) AND (oordeel_stof_vn.swcs_id = 2))))
             LEFT JOIN stofgroep ON ((oordeel_stof_vn.chs_id = stofgroep.chs_id)))
          GROUP BY sys.sys_id, stofgroep.categorie
         HAVING (stofgroep.categorie <> 0)
        )
 SELECT (((hdo_swb.inspire_id_local_id)::text || (hdo_swb.wkrv_id)::text) || (oordeel_kwal.year_of_status)::text) AS "Unique_key",
    oordeel_kwal.year_of_status AS "Rapportagejaar",
        CASE
            WHEN (oordeel_kwal.opt_id = 4477) THEN 'CHEMT'::text
            WHEN (oordeel_kwal.opt_id = 4519) THEN 'STOFOV'::text
            WHEN (oordeel_kwal.opt_id = 5893) THEN 'STOFPR_34-45'::text
            WHEN (oordeel_kwal.opt_id = 5891) THEN 'STOFPR_UBQJ'::text
            WHEN (oordeel_kwal.opt_id = 5892) THEN 'STOFPR_UBQN'::text
            ELSE NULL::text
        END AS "STOF_CATEGORIE",
        CASE
            WHEN (tel_stof_vn.cnt_oordeel >= 7) THEN '7+'::text
            WHEN (tel_stof_vn.cnt_oordeel = ANY (ARRAY[(4)::bigint, (5)::bigint, (6)::bigint])) THEN '4-6'::text
            WHEN (tel_stof_vn.cnt_oordeel = ANY (ARRAY[(2)::bigint, (3)::bigint])) THEN '2-3'::text
            WHEN (tel_stof_vn.cnt_oordeel = 1) THEN '1'::text
            WHEN ((oordeel_kwal.swcs_id = 1) AND (tel_stof_vn.cnt_oordeel IS NULL)) THEN '0'::text
            ELSE 'NVT'::text
        END AS classificatie,
    hdo_swb.wkrv_id AS "Waterlichaam_Versie",
    hdo_swb.inspire_id_local_id AS "Waterlichaam_Identificatie",
    geometrytype(mrz.geometry) AS geometry_type,
    mrz.geometry,
    hdo_rbd.inspire_id_local_id AS stroomgebieddistrict
   FROM (((((oordeel_kwal
     LEFT JOIN tel_stof_vn ON (((tel_stof_vn.sys_id = oordeel_kwal.sys_id) AND (tel_stof_vn.categorie = oordeel_kwal.opt_id))))
     JOIN hydro_object hdo_swb ON ((hdo_swb.hdo_id = oordeel_kwal.swb_id)))
     JOIN management_regulation_or_restriction_zone mrz ON ((mrz.mrz_id = oordeel_kwal.swb_id)))
     JOIN water_body wb ON ((wb.wbd_id = oordeel_kwal.swb_id)))
     JOIN hydro_object hdo_rbd ON ((wb.rbd_id = hdo_rbd.hdo_id)))
  ORDER BY hdo_swb.inspire_id_local_id, oordeel_kwal.year_of_status, hdo_swb.wkrv_id;


--
-- Name: vw_oordeel_sbw_gwl; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_oordeel_sbw_gwl AS
 SELECT hdo_gwb.hdo_id AS "Grondwaterlichaam_DB_ID",
    hdo_gwb.inspire_id_local_id AS "Grondwaterlichaam_Identificatie",
    hdon_gwb.name AS "Grondwaterlichaam_Omschrijving",
    hdo_gwb.wkrv_id AS "Grondwaterlichaam_Versie",
    hdo_swb.hdo_id AS "Oppervlaktewaterlichaam_DB_ID",
    hdo_swb.inspire_id_local_id AS "OppervlakteWaterlichaam_Identificatie",
    hdon_swb.name AS "OppervlakteWaterlichaam_Omschrijving",
    hdo_gwb.wkrv_id AS "OppervlakteWaterlichaam_Versie",
    gwb_yearly_status.year_of_status AS "RapportageJaar",
    vw_waargenomen_eigenschap."DB_ID" AS "WaargenomenEigenschap_DB_ID",
    vw_waargenomen_eigenschap."Tpering_Code",
    vw_waargenomen_eigenschap."Typering_Omschrijving",
    classification_type.cls_id AS "Oordeel_DB_ID",
    classification_type.description AS "Oordeel",
    gw_swb_status.remark
   FROM (((((((gw_swb_status
     LEFT JOIN gwb_yearly_status ON ((gwb_yearly_status.gys_id = gw_swb_status.gwsy)))
     LEFT JOIN hydro_object hdo_swb ON ((hdo_swb.hdo_id = gwb_yearly_status.gwb_id)))
     LEFT JOIN hdo_names hdon_swb ON ((hdo_swb.hdo_id = hdon_swb.hdo_id)))
     LEFT JOIN hydro_object hdo_gwb ON ((hdo_gwb.hdo_id = gw_swb_status.swb_id)))
     LEFT JOIN hdo_names hdon_gwb ON ((hdo_gwb.hdo_id = hdon_gwb.hdo_id)))
     LEFT JOIN vw_waargenomen_eigenschap ON ((vw_waargenomen_eigenschap."DB_ID" = gw_swb_status.opt_id)))
     LEFT JOIN classification_type ON ((gw_swb_status.cls_id = classification_type.cls_id)));


--
-- Name: vw_oordeel_sbw_gwl_g; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_oordeel_sbw_gwl_g AS
 SELECT hdo_gwb.hdo_id AS "Grondwaterlichaam_DB_ID",
    hdo_gwb.inspire_id_local_id AS "Grondwaterlichaam_Identificatie",
    hdon_gwb.name AS "Grondwaterlichaam_Omschrijving",
    hdo_gwb.wkrv_id AS "Grondwaterlichaam_Versie",
    hdo_swb.hdo_id AS "Oppervlaktewaterlichaam_DB_ID",
    hdo_swb.inspire_id_local_id AS "OppervlakteWaterlichaam_Identificatie",
    hdon_swb.name AS "OppervlakteWaterlichaam_Omschrijving",
    hdo_gwb.wkrv_id AS "OppervlakteWaterlichaam_Versie",
    gwb_yearly_status.year_of_status AS "RapportageJaar",
    gw_swb_status.opt_id AS "WaargenomenEigenschap_DB_ID",
    classification_type.cls_id AS "Oordeel_DB_ID",
    classification_type.description AS "Oordeel",
    hdo_sgb.inspire_id_local_id AS stroomgebieddistrict,
    management_regulation_or_restriction_zone.geometry,
    (((('UK'::text || hdo_gwb.hdo_id) || hdo_swb.hdo_id) || gw_swb_status.opt_id) || gwb_yearly_status.year_of_status) AS "Unique_Key"
   FROM (((((((((gw_swb_status
     JOIN gwb_yearly_status ON ((gwb_yearly_status.gys_id = gw_swb_status.gwsy)))
     JOIN hydro_object hdo_gwb ON ((hdo_gwb.hdo_id = gwb_yearly_status.gwb_id)))
     LEFT JOIN hdo_names hdon_gwb ON ((hdo_gwb.hdo_id = hdon_gwb.hdo_id)))
     JOIN hydro_object hdo_swb ON ((hdo_swb.hdo_id = gw_swb_status.swb_id)))
     JOIN hdo_names hdon_swb ON ((hdo_gwb.hdo_id = hdon_swb.hdo_id)))
     JOIN classification_type ON ((gw_swb_status.cls_id = classification_type.cls_id)))
     JOIN management_regulation_or_restriction_zone ON ((management_regulation_or_restriction_zone.mrz_id = hdo_swb.hdo_id)))
     JOIN water_body wbd ON ((wbd.wbd_id = hdo_gwb.hdo_id)))
     JOIN hydro_object hdo_sgb ON ((hdo_sgb.hdo_id = wbd.rbd_id)));


--
-- Name: vw_oordeel_sbw_gwl_g_type; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_oordeel_sbw_gwl_g_type AS
 SELECT hdo_gwb.hdo_id AS "Grondwaterlichaam_DB_ID",
    hdo_gwb.inspire_id_local_id AS "Grondwaterlichaam_Identificatie",
    hdon_gwb.name AS "Grondwaterlichaam_Omschrijving",
    hdo_gwb.wkrv_id AS "Grondwaterlichaam_Versie",
    hdo_swb.hdo_id AS "Oppervlaktewaterlichaam_DB_ID",
    hdo_swb.inspire_id_local_id AS "OppervlakteWaterlichaam_Identificatie",
    hdon_swb.name AS "OppervlakteWaterlichaam_Omschrijving",
    hdo_gwb.wkrv_id AS "OppervlakteWaterlichaam_Versie",
    gwb_yearly_status.year_of_status AS "RapportageJaar",
    gw_swb_status.opt_id AS "WaargenomenEigenschap_DB_ID",
    classification_type.cls_id AS "Oordeel_DB_ID",
    classification_type.description AS "Oordeel",
    hdo_sgb.inspire_id_local_id AS stroomgebieddistrict,
    management_regulation_or_restriction_zone.geometry,
    geometrytype(management_regulation_or_restriction_zone.geometry) AS geometry_type,
    (((('UK'::text || hdo_gwb.hdo_id) || hdo_swb.hdo_id) || gw_swb_status.opt_id) || gwb_yearly_status.year_of_status) AS "Unique_Key"
   FROM (((((((((gw_swb_status
     JOIN gwb_yearly_status ON ((gwb_yearly_status.gys_id = gw_swb_status.gwsy)))
     JOIN hydro_object hdo_gwb ON ((hdo_gwb.hdo_id = gwb_yearly_status.gwb_id)))
     LEFT JOIN hdo_names hdon_gwb ON ((hdo_gwb.hdo_id = hdon_gwb.hdo_id)))
     JOIN hydro_object hdo_swb ON ((hdo_swb.hdo_id = gw_swb_status.swb_id)))
     JOIN hdo_names hdon_swb ON ((hdo_gwb.hdo_id = hdon_swb.hdo_id)))
     JOIN classification_type ON ((gw_swb_status.cls_id = classification_type.cls_id)))
     JOIN management_regulation_or_restriction_zone ON ((management_regulation_or_restriction_zone.mrz_id = hdo_swb.hdo_id)))
     JOIN water_body wbd ON ((wbd.wbd_id = hdo_gwb.hdo_id)))
     JOIN hydro_object hdo_sgb ON ((hdo_sgb.hdo_id = wbd.rbd_id)));


--
-- Name: vw_oordeel_totaal_gwl; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_oordeel_totaal_gwl AS
 SELECT gwb_yearly_status.gys_id AS "DB_ID",
    hdo_gwb.hdo_id AS "Waterlichaam_DB_ID",
    hdo_gwb.inspire_id_local_id AS "Waterlichaam_Identificatie",
    gwb_yearly_status.year_of_status AS "Rapportagejaar",
    vw_waargenomen_eigenschap."DB_ID" AS "Waargenomen_Eigenschap_DB_ID",
    vw_waargenomen_eigenschap."Tpering_Code",
    vw_waargenomen_eigenschap."Typering_Omschrijving",
    vw_waargenomen_eigenschap."Grootheid_Code",
    vw_waargenomen_eigenschap."Grootheid_Omschrijving",
    vw_waargenomen_eigenschap."ChemischeStof_code",
    vw_waargenomen_eigenschap."ChemischeStof_Omschrijving",
    vw_waargenomen_eigenschap."Hoedanigheid_Code",
    vw_waargenomen_eigenschap."Hoedanigheid_Omschrijving",
    classification_type.description AS "Oordeel",
    eu_monitoring_goal_type.code AS "Oordeel_Type_Code",
    eu_monitoring_goal_type.description AS "Oordeel_Type_Omschrijving",
    waarde_bepalings_methode_type.code AS "WaardebepalingsMethode_Code",
    waarde_bepalings_methode_type.omschrijving AS "WaardebepalingsMethode_Omschrijving",
    gwb_yearly_status.comment_on_chemical_status AS "Toelichting_ChemischeStatus",
    gwb_yearly_status.comment_on_quantity_status AS "Toelichting_EcologischeStatus",
    gwb_yearly_status.motivation_4no_chemical_status AS "Motivatie_Geen_ChemischeStatus",
    gwb_yearly_status.motivation_4no_chemical_trends AS "Motivatie_Geen_ChemischeTrend",
    gwb_yearly_status.motivation_4no_quantity_status AS "Motivatie_Geen_EcologischeStatus",
    classification_type.cls_id AS "Oordeel_DB_ID"
   FROM ((((((gwb_yearly_status
     LEFT JOIN hydro_object hdo_gwb ON ((hdo_gwb.hdo_id = gwb_yearly_status.gwb_id)))
     JOIN gw_chemical_status ON ((gw_chemical_status.gys_id = gwb_yearly_status.gys_id)))
     LEFT JOIN classification_type ON ((gw_chemical_status.clst_id = classification_type.cls_id)))
     LEFT JOIN vw_waargenomen_eigenschap ON ((vw_waargenomen_eigenschap."DB_ID" = gw_chemical_status.opt_id)))
     LEFT JOIN waarde_bepalings_methode_type ON ((waarde_bepalings_methode_type.wbpm_id = gw_chemical_status.wbpm_id)))
     LEFT JOIN eu_monitoring_goal_type ON ((eu_monitoring_goal_type.eumg_id = gw_chemical_status.eumg_id)))
UNION ALL
 SELECT gwb_yearly_status.gys_id AS "DB_ID",
    hdo_gwb.hdo_id AS "Waterlichaam_DB_ID",
    hdo_gwb.inspire_id_local_id AS "Waterlichaam_Identificatie",
    gwb_yearly_status.year_of_status AS "Rapportagejaar",
    vw_waargenomen_eigenschap."DB_ID" AS "Waargenomen_Eigenschap_DB_ID",
    vw_waargenomen_eigenschap."Tpering_Code",
    vw_waargenomen_eigenschap."Typering_Omschrijving",
    vw_waargenomen_eigenschap."Grootheid_Code",
    vw_waargenomen_eigenschap."Grootheid_Omschrijving",
    vw_waargenomen_eigenschap."ChemischeStof_code",
    vw_waargenomen_eigenschap."ChemischeStof_Omschrijving",
    vw_waargenomen_eigenschap."Hoedanigheid_Code",
    vw_waargenomen_eigenschap."Hoedanigheid_Omschrijving",
    classification_type.description AS "Oordeel",
    eu_monitoring_goal_type.code AS "Oordeel_Type_Code",
    eu_monitoring_goal_type.description AS "Oordeel_Type_Omschrijving",
    waarde_bepalings_methode_type.code AS "WaardebepalingsMethode_Code",
    waarde_bepalings_methode_type.omschrijving AS "WaardebepalingsMethode_Omschrijving",
    gwb_yearly_status.comment_on_quantity_status AS "Toelichting_ChemischeStatus",
    gwb_yearly_status.comment_on_quantity_status AS "Toelichting_EcologischeStatus",
    gwb_yearly_status.motivation_4no_quantity_status AS "Motivatie_Geen_ChemischeStatus",
    gwb_yearly_status.motivation_4no_chemical_trends AS "Motivatie_Geen_ChemischeTrend",
    gwb_yearly_status.motivation_4no_quantity_status AS "Motivatie_Geen_EcologischeStatus",
    classification_type.cls_id AS "Oordeel_DB_ID"
   FROM ((((((gwb_yearly_status
     LEFT JOIN hydro_object hdo_gwb ON ((hdo_gwb.hdo_id = gwb_yearly_status.gwb_id)))
     JOIN gw_quantity_status ON ((gw_quantity_status.gys_id = gwb_yearly_status.gys_id)))
     LEFT JOIN classification_type ON ((gw_quantity_status.gwst_id = classification_type.cls_id)))
     LEFT JOIN vw_waargenomen_eigenschap ON ((vw_waargenomen_eigenschap."DB_ID" = gw_quantity_status.opt_id)))
     LEFT JOIN waarde_bepalings_methode_type ON ((waarde_bepalings_methode_type.wbpm_id = gw_quantity_status.wbpm_id)))
     LEFT JOIN eu_monitoring_goal_type ON ((eu_monitoring_goal_type.eumg_id = gw_quantity_status.eumg_id)))
  ORDER BY 3, 6, 8, 10, 4 DESC, 15, 17;


--
-- Name: vw_oordeel_totaal_gwl_aquo; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_oordeel_totaal_gwl_aquo AS
 SELECT hdo_gwb.inspire_id_local_id AS "Waterlichaam.Identificatie",
    gwb_yearly_status.year_of_status AS "Rapportagejaar",
    vw_waargenomen_eigenschap."Tpering_Code" AS "Typering.Code",
    vw_waargenomen_eigenschap."Typering_Omschrijving" AS "Typering.Omschrijving",
    vw_waargenomen_eigenschap."Grootheid_Code" AS "Grootheid.Code",
    vw_waargenomen_eigenschap."Grootheid_Omschrijving" AS "Grootheid.Omschrijving",
    vw_waargenomen_eigenschap."ChemischeStof_code" AS "ChemischeStof.Code",
    vw_waargenomen_eigenschap."ChemischeStof_Omschrijving" AS "ChemischeStof.Omschrijving",
    vw_waargenomen_eigenschap."Hoedanigheid_Code" AS "Hoedanigheid.Code",
    vw_waargenomen_eigenschap."Hoedanigheid_Omschrijving" AS "Hoedanigheid.Omschrijving",
    classification_type.description AS "Oordeel",
    eu_monitoring_goal_type.code AS "Oordeelsoort.Code",
    eu_monitoring_goal_type.description AS "Oordeelsoort.Omschrijving",
    waarde_bepalings_methode_type.code AS "WaardebepalingsMethode.Code",
    waarde_bepalings_methode_type.omschrijving AS "WaardebepalingsMethode.Omschrijving",
    hdo_gwb.wkrv_id AS "Versie"
   FROM ((((((gwb_yearly_status
     LEFT JOIN hydro_object hdo_gwb ON ((hdo_gwb.hdo_id = gwb_yearly_status.gwb_id)))
     JOIN gw_chemical_status ON ((gw_chemical_status.gys_id = gwb_yearly_status.gys_id)))
     LEFT JOIN classification_type ON ((gw_chemical_status.clst_id = classification_type.cls_id)))
     LEFT JOIN vw_waargenomen_eigenschap ON ((vw_waargenomen_eigenschap."DB_ID" = gw_chemical_status.opt_id)))
     LEFT JOIN waarde_bepalings_methode_type ON ((waarde_bepalings_methode_type.wbpm_id = gw_chemical_status.wbpm_id)))
     LEFT JOIN eu_monitoring_goal_type ON ((eu_monitoring_goal_type.eumg_id = gw_chemical_status.eumg_id)))
UNION ALL
 SELECT hdo_gwb.inspire_id_local_id AS "Waterlichaam.Identificatie",
    gwb_yearly_status.year_of_status AS "Rapportagejaar",
    vw_waargenomen_eigenschap."Tpering_Code" AS "Typering.Code",
    vw_waargenomen_eigenschap."Typering_Omschrijving" AS "Typering.Omschrijving",
    vw_waargenomen_eigenschap."Grootheid_Code" AS "Grootheid.Code",
    vw_waargenomen_eigenschap."Grootheid_Omschrijving" AS "Grootheid.Omschrijving",
    vw_waargenomen_eigenschap."ChemischeStof_code" AS "ChemischeStof.Code",
    vw_waargenomen_eigenschap."ChemischeStof_Omschrijving" AS "ChemischeStof.Omschrijving",
    vw_waargenomen_eigenschap."Hoedanigheid_Code" AS "Hoedanigheid.Code",
    vw_waargenomen_eigenschap."Hoedanigheid_Omschrijving" AS "Hoedanigheid.Omschrijving",
    classification_type.description AS "Oordeel",
    eu_monitoring_goal_type.code AS "Oordeelsoort.Code",
    eu_monitoring_goal_type.description AS "Oordeelsoort.Omschrijving",
    waarde_bepalings_methode_type.code AS "WaardebepalingsMethode.Code",
    waarde_bepalings_methode_type.omschrijving AS "WaardebepalingsMethode.Omschrijving",
    hdo_gwb.wkrv_id AS "Versie"
   FROM ((((((gwb_yearly_status
     LEFT JOIN hydro_object hdo_gwb ON ((hdo_gwb.hdo_id = gwb_yearly_status.gwb_id)))
     JOIN gw_quantity_status ON ((gw_quantity_status.gys_id = gwb_yearly_status.gys_id)))
     LEFT JOIN classification_type ON ((gw_quantity_status.gwst_id = classification_type.cls_id)))
     LEFT JOIN vw_waargenomen_eigenschap ON ((vw_waargenomen_eigenschap."DB_ID" = gw_quantity_status.opt_id)))
     LEFT JOIN waarde_bepalings_methode_type ON ((waarde_bepalings_methode_type.wbpm_id = gw_quantity_status.wbpm_id)))
     LEFT JOIN eu_monitoring_goal_type ON ((eu_monitoring_goal_type.eumg_id = gw_quantity_status.eumg_id)))
  ORDER BY 1, 4, 6, 8;


--
-- Name: vw_oordeel_totaal_gwl_g; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_oordeel_totaal_gwl_g AS
 SELECT gwb_yearly_status.gys_id AS "DB_ID",
    hdo_gwb.hdo_id AS "Waterlichaam_DB_ID",
    hdo_gwb.inspire_id_local_id AS "Waterlichaam_Identificatie",
    gwb.horizon_id AS "Horizont",
    hdo_rbd.inspire_id_local_id AS stroomgebieddistrict,
    hdo_gwb.wkrv_id AS versie,
    gwb_yearly_status.year_of_status AS "Rapportagejaar",
    gw_chemical_status.opt_id AS "Waargenomen_Eigenschap_DB_ID",
    classification_type.description AS "Oordeel",
    eu_monitoring_goal_type.code AS "Oordeel_Type_Code",
    waarde_bepalings_methode_type.code AS "WaardebepalingsMethode_Code",
    classification_type.cls_id AS "Oordeel_DB_ID",
    mrz.geometry,
    concat(row_number() OVER (ORDER BY gw_chemical_status.gwcs_id), '-', gw_chemical_status.gwcs_id) AS "Unique_Key"
   FROM ((((((((((management_regulation_or_restriction_zone mrz
     JOIN gwb_yearly_status ON ((mrz.mrz_id = gwb_yearly_status.gwb_id)))
     JOIN hydro_object hdo_gwb ON ((hdo_gwb.hdo_id = mrz.mrz_id)))
     JOIN gw_chemical_status ON ((gw_chemical_status.gys_id = gwb_yearly_status.gys_id)))
     JOIN classification_type ON ((gw_chemical_status.clst_id = classification_type.cls_id)))
     JOIN waarde_bepalings_methode_type ON ((waarde_bepalings_methode_type.wbpm_id = gw_chemical_status.wbpm_id)))
     JOIN eu_monitoring_goal_type ON ((eu_monitoring_goal_type.eumg_id = gw_chemical_status.eumg_id)))
     JOIN water_body ON ((water_body.wbd_id = hdo_gwb.hdo_id)))
     JOIN river_basin_disrict rbd ON ((rbd.rbd_id = water_body.rbd_id)))
     JOIN hydro_object hdo_rbd ON ((rbd.rbd_id = hdo_rbd.hdo_id)))
     JOIN ground_water_body gwb ON ((gwb.gwb_id = mrz.mrz_id)))
UNION ALL
 SELECT gwb_yearly_status.gys_id AS "DB_ID",
    hdo_gwb.hdo_id AS "Waterlichaam_DB_ID",
    hdo_gwb.inspire_id_local_id AS "Waterlichaam_Identificatie",
    gwb.horizon_id AS "Horizont",
    hdo_rbd.inspire_id_local_id AS stroomgebieddistrict,
    hdo_gwb.wkrv_id AS versie,
    gwb_yearly_status.year_of_status AS "Rapportagejaar",
    gw_quantity_status.opt_id AS "Waargenomen_Eigenschap_DB_ID",
    classification_type.description AS "Oordeel",
    eu_monitoring_goal_type.code AS "Oordeel_Type_Code",
    waarde_bepalings_methode_type.code AS "WaardebepalingsMethode_Code",
    classification_type.cls_id AS "Oordeel_DB_ID",
    mrz.geometry,
    concat(row_number() OVER (ORDER BY gw_quantity_status.gwqs_id), '-', gw_quantity_status.gwqs_id) AS "Unique_Key"
   FROM ((((((((((management_regulation_or_restriction_zone mrz
     JOIN gwb_yearly_status ON ((mrz.mrz_id = gwb_yearly_status.gwb_id)))
     JOIN hydro_object hdo_gwb ON ((hdo_gwb.hdo_id = mrz.mrz_id)))
     JOIN gw_quantity_status ON ((gw_quantity_status.gys_id = gwb_yearly_status.gys_id)))
     JOIN classification_type ON ((gw_quantity_status.gwst_id = classification_type.cls_id)))
     JOIN waarde_bepalings_methode_type ON ((waarde_bepalings_methode_type.wbpm_id = gw_quantity_status.wbpm_id)))
     JOIN eu_monitoring_goal_type ON ((eu_monitoring_goal_type.eumg_id = gw_quantity_status.eumg_id)))
     JOIN water_body ON ((water_body.wbd_id = hdo_gwb.hdo_id)))
     JOIN river_basin_disrict rbd ON ((rbd.rbd_id = water_body.rbd_id)))
     JOIN hydro_object hdo_rbd ON ((rbd.rbd_id = hdo_rbd.hdo_id)))
     JOIN ground_water_body gwb ON ((gwb.gwb_id = mrz.mrz_id)));


--
-- Name: vw_oordeel_totaal_gwl_g_test; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_oordeel_totaal_gwl_g_test AS
 SELECT gwb_yearly_status.gys_id AS "DB_ID",
    hdo_gwb.hdo_id AS "Waterlichaam_DB_ID",
    hdo_gwb.inspire_id_local_id AS "Waterlichaam_Identificatie",
    gwb.horizon_id AS "Horizont",
    hdo_rbd.inspire_id_local_id AS stroomgebieddistrict,
    hdo_gwb.wkrv_id AS versie,
    gwb_yearly_status.year_of_status AS "Rapportagejaar",
    gw_chemical_status.opt_id AS "Waargenomen_Eigenschap_DB_ID",
    vw_waargenomen_eigenschap."Tpering_Code",
    vw_waargenomen_eigenschap."Grootheid_Code",
    vw_waargenomen_eigenschap."ChemischeStof_code",
    classification_type.description AS "Oordeel",
    eu_monitoring_goal_type.code AS "Oordeel_Type_Code",
    waarde_bepalings_methode_type.code AS "WaardebepalingsMethode_Code",
    classification_type.cls_id AS "Oordeel_DB_ID",
    mrz.geometry,
    concat(row_number() OVER (ORDER BY gw_chemical_status.gwcs_id), '-', gw_chemical_status.gwcs_id) AS "Unique_Key"
   FROM (((((((((((management_regulation_or_restriction_zone mrz
     JOIN gwb_yearly_status ON ((mrz.mrz_id = gwb_yearly_status.gwb_id)))
     JOIN hydro_object hdo_gwb ON ((hdo_gwb.hdo_id = mrz.mrz_id)))
     JOIN gw_chemical_status ON ((gw_chemical_status.gys_id = gwb_yearly_status.gys_id)))
     JOIN classification_type ON ((gw_chemical_status.clst_id = classification_type.cls_id)))
     JOIN waarde_bepalings_methode_type ON ((waarde_bepalings_methode_type.wbpm_id = gw_chemical_status.wbpm_id)))
     JOIN eu_monitoring_goal_type ON ((eu_monitoring_goal_type.eumg_id = gw_chemical_status.eumg_id)))
     JOIN water_body ON ((water_body.wbd_id = hdo_gwb.hdo_id)))
     JOIN river_basin_disrict rbd ON ((rbd.rbd_id = water_body.rbd_id)))
     JOIN hydro_object hdo_rbd ON ((rbd.rbd_id = hdo_rbd.hdo_id)))
     JOIN ground_water_body gwb ON ((gwb.gwb_id = mrz.mrz_id)))
     JOIN vw_waargenomen_eigenschap ON ((vw_waargenomen_eigenschap."DB_ID" = gw_chemical_status.opt_id)))
UNION ALL
 SELECT gwb_yearly_status.gys_id AS "DB_ID",
    hdo_gwb.hdo_id AS "Waterlichaam_DB_ID",
    hdo_gwb.inspire_id_local_id AS "Waterlichaam_Identificatie",
    gwb.horizon_id AS "Horizont",
    hdo_rbd.inspire_id_local_id AS stroomgebieddistrict,
    hdo_gwb.wkrv_id AS versie,
    gwb_yearly_status.year_of_status AS "Rapportagejaar",
    gw_quantity_status.opt_id AS "Waargenomen_Eigenschap_DB_ID",
    vw_waargenomen_eigenschap."Tpering_Code",
    vw_waargenomen_eigenschap."Grootheid_Code",
    vw_waargenomen_eigenschap."ChemischeStof_code",
    classification_type.description AS "Oordeel",
    eu_monitoring_goal_type.code AS "Oordeel_Type_Code",
    waarde_bepalings_methode_type.code AS "WaardebepalingsMethode_Code",
    classification_type.cls_id AS "Oordeel_DB_ID",
    mrz.geometry,
    concat(row_number() OVER (ORDER BY gw_quantity_status.gwqs_id), '-', gw_quantity_status.gwqs_id) AS "Unique_Key"
   FROM (((((((((((management_regulation_or_restriction_zone mrz
     JOIN gwb_yearly_status ON ((mrz.mrz_id = gwb_yearly_status.gwb_id)))
     JOIN hydro_object hdo_gwb ON ((hdo_gwb.hdo_id = mrz.mrz_id)))
     JOIN gw_quantity_status ON ((gw_quantity_status.gys_id = gwb_yearly_status.gys_id)))
     JOIN classification_type ON ((gw_quantity_status.gwst_id = classification_type.cls_id)))
     JOIN waarde_bepalings_methode_type ON ((waarde_bepalings_methode_type.wbpm_id = gw_quantity_status.wbpm_id)))
     JOIN eu_monitoring_goal_type ON ((eu_monitoring_goal_type.eumg_id = gw_quantity_status.eumg_id)))
     JOIN water_body ON ((water_body.wbd_id = hdo_gwb.hdo_id)))
     JOIN river_basin_disrict rbd ON ((rbd.rbd_id = water_body.rbd_id)))
     JOIN hydro_object hdo_rbd ON ((rbd.rbd_id = hdo_rbd.hdo_id)))
     JOIN ground_water_body gwb ON ((gwb.gwb_id = mrz.mrz_id)))
     JOIN vw_waargenomen_eigenschap ON ((vw_waargenomen_eigenschap."DB_ID" = gw_quantity_status.opt_id)));


--
-- Name: vw_oordeel_totaal_owm; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_oordeel_totaal_owm AS
 SELECT swb_yearly_status.sys_id AS "DB_ID",
    hdo_swb.hdo_id AS "Waterlichaam_DB_ID",
    hdo_swb.inspire_id_local_id AS "Waterlichaam_identificatie",
    hdo_swb.wkrv_id AS "Waterlichaam_Versie",
    swb_yearly_status.year_of_status AS "Rapportagejaar",
    vw_waargenomen_eigenschap."DB_ID" AS "Waargenomen_Eigenschap_DB_ID",
    vw_waargenomen_eigenschap."Tpering_Code",
    vw_waargenomen_eigenschap."Typering_Omschrijving",
    vw_waargenomen_eigenschap."Grootheid_Code",
    vw_waargenomen_eigenschap."Grootheid_Omschrijving",
    vw_waargenomen_eigenschap."ChemischeStof_code",
    vw_waargenomen_eigenschap."ChemischeStof_Omschrijving",
    vw_waargenomen_eigenschap."Hoedanigheid_Code",
    vw_waargenomen_eigenschap."Hoedanigheid_Omschrijving",
    classification_type.cls_id AS "Oordeel_DB_ID",
    classification_type.description AS "Oordeel",
    eu_monitoring_goal_type.eumg_id AS "Oordeel_Type_DB_ID",
    eu_monitoring_goal_type.code AS "Oordeel_Type_Code",
    eu_monitoring_goal_type.description AS "Oordeel_Type_Omschrijving",
    waarde_bepalings_methode_type.code AS "WaardebepalingsMethode_Code",
    waarde_bepalings_methode_type.omschrijving AS "WaardebepalingsMethode_Omschrijving",
    swb_yearly_status.comment_on_chemical_status AS "Toelichting_ChemischeStatus",
    swb_yearly_status.comment_on_ecological_status AS "Toelichting_EcologischeStatus",
    swb_yearly_status.motivation_4no_chemical_status AS "Motivatie_Geen_ChemischeStatus",
    swb_yearly_status.motivation_4no_ecological_status AS "Motivatie_Geen_EcologischeStatus"
   FROM ((((((swb_yearly_status
     LEFT JOIN hydro_object hdo_swb ON ((hdo_swb.hdo_id = swb_yearly_status.swb_id)))
     JOIN sw_chemical_substance_status ON ((sw_chemical_substance_status.sys_id = swb_yearly_status.sys_id)))
     LEFT JOIN classification_type ON ((sw_chemical_substance_status.swcs_id = classification_type.cls_id)))
     LEFT JOIN vw_waargenomen_eigenschap ON ((vw_waargenomen_eigenschap."DB_ID" = sw_chemical_substance_status.opt_id)))
     LEFT JOIN waarde_bepalings_methode_type ON ((waarde_bepalings_methode_type.wbpm_id = sw_chemical_substance_status.wbpm_id)))
     LEFT JOIN eu_monitoring_goal_type ON ((eu_monitoring_goal_type.eumg_id = sw_chemical_substance_status.eumg_id)))
UNION ALL
 SELECT swb_yearly_status.sys_id AS "DB_ID",
    hdo_swb.hdo_id AS "Waterlichaam_DB_ID",
    hdo_swb.inspire_id_local_id AS "Waterlichaam_identificatie",
    hdo_swb.wkrv_id AS "Waterlichaam_Versie",
    swb_yearly_status.year_of_status AS "Rapportagejaar",
    vw_waargenomen_eigenschap."DB_ID" AS "Waargenomen_Eigenschap_DB_ID",
    vw_waargenomen_eigenschap."Tpering_Code",
    vw_waargenomen_eigenschap."Typering_Omschrijving",
    vw_waargenomen_eigenschap."Grootheid_Code",
    vw_waargenomen_eigenschap."Grootheid_Omschrijving",
    vw_waargenomen_eigenschap."ChemischeStof_code",
    vw_waargenomen_eigenschap."ChemischeStof_Omschrijving",
    vw_waargenomen_eigenschap."Hoedanigheid_Code",
    vw_waargenomen_eigenschap."Hoedanigheid_Omschrijving",
    classification_type.cls_id AS "Oordeel_DB_ID",
    classification_type.description AS "Oordeel",
    eu_monitoring_goal_type.eumg_id AS "Oordeel_Type_DB_ID",
    eu_monitoring_goal_type.code AS "Oordeel_Type_Code",
    eu_monitoring_goal_type.description AS "Oordeel_Type_Omschrijving",
    waarde_bepalings_methode_type.code AS "WaardebepalingsMethode_Code",
    waarde_bepalings_methode_type.omschrijving AS "WaardebepalingsMethode_Omschrijving",
    swb_yearly_status.comment_on_chemical_status AS "Toelichting_ChemischeStatus",
    swb_yearly_status.comment_on_ecological_status AS "Toelichting_EcologischeStatus",
    swb_yearly_status.motivation_4no_chemical_status AS "Motivatie_Geen_ChemischeStatus",
    swb_yearly_status.motivation_4no_ecological_status AS "Motivatie_Geen_EcologischeStatus"
   FROM ((((((swb_yearly_status
     LEFT JOIN hydro_object hdo_swb ON ((hdo_swb.hdo_id = swb_yearly_status.swb_id)))
     JOIN sw_ecological_status ON ((sw_ecological_status.sys_id = swb_yearly_status.sys_id)))
     LEFT JOIN classification_type ON ((sw_ecological_status.swes_id = classification_type.cls_id)))
     LEFT JOIN vw_waargenomen_eigenschap ON ((vw_waargenomen_eigenschap."DB_ID" = sw_ecological_status.opt_id)))
     LEFT JOIN waarde_bepalings_methode_type ON ((waarde_bepalings_methode_type.wbpm_id = sw_ecological_status.wbpm_id)))
     LEFT JOIN eu_monitoring_goal_type ON ((eu_monitoring_goal_type.eumg_id = sw_ecological_status.eumg_id)))
  ORDER BY 3, 6, 8, 10, 4 DESC, 15, 17;


--
-- Name: vw_oordeel_totaal_owm_aquo; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_oordeel_totaal_owm_aquo AS
 SELECT hdo_swb.inspire_id_local_id AS "Waterlichaam.Identificatie",
    hdo_swb.wkrv_id AS "Versie",
    swb_yearly_status.year_of_status AS "Rapportagejaar",
    ('NL'::text || (nt.code)::text) AS "Namespace",
    vw_waargenomen_eigenschap."Tpering_Code" AS "Typering.Code",
    vw_waargenomen_eigenschap."Typering_Omschrijving" AS "Typering.Omschrijving",
    vw_waargenomen_eigenschap."Grootheid_Code" AS "Grootheid.Code",
    vw_waargenomen_eigenschap."Grootheid_Omschrijving" AS "Grootheid.Omschrijving",
    vw_waargenomen_eigenschap."ChemischeStof_code" AS "ChemischeStof.Code",
    vw_waargenomen_eigenschap."ChemischeStof_Omschrijving" AS "ChemischeStof.Omschrijving",
    vw_waargenomen_eigenschap."Hoedanigheid_Code" AS "Hoedanigheid.Code",
    vw_waargenomen_eigenschap."Hoedanigheid_Omschrijving" AS "Hoedanigheid.Omschrijving",
    classification_type.description AS "Oordeel",
    eu_monitoring_goal_type.code AS "Oordeelsoort.Code",
    eu_monitoring_goal_type.description AS "Oordeelsoort.Omschrijving",
    waarde_bepalings_methode_type.code AS "WaardebepalingsMethode.Code",
    waarde_bepalings_methode_type.omschrijving AS "WaardebepalingsMethode.Omschrijving",
    sw_chemical_substance_status.last_change_time
   FROM ((((((((swb_yearly_status
     LEFT JOIN hydro_object hdo_swb ON ((hdo_swb.hdo_id = swb_yearly_status.swb_id)))
     JOIN sw_chemical_substance_status ON ((sw_chemical_substance_status.sys_id = swb_yearly_status.sys_id)))
     LEFT JOIN classification_type ON ((sw_chemical_substance_status.swcs_id = classification_type.cls_id)))
     LEFT JOIN vw_waargenomen_eigenschap ON ((vw_waargenomen_eigenschap."DB_ID" = sw_chemical_substance_status.opt_id)))
     LEFT JOIN waarde_bepalings_methode_type ON ((waarde_bepalings_methode_type.wbpm_id = sw_chemical_substance_status.wbpm_id)))
     LEFT JOIN eu_monitoring_goal_type ON ((eu_monitoring_goal_type.eumg_id = sw_chemical_substance_status.eumg_id)))
     JOIN competentauthority_namespacetype con ON ((con.ns_id = hdo_swb.inspire_id_namespace)))
     JOIN namespace_type nt ON ((nt.ns_id = con.ns_id)))
  WHERE (((vw_waargenomen_eigenschap."Tpering_Code")::text <> 'NUTRIENT'::text) OR (vw_waargenomen_eigenschap."Tpering_Code" IS NULL))
UNION ALL
 SELECT hdo_swb.inspire_id_local_id AS "Waterlichaam.Identificatie",
    hdo_swb.wkrv_id AS "Versie",
    swb_yearly_status.year_of_status AS "Rapportagejaar",
    ('NL'::text || (nt.code)::text) AS "Namespace",
    vw_waargenomen_eigenschap."Tpering_Code" AS "Typering.Code",
    vw_waargenomen_eigenschap."Typering_Omschrijving" AS "Typering.Omschrijving",
    vw_waargenomen_eigenschap."Grootheid_Code" AS "Grootheid.Code",
    vw_waargenomen_eigenschap."Grootheid_Omschrijving" AS "Grootheid.Omschrijving",
    vw_waargenomen_eigenschap."ChemischeStof_code" AS "ChemischeStof.Code",
    vw_waargenomen_eigenschap."ChemischeStof_Omschrijving" AS "ChemischeStof.Omschrijving",
    vw_waargenomen_eigenschap."Hoedanigheid_Code" AS "Hoedanigheid.Code",
    vw_waargenomen_eigenschap."Hoedanigheid_Omschrijving" AS "Hoedanigheid.Omschrijving",
    classification_type.description AS "Oordeel",
    eu_monitoring_goal_type.code AS "Oordeelsoort.Code",
    eu_monitoring_goal_type.description AS "Oordeelsoort.Omschrijving",
    waarde_bepalings_methode_type.code AS "WaardebepalingsMethode.Code",
    waarde_bepalings_methode_type.omschrijving AS "WaardebepalingsMethode.Omschrijving",
    sw_ecological_status.last_change_time
   FROM ((((((((swb_yearly_status
     LEFT JOIN hydro_object hdo_swb ON ((hdo_swb.hdo_id = swb_yearly_status.swb_id)))
     JOIN sw_ecological_status ON ((sw_ecological_status.sys_id = swb_yearly_status.sys_id)))
     LEFT JOIN classification_type ON ((sw_ecological_status.swes_id = classification_type.cls_id)))
     LEFT JOIN vw_waargenomen_eigenschap ON ((vw_waargenomen_eigenschap."DB_ID" = sw_ecological_status.opt_id)))
     LEFT JOIN waarde_bepalings_methode_type ON ((waarde_bepalings_methode_type.wbpm_id = sw_ecological_status.wbpm_id)))
     LEFT JOIN eu_monitoring_goal_type ON ((eu_monitoring_goal_type.eumg_id = sw_ecological_status.eumg_id)))
     JOIN competentauthority_namespacetype con ON ((con.ns_id = hdo_swb.inspire_id_namespace)))
     JOIN namespace_type nt ON ((nt.ns_id = con.ns_id)))
  WHERE (((vw_waargenomen_eigenschap."Tpering_Code")::text <> 'NUTRIENT'::text) OR (vw_waargenomen_eigenschap."Tpering_Code" IS NULL));


--
-- Name: vw_oordeel_totaal_owm_g; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_oordeel_totaal_owm_g AS
 SELECT swb_yearly_status.sys_id AS "DB_ID",
    hdo_swb.inspire_id_local_id AS "Waterlichaam_identificatie",
    hdo_swb.wkrv_id AS "Waterlichaam_Versie",
    hdo_rbd.inspire_id_local_id AS stroomgebieddistrict,
    swb_yearly_status.year_of_status AS "Rapportagejaar",
    sw_chemical_substance_status.opt_id AS "Waargenomen_Eigenschap_DB_ID",
    vw_waargenomen_eigenschap."Tpering_Code",
    vw_waargenomen_eigenschap."Grootheid_Code",
    vw_waargenomen_eigenschap."ChemischeStof_code",
    classification_type.description AS "Oordeel",
    sw_chemical_substance_status.eumg_id AS "Oordeel_Type_ID",
    sw_chemical_substance_status.wbpm_id AS "WaardebepalingsMethode_ID",
    geometrytype(mrz.geometry) AS geometry_type,
    mrz.geometry,
    ('CH'::text || sw_chemical_substance_status.css_id) AS "Unique_Key"
   FROM ((((((((management_regulation_or_restriction_zone mrz
     JOIN hydro_object hdo_swb ON ((hdo_swb.hdo_id = mrz.mrz_id)))
     JOIN water_body wb ON ((wb.wbd_id = mrz.mrz_id)))
     JOIN river_basin_disrict rbd ON ((rbd.rbd_id = wb.rbd_id)))
     JOIN hydro_object hdo_rbd ON ((rbd.rbd_id = hdo_rbd.hdo_id)))
     JOIN swb_yearly_status ON ((mrz.mrz_id = swb_yearly_status.swb_id)))
     JOIN sw_chemical_substance_status ON ((sw_chemical_substance_status.sys_id = swb_yearly_status.sys_id)))
     JOIN classification_type ON ((sw_chemical_substance_status.swcs_id = classification_type.cls_id)))
     JOIN vw_waargenomen_eigenschap ON ((vw_waargenomen_eigenschap."DB_ID" = sw_chemical_substance_status.opt_id)))
UNION ALL
 SELECT swb_yearly_status.sys_id AS "DB_ID",
    hdo_swb.inspire_id_local_id AS "Waterlichaam_identificatie",
    hdo_swb.wkrv_id AS "Waterlichaam_Versie",
    hdo_rbd.inspire_id_local_id AS stroomgebieddistrict,
    swb_yearly_status.year_of_status AS "Rapportagejaar",
    sw_ecological_status.opt_id AS "Waargenomen_Eigenschap_DB_ID",
    vw_waargenomen_eigenschap."Tpering_Code",
    vw_waargenomen_eigenschap."Grootheid_Code",
    vw_waargenomen_eigenschap."ChemischeStof_code",
    classification_type.description AS "Oordeel",
    sw_ecological_status.eumg_id AS "Oordeel_Type_ID",
    sw_ecological_status.wbpm_id AS "WaardebepalingsMethode_ID",
    geometrytype(mrz.geometry) AS geometry_type,
    mrz.geometry,
    ('EC'::text || sw_ecological_status.ecs_id) AS "Unique_Key"
   FROM ((((((((management_regulation_or_restriction_zone mrz
     JOIN hydro_object hdo_swb ON ((hdo_swb.hdo_id = mrz.mrz_id)))
     JOIN water_body wb ON ((wb.wbd_id = mrz.mrz_id)))
     JOIN river_basin_disrict rbd ON ((rbd.rbd_id = wb.rbd_id)))
     JOIN hydro_object hdo_rbd ON ((rbd.rbd_id = hdo_rbd.hdo_id)))
     JOIN swb_yearly_status ON ((mrz.mrz_id = swb_yearly_status.swb_id)))
     JOIN sw_ecological_status ON ((sw_ecological_status.sys_id = swb_yearly_status.sys_id)))
     JOIN classification_type ON ((sw_ecological_status.swes_id = classification_type.cls_id)))
     JOIN vw_waargenomen_eigenschap ON ((vw_waargenomen_eigenschap."DB_ID" = sw_ecological_status.opt_id)));


--
-- Name: vw_oppervlakte_watertypen; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_oppervlakte_watertypen AS
 SELECT sw_typology_type.styp_id AS "Watertype_DB_ID",
    sw_typology_type.code AS "Watertype_Code",
    sw_typology_type.description AS "Watertype_Omschrijving",
    sw_category_type.name AS "Watertype_EUCategorie",
    swc1.name AS "Watertype_Werkelijke_Categorie",
    sw_typology_type.is_freshwater AS "ZoetwaterJN",
    eu_intercalibration_type.code AS "IntercalibratieType_Code",
    eu_intercalibration_type.description AS "IntercalibratieType_Omschrijving"
   FROM sw_category_type,
    sw_typology_type,
    sw_category_type swc1,
    eu_intercalibration_type
  WHERE ((sw_category_type.swc_id = sw_typology_type.swc_id) AND (eu_intercalibration_type.icalt = sw_typology_type.icalt_id) AND (swc1.swc_id = sw_typology_type.true_swc_id))
  ORDER BY sw_typology_type.code;


--
-- Name: vw_oppervlaktewaterlichaam_kaart_bb; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_oppervlaktewaterlichaam_kaart_bb AS
 SELECT swb.swb_id AS db_id,
    hydro_object.inspire_id_local_id AS owmident,
    st_extent(mrz.geometry) AS extent,
    hydro_object.wkrv_id AS versie
   FROM ((surface_water_body swb
     LEFT JOIN hydro_object ON ((swb.swb_id = hydro_object.hdo_id)))
     LEFT JOIN management_regulation_or_restriction_zone mrz ON ((swb.swb_id = mrz.mrz_id)))
  GROUP BY swb.swb_id, hydro_object.inspire_id_local_id, hydro_object.wkrv_id
  ORDER BY hydro_object.inspire_id_local_id, hydro_object.wkrv_id;


--
-- Name: watercourse; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE watercourse (
    wtc_id integer NOT NULL,
    neighbour_id integer,
    length double precision,
    width_lower double precision,
    width_upper double precision,
    "geometryLine" geometry(MultiLineString,28992),
    last_change_time timestamp without time zone NOT NULL,
    "geometrySurface" geometry(MultiPolygon,28992)
);


--
-- Name: vw_oppervlaktewaterlichaam_upload_shape_l; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_oppervlaktewaterlichaam_upload_shape_l AS
 SELECT hydro_object.hdo_id AS owa_db_id,
    hydro_object.inspire_id_local_id AS owaident,
    hdo_names.name AS owanaam,
    watercourse."geometryLine" AS geometryline,
    hydro_object.wkrv_id AS owa_versie,
    hydro_object2.hdo_id AS owm_db_id,
    hydro_object2.inspire_id_local_id AS owmident,
    hydro_object2.inspire_id_namespace AS namespac,
    vw_competent_authority."Identificatie" AS wbhcode,
    vw_competent_authority."Omschrijving" AS wbhnaam,
    water_body.is_article_7 AS owmcons,
    hdo_names2.name AS owmnaam,
    hdo2.inspire_id_local_id AS sgbident,
        CASE
            WHEN (surface_water_body.is_artificial = true) THEN 'Kunstmatig'::text
            WHEN (surface_water_body.is_heaviliy_modified = true) THEN 'Sterk veranderd'::text
            ELSE 'Natuurlijk'::text
        END AS owmstat,
    surface_water_body.area_value AS owmoppvl,
    surface_water_body.length_value AS owmlengt,
    type.code AS owmtype,
    typer.code AS owmtyped,
    water_body.level_of_detail AS schaal,
    management_regulation_or_restriction_zone.begin_designation AS geldig_b,
    management_regulation_or_restriction_zone.end_designation AS geldig_e
   FROM (((((((((((((watercourse
     LEFT JOIN hydro_object ON ((hydro_object.hdo_id = watercourse.wtc_id)))
     LEFT JOIN hdo_names ON ((hdo_names.hdo_id = hydro_object.hdo_id)))
     LEFT JOIN hydro_object hydro_object2 ON ((hydro_object2.hdo_id = hydro_object.related_hdo_id)))
     LEFT JOIN hdo_names hdo_names2 ON ((hdo_names2.hdo_id = hydro_object2.hdo_id)))
     LEFT JOIN wkr_version ON ((wkr_version.wkrv_id = hydro_object.wkrv_id)))
     LEFT JOIN management_regulation_or_restriction_zone ON ((management_regulation_or_restriction_zone.mrz_id = hydro_object2.hdo_id)))
     LEFT JOIN water_body ON ((water_body.wbd_id = hydro_object2.hdo_id)))
     LEFT JOIN hydro_object hdo2 ON ((hdo2.hdo_id = water_body.rbd_id)))
     LEFT JOIN surface_water_body ON ((surface_water_body.swb_id = hydro_object2.hdo_id)))
     LEFT JOIN sw_typology_type type ON ((type.styp_id = surface_water_body.sw_typology_id)))
     LEFT JOIN sw_typology_type typer ON ((typer.styp_id = surface_water_body.sw_target_typology_id)))
     LEFT JOIN competentauthority_namespacetype ON ((competentauthority_namespacetype.ns_id = hydro_object2.inspire_id_namespace)))
     LEFT JOIN vw_competent_authority ON ((vw_competent_authority."DB_ID" = competentauthority_namespacetype.ore_id)))
  ORDER BY hydro_object.inspire_id_local_id, wkr_version.wkrv_id DESC;


--
-- Name: vw_oppervlaktewaterlichaam_upload_shape_v; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_oppervlaktewaterlichaam_upload_shape_v AS
 SELECT hydro_object.hdo_id AS owa_db_id,
    hydro_object.inspire_id_local_id AS owaident,
    hdo_names.name AS owanaam,
    watercourse."geometrySurface" AS geometrysurface,
    hydro_object.wkrv_id AS owa_versie,
    hydro_object2.hdo_id AS owm_db_id,
    hydro_object2.inspire_id_local_id AS owmident,
    hydro_object2.inspire_id_namespace AS namespac,
    vw_competent_authority."Identificatie" AS wbhcode,
    vw_competent_authority."Omschrijving" AS wbhnaam,
    water_body.is_article_7 AS owmcons,
    hdo_names2.name AS owmnaam,
    hdo2.inspire_id_local_id AS sgbident,
        CASE
            WHEN (surface_water_body.is_artificial = true) THEN 'Kunstmatig'::text
            WHEN (surface_water_body.is_heaviliy_modified = true) THEN 'Sterk veranderd'::text
            ELSE 'Natuurlijk'::text
        END AS owmstat,
    surface_water_body.area_value AS owmoppvl,
    surface_water_body.length_value AS owmlengt,
    type.code AS owmtype,
    typer.code AS owmtyped,
    water_body.level_of_detail AS schaal,
    management_regulation_or_restriction_zone.begin_designation AS geldig_b,
    management_regulation_or_restriction_zone.end_designation AS geldig_e
   FROM (((((((((((((watercourse
     LEFT JOIN hydro_object ON ((hydro_object.hdo_id = watercourse.wtc_id)))
     LEFT JOIN hdo_names ON ((hdo_names.hdo_id = hydro_object.hdo_id)))
     LEFT JOIN hydro_object hydro_object2 ON ((hydro_object2.hdo_id = hydro_object.related_hdo_id)))
     LEFT JOIN hdo_names hdo_names2 ON ((hdo_names2.hdo_id = hydro_object2.hdo_id)))
     LEFT JOIN wkr_version ON ((wkr_version.wkrv_id = hydro_object.wkrv_id)))
     LEFT JOIN management_regulation_or_restriction_zone ON ((management_regulation_or_restriction_zone.mrz_id = hydro_object2.hdo_id)))
     LEFT JOIN water_body ON ((water_body.wbd_id = hydro_object2.hdo_id)))
     LEFT JOIN hydro_object hdo2 ON ((hdo2.hdo_id = water_body.rbd_id)))
     LEFT JOIN surface_water_body ON ((surface_water_body.swb_id = hydro_object2.hdo_id)))
     LEFT JOIN sw_typology_type type ON ((type.styp_id = surface_water_body.sw_typology_id)))
     LEFT JOIN sw_typology_type typer ON ((typer.styp_id = surface_water_body.sw_target_typology_id)))
     LEFT JOIN competentauthority_namespacetype ON ((competentauthority_namespacetype.ns_id = hydro_object2.inspire_id_namespace)))
     LEFT JOIN vw_competent_authority ON ((vw_competent_authority."DB_ID" = competentauthority_namespacetype.ore_id)))
  ORDER BY hydro_object.inspire_id_local_id, wkr_version.wkrv_id DESC;


--
-- Name: vw_oppervlaktewaterlichamen_aquo; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_oppervlaktewaterlichamen_aquo AS
 SELECT owa.identificatie AS "Waterlichaam.Identificatie",
    owa.omschrijving AS "Waterlichaam.Omschrijving",
    owa.waterbeheerder_code AS "Waterbeheerder.Code",
    wl.waterbeheerder_naam AS "Waterbeheerder.Omschrijving",
        CASE owa.stroomgebieddistrict
            WHEN 'NLRNNO'::text THEN 'NLRN'::text
            WHEN 'NLRNOO'::text THEN 'NLRN'::text
            WHEN 'NLRNWE'::text THEN 'NLRN'::text
            WHEN 'NLRNMI'::text THEN 'NLRN'::text
            WHEN 'NLSC'::text THEN 'NLSC'::text
            WHEN 'NLMS'::text THEN 'NLMS'::text
            WHEN 'NLEM'::text THEN 'NLEM'::text
            WHEN 'NLRN'::text THEN 'NLRN'::text
            ELSE NULL::text
        END AS "Stroomgebieddistrict.Code",
    owa.stroomgebieddistrict AS "Deelstroomgebieddistrict.Code",
        CASE
            WHEN (owa.is_kunstmatig = true) THEN 'Kunstmatig'::text
            WHEN (owa.is_sterk_veranderd = true) THEN 'Sterk veranderd'::text
            ELSE 'Natuurlijk'::text
        END AS status,
    owa.type AS "Waterlichaam.type",
    owa.referentietype AS "Waterlichaam.doeltype",
        CASE owa.drinkwateronttrekking_jn
            WHEN true THEN 'Drinkwateronttrekking'::text
            WHEN false THEN ''::text
            ELSE NULL::text
        END AS "Drinkwateronttrekking",
    owa.versie
   FROM (vw_oppervlaktewaterlichamen owa
     JOIN vw_waterlichamen wl ON ((wl.db_id = owa.db_id)))
  ORDER BY owa.waterbeheerder_code;


--
-- Name: vw_oppervlaktewaterlichamen_g; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_oppervlaktewaterlichamen_g AS
 SELECT hydro_object.hdo_id AS db_id,
    hydro_object.inspire_id_local_id AS identificatie,
    hydro_object.inspire_id_namespace AS waterbeheerder_code,
    water_body.is_article_7 AS drinkwateronttrekking_jn,
    hdo_names.name AS omschrijving,
    management_regulation_or_restriction_zone.geometry,
    hdo2.inspire_id_local_id AS stroomgebieddistrict,
    hydro_object.wkrv_id AS versie,
    surface_water_body.is_artificial AS is_kunstmatig,
    surface_water_body.is_heaviliy_modified AS is_sterk_veranderd,
    type.code AS type,
    typer.code AS referentietype
   FROM (((((((management_regulation_or_restriction_zone
     JOIN hydro_object ON ((management_regulation_or_restriction_zone.mrz_id = hydro_object.hdo_id)))
     LEFT JOIN hdo_names ON ((hdo_names.hdo_id = hydro_object.hdo_id)))
     JOIN water_body ON ((water_body.wbd_id = hydro_object.hdo_id)))
     JOIN hydro_object hdo2 ON ((hdo2.hdo_id = water_body.rbd_id)))
     JOIN surface_water_body ON ((surface_water_body.swb_id = hydro_object.hdo_id)))
     JOIN sw_typology_type type ON ((type.styp_id = surface_water_body.sw_typology_id)))
     JOIN sw_typology_type typer ON ((typer.styp_id = surface_water_body.sw_target_typology_id)));


--
-- Name: vw_oppervlaktewaterlichamen_g_type; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_oppervlaktewaterlichamen_g_type AS
 SELECT hydro_object.hdo_id AS db_id,
    hydro_object.inspire_id_local_id AS identificatie,
    hydro_object.inspire_id_namespace AS waterbeheerder_code,
    water_body.is_article_7 AS drinkwateronttrekking_jn,
    hdo_names.name AS omschrijving,
    management_regulation_or_restriction_zone.geometry,
    geometrytype(management_regulation_or_restriction_zone.geometry) AS geometry_type,
    hdo2.inspire_id_local_id AS stroomgebieddistrict,
    hydro_object.wkrv_id AS versie,
    surface_water_body.is_artificial AS is_kunstmatig,
    surface_water_body.is_heaviliy_modified AS is_sterk_veranderd,
    type.code AS type,
    typer.code AS referentietype
   FROM (((((((management_regulation_or_restriction_zone
     JOIN hydro_object ON ((management_regulation_or_restriction_zone.mrz_id = hydro_object.hdo_id)))
     JOIN water_body ON ((water_body.wbd_id = hydro_object.hdo_id)))
     LEFT JOIN hdo_names ON ((hdo_names.hdo_id = hydro_object.hdo_id)))
     JOIN hydro_object hdo2 ON ((hdo2.hdo_id = water_body.rbd_id)))
     JOIN surface_water_body ON ((surface_water_body.swb_id = hydro_object.hdo_id)))
     JOIN sw_typology_type type ON ((type.styp_id = surface_water_body.sw_typology_id)))
     JOIN sw_typology_type typer ON ((typer.styp_id = surface_water_body.sw_target_typology_id)));


--
-- Name: vw_oppervlaktewaterlichamen_g_type_simple; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_oppervlaktewaterlichamen_g_type_simple AS
 SELECT hydro_object.hdo_id AS db_id,
    hydro_object.inspire_id_local_id AS identificatie,
    hydro_object.inspire_id_namespace AS waterbeheerder_code,
    water_body.is_article_7 AS drinkwateronttrekking_jn,
    hdo_names.name AS omschrijving,
    st_simplify(management_regulation_or_restriction_zone.geometry, (100)::double precision) AS geometry,
    geometrytype(management_regulation_or_restriction_zone.geometry) AS geometry_type,
    hdo2.inspire_id_local_id AS stroomgebieddistrict,
    hydro_object.wkrv_id AS versie,
    surface_water_body.is_artificial AS is_kunstmatig,
    surface_water_body.is_heaviliy_modified AS is_sterk_veranderd,
    type.code AS type,
    typer.code AS referentietype
   FROM (((((((management_regulation_or_restriction_zone
     JOIN hydro_object ON ((management_regulation_or_restriction_zone.mrz_id = hydro_object.hdo_id)))
     JOIN water_body ON ((water_body.wbd_id = hydro_object.hdo_id)))
     LEFT JOIN hdo_names ON ((hdo_names.hdo_id = hydro_object.hdo_id)))
     JOIN hydro_object hdo2 ON ((hdo2.hdo_id = water_body.rbd_id)))
     JOIN surface_water_body ON ((surface_water_body.swb_id = hydro_object.hdo_id)))
     JOIN sw_typology_type type ON ((type.styp_id = surface_water_body.sw_typology_id)))
     JOIN sw_typology_type typer ON ((typer.styp_id = surface_water_body.sw_target_typology_id)));


--
-- Name: vw_oppervlaktewaterlichamen_shape; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_oppervlaktewaterlichamen_shape AS
 SELECT hydro_object.hdo_id AS db_id,
    hydro_object.inspire_id_local_id AS owmident,
    hydro_object.inspire_id_namespace AS namespac,
    vw_competent_authority."Omschrijving" AS wbhcode,
    water_body.is_article_7 AS owmcons,
    hdo_names.name AS owmnaam,
    management_regulation_or_restriction_zone.geometry,
    hdo2.inspire_id_local_id AS sgbident,
        CASE
            WHEN (surface_water_body.is_artificial = true) THEN 'Kunstmatig'::text
            WHEN (surface_water_body.is_heaviliy_modified = true) THEN 'Sterk veranderd'::text
            ELSE 'Natuurlijk'::text
        END AS owmstat,
    surface_water_body.area_value AS oppvte,
    surface_water_body.length_value AS lengte,
    type.code AS owmtype,
    typer.code AS owmtyped,
    water_body.level_of_detail AS schaal,
    management_regulation_or_restriction_zone.begin_designation AS geldig_b,
    management_regulation_or_restriction_zone.end_designation AS geldig_e
   FROM ((((((((((hydro_object
     LEFT JOIN hdo_names ON ((hdo_names.hdo_id = hydro_object.hdo_id)))
     JOIN wkr_version ON ((wkr_version.wkrv_id = hydro_object.wkrv_id)))
     JOIN management_regulation_or_restriction_zone ON ((management_regulation_or_restriction_zone.mrz_id = hydro_object.hdo_id)))
     JOIN water_body ON ((water_body.wbd_id = hydro_object.hdo_id)))
     JOIN hydro_object hdo2 ON ((hdo2.hdo_id = water_body.rbd_id)))
     JOIN surface_water_body ON ((surface_water_body.swb_id = hydro_object.hdo_id)))
     JOIN sw_typology_type type ON ((type.styp_id = surface_water_body.sw_typology_id)))
     JOIN sw_typology_type typer ON ((typer.styp_id = surface_water_body.sw_target_typology_id)))
     LEFT JOIN competentauthority_namespacetype ON ((competentauthority_namespacetype.ns_id = hydro_object.inspire_id_namespace)))
     LEFT JOIN vw_competent_authority ON ((vw_competent_authority."DB_ID" = competentauthority_namespacetype.ore_id)))
  ORDER BY hydro_object.inspire_id_local_id, wkr_version.wkrv_id DESC;


--
-- Name: vw_ow_onttrekking; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_ow_onttrekking AS
 SELECT hydro_object.hdo_id AS "DB_ID",
    hydro_object.inspire_id_local_id AS "Identificatie",
    hdo_names.name AS omschrijving,
    sw_abstraction_point.waterabstraction_from AS "OntrekkingsPunt",
    sw_abstraction_point.swat_id AS "REWAB_Code",
    sw_abstraction_type.description AS "Onttrekking_Type",
    wkr_version.wkrv_id AS wkr_versie,
    wkr_version.begin_lifespan_version AS wkr_beginversie,
    wkr_version.end_lifespan_version AS wkr_eindversie
   FROM ((((((hydro_object
     LEFT JOIN hdo_names ON ((hdo_names.hdo_id = hydro_object.hdo_id)))
     JOIN abstraction_point ON ((hydro_object.hdo_id = abstraction_point.asp_id)))
     JOIN sw_abstraction_point ON ((hydro_object.hdo_id = sw_abstraction_point.sasp_id)))
     JOIN rewab_type ON ((rewab_type.rwb_id = sw_abstraction_point.rewab_id)))
     JOIN sw_abstraction_type ON ((sw_abstraction_type.swat_id = sw_abstraction_point.swat_id)))
     JOIN wkr_version ON ((wkr_version.wkrv_id = hydro_object.wkrv_id)))
  ORDER BY hydro_object.inspire_id_local_id, wkr_version.wkrv_id DESC;


--
-- Name: vw_ow_onttrekking_g; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_ow_onttrekking_g AS
 SELECT hydro_object.hdo_id AS "DB_ID",
    hydro_object.inspire_id_local_id AS "Identificatie",
    hdo_names.name AS omschrijving,
    abstraction_point.geometry,
    sw_abstraction_point.waterabstraction_from AS "OntrekkingsPunt",
    sw_abstraction_point.swat_id AS "REWAB_Code",
    sw_abstraction_type.description AS "Onttrekking_Type",
    hydro_object.wkrv_id AS wkr_versie,
    (hdo2.stroomgebieddistrict)::text AS "Stroomgebieddistrict"
   FROM ((((((hydro_object
     LEFT JOIN hdo_names ON ((hdo_names.hdo_id = hydro_object.hdo_id)))
     JOIN abstraction_point ON ((hydro_object.hdo_id = abstraction_point.asp_id)))
     JOIN sw_abstraction_point ON ((hydro_object.hdo_id = sw_abstraction_point.sasp_id)))
     JOIN rewab_type ON ((rewab_type.rwb_id = sw_abstraction_point.rewab_id)))
     JOIN sw_abstraction_type ON ((sw_abstraction_type.swat_id = sw_abstraction_point.swat_id)))
     LEFT JOIN vw_oppervlaktewaterlichamen hdo2 ON ((hdo2.db_id = abstraction_point.wbd_id)));


--
-- Name: vw_ow_onttrekking_shape; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_ow_onttrekking_shape AS
 SELECT DISTINCT ON (hydro_object.inspire_id_local_id) hydro_object.inspire_id_local_id AS "IDENT",
    hdo_names.name AS "NAAM",
    abstraction_point.geometry,
    sw_abstraction_point.waterabstraction_from AS "ONTTRPNT",
    sw_abstraction_point.swat_id AS "ONTRSRTCOD",
    sw_abstraction_type.description AS "ONTTRSRT"
   FROM ((((((hydro_object
     LEFT JOIN hdo_names ON ((hdo_names.hdo_id = hydro_object.hdo_id)))
     JOIN abstraction_point ON ((hydro_object.hdo_id = abstraction_point.asp_id)))
     JOIN sw_abstraction_point ON ((hydro_object.hdo_id = sw_abstraction_point.sasp_id)))
     JOIN rewab_type ON ((rewab_type.rwb_id = sw_abstraction_point.rewab_id)))
     JOIN sw_abstraction_type ON ((sw_abstraction_type.swat_id = sw_abstraction_point.swat_id)))
     JOIN wkr_version ON ((wkr_version.wkrv_id = hydro_object.wkrv_id)))
  ORDER BY hydro_object.inspire_id_local_id, wkr_version.wkrv_id DESC;


--
-- Name: vw_ow_oordelen_chemisch_verontreinigd; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_ow_oordelen_chemisch_verontreinigd AS
 SELECT hydro_object.hdo_id AS "Waterlichaam_DB_ID",
    swb_yearly_status.year_of_status AS "Rapportagejaar",
    vw_waargenomen_eigenschap_db_id."ChemischeStof_DB_ID",
    vw_waargenomen_eigenschap_db_id."ChemischeStof_Omschrijving",
    classification_type.description AS "Oordeel",
    eu_monitoring_goal_type.code AS "Oordeel_Type_Code",
    waarde_bepalings_methode_type.code AS "WaardebepalingsMethode_Code",
    ssg.ssge_id AS "ChemischeToestandGroep"
   FROM (((((((swb_yearly_status
     LEFT JOIN hydro_object ON ((hydro_object.hdo_id = swb_yearly_status.swb_id)))
     LEFT JOIN sw_chemical_substance_status ON ((sw_chemical_substance_status.sys_id = swb_yearly_status.sys_id)))
     LEFT JOIN classification_type ON ((sw_chemical_substance_status.swcs_id = classification_type.cls_id)))
     LEFT JOIN vw_waargenomen_eigenschap_db_id ON ((vw_waargenomen_eigenschap_db_id."DB_ID" = sw_chemical_substance_status.opt_id)))
     LEFT JOIN waarde_bepalings_methode_type ON ((waarde_bepalings_methode_type.wbpm_id = sw_chemical_substance_status.wbpm_id)))
     LEFT JOIN eu_monitoring_goal_type ON ((eu_monitoring_goal_type.eumg_id = sw_chemical_substance_status.eumg_id)))
     LEFT JOIN ( SELECT substance_group_element.chs_id,
            substance_group_element.ssge_id
           FROM substance_group_element
          WHERE (substance_group_element.ssge_id = ANY (ARRAY[2907, 2908]))) ssg ON ((ssg.chs_id = vw_waargenomen_eigenschap_db_id."ChemischeStof_DB_ID")));


--
-- Name: vw_ow_toetswaarden_chemisch_verontreinigd; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_ow_toetswaarden_chemisch_verontreinigd AS
 SELECT observation.obs_id AS "Toetswaarde_DB_ID",
    swb_yearly_status.sys_id AS "Status_DB_ID",
    hydro_object.hdo_id AS "Waterlichaam_DB_ID",
    swb_yearly_status.year_of_status AS "Rapportagejaar",
    vw_waargenomen_eigenschap_db_id."DB_ID" AS "Waargenomen_Eigenschap_DB_ID",
    vw_waargenomen_eigenschap_db_id."ChemischeStof_code",
    vw_waargenomen_eigenschap_db_id."ChemischeStof_Omschrijving",
    observation.numeric_value AS "Numerieke_waarde",
    bepaling_grens_type.omschrijving AS "Bepalingsgrens",
    eenheid_type.code AS "Eenheid_Code",
    eenheid_type.omschrijving AS "Eenheid_Omschrijving",
    eu_monitoring_goal_type.eumg_id AS "Oordeel_Type_DB_ID",
    eu_monitoring_goal_type.code AS "Oordeel_Type_Code",
    eu_monitoring_goal_type.description AS "Oordeel_Type_Omschrijving",
    waarde_bepalings_methode_type.code AS "Waardebepalingsmethode_Code",
    waarde_bepalings_methode_type.omschrijving AS "Waardebepalingsmethode_Omschrijving",
    ssg_2907.ssge_id AS "ChemischeToestandGroep",
    ssg_2908.ssge_id AS "OverigeVerontreinigendeStoffen"
   FROM (((((((((((swb_yearly_status
     LEFT JOIN sw_testing_conclusion ON ((swb_yearly_status.sys_id = sw_testing_conclusion.sys_id)))
     LEFT JOIN observation ON ((sw_testing_conclusion.stcc_id = observation.obs_id)))
     LEFT JOIN vw_waargenomen_eigenschap_db_id ON ((vw_waargenomen_eigenschap_db_id."DB_ID" = observation.observed_property_type)))
     LEFT JOIN eenheid_type ON ((eenheid_type.eenh_id = observation.numeric_value_uom_id)))
     LEFT JOIN bepaling_grens_type ON ((bepaling_grens_type.bpg_id = observation.limit_symbol_id)))
     LEFT JOIN observation_process ON ((observation_process.obp_id = observation.result_nature_id)))
     LEFT JOIN waarde_bepalings_methode_type ON ((waarde_bepalings_methode_type.wbpm_id = observation_process.wbpm_id)))
     LEFT JOIN hydro_object ON ((hydro_object.hdo_id = swb_yearly_status.swb_id)))
     LEFT JOIN eu_monitoring_goal_type ON ((eu_monitoring_goal_type.eumg_id = sw_testing_conclusion.eumg_id)))
     LEFT JOIN ( SELECT substance_group_element.chs_id,
            substance_group_element.ssge_id
           FROM substance_group_element
          WHERE (substance_group_element.ssge_id = 2907)) ssg_2907 ON ((ssg_2907.chs_id = vw_waargenomen_eigenschap_db_id."ChemischeStof_DB_ID")))
     LEFT JOIN ( SELECT substance_group_element.chs_id,
            substance_group_element.ssge_id
           FROM substance_group_element
          WHERE (substance_group_element.ssge_id = 2908)) ssg_2908 ON ((ssg_2908.chs_id = vw_waargenomen_eigenschap_db_id."ChemischeStof_DB_ID")))
  ORDER BY vw_waargenomen_eigenschap_db_id."ChemischeStof_Omschrijving", vw_waargenomen_eigenschap_db_id."DB_ID",
        CASE
            WHEN ((eu_monitoring_goal_type.code)::text = 'TT_OM'::text) THEN 1
            WHEN ((eu_monitoring_goal_type.code)::text = 'OM'::text) THEN 2
            WHEN ((eu_monitoring_goal_type.code)::text = 'TT'::text) THEN 3
            ELSE 4
        END;


--
-- Name: vw_parameter; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_parameter AS
 SELECT typering_type.typ_id AS db_id,
    typering_type.code,
    typering_type.omschrijving,
    'typering'::text AS type
   FROM typering_type
UNION ALL
 SELECT object_type.obj_id AS db_id,
    object_type.code,
    object_type.omschrijving,
    'object'::text AS type
   FROM object_type
UNION ALL
 SELECT grootheid_type.grh_id AS db_id,
    grootheid_type.code,
    grootheid_type.omschrijving,
    'grootheid'::text AS type
   FROM grootheid_type
UNION ALL
 SELECT chemische_stof_type.chs_id AS db_id,
    chemische_stof_type.code,
    chemische_stof_type.naam AS omschrijving,
    'chemischeStof'::text AS type
   FROM chemische_stof_type
  ORDER BY 4;


--
-- Name: vw_prognose; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_prognose AS
 SELECT wb_prognosis.wbpr_id AS "DB_ID",
    hydro_object.hdo_id AS "Waterlichaam_DB_ID",
    hydro_object.inspire_id_local_id AS "Waterlichaam_Identificatie",
    wb_prognosis.year AS "PrognoseJaar",
    vw_waargenomen_eigenschap."DB_ID" AS "Waargenomen_Eigenschap_DB_ID",
    vw_waargenomen_eigenschap."Tpering_Code",
    vw_waargenomen_eigenschap."Typering_Omschrijving",
    vw_waargenomen_eigenschap."Grootheid_Code",
    vw_waargenomen_eigenschap."Grootheid_Omschrijving",
    vw_waargenomen_eigenschap."ChemischeStof_code",
    vw_waargenomen_eigenschap."ChemischeStof_Omschrijving",
    vw_waargenomen_eigenschap."Hoedanigheid_Code",
    vw_waargenomen_eigenschap."Hoedanigheid_Omschrijving",
    classification_type.cls_id AS "Prognose_DB_ID",
    classification_type.description AS "Prognose_Omschrijving"
   FROM (((wb_prognosis
     JOIN hydro_object ON ((wb_prognosis.swb_id = hydro_object.hdo_id)))
     JOIN vw_waargenomen_eigenschap ON ((vw_waargenomen_eigenschap."DB_ID" = wb_prognosis.opt_id)))
     JOIN classification_type ON ((classification_type.cls_id = wb_prognosis.cls_id)))
  ORDER BY hydro_object.inspire_id_local_id, wb_prognosis.year, vw_waargenomen_eigenschap."Tpering_Code", vw_waargenomen_eigenschap."Grootheid_Code", vw_waargenomen_eigenschap."ChemischeStof_code";


--
-- Name: vw_prognose_csv; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_prognose_csv AS
 SELECT hydro_object.inspire_id_local_id AS "Waterlichaam.Identificatie",
    ('NL'::text || hydro_object.inspire_id_namespace) AS "Namespace",
    hydro_object.wkrv_id AS "Versie",
    wb_prognosis.year AS "PrognoseJaar",
    vw_waargenomen_eigenschap."Tpering_Code" AS "Typering.Code",
    vw_waargenomen_eigenschap."Typering_Omschrijving" AS "Typering.Omschrijving",
    vw_waargenomen_eigenschap."Grootheid_Code" AS "Grootheid.Code",
    vw_waargenomen_eigenschap."Grootheid_Omschrijving" AS "Grootheid.Omschrijving",
    vw_waargenomen_eigenschap."ChemischeStof_code" AS "ChemischeStof.Code",
    vw_waargenomen_eigenschap."ChemischeStof_Omschrijving" AS "ChemischeStof.Omschrijving",
    vw_waargenomen_eigenschap."Hoedanigheid_Code" AS "Hoedanigheid.Code",
    vw_waargenomen_eigenschap."Hoedanigheid_Omschrijving" AS "Hoedanigheid.Omschrijving",
    classification_type.description AS "Prognose"
   FROM (((wb_prognosis
     JOIN hydro_object ON ((wb_prognosis.swb_id = hydro_object.hdo_id)))
     JOIN vw_waargenomen_eigenschap ON ((vw_waargenomen_eigenschap."DB_ID" = wb_prognosis.opt_id)))
     JOIN classification_type ON ((classification_type.cls_id = wb_prognosis.cls_id)))
  ORDER BY hydro_object.inspire_id_local_id, wb_prognosis.year, vw_waargenomen_eigenschap."Tpering_Code", vw_waargenomen_eigenschap."Grootheid_Code", vw_waargenomen_eigenschap."ChemischeStof_code";


--
-- Name: vw_register_beschermdegebieden_aquo; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_register_beschermdegebieden_aquo AS
 SELECT hydro_object.inspire_id_local_id AS identificatie,
    hdo_names.name AS omschrijving,
    protected_area_type.description AS soort,
    wfd_protected_area.comment_value_status_prot_area AS richtlijn,
    hydro_object.wkrv_id AS versie
   FROM (((((hydro_object
     LEFT JOIN hdo_names ON ((hdo_names.hdo_id = hydro_object.hdo_id)))
     JOIN wkr_version ON ((wkr_version.wkrv_id = hydro_object.wkrv_id)))
     LEFT JOIN management_regulation_or_restriction_zone ON ((management_regulation_or_restriction_zone.mrz_id = hydro_object.hdo_id)))
     JOIN wfd_protected_area ON ((wfd_protected_area.wpa_id = hydro_object.hdo_id)))
     JOIN protected_area_type ON ((protected_area_type.pat_id = wfd_protected_area.protected_area_type_id)))
UNION ALL
 SELECT hydro_object.inspire_id_local_id AS identificatie,
    hdo_names.name AS omschrijving,
    'OnttrekkingMenselijkeConsumptie'::text AS soort,
    'Kaderrichtlijn Water (2000/60/EC), Artikel 7'::text AS richtlijn,
    hydro_object.wkrv_id AS versie
   FROM ((((hydro_object
     LEFT JOIN hdo_names ON ((hdo_names.hdo_id = hydro_object.hdo_id)))
     JOIN wkr_version ON ((wkr_version.wkrv_id = hydro_object.wkrv_id)))
     LEFT JOIN management_regulation_or_restriction_zone ON ((management_regulation_or_restriction_zone.mrz_id = hydro_object.hdo_id)))
     JOIN water_body ON ((water_body.wbd_id = hydro_object.hdo_id)))
  WHERE (water_body.is_article_7 IS TRUE);


--
-- Name: vw_register_beschermdegebieden_shape; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_register_beschermdegebieden_shape AS
 SELECT hydro_object.inspire_id_local_id AS besident,
    hdo_names.name AS besnaam,
    protected_area_type.description AS bessoort,
    wfd_protected_area.comment_value_status_prot_area AS richtlijn,
    mrz.geometry,
    hydro_object.wkrv_id AS versie,
    geometrytype(mrz.geometry) AS geometrytype,
    concat(row_number() OVER (ORDER BY hydro_object.inspire_id_local_id), hydro_object.hdo_id, hydro_object.inspire_id_local_id) AS "Unique_Key"
   FROM (((((hydro_object
     LEFT JOIN hdo_names ON ((hdo_names.hdo_id = hydro_object.hdo_id)))
     JOIN wkr_version ON ((wkr_version.wkrv_id = hydro_object.wkrv_id)))
     LEFT JOIN management_regulation_or_restriction_zone mrz ON ((mrz.mrz_id = hydro_object.hdo_id)))
     JOIN wfd_protected_area ON ((wfd_protected_area.wpa_id = hydro_object.hdo_id)))
     JOIN protected_area_type ON ((protected_area_type.pat_id = wfd_protected_area.protected_area_type_id)))
UNION ALL
 SELECT hydro_object.inspire_id_local_id AS besident,
    hdo_names.name AS besnaam,
    (('OnttrekkingMenselijkeConsumptie ('::text ||
        CASE
            WHEN ((hydro_object.hydro_object_type)::text = 'SurfaceWaterBody'::text) THEN 'Oppervlaktewater'::text
            ELSE 'Grondwater'::text
        END) || ')'::text) AS bessoort,
    'Kaderrichtlijn Water (2000/60/EC), Artikel 7'::text AS richtlijn,
    mrz.geometry,
    hydro_object.wkrv_id AS versie,
    geometrytype(mrz.geometry) AS geometrytype,
    concat(row_number() OVER (ORDER BY hydro_object.inspire_id_local_id), hydro_object.hdo_id, hydro_object.inspire_id_local_id) AS "Unique_Key"
   FROM ((((hydro_object
     LEFT JOIN hdo_names ON ((hdo_names.hdo_id = hydro_object.hdo_id)))
     JOIN wkr_version ON ((wkr_version.wkrv_id = hydro_object.wkrv_id)))
     LEFT JOIN management_regulation_or_restriction_zone mrz ON ((mrz.mrz_id = hydro_object.hdo_id)))
     JOIN water_body ON ((water_body.wbd_id = hydro_object.hdo_id)))
  WHERE (water_body.is_article_7 IS TRUE);


--
-- Name: vw_reportversion_for_crystal_reports; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_reportversion_for_crystal_reports AS
 SELECT report_version.rpv_id AS db_id,
    (object_state_type.decsription)::character varying AS rapportagestatus,
    (reporting_period.description)::character varying AS rapportageperiode,
    reporting_period.period_start AS rapportageperiodebegin,
    reporting_period.period_end AS rapportageperiodeeind,
    legislation_reference_type.lgr_id AS rapportagebasis_id,
    legislation_reference_type.legal_name AS rapportagebasis_omschrijving,
    report_version.begin_lifespan_version AS beginrapportage,
    report_version.end_lifespan_version AS eindrapportage,
    report_version.is_public_data AS publiektoegankelijk,
    wkr_version.wkrv_id AS wkr_versie,
    wkr_version.begin_lifespan_version AS wkr_beginversie,
    wkr_version.end_lifespan_version AS wkr_eindversie,
    (((((reporting_period.description || ' ('::text) || object_state_type.decsription) || ') - '::text) || wkr_version.wkrv_id))::character varying AS version_details
   FROM ((legislation_reference_type
     JOIN reporting_period ON ((legislation_reference_type.lgr_id = reporting_period.leg_ref_id)))
     FULL JOIN ((report_version
     JOIN object_state_type ON ((report_version.ost_id = object_state_type.ost_id)))
     FULL JOIN wkr_version ON ((report_version.wkrv_id = wkr_version.wkrv_id))) ON ((reporting_period.rpp_id = report_version.rpp_id)))
  ORDER BY report_version.rpv_id, reporting_period.period_start;


--
-- Name: vw_status_motivering_waterlichaam; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_status_motivering_waterlichaam AS
 SELECT scm.wbsc_id,
    scm.wbd_id,
    scm.scm_id,
    scm.opt_id,
    scm.year_initial,
    scm.year_status,
    owl.identificatie,
    owl.omschrijving,
    owl.waterbeheerder_code,
    scm.last_change_time
   FROM (wb_status_change_motivation scm
     JOIN vw_oppervlaktewaterlichamen owl ON ((owl.db_id = scm.wbd_id)))
  ORDER BY scm.wbsc_id;


--
-- Name: zone_type_code; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE zone_type_code (
    ztc_id integer NOT NULL,
    code character varying(50) NOT NULL,
    description character varying(90) NOT NULL
);


--
-- Name: vw_stroomgebieddistricten; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_stroomgebieddistricten AS
 SELECT hydro_object.hdo_id AS "DB_ID",
    hydro_object.inspire_id_local_id AS "Identificatie",
    hdo_names.name AS omschrijving,
    river_basin_disrict.area_value AS "Oppervlakte_NumeriekeWaarde",
    eenheid_type.code AS "Oppervlakte_Eenheid_Code",
    eenheid_type.omschrijving AS "Oppervlakte_Eenheid_Omschrijving",
    zone_type_code.code AS "StroomgebiedType_Code",
    zone_type_code.description AS "StroomgebiedType_Omschrijving",
    wkr_version.wkrv_id AS wkr_versie,
    wkr_version.begin_lifespan_version AS wkr_beginversie,
    wkr_version.end_lifespan_version AS wkr_eindversie,
    hydro_object.related_hdo_id AS "Gerelateerd_HydroObject"
   FROM ((((((hydro_object
     LEFT JOIN hdo_names ON ((hdo_names.hdo_id = hydro_object.hdo_id)))
     JOIN management_regulation_or_restriction_zone ON ((hydro_object.hdo_id = management_regulation_or_restriction_zone.mrz_id)))
     JOIN river_basin_disrict ON ((hydro_object.hdo_id = river_basin_disrict.rbd_id)))
     JOIN eenheid_type ON ((eenheid_type.eenh_id = river_basin_disrict.area_uom_id)))
     JOIN wkr_version ON ((wkr_version.wkrv_id = hydro_object.wkrv_id)))
     JOIN zone_type_code ON ((zone_type_code.ztc_id = management_regulation_or_restriction_zone.specialised_zone_type_id)))
  WHERE (river_basin_disrict.international_rbd IS NOT NULL);


--
-- Name: vw_stroomgebieddistricten_g; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_stroomgebieddistricten_g AS
 SELECT hydro_object.hdo_id AS "DB_ID",
    hydro_object.inspire_id_local_id AS "Identificatie",
    hdo_names.name AS omschrijving,
    management_regulation_or_restriction_zone.geometry,
    zone_type_code.code AS "StroomgebiedType_Code",
    zone_type_code.description AS "StroomgebiedType_Omschrijving",
    hydro_object.wkrv_id AS wkr_versie
   FROM ((((hydro_object
     LEFT JOIN hdo_names ON ((hdo_names.hdo_id = hydro_object.hdo_id)))
     JOIN management_regulation_or_restriction_zone ON ((hydro_object.hdo_id = management_regulation_or_restriction_zone.mrz_id)))
     JOIN river_basin_disrict ON ((hydro_object.hdo_id = river_basin_disrict.rbd_id)))
     JOIN zone_type_code ON ((zone_type_code.ztc_id = management_regulation_or_restriction_zone.specialised_zone_type_id)))
  WHERE (river_basin_disrict.international_rbd IS NOT NULL);


--
-- Name: vw_stroomgebieddistricten_inspire; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_stroomgebieddistricten_inspire AS
 SELECT ((((('NL.WBHCODE.'::text || hydro_object.inspire_id_namespace) || '.'::text) || (hydro_object.inspire_id_local_id)::text) || '.'::text) || hydro_object.wkrv_id) AS "InspireId",
    ('NL.WBHCODE.'::text || hydro_object.inspire_id_namespace) AS "inspireId.namespace",
    hydro_object.inspire_id_local_id AS "inspireId.localId",
    hydro_object.wkrv_id AS "inspireId.Version",
    hydro_object.inspire_id_local_id AS "thematicId",
    hdo_names.name AS "name.text",
    hdo_names.language AS "name.languate",
    'http://inspire.ec.europa.eu/codelist/NativenessValue/endonym'::text AS "name.nativeness",
    'http://inspire.ec.europa.eu/codelist/NameStatusValue/official'::text AS "name.nameStatus",
    namespace_type.descrption AS "name.sourceOfName",
    mrz.geometry_etrs89 AS st_transform,
    geometrytype(mrz.geometry_etrs89) AS geometry_type,
    'http://inspire.ec.europa.eu/codelist/ZoneTypeCode/waterBodyForWFD'::text AS "zoneType",
    hydro_object.hydro_object_type AS "specialisedZoneType",
    'http://inspire.ec.europa.eu/codelist/EnvironmentalDomain/water'::text AS "environmentalDomain",
    'Ministry of Infrastruture and Environment'::text AS "competentAuthority.organisationName",
    'http://inspire.ec.europa.eu/codelist/RelatedPartyRoleValue/authority'::text AS "competentAuthority.role",
    wkr_version.begin_lifespan_version AS "beginLifeSpanVersion",
    wkr_version.end_lifespan_version AS "endLifeSpanVersion",
    'Directive 2000/60/EC of the European Parliament and of the Council establishing a framework for the Community action in the field of water policy'::text AS "legalBasis.name",
    'Water Framework Directive'::text AS "legalBasis.shortName",
    '2000-10-23'::text AS "legalBasis.date",
    'http://eur-lex.europa.eu/LexUriServ/LexUriServ.do?uri=CELEX:32000L0060:EN:NOT'::text AS "legalBasis.link",
    '2000/60/EC'::text AS "legalBasis.identificationNumber",
    'European'::text AS "legalBasis.level"
   FROM (((((management_regulation_or_restriction_zone mrz
     JOIN river_basin_disrict ON ((mrz.mrz_id = river_basin_disrict.rbd_id)))
     JOIN hydro_object ON ((hydro_object.hdo_id = mrz.mrz_id)))
     LEFT JOIN hdo_names ON ((hdo_names.hdo_id = mrz.mrz_id)))
     JOIN wkr_version ON ((wkr_version.wkrv_id = hydro_object.wkrv_id)))
     JOIN namespace_type ON ((namespace_type.ns_id = hydro_object.inspire_id_namespace)))
  WHERE (river_basin_disrict.international_rbd IS NOT NULL);


--
-- Name: vw_stroomgebieddistricten_shape; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_stroomgebieddistricten_shape AS
 SELECT DISTINCT ON (hydro_object.inspire_id_local_id) hydro_object.inspire_id_local_id AS "IDENT",
    hdo_names.name AS "NAAM",
    management_regulation_or_restriction_zone.geometry,
    river_basin_disrict.area_value AS "OPP",
    eenheid_type.code AS "OPP_EENH"
   FROM (((((hydro_object
     LEFT JOIN hdo_names ON ((hdo_names.hdo_id = hydro_object.hdo_id)))
     JOIN management_regulation_or_restriction_zone ON ((hydro_object.hdo_id = management_regulation_or_restriction_zone.mrz_id)))
     JOIN river_basin_disrict ON ((hydro_object.hdo_id = river_basin_disrict.rbd_id)))
     JOIN eenheid_type ON ((eenheid_type.eenh_id = river_basin_disrict.area_uom_id)))
     JOIN wkr_version ON ((wkr_version.wkrv_id = hydro_object.wkrv_id)))
  WHERE (river_basin_disrict.international_rbd IS NOT NULL)
  ORDER BY hydro_object.inspire_id_local_id, wkr_version.wkrv_id DESC;


--
-- Name: vw_tijdwaarden_bestrijdingsmiddelen_csv; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_tijdwaarden_bestrijdingsmiddelen_csv AS
 SELECT monitoring_object.inspire_id_local_id AS "Meetpunt.identificatie",
    monitoring_object.name AS "Meetpunt.omschrijving",
    namespace_type_1.code AS "Waterbeheerder.code",
    namespace_type_1.descrption AS "Waterbeheerder.omschrijving",
    typering_type.code AS "Typering.code",
    typering_type.omschrijving AS "Typering.omschrijving",
    grootheid_type.code AS "Grootheid.code",
    grootheid_type.omschrijving AS "Grootheid.omschrijving",
    chemische_stof_type.code AS "Parameter.code",
    chemische_stof_type.naam AS "Parameter.omschrijving",
    chemische_stof_type.cas_nr AS "Chemischestof.casnr",
    object_type.code AS "Object.code",
    object_type.omschrijving AS "Object.omschrijving",
    eenheid_type.code AS "Eenheid.code",
    eenheid_type.omschrijving AS "Eenheid.omschrijving",
    hoedanigheid_type.code AS "Hoedanigheid.code",
    hoedanigheid_type.omschrijving AS "Hoedanigheid.omschrijving",
    compartiment_type.code AS "Compartiment.code",
    compartiment_type.description AS "Compartiment.omschrijving",
    waarde_bewerkings_methode_type.code AS "Waardebewerkingsmethode.code",
    waarde_bewerkings_methode_type.omschrijving AS "Waardebewerkingsmethode.omschrijving",
    classification_group_type.code AS "Classificatie.waarde",
    classification_group_type.description AS "Classificatie.groep",
    to_char(observation.phenomenon_time_begin, 'YYYY-MM-DD'::text) AS "Begindatum",
    to_char(observation.phenomenon_time_begin, 'HH24:MM:SS'::text) AS "Begintijd",
    to_char(observation.phenomenon_time_end, 'YYYY-MM-DD'::text) AS "Einddatum",
    to_char(observation.phenomenon_time_end, 'HH24:MM:SS'::text) AS "Eindtijd",
    bepaling_grens_type.omschrijving AS "Limietsymbool",
    observation.numeric_value AS "Numeriekewaarde",
    observation.description AS "Alfanumeriekewaarde",
    kwaliteitsoordeel_type.code AS "Kwaliteitsoordeel.code",
    kwaliteitsoordeel_type.description AS "Kwaliteitsoordeel.omschrijving",
    observation.remarks AS "Opmerking",
    monitoring_object.mno_id AS "Meetpunt.DB_ID",
    observation.last_change_time,
    date_part('year'::text, observation.phenomenon_time_begin) AS "Rapportagejaar",
    monitoring_object.wkrv_id AS "Versie"
   FROM (((((((((((((((((observed_property_type
     JOIN observation ON ((observation.observed_property_type = observed_property_type.opt_id)))
     LEFT JOIN object_group ON ((object_group.ojg_id = observed_property_type.object_group_id)))
     LEFT JOIN typering_type ON ((typering_type.typ_id = observed_property_type.indicator_id)))
     LEFT JOIN grootheid_type ON ((observed_property_type.quantity_id = grootheid_type.grh_id)))
     JOIN monitored_compartiment ON ((monitored_compartiment.mno_id = observation.mno_id)))
     JOIN compartiment_type ON ((monitored_compartiment.cptm_id = compartiment_type.cptm_id)))
     LEFT JOIN substance_group_element ON ((observed_property_type.substance_group_id = substance_group_element.ssge_id)))
     LEFT JOIN chemische_stof_type ON ((chemische_stof_type.chs_id = substance_group_element.chs_id)))
     JOIN kwaliteitsoordeel_type ON ((observation.quality_indicator_id = kwaliteitsoordeel_type.kwod_id)))
     LEFT JOIN classification_group_type ON ((observation.classified_result_id = classification_group_type.clsg_id)))
     JOIN eenheid_type ON ((observation.numeric_value_uom_id = eenheid_type.eenh_id)))
     LEFT JOIN bepaling_grens_type ON ((observation.limit_symbol_id = bepaling_grens_type.bpg_id)))
     LEFT JOIN waarde_bewerkings_methode_type ON ((observation.value_processing_method_id = waarde_bewerkings_methode_type.wbm_id)))
     LEFT JOIN object_group_element ON ((object_group.ojg_id = object_group_element.ojg_id)))
     LEFT JOIN object_type ON ((object_group_element.obj_id = object_type.obj_id)))
     JOIN (namespace_type namespace_type_1
     LEFT JOIN monitoring_object ON ((namespace_type_1.ns_id = monitoring_object.inspire_id_namespace_id))) ON ((observation.mno_id = monitoring_object.mno_id)))
     JOIN hoedanigheid_type ON (((hoedanigheid_type.hdh_id = observed_property_type.hoedanigheid_id) AND ((chemische_stof_type.code)::text IN ( SELECT vw_chemischestof_groepen."ChemischeStof_Code"
           FROM vw_chemischestof_groepen
          WHERE ((vw_chemischestof_groepen."Groepsnaam")::text = 'Bestrijdingsmiddelen CML'::text))) AND (observation.numeric_value IS NOT NULL))))
  ORDER BY namespace_type_1.code, monitoring_object.inspire_id_local_id;


--
-- Name: vw_tijdwaarden_bestrijdingsmiddelen_g; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_tijdwaarden_bestrijdingsmiddelen_g AS
 SELECT observation.obs_id AS db_id,
    monitoring_object.mno_id AS meetpunt_identificatie_db_id,
    monitoring_object.inspire_id_local_id AS "Meetpunt.identificatie",
    monitoring_object.name AS "Meetpunt.omschrijving",
    st_x(st_transform(monitoring_object.geometry, 28992)) AS "GeometriePunt.X_RD",
    st_y(st_transform(monitoring_object.geometry, 28992)) AS "GeometriePunt.Y_RD",
    monitoring_object.geometry,
    namespace_type_1.code AS "Waterbeheerder.code",
    namespace_type_1.descrption AS "Waterbeheerder.omschrijving",
    typering_type.code AS "Typering.code",
    typering_type.omschrijving AS "Typering.omschrijving",
    grootheid_type.code AS "Grootheid.code",
    grootheid_type.omschrijving AS "Grootheid.omschrijving",
    chemische_stof_type.code AS "Parameter.code",
    chemische_stof_type.naam AS "Parameter.omschrijving",
    chemische_stof_type.cas_nr AS "Chemischestof.casnr",
    object_type.code AS "Object.code",
    object_type.omschrijving AS "Object.omschrijving",
    eenheid_type.code AS "Eenheid.code",
    eenheid_type.omschrijving AS "Eenheid.omschrijving",
    hoedanigheid_type.code AS "Hoedanigheid.code",
    hoedanigheid_type.omschrijving AS "Hoedanigheid.omschrijving",
    compartiment_type.code AS "Compartiment.code",
    compartiment_type.description AS "Compartiment.omschrijving",
    waarde_bewerkings_methode_type.code AS "Waardebewerkingsmethode.code",
    waarde_bewerkings_methode_type.omschrijving AS "Waardebewerkingsmethode.omschrijving",
    ''::text AS "Waardebepalingsmethode.code",
    ''::text AS "Waardebepalingsmethode.omschrijving",
    classification_group_type.code AS "Classificatie.waarde",
    classification_group_type.description AS "Classificatie.groep",
    to_char(observation.phenomenon_time_begin, 'YYYY-MM-DD'::text) AS "Begindatum",
    to_char(observation.phenomenon_time_begin, 'HH24:MM:SS'::text) AS "Begintijd",
    to_char(observation.phenomenon_time_end, 'YYYY-MM-DD'::text) AS "Einddatum",
    to_char(observation.phenomenon_time_end, 'HH24:MM:SS'::text) AS "Eindtijd",
    bepaling_grens_type.omschrijving AS "Limietsymbool",
    observation.numeric_value AS "Numeriekewaarde",
    observation.description AS "Alfanumeriekewaarde",
    kwaliteitsoordeel_type.code AS "Kwaliteitsoordeel.code",
    kwaliteitsoordeel_type.description AS "Kwaliteitsoordeel.omschrijving",
    observation.remarks AS "Opmerking",
    sg."Groepsnaam" AS "SubstanceGroup.omschrijving",
    sg."Type" AS "SubstanceGroup.type",
    observation.last_change_time,
    monitoring_object.wkrv_id
   FROM (((((((((((((((((((observed_property_type
     JOIN observation ON ((observation.observed_property_type = observed_property_type.opt_id)))
     LEFT JOIN object_group ON ((object_group.ojg_id = observed_property_type.object_group_id)))
     LEFT JOIN typering_type ON ((typering_type.typ_id = observed_property_type.indicator_id)))
     LEFT JOIN grootheid_type ON ((observed_property_type.quantity_id = grootheid_type.grh_id)))
     JOIN monitored_compartiment ON ((monitored_compartiment.mno_id = observation.mno_id)))
     JOIN compartiment_type ON ((monitored_compartiment.cptm_id = compartiment_type.cptm_id)))
     JOIN (chemische_stof_type
     LEFT JOIN substance_group_element ON ((chemische_stof_type.chs_id = substance_group_element.chs_id))) ON ((observed_property_type.substance_group_id = substance_group_element.ssge_id)))
     LEFT JOIN kwaliteitsoordeel_type ON ((observation.quality_indicator_id = kwaliteitsoordeel_type.kwod_id)))
     LEFT JOIN classification_group_type ON ((observation.classified_result_id = classification_group_type.clsg_id)))
     JOIN eenheid_type ON ((observation.numeric_value_uom_id = eenheid_type.eenh_id)))
     LEFT JOIN bepaling_grens_type ON ((observation.limit_symbol_id = bepaling_grens_type.bpg_id)))
     JOIN waarde_bewerkings_methode_type ON ((observation.value_processing_method_id = waarde_bewerkings_methode_type.wbm_id)))
     LEFT JOIN object_group_element ON ((object_group.ojg_id = object_group_element.ojg_id)))
     LEFT JOIN object_type ON ((object_group_element.obj_id = object_type.obj_id)))
     JOIN (namespace_type namespace_type_1
     LEFT JOIN monitoring_object ON ((namespace_type_1.ns_id = monitoring_object.inspire_id_namespace_id))) ON ((observation.mno_id = monitoring_object.mno_id)))
     LEFT JOIN taxa_group_element ON ((observed_property_type.taxa_group_id = taxa_group_element.txg_id)))
     LEFT JOIN taxon_type ON ((observed_property_type.taxa_group_id = taxa_group_element.txg_id)))
     JOIN hoedanigheid_type ON ((hoedanigheid_type.hdh_id = observed_property_type.hoedanigheid_id)))
     JOIN vw_chemischestof_groepen sg ON (((sg."ChemischeStof_Code")::text = (chemische_stof_type.code)::text)))
  WHERE (((sg."Groepsnaam")::text = 'Bestrijdingsmiddelen CML'::text) AND (monitoring_object.wkrv_id = 7) AND (st_geometrytype(monitoring_object.geometry) = 'ST_Point'::text))
  ORDER BY namespace_type_1.code, monitoring_object.inspire_id_local_id, chemische_stof_type.code, (to_char(observation.phenomenon_time_begin, 'YYYY-MM-DD'::text)) DESC;


--
-- Name: vw_tijdwaarden_csv; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_tijdwaarden_csv AS
 SELECT monitoring_object.inspire_id_local_id AS "Meetpunt.identificatie",
    monitoring_object.name AS "Meetpunt.omschrijving",
    ca.namespace_id AS "Waterbeheerder.code",
    ore.naam AS "Waterbeheerder.omschrijving",
    typering_type.code AS "Typering.code",
    typering_type.omschrijving AS "Typering.omschrijving",
    grootheid_type.code AS "Grootheid.code",
    grootheid_type.omschrijving AS "Grootheid.omschrijving",
    chemische_stof_type.code AS "Parameter.code",
    chemische_stof_type.naam AS "Parameter.omschrijving",
    chemische_stof_type.cas_nr AS "Chemischestof.casnr",
    txn.omschrijving AS "Taxon.omschrijving",
    object_type.code AS "Object.code",
    object_type.omschrijving AS "Object.omschrijving",
    eenheid_type.code AS "Eenheid.code",
    eenheid_type.omschrijving AS "Eenheid.omschrijving",
    hoedanigheid_type.code AS "Hoedanigheid.code",
    hoedanigheid_type.omschrijving AS "Hoedanigheid.omschrijving",
    compartiment_type.code AS "Compartiment.code",
    compartiment_type.description AS "Compartiment.omschrijving",
    waarde_bewerkings_methode_type.code AS "Waardebewerkingsmethode.code",
    waarde_bewerkings_methode_type.omschrijving AS "Waardebewerkingsmethode.omschrijving",
    classification_group_type.code AS "Classificatie.waarde",
    classification_group_type.description AS "Classificatie.groep",
    to_char(observation.phenomenon_time_begin, 'YYYY-MM-DD'::text) AS "Begindatum",
    to_char(observation.phenomenon_time_begin, 'HH24:MM:SS'::text) AS "Begintijd",
    to_char(observation.phenomenon_time_end, 'YYYY-MM-DD'::text) AS "Einddatum",
    to_char(observation.phenomenon_time_end, 'HH24:MM:SS'::text) AS "Eindtijd",
    bepaling_grens_type.omschrijving AS "Limietsymbool",
    observation.numeric_value AS "Numeriekewaarde",
    observation.description AS "Alfanumeriekewaarde",
    kwaliteitsoordeel_type.code AS "Kwaliteitsoordeel.code",
    kwaliteitsoordeel_type.description AS "Kwaliteitsoordeel.omschrijving",
    observation.remarks AS "Opmerking",
    monitoring_object.mno_id AS "Meetpunt.DB_ID",
    date_part('year'::text, observation.phenomenon_time_begin) AS "Rapportagejaar",
    observation.last_change_time,
    monitoring_object.wkrv_id AS "Versie"
   FROM (((((((((((((((((((((((observation
     JOIN observed_property_type ON ((observation.observed_property_type = observed_property_type.opt_id)))
     LEFT JOIN grootheid_type ON ((observed_property_type.quantity_id = grootheid_type.grh_id)))
     LEFT JOIN object_group ON ((object_group.ojg_id = observed_property_type.object_group_id)))
     LEFT JOIN object_group_element ON ((object_group.ojg_id = object_group_element.ojg_id)))
     LEFT JOIN object_type ON ((object_group_element.obj_id = object_type.obj_id)))
     LEFT JOIN typering_type ON ((typering_type.typ_id = observed_property_type.indicator_id)))
     JOIN monitored_compartiment ON ((monitored_compartiment.mno_id = observation.mno_id)))
     JOIN compartiment_type ON ((monitored_compartiment.cptm_id = compartiment_type.cptm_id)))
     LEFT JOIN substance_group_element ON ((observed_property_type.substance_group_id = substance_group_element.ssge_id)))
     LEFT JOIN chemische_stof_type ON ((chemische_stof_type.chs_id = substance_group_element.chs_id)))
     LEFT JOIN kwaliteitsoordeel_type ON ((observation.quality_indicator_id = kwaliteitsoordeel_type.kwod_id)))
     LEFT JOIN classification_group_type ON ((observation.classified_result_id = classification_group_type.clsg_id)))
     JOIN eenheid_type ON ((observation.numeric_value_uom_id = eenheid_type.eenh_id)))
     LEFT JOIN bepaling_grens_type ON ((observation.limit_symbol_id = bepaling_grens_type.bpg_id)))
     LEFT JOIN taxa_group txg ON ((txg.txg_id = observed_property_type.taxa_group_id)))
     LEFT JOIN taxa_group_element txe ON ((txe.txg_id = txg.txg_id)))
     LEFT JOIN taxon_type txn ON ((txn.txn_id = txe.txg_id)))
     LEFT JOIN waarde_bewerkings_methode_type ON ((observation.value_processing_method_id = waarde_bewerkings_methode_type.wbm_id)))
     JOIN (namespace_type namespace_type_1
     JOIN monitoring_object ON ((namespace_type_1.ns_id = monitoring_object.inspire_id_namespace_id))) ON ((observation.mno_id = monitoring_object.mno_id)))
     JOIN hoedanigheid_type ON ((hoedanigheid_type.hdh_id = observed_property_type.hoedanigheid_id)))
     JOIN competentauthority_namespacetype cns ON ((cns.ns_id = namespace_type_1.ns_id)))
     JOIN organisatorische_eenheid ore ON ((ore.ore_id = cns.ore_id)))
     JOIN competent_authority ca ON ((ca.ore_id = ore.ore_id)));


--
-- Name: vw_tijdwaarden_csv_test; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_tijdwaarden_csv_test AS
 SELECT monitoring_object.inspire_id_local_id AS "Meetpunt.identificatie",
    monitoring_object.name AS "Meetpunt.omschrijving",
    ca.namespace_id AS "Waterbeheerder.code",
    ore.naam AS "Waterbeheerder.omschrijving",
    typering_type.code AS "Typering.code",
    typering_type.omschrijving AS "Typering.omschrijving",
    grootheid_type.code AS "Grootheid.code",
    grootheid_type.omschrijving AS "Grootheid.omschrijving",
    chemische_stof_type.code AS "Parameter.code",
    chemische_stof_type.naam AS "Parameter.omschrijving",
    chemische_stof_type.cas_nr AS "Chemischestof.casnr",
    txn.omschrijving AS "Taxon.omschrijving",
    object_type.code AS "Object.code",
    object_type.omschrijving AS "Object.omschrijving",
    eenheid_type.code AS "Eenheid.code",
    eenheid_type.omschrijving AS "Eenheid.omschrijving",
    hoedanigheid_type.code AS "Hoedanigheid.code",
    hoedanigheid_type.omschrijving AS "Hoedanigheid.omschrijving",
    compartiment_type.code AS "Compartiment.code",
    compartiment_type.description AS "Compartiment.omschrijving",
    waarde_bewerkings_methode_type.code AS "Waardebewerkingsmethode.code",
    waarde_bewerkings_methode_type.omschrijving AS "Waardebewerkingsmethode.omschrijving",
    classification_group_type.code AS "Classificatie.waarde",
    classification_group_type.description AS "Classificatie.groep",
    to_char(observation.phenomenon_time_begin, 'YYYY-MM-DD'::text) AS "Begindatum",
    to_char(observation.phenomenon_time_begin, 'HH24:MM:SS'::text) AS "Begintijd",
    to_char(observation.phenomenon_time_end, 'YYYY-MM-DD'::text) AS "Einddatum",
    to_char(observation.phenomenon_time_end, 'HH24:MM:SS'::text) AS "Eindtijd",
    bepaling_grens_type.omschrijving AS "Limietsymbool",
    observation.numeric_value AS "Numeriekewaarde",
    to_char(observation.numeric_value, '99999D99999999'::text) AS "Numerieke_waarde",
    observation.description AS "Alfanumeriekewaarde",
    kwaliteitsoordeel_type.code AS "Kwaliteitsoordeel.code",
    kwaliteitsoordeel_type.description AS "Kwaliteitsoordeel.omschrijving",
    observation.remarks AS "Opmerking",
    monitoring_object.mno_id AS "Meetpunt.DB_ID",
    date_part('year'::text, observation.phenomenon_time_begin) AS "Rapportagejaar",
    observation.last_change_time,
    monitoring_object.wkrv_id AS "Versie"
   FROM (((((((((((((((((((((((observation
     JOIN observed_property_type ON ((observation.observed_property_type = observed_property_type.opt_id)))
     LEFT JOIN grootheid_type ON ((observed_property_type.quantity_id = grootheid_type.grh_id)))
     LEFT JOIN object_group ON ((object_group.ojg_id = observed_property_type.object_group_id)))
     LEFT JOIN object_group_element ON ((object_group.ojg_id = object_group_element.ojg_id)))
     LEFT JOIN object_type ON ((object_group_element.obj_id = object_type.obj_id)))
     LEFT JOIN typering_type ON ((typering_type.typ_id = observed_property_type.indicator_id)))
     JOIN monitored_compartiment ON ((monitored_compartiment.mno_id = observation.mno_id)))
     JOIN compartiment_type ON ((monitored_compartiment.cptm_id = compartiment_type.cptm_id)))
     LEFT JOIN substance_group_element ON ((observed_property_type.substance_group_id = substance_group_element.ssge_id)))
     LEFT JOIN chemische_stof_type ON ((chemische_stof_type.chs_id = substance_group_element.chs_id)))
     LEFT JOIN kwaliteitsoordeel_type ON ((observation.quality_indicator_id = kwaliteitsoordeel_type.kwod_id)))
     LEFT JOIN classification_group_type ON ((observation.classified_result_id = classification_group_type.clsg_id)))
     JOIN eenheid_type ON ((observation.numeric_value_uom_id = eenheid_type.eenh_id)))
     LEFT JOIN bepaling_grens_type ON ((observation.limit_symbol_id = bepaling_grens_type.bpg_id)))
     LEFT JOIN taxa_group txg ON ((txg.txg_id = observed_property_type.taxa_group_id)))
     LEFT JOIN taxa_group_element txe ON ((txe.txg_id = txg.txg_id)))
     LEFT JOIN taxon_type txn ON ((txn.txn_id = txe.txg_id)))
     LEFT JOIN waarde_bewerkings_methode_type ON ((observation.value_processing_method_id = waarde_bewerkings_methode_type.wbm_id)))
     JOIN (namespace_type namespace_type_1
     JOIN monitoring_object ON ((namespace_type_1.ns_id = monitoring_object.inspire_id_namespace_id))) ON ((observation.mno_id = monitoring_object.mno_id)))
     JOIN hoedanigheid_type ON ((hoedanigheid_type.hdh_id = observed_property_type.hoedanigheid_id)))
     JOIN competentauthority_namespacetype cns ON ((cns.ns_id = namespace_type_1.ns_id)))
     JOIN organisatorische_eenheid ore ON ((ore.ore_id = cns.ore_id)))
     JOIN competent_authority ca ON ((ca.ore_id = ore.ore_id)));


--
-- Name: vw_tijdwaarden_g; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_tijdwaarden_g AS
 SELECT monitoring_object.inspire_id_local_id AS "Meetpunt.identificatie",
    monitoring_object.name AS "Meetpunt.omschrijving",
    namespace_type_1.code AS "Waterbeheerder.code",
    namespace_type_1.descrption AS "Waterbeheerder.omschrijving",
    typering_type.code AS "Typering.code",
    typering_type.omschrijving AS "Typering.omschrijving",
    grootheid_type.code AS "Grootheid.code",
    grootheid_type.omschrijving AS "Grootheid.omschrijving",
    chemische_stof_type.code AS "Parameter.code",
    chemische_stof_type.naam AS "Parameter.omschrijving",
    chemische_stof_type.cas_nr AS "Chemischestof.casnr",
    object_type.code AS "Object.code",
    object_type.omschrijving AS "Object.omschrijving",
    eenheid_type.code AS "Eenheid.code",
    eenheid_type.omschrijving AS "Eenheid.omschrijving",
    hoedanigheid_type.code AS "Hoedanigheid.code",
    hoedanigheid_type.omschrijving AS "Hoedanigheid.omschrijving",
    compartiment_type.code AS "Compartiment.code",
    compartiment_type.description AS "Compartiment.omschrijving",
    waarde_bewerkings_methode_type.code AS "Waardebewerkingsmethode.code",
    waarde_bewerkings_methode_type.omschrijving AS "Waardebewerkingsmethode.omschrijving",
    classification_group_type.code AS "Classificatie.waarde",
    classification_group_type.description AS "Classificatie.groep",
    to_char(observation.phenomenon_time_begin, 'YYYY-MM-DD'::text) AS "Begindatum",
    to_char(observation.phenomenon_time_begin, 'HH24:MM:SS'::text) AS "Begintijd",
    to_char(observation.phenomenon_time_end, 'YYYY-MM-DD'::text) AS "Einddatum",
    to_char(observation.phenomenon_time_end, 'HH24:MM:SS'::text) AS "Eindtijd",
    bepaling_grens_type.omschrijving AS "Limietsymbool",
    observation.numeric_value AS "Numeriekewaarde",
    observation.description AS "Alfanumeriekewaarde",
    kwaliteitsoordeel_type.code AS "Kwaliteitsoordeel.code",
    kwaliteitsoordeel_type.description AS "Kwaliteitsoordeel.omschrijving",
    observation.remarks AS "Opmerking",
    observation.last_change_time,
    monitoring_object.wkrv_id
   FROM (((((((((((((((((observation
     JOIN observed_property_type ON ((observation.observed_property_type = observed_property_type.opt_id)))
     LEFT JOIN grootheid_type ON ((observed_property_type.quantity_id = grootheid_type.grh_id)))
     LEFT JOIN object_group ON ((object_group.ojg_id = observed_property_type.object_group_id)))
     LEFT JOIN object_group_element ON ((object_group.ojg_id = object_group_element.ojg_id)))
     LEFT JOIN object_type ON ((object_group_element.obj_id = object_type.obj_id)))
     LEFT JOIN typering_type ON ((typering_type.typ_id = observed_property_type.indicator_id)))
     JOIN monitored_compartiment ON ((monitored_compartiment.mno_id = observation.mno_id)))
     JOIN compartiment_type ON ((monitored_compartiment.cptm_id = compartiment_type.cptm_id)))
     LEFT JOIN substance_group_element ON ((observed_property_type.substance_group_id = substance_group_element.ssge_id)))
     LEFT JOIN chemische_stof_type ON ((chemische_stof_type.chs_id = substance_group_element.chs_id)))
     JOIN kwaliteitsoordeel_type ON ((observation.quality_indicator_id = kwaliteitsoordeel_type.kwod_id)))
     LEFT JOIN classification_group_type ON ((observation.classified_result_id = classification_group_type.clsg_id)))
     JOIN eenheid_type ON ((observation.numeric_value_uom_id = eenheid_type.eenh_id)))
     LEFT JOIN bepaling_grens_type ON ((observation.limit_symbol_id = bepaling_grens_type.bpg_id)))
     LEFT JOIN waarde_bewerkings_methode_type ON ((observation.value_processing_method_id = waarde_bewerkings_methode_type.wbm_id)))
     JOIN (namespace_type namespace_type_1
     JOIN monitoring_object ON ((namespace_type_1.ns_id = monitoring_object.inspire_id_namespace_id))) ON ((observation.mno_id = monitoring_object.mno_id)))
     JOIN hoedanigheid_type ON ((hoedanigheid_type.hdh_id = observed_property_type.hoedanigheid_id)))
  WHERE (monitoring_object.wkrv_id <> 3);


--
-- Name: vw_tijdwaarden_mnlso_csv; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_tijdwaarden_mnlso_csv AS
 SELECT monitoring_object.inspire_id_local_id AS "Meetpunt.identificatie",
    monitoring_object.name AS "Meetpunt.omschrijving",
    namespace_type_1.code AS "Waterbeheerder.code",
    namespace_type_1.descrption AS "Waterbeheerder.omschrijving",
    typering_type.code AS "Typering.code",
    typering_type.omschrijving AS "Typering.omschrijving",
    grootheid_type.code AS "Grootheid.code",
    grootheid_type.omschrijving AS "Grootheid.omschrijving",
    chemische_stof_type.code AS "Parameter.code",
    chemische_stof_type.naam AS "Parameter.omschrijving",
    chemische_stof_type.cas_nr AS "Chemischestof.casnr",
    object_type.code AS "Object.code",
    object_type.omschrijving AS "Object.omschrijving",
    eenheid_type.code AS "Eenheid.code",
    eenheid_type.omschrijving AS "Eenheid.omschrijving",
    hoedanigheid_type.code AS "Hoedanigheid.code",
    hoedanigheid_type.omschrijving AS "Hoedanigheid.omschrijving",
    compartiment_type.code AS "Compartiment.code",
    compartiment_type.description AS "Compartiment.omschrijving",
    waarde_bewerkings_methode_type.code AS "Waardebewerkingsmethode.code",
    waarde_bewerkings_methode_type.omschrijving AS "Waardebewerkingsmethode.omschrijving",
    classification_group_type.code AS "Classificatie.waarde",
    classification_group_type.description AS "Classificatie.groep",
    to_char(observation.phenomenon_time_begin, 'YYYY-MM-DD'::text) AS "Begindatum",
    to_char(observation.phenomenon_time_begin, 'HH24:MM:SS'::text) AS "Begintijd",
    to_char(observation.phenomenon_time_end, 'YYYY-MM-DD'::text) AS "Einddatum",
    to_char(observation.phenomenon_time_end, 'HH24:MM:SS'::text) AS "Eindtijd",
    bepaling_grens_type.omschrijving AS "Limietsymbool",
    observation.numeric_value AS "Numeriekewaarde",
    observation.description AS "Alfanumeriekewaarde",
    kwaliteitsoordeel_type.code AS "Kwaliteitsoordeel.code",
    kwaliteitsoordeel_type.description AS "Kwaliteitsoordeel.omschrijving",
    observation.remarks AS "Opmerking",
    observation.last_change_time,
    monitoring_object.wkrv_id
   FROM ((((((((((((((((((observed_property_type
     JOIN observation ON ((observation.observed_property_type = observed_property_type.opt_id)))
     LEFT JOIN object_group ON ((object_group.ojg_id = observed_property_type.object_group_id)))
     LEFT JOIN typering_type ON ((typering_type.typ_id = observed_property_type.indicator_id)))
     LEFT JOIN grootheid_type ON ((observed_property_type.quantity_id = grootheid_type.grh_id)))
     JOIN monitored_compartiment ON ((monitored_compartiment.mno_id = observation.mno_id)))
     JOIN compartiment_type ON ((monitored_compartiment.cptm_id = compartiment_type.cptm_id)))
     LEFT JOIN substance_group_element ON ((observed_property_type.substance_group_id = substance_group_element.ssge_id)))
     LEFT JOIN chemische_stof_type ON ((chemische_stof_type.chs_id = substance_group_element.chs_id)))
     JOIN kwaliteitsoordeel_type ON ((observation.quality_indicator_id = kwaliteitsoordeel_type.kwod_id)))
     LEFT JOIN classification_group_type ON ((observation.classified_result_id = classification_group_type.clsg_id)))
     JOIN eenheid_type ON ((observation.numeric_value_uom_id = eenheid_type.eenh_id)))
     LEFT JOIN bepaling_grens_type ON ((observation.limit_symbol_id = bepaling_grens_type.bpg_id)))
     LEFT JOIN waarde_bewerkings_methode_type ON ((observation.value_processing_method_id = waarde_bewerkings_methode_type.wbm_id)))
     LEFT JOIN object_group_element ON ((object_group.ojg_id = object_group_element.ojg_id)))
     LEFT JOIN object_type ON ((object_group_element.obj_id = object_type.obj_id)))
     JOIN (namespace_type namespace_type_1
     LEFT JOIN monitoring_object ON ((namespace_type_1.ns_id = monitoring_object.inspire_id_namespace_id))) ON ((observation.mno_id = monitoring_object.mno_id)))
     JOIN hoedanigheid_type ON (((hoedanigheid_type.hdh_id = observed_property_type.hoedanigheid_id) AND ((chemische_stof_type.code)::text IN ( SELECT vw_chemischestof_groepen."ChemischeStof_Code"
           FROM vw_chemischestof_groepen
          WHERE (vw_chemischestof_groepen."DB_ID" = 3127))) AND ((kwaliteitsoordeel_type.code)::text = '00'::text) AND ((observation.numeric_value IS NOT NULL) OR (observation.description IS NOT NULL)))))
     JOIN network_facility ON (((network_facility.emf_id = monitoring_object.mno_id) AND (network_facility.emn_id = ANY (ARRAY[111773, 111768, 20002])))))
  ORDER BY namespace_type_1.code, monitoring_object.inspire_id_local_id, chemische_stof_type.code, (to_char(observation.phenomenon_time_begin, 'YYYY-MM-DD'::text)) DESC;


--
-- Name: vw_toestand_achteruitgang_owl_dgrw; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_toestand_achteruitgang_owl_dgrw AS
 WITH ssg AS (
         SELECT substance_group_element.chs_id,
            substance_group_element.ssge_id,
                CASE
                    WHEN (substance_group_element.ssge_id = 2908) THEN 'SVS_STOF'::text
                    ELSE
                    CASE
                        WHEN (substance_group_element.ssge_id = 3149) THEN 'UBIQUITAIR'::text
                        ELSE 'NIET_UBIQUITAIR'::text
                    END
                END AS "CATEGORIE"
           FROM substance_group_element
          WHERE (substance_group_element.ssge_id = ANY (ARRAY[2908, 3150, 3149]))
        ), krw_kwal AS (
         SELECT ((wfd_qe_swtype.opt_id || '_'::text) || wfd_qe_swtype.swt_id) AS opt_swt,
            wfd_qe_swtype.name,
                CASE
                    WHEN (wfd_qe_swtype.part_of_opt_id = 4477) THEN 'CHEMT'::text
                    ELSE
                    CASE
                        WHEN (wfd_qe_swtype.part_of_opt_id = ANY (ARRAY[4480, 4514])) THEN 'FYSCHEM'::text
                        ELSE
                        CASE
                            WHEN (wfd_qe_swtype.part_of_opt_id = 4476) THEN 'BIOLT'::text
                            ELSE 'TOTAAL'::text
                        END
                    END
                END AS "CATEGORIE"
           FROM wfd_qe_swtype
          WHERE (wfd_qe_swtype.is_applicable = true)
        )
 SELECT swb_yearly_status.sys_id AS "DB_ID",
    hdo_swb.hdo_id AS "Waterlichaam_DB_ID",
    hdo_swb.inspire_id_local_id AS "Waterlichaam_identificatie",
    hdo_swb.wkrv_id AS "Waterlichaam_Versie",
    swb_yearly_status.year_of_status AS "Rapportagejaar",
    vw_waargenomen_eigenschap_db_id."DB_ID" AS "Waargenomen_Eigenschap_DB_ID",
        CASE
            WHEN (krw_kwal.name IS NOT NULL) THEN krw_kwal.name
            ELSE
            CASE
                WHEN (vw_waargenomen_eigenschap_db_id."ChemischeStof_Omschrijving" IS NOT NULL) THEN vw_waargenomen_eigenschap_db_id."ChemischeStof_Omschrijving"
                ELSE vw_waargenomen_eigenschap_db_id."Grootheid_Omschrijving"
            END
        END AS "Typering",
    classification_type.code AS "Oordeel_Code",
    classification_type.description AS "Oordeel",
    eu_monitoring_goal_type.eumg_id AS "Oordeel_Type_DB_ID",
    eu_monitoring_goal_type.code AS "Oordeel_Type_Code",
    eu_monitoring_goal_type.description AS "Oordeel_Type_Omschrijving",
    waarde_bepalings_methode_type.code AS "WaardebepalingsMethode_Code",
    waarde_bepalings_methode_type.omschrijving AS "WaardebepalingsMethode_Omschrijving",
    swb_yearly_status.comment_on_chemical_status AS "Toelichting_ChemischeStatus",
    swb_yearly_status.comment_on_ecological_status AS "Toelichting_EcologischeStatus",
    swb_yearly_status.motivation_4no_chemical_status AS "Motivatie_Geen_ChemischeStatus",
    swb_yearly_status.motivation_4no_ecological_status AS "Motivatie_Geen_EcologischeStatus",
    krw_kwal."CATEGORIE" AS "KWAL_ELEMENT",
    ssg."CATEGORIE" AS "STOF_CATEGORIE",
        CASE
            WHEN (wscm.scm_id IS NOT NULL) THEN 'A'::text
            ELSE NULL::text
        END AS "Motivatie_Achteruitgang"
   FROM ((((((((((swb_yearly_status
     LEFT JOIN hydro_object hdo_swb ON ((hdo_swb.hdo_id = swb_yearly_status.swb_id)))
     LEFT JOIN surface_water_body swb ON ((swb.swb_id = hdo_swb.hdo_id)))
     LEFT JOIN sw_chemical_substance_status ON ((sw_chemical_substance_status.sys_id = swb_yearly_status.sys_id)))
     LEFT JOIN classification_type ON ((sw_chemical_substance_status.swcs_id = classification_type.cls_id)))
     LEFT JOIN vw_waargenomen_eigenschap_db_id ON ((vw_waargenomen_eigenschap_db_id."DB_ID" = sw_chemical_substance_status.opt_id)))
     LEFT JOIN waarde_bepalings_methode_type ON ((waarde_bepalings_methode_type.wbpm_id = sw_chemical_substance_status.wbpm_id)))
     LEFT JOIN eu_monitoring_goal_type ON ((eu_monitoring_goal_type.eumg_id = sw_chemical_substance_status.eumg_id)))
     LEFT JOIN ssg ON ((vw_waargenomen_eigenschap_db_id."ChemischeStof_DB_ID" = ssg.chs_id)))
     LEFT JOIN krw_kwal ON ((((vw_waargenomen_eigenschap_db_id."DB_ID" || '_'::text) || swb.sw_target_typology_id) = krw_kwal.opt_swt)))
     LEFT JOIN wb_status_change_motivation wscm ON (((wscm.wbd_id = hdo_swb.hdo_id) AND (wscm.opt_id = vw_waargenomen_eigenschap_db_id."DB_ID") AND (wscm.year_status = swb_yearly_status.year_of_status) AND (wscm.scm_id = 4))))
  WHERE (((eu_monitoring_goal_type.code)::text = 'TT_OM'::text) AND (wscm.scm_id IS NOT NULL))
UNION ALL
 SELECT swb_yearly_status.sys_id AS "DB_ID",
    hdo_swb.hdo_id AS "Waterlichaam_DB_ID",
    hdo_swb.inspire_id_local_id AS "Waterlichaam_identificatie",
    hdo_swb.wkrv_id AS "Waterlichaam_Versie",
    swb_yearly_status.year_of_status AS "Rapportagejaar",
    vw_waargenomen_eigenschap_db_id."DB_ID" AS "Waargenomen_Eigenschap_DB_ID",
        CASE
            WHEN (krw_kwal.name IS NOT NULL) THEN krw_kwal.name
            ELSE
            CASE
                WHEN (vw_waargenomen_eigenschap_db_id."ChemischeStof_Omschrijving" IS NOT NULL) THEN vw_waargenomen_eigenschap_db_id."ChemischeStof_Omschrijving"
                ELSE vw_waargenomen_eigenschap_db_id."Grootheid_Omschrijving"
            END
        END AS "Typering",
    classification_type.code AS "Oordeel_Code",
    classification_type.description AS "Oordeel",
    eu_monitoring_goal_type.eumg_id AS "Oordeel_Type_DB_ID",
    eu_monitoring_goal_type.code AS "Oordeel_Type_Code",
    eu_monitoring_goal_type.description AS "Oordeel_Type_Omschrijving",
    waarde_bepalings_methode_type.code AS "WaardebepalingsMethode_Code",
    waarde_bepalings_methode_type.omschrijving AS "WaardebepalingsMethode_Omschrijving",
    swb_yearly_status.comment_on_chemical_status AS "Toelichting_ChemischeStatus",
    swb_yearly_status.comment_on_ecological_status AS "Toelichting_EcologischeStatus",
    swb_yearly_status.motivation_4no_chemical_status AS "Motivatie_Geen_ChemischeStatus",
    swb_yearly_status.motivation_4no_ecological_status AS "Motivatie_Geen_EcologischeStatus",
    krw_kwal."CATEGORIE" AS "KWAL_ELEMENT",
    NULL::text AS "STOF_CATEGORIE",
        CASE
            WHEN (wscm.scm_id IS NOT NULL) THEN 'A'::text
            ELSE NULL::text
        END AS "Motivatie_Achteruitgang"
   FROM (((((((((swb_yearly_status
     LEFT JOIN hydro_object hdo_swb ON ((hdo_swb.hdo_id = swb_yearly_status.swb_id)))
     LEFT JOIN surface_water_body swb ON ((swb.swb_id = hdo_swb.hdo_id)))
     LEFT JOIN sw_ecological_status ON ((sw_ecological_status.sys_id = swb_yearly_status.sys_id)))
     LEFT JOIN classification_type ON ((sw_ecological_status.swes_id = classification_type.cls_id)))
     LEFT JOIN vw_waargenomen_eigenschap_db_id ON ((vw_waargenomen_eigenschap_db_id."DB_ID" = sw_ecological_status.opt_id)))
     LEFT JOIN waarde_bepalings_methode_type ON ((waarde_bepalings_methode_type.wbpm_id = sw_ecological_status.wbpm_id)))
     LEFT JOIN eu_monitoring_goal_type ON ((eu_monitoring_goal_type.eumg_id = sw_ecological_status.eumg_id)))
     LEFT JOIN krw_kwal ON ((((vw_waargenomen_eigenschap_db_id."DB_ID" || '_'::text) || swb.sw_target_typology_id) = krw_kwal.opt_swt)))
     LEFT JOIN wb_status_change_motivation wscm ON (((wscm.wbd_id = hdo_swb.hdo_id) AND (wscm.opt_id = vw_waargenomen_eigenschap_db_id."DB_ID") AND (wscm.year_status = swb_yearly_status.year_of_status) AND (wscm.scm_id = 4))))
  WHERE (((eu_monitoring_goal_type.code)::text = 'TT_OM'::text) AND (wscm.scm_id IS NOT NULL))
  ORDER BY 1, 6, 13 DESC, 11 DESC;


--
-- Name: vw_toetsresultaat_gwl; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_toetsresultaat_gwl AS
 SELECT observation.obs_id AS "DB_ID",
    hydro_object.hdo_id AS "Waterlichaam_DB_ID",
    hydro_object.inspire_id_local_id AS "Waterlichaam_Identificatie",
    gwb_yearly_status.year_of_status AS "Rapportagejaar",
    vw_waargenomen_eigenschap."DB_ID" AS "Waargenomen_Eigenschap_DB_ID",
    vw_waargenomen_eigenschap."Tpering_Code",
    vw_waargenomen_eigenschap."Typering_Omschrijving",
    vw_waargenomen_eigenschap."Grootheid_Code",
    vw_waargenomen_eigenschap."Grootheid_Omschrijving",
    vw_waargenomen_eigenschap."ChemischeStof_code",
    vw_waargenomen_eigenschap."ChemischeStof_Omschrijving",
    vw_waargenomen_eigenschap."ChemischeStof_CASnr",
    waarde_bewerkings_methode_type.code AS "Waardebewerkingsmethode_Code",
    waarde_bewerkings_methode_type.omschrijving AS "Waardebewerkingsmethode_Omschrijving",
    observation.result_time AS "Begintijd_Toetsresultaat",
    observation.phenomenon_time_end AS "Eindtijd_Toetsreeks",
    observation.phenomenon_time_begin AS "Begintijd_Toetsreeks",
    observation.numeric_value AS "Numerieke_waarde",
    observation.numeric_value_significance AS "Numerieke_waarde_Significantie",
    bepaling_grens_type.omschrijving AS "Bepalingsgrens",
    eenheid_type.code AS "Eenheid_Code",
    eenheid_type.omschrijving AS "Eenheid_Omschrijving",
    vw_waargenomen_eigenschap."Hoedanigheid_Code",
    vw_waargenomen_eigenschap."Hoedanigheid_Omschrijving",
    kwaliteitsoordeel_type.code AS "KwaliteitsOordeel_Code",
    kwaliteitsoordeel_type.description AS "KwaliteitsOordeel_Omschrijving",
    eu_monitoring_goal_type.code AS "Oordeel_Type_Code",
    eu_monitoring_goal_type.description AS "Oordeel_Type_Omschrijving",
    waarde_bepalings_methode_type.code AS "Waardebepalingsmethode_Code",
    waarde_bepalings_methode_type.omschrijving AS "Waardebepalingsmethode_Omschrijving"
   FROM (((((((((((observation
     LEFT JOIN vw_waargenomen_eigenschap ON ((vw_waargenomen_eigenschap."DB_ID" = observation.observed_property_type)))
     LEFT JOIN waarde_bewerkings_methode_type ON ((waarde_bewerkings_methode_type.wbm_id = observation.value_processing_method_id)))
     LEFT JOIN eenheid_type ON ((eenheid_type.eenh_id = observation.numeric_value_uom_id)))
     LEFT JOIN bepaling_grens_type ON ((bepaling_grens_type.bpg_id = observation.limit_symbol_id)))
     LEFT JOIN kwaliteitsoordeel_type ON ((kwaliteitsoordeel_type.kwod_id = observation.quality_indicator_id)))
     LEFT JOIN observation_process ON ((observation_process.obp_id = observation.result_nature_id)))
     LEFT JOIN waarde_bepalings_methode_type ON ((waarde_bepalings_methode_type.wbpm_id = observation_process.wbpm_id)))
     LEFT JOIN gw_testing_conclusion ON ((gw_testing_conclusion.gtcc_id = observation.obs_id)))
     LEFT JOIN gwb_yearly_status ON ((gwb_yearly_status.gys_id = gw_testing_conclusion.gys_id)))
     LEFT JOIN hydro_object ON ((hydro_object.hdo_id = gwb_yearly_status.gwb_id)))
     LEFT JOIN eu_monitoring_goal_type ON ((eu_monitoring_goal_type.eumg_id = gw_testing_conclusion.eumg_id)))
  WHERE (gwb_yearly_status.year_of_status IS NOT NULL)
  ORDER BY hydro_object.hdo_id, vw_waargenomen_eigenschap."Tpering_Code", vw_waargenomen_eigenschap."Grootheid_Code", vw_waargenomen_eigenschap."ChemischeStof_code", gwb_yearly_status.year_of_status;


--
-- Name: vw_toetsresultaat_owm_aquo; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_toetsresultaat_owm_aquo AS
 SELECT DISTINCT ON (vw_toetsresultaat_owm."Waterlichaam_Identificatie", vw_toetsresultaat_owm."Tpering_Code", vw_toetsresultaat_owm."Grootheid_Code", vw_toetsresultaat_owm."ChemischeStof_code", vw_toetsresultaat_owm."Rapportagejaar", vw_toetsresultaat_owm."Waterlichaam_Versie", vw_toetsresultaat_owm."Begintijd_Toetsresultaat") vw_toetsresultaat_owm."Waterlichaam_Identificatie" AS "Waterlichaam.Identificatie",
    vw_toetsresultaat_owm."Rapportagejaar",
    vw_toetsresultaat_owm."Waterlichaam_Versie" AS "Versie",
    ('NL'::text || (nt.code)::text) AS "Namespace",
    nt.descrption AS "waterbeheerder.Omschrijving",
    vw_toetsresultaat_owm."Tpering_Code" AS "Typering.Code",
    vw_toetsresultaat_owm."Typering_Omschrijving" AS "Typering.Omschrijving",
    vw_toetsresultaat_owm."Grootheid_Code" AS "Grootheid.Code",
    vw_toetsresultaat_owm."Grootheid_Omschrijving" AS "Grootheid.Omschrijving",
    vw_toetsresultaat_owm."ChemischeStof_code" AS "ChemischeStof.Code",
    vw_toetsresultaat_owm."ChemischeStof_Omschrijving" AS "ChemischeStof.Omschrijving",
    vw_toetsresultaat_owm."ChemischeStof_CASnr" AS "ChemischeStof.CASnr",
    vw_toetsresultaat_owm."Waardebewerkingsmethode_Code" AS "Waterbewerkingsmethode.Code",
    vw_toetsresultaat_owm."Waardebewerkingsmethode_Omschrijving" AS "Waardebewerkingsmethode.Omschrijving",
    (vw_toetsresultaat_owm."Begintijd_Toetsresultaat")::date AS "Toetsresultaat.Begindatum",
    (vw_toetsresultaat_owm."Begintijd_Toetsresultaat")::time without time zone AS "Toetsresultaat.Begintijd",
    (vw_toetsresultaat_owm."Begintijd_Toetsreeks")::date AS "Toetsreeks.Begindatum",
    (vw_toetsresultaat_owm."Begintijd_Toetsreeks")::time without time zone AS "Toetsreeks.Begintijd",
    (vw_toetsresultaat_owm."Eindtijd_Toetsreeks")::date AS "Toetsreeks.Einddatum",
    (vw_toetsresultaat_owm."Eindtijd_Toetsreeks")::time without time zone AS "Toetsreeks.Eindtijd",
    vw_toetsresultaat_owm."Numerieke_waarde" AS "NumeriekeWaarde",
    vw_toetsresultaat_owm."Numerieke_waarde_Significantie" AS "NumeriekeWaarde.Significantie",
    vw_toetsresultaat_owm."Bepalingsgrens" AS "Limietsymbool",
    vw_toetsresultaat_owm."Eenheid_Code" AS "Eenheid.Code",
    vw_toetsresultaat_owm."Eenheid_Omschrijving" AS "Eenheid.Omschrijving",
    vw_toetsresultaat_owm."Hoedanigheid_Code" AS "Hoedanigheid.Code",
    vw_toetsresultaat_owm."Hoedanigheid_Omschrijving" AS "Hoedanigheid.Omschrijving",
    vw_toetsresultaat_owm."KwaliteitsOordeel_Code" AS "Kwaliteitsoordeel.Code",
    vw_toetsresultaat_owm."KwaliteitsOordeel_Omschrijving" AS "KwaliteitsOordeel.Omschrijving",
    vw_toetsresultaat_owm."Oordeel_Type_Code" AS "Oordeelsoort.Code",
        CASE vw_toetsresultaat_owm."Oordeel_Type_Code"
            WHEN 'TT_OM'::text THEN '1'::text
            WHEN 'TT'::text THEN '2'::text
            WHEN 'OM'::text THEN '3'::text
            ELSE NULL::text
        END AS volgordebepaling,
    vw_toetsresultaat_owm."Oordeel_Type_Omschrijving" AS "Oordeelsoort.Omschrijving",
    vw_toetsresultaat_owm."Waardebepalingsmethode_Code" AS "Waardebepalingsmethode.Code",
    vw_toetsresultaat_owm."Waardebepalingsmethode_Omschrijving" AS "Waardebepalingsmethode.Omschrijving"
   FROM (((vw_toetsresultaat_owm
     JOIN hydro_object hdo ON ((hdo.hdo_id = vw_toetsresultaat_owm."Waterlichaam_DB_ID")))
     JOIN competentauthority_namespacetype con ON ((con.ns_id = hdo.inspire_id_namespace)))
     JOIN namespace_type nt ON ((nt.ns_id = con.ns_id)))
  WHERE ((vw_toetsresultaat_owm."Numerieke_waarde" > (0)::double precision) AND ((vw_toetsresultaat_owm."KwaliteitsOordeel_Code")::text < '50'::text))
  ORDER BY vw_toetsresultaat_owm."Waterlichaam_Identificatie", vw_toetsresultaat_owm."Tpering_Code", vw_toetsresultaat_owm."Grootheid_Code", vw_toetsresultaat_owm."ChemischeStof_code", vw_toetsresultaat_owm."Rapportagejaar" DESC;


--
-- Name: vw_trends_gwl; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_trends_gwl AS
 SELECT pollutant_trend.pltr_id AS "DB_ID",
    hdo_gwb.hdo_id AS "Grondwaterlichaam_DB_ID",
    hdo_gwb.inspire_id_local_id AS "Grondwaterlichaam_Identificatie",
    hdon_gwb.name AS "Grondwaterlichaam_Omschrijving",
    gwb_yearly_status.year_of_status AS "Rapportagejaar",
    vw_waargenomen_eigenschap."DB_ID" AS "Waargenomen_Eigenschap_DB_ID",
    vw_waargenomen_eigenschap."Grootheid_Code",
    vw_waargenomen_eigenschap."Grootheid_Omschrijving",
    vw_waargenomen_eigenschap."ChemischeStof_code",
    vw_waargenomen_eigenschap."ChemischeStof_Omschrijving",
    vw_waargenomen_eigenschap."Hoedanigheid_Code",
    vw_waargenomen_eigenschap."Hoedanigheid_Omschrijving",
    classification_type.description AS "TypeTrend",
    pollutant_trend.comment AS "Opmerking"
   FROM (((((pollutant_trend
     LEFT JOIN gwb_yearly_status ON ((gwb_yearly_status.gys_id = pollutant_trend.gwys_id)))
     LEFT JOIN hydro_object hdo_gwb ON ((hdo_gwb.hdo_id = gwb_yearly_status.gwb_id)))
     LEFT JOIN hdo_names hdon_gwb ON ((hdo_gwb.hdo_id = hdon_gwb.hdo_id)))
     LEFT JOIN vw_waargenomen_eigenschap ON ((vw_waargenomen_eigenschap."DB_ID" = pollutant_trend.opt_id)))
     LEFT JOIN classification_type ON ((pollutant_trend.cls_id = classification_type.cls_id)));


--
-- Name: vw_voortgang_maatregelen_for_download; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_voortgang_maatregelen_for_download AS
 SELECT sub3.mtm_id,
    sub3.periodeid,
    sub3.waterbeheerderid,
    sub3.sgbpperiodeomschrijving,
    sub3.hoortbijmaatregel,
    sub3.naam,
    sub3.krwstroomgebieddistrictcode,
    sub3.waterbeheerdercode,
    sub3.rapportagejaar,
    sub3.omvangnumeriekewaarde,
    sub3.motivering,
    sub3.maatregelstatusomschrijving,
    sub3.omvangeenheidcode,
    sub3.mst_id
   FROM ( SELECT sub1.mtm_id,
            sub1.periodeid,
            sub1.waterbeheerderid,
            sub1.sgbpperiodeomschrijving,
            sub1.hoortbijmaatregel,
            sub1.naam,
            sub1.krwstroomgebieddistrictcode,
            sub1.waterbeheerdercode,
            sub1.rapportagejaar,
            sub1.omvangnumeriekewaarde,
            sub1.motivering,
            measure_status_type.omschrijving AS maatregelstatusomschrijving,
            sub1.omvangeenheidcode,
            measure_status_type.mst_id
           FROM (( SELECT DISTINCT monitored_measure.mtm_id,
                    rpp.rpp_id AS periodeid,
                    competent_authority.ore_id AS waterbeheerderid,
                    rpp.description AS sgbpperiodeomschrijving,
                    supp_add_measure_type.local_id AS hoortbijmaatregel,
                    supp_add_measure_type.measure_name AS naam,
                    stroomgebieddistrict.inspire_id_local_id AS krwstroomgebieddistrictcode,
                    ('NL'::text || (wb_nst.code)::text) AS waterbeheerdercode,
                    measure_progress.year AS rapportagejaar,
                    measure_progress.amount_value AS omvangnumeriekewaarde,
                    measure_progress.reason_substanstial_delay AS motivering,
                    measure_status_type_1.omschrijving AS maatregelstatusomschrijving,
                    eenheid_type.code AS omvangeenheidcode,
                    measure_status_type_1.mst_id
                   FROM ((((((((((((monitored_measure
                     LEFT JOIN measure_progress ON ((monitored_measure.mtm_id = measure_progress.mtm_id)))
                     JOIN supp_add_measure_type ON ((supp_add_measure_type.smnl_id = monitored_measure.mtm_id)))
                     JOIN namespace_type wb_nst ON ((wb_nst.ns_id = supp_add_measure_type.namespace_id)))
                     JOIN competentauthority_namespacetype ON ((competentauthority_namespacetype.ns_id = wb_nst.ns_id)))
                     JOIN competent_authority ON ((competent_authority.ore_id = competentauthority_namespacetype.ore_id)))
                     LEFT JOIN measure_status_type measure_status_type_1 ON ((measure_status_type_1.mst_id = measure_progress.mst_id)))
                     JOIN sw_supp_measure_eu_type smeu ON ((smeu.smeu_id = supp_add_measure_type.smeu_id)))
                     JOIN eenheid_type ON ((eenheid_type.eenh_id = smeu.eenh_id)))
                     JOIN river_basin_management_plan ON ((river_basin_management_plan.rbmp_id = supp_add_measure_type.rbmp_id)))
                     JOIN hydro_object stroomgebieddistrict ON ((stroomgebieddistrict.hdo_id = river_basin_management_plan.rbd_id)))
                     JOIN report_version rv2 ON ((rv2.wkrv_id = river_basin_management_plan.wkrv_id)))
                     JOIN reporting_period rpp ON (((rpp.rpp_id = rv2.rpp_id) AND (rv2.begin_lifespan_version <= now()) AND ((rv2.end_lifespan_version > now()) OR (rv2.end_lifespan_version IS NULL)))))) sub1
             CROSS JOIN measure_status_type)
          WHERE (sub1.mst_id IS NULL)
        UNION
         SELECT sub2.mtm_id,
            sub2.periodeid,
            sub2.waterbeheerderid,
            sub2.sgbpperiodeomschrijving,
            sub2.hoortbijmaatregel,
            sub2.naam,
            sub2.krwstroomgebieddistrictcode,
            sub2.waterbeheerdercode,
            sub2.rapportagejaar,
            sub2.omvangnumeriekewaarde,
            sub2.motivering,
            sub2.maatregelstatusomschrijving,
            sub2.omvangeenheidcode,
            sub2.mst_id
           FROM ( SELECT DISTINCT monitored_measure.mtm_id,
                    rpp.rpp_id AS periodeid,
                    competent_authority.ore_id AS waterbeheerderid,
                    rpp.description AS sgbpperiodeomschrijving,
                    supp_add_measure_type.local_id AS hoortbijmaatregel,
                    supp_add_measure_type.measure_name AS naam,
                    stroomgebieddistrict.inspire_id_local_id AS krwstroomgebieddistrictcode,
                    ('NL'::text || (wb_nst.code)::text) AS waterbeheerdercode,
                    measure_progress.year AS rapportagejaar,
                    measure_progress.amount_value AS omvangnumeriekewaarde,
                    measure_progress.reason_substanstial_delay AS motivering,
                    measure_status_type.omschrijving AS maatregelstatusomschrijving,
                    eenheid_type.code AS omvangeenheidcode,
                    measure_status_type.mst_id
                   FROM ((((((((((((monitored_measure
                     LEFT JOIN measure_progress ON ((monitored_measure.mtm_id = measure_progress.mtm_id)))
                     JOIN supp_add_measure_type ON ((supp_add_measure_type.smnl_id = monitored_measure.mtm_id)))
                     JOIN namespace_type wb_nst ON ((wb_nst.ns_id = supp_add_measure_type.namespace_id)))
                     JOIN competentauthority_namespacetype ON ((competentauthority_namespacetype.ns_id = wb_nst.ns_id)))
                     JOIN competent_authority ON ((competent_authority.ore_id = competentauthority_namespacetype.ore_id)))
                     LEFT JOIN measure_status_type ON ((measure_status_type.mst_id = measure_progress.mst_id)))
                     JOIN sw_supp_measure_eu_type smeu ON ((smeu.smeu_id = supp_add_measure_type.smeu_id)))
                     JOIN eenheid_type ON ((eenheid_type.eenh_id = smeu.eenh_id)))
                     JOIN river_basin_management_plan ON ((river_basin_management_plan.rbmp_id = supp_add_measure_type.rbmp_id)))
                     JOIN hydro_object stroomgebieddistrict ON ((stroomgebieddistrict.hdo_id = river_basin_management_plan.rbd_id)))
                     JOIN report_version rv2 ON ((rv2.wkrv_id = river_basin_management_plan.wkrv_id)))
                     JOIN reporting_period rpp ON (((rpp.rpp_id = rv2.rpp_id) AND (rv2.begin_lifespan_version <= now()) AND ((rv2.end_lifespan_version > now()) OR (rv2.end_lifespan_version IS NULL)))))) sub2
          WHERE (sub2.mst_id IS NOT NULL)) sub3
  ORDER BY sub3.periodeid, sub3.waterbeheerderid, sub3.rapportagejaar, sub3.hoortbijmaatregel, sub3.mst_id;


--
-- Name: vw_waargenomen_eigenschap_aquo; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_waargenomen_eigenschap_aquo AS
 SELECT observed_property_type.opt_id AS "WaargenomenEigenschap.ID",
    typering_type.code AS "Typering.Code",
    typering_type.omschrijving AS "Typering.Omschrijving",
    grootheid_type.code AS "Grootheid.Code",
    grootheid_type.omschrijving AS "Grootheid.Omschrijving",
    object_type.code AS "Object.Code",
    object_type.omschrijving AS "Object.Omschrijving",
        CASE
            WHEN (chemische_stof_type.code IS NOT NULL) THEN 'ChemischeStof'::text
            WHEN (object_type.omschrijving IS NOT NULL) THEN 'Object'::text
            WHEN (taxon_type.code IS NOT NULL) THEN 'Taxon'::text
            ELSE NULL::text
        END AS "Parameter.Groep",
        CASE
            WHEN (chemische_stof_type.code IS NOT NULL) THEN chemische_stof_type.code
            WHEN (object_type.omschrijving IS NOT NULL) THEN object_type.code
            WHEN (taxon_type.code IS NOT NULL) THEN taxon_type.code
            ELSE NULL::character varying
        END AS "Parameter.Code",
        CASE
            WHEN (chemische_stof_type.code IS NOT NULL) THEN chemische_stof_type.naam
            WHEN (object_type.omschrijving IS NOT NULL) THEN object_type.omschrijving
            WHEN (taxon_type.code IS NOT NULL) THEN taxon_type.auteur
            ELSE NULL::character varying
        END AS "Parameter.Omschrijving",
    chemische_stof_type.cas_nr AS "ChemischeStof.CASnr",
    hoedanigheid_type.code AS "Hoedanigheid.Code",
    hoedanigheid_type.omschrijving AS "Hoedanigheid.Omschrijving"
   FROM (((((((observed_property_type
     LEFT JOIN (object_type
     JOIN object_group_element ON ((object_type.obj_id = object_group_element.obj_id))) ON ((object_group_element.ojg_id = observed_property_type.object_group_id)))
     LEFT JOIN hoedanigheid_type ON ((hoedanigheid_type.hdh_id = observed_property_type.hoedanigheid_id)))
     LEFT JOIN grootheid_type ON ((grootheid_type.grh_id = observed_property_type.quantity_id)))
     LEFT JOIN (taxon_type
     JOIN taxa_group_element ON ((taxon_type.txn_id = taxa_group_element.txn_id))) ON ((taxa_group_element.txg_id = observed_property_type.taxa_group_id)))
     LEFT JOIN (chemische_stof_type
     JOIN substance_group_element ON ((chemische_stof_type.chs_id = substance_group_element.chs_id))) ON ((substance_group_element.ssge_id = observed_property_type.substance_group_id)))
     LEFT JOIN typering_type ON ((typering_type.typ_id = observed_property_type.indicator_id)))
     LEFT JOIN classification_group_type ON ((classification_group_type.clsg_id = observed_property_type.classification_group_id)))
  WHERE ((grootheid_type.code IS NOT NULL) OR (typering_type.code IS NOT NULL))
  ORDER BY typering_type.code,
        CASE
            WHEN (chemische_stof_type.code IS NOT NULL) THEN 'ChemischeStof'::text
            WHEN (object_type.omschrijving IS NOT NULL) THEN 'Object'::text
            WHEN (taxon_type.code IS NOT NULL) THEN 'Taxon'::text
            ELSE NULL::text
        END DESC, grootheid_type.code,
        CASE
            WHEN (chemische_stof_type.code IS NOT NULL) THEN chemische_stof_type.code
            WHEN (object_type.omschrijving IS NOT NULL) THEN object_type.code
            WHEN (taxon_type.code IS NOT NULL) THEN taxon_type.code
            ELSE NULL::character varying
        END;


--
-- Name: vw_waargenomen_eigenschap_db_id_sander; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_waargenomen_eigenschap_db_id_sander AS
 SELECT observed_property_type.opt_id AS "DB_ID",
    typering_type.typ_id AS "Typering_DB_ID",
    typering_type.code AS "Tpering_Code",
    typering_type.omschrijving AS "Typering_Omschrijving",
    grootheid_type.grh_id AS "Grootheid_DB_ID",
    grootheid_type.code AS "Grootheid_Code",
    grootheid_type.omschrijving AS "Grootheid_Omschrijving",
    grootheid_type.id AS "Grootheid_ext_id",
    chemische_stof_type.chs_id AS "ChemischeStof_DB_ID",
    chemische_stof_type.code AS "ChemischeStof_code",
    chemische_stof_type.naam AS "ChemischeStof_Omschrijving",
    chemische_stof_type.cas_nr AS "ChemischeStof_CASnr",
    classification_group_type.code AS "ClassificatieType_Code",
    classification_group_type.description AS "ClassificatieType_Omschrijving",
    object_type.obj_id AS "Object_DB_ID",
    object_type.omschrijving AS "Object_Omschrijving",
    object_type.code AS "Object_Code",
    txg.txg_id AS "taxa_group_DB_ID",
    txg.group_type AS taxa_group_type,
    txg.name AS taxa_group_name,
    taxon_type.txn_id AS "Taxon_DB_ID",
    taxon_type.code AS "Taxon_Naam",
    taxon_type.auteur AS "Taxon_Auteur",
    hoedanigheid_type.hdh_id AS "Hoedanigheid_DB_ID",
    hoedanigheid_type.code AS "Hoedanigheid_Code",
    hoedanigheid_type.omschrijving AS "Hoedanigheid_Omschrijving",
    hoedanigheid_type.id AS "Hoedanigheid_ext_id",
    observed_property_type.observed_property_type_class AS "Parameter_Type",
    observed_property_type.result_type AS "Parameter_Resultaat",
    observed_property_type.remarks AS "Opmerkingen"
   FROM ((((((((observed_property_type
     LEFT JOIN (object_type
     JOIN object_group_element ON ((object_type.obj_id = object_group_element.obj_id))) ON ((object_group_element.ojg_id = observed_property_type.object_group_id)))
     LEFT JOIN hoedanigheid_type ON ((hoedanigheid_type.hdh_id = observed_property_type.hoedanigheid_id)))
     LEFT JOIN grootheid_type ON ((grootheid_type.grh_id = observed_property_type.quantity_id)))
     LEFT JOIN taxa_group txg ON ((txg.txg_id = observed_property_type.taxa_group_id)))
     LEFT JOIN (taxon_type
     JOIN taxa_group_element ON ((taxon_type.txn_id = taxa_group_element.txn_id))) ON ((taxa_group_element.txg_id = observed_property_type.taxa_group_id)))
     LEFT JOIN (chemische_stof_type
     JOIN substance_group_element ON ((chemische_stof_type.chs_id = substance_group_element.chs_id))) ON ((substance_group_element.ssge_id = observed_property_type.substance_group_id)))
     LEFT JOIN typering_type ON ((typering_type.typ_id = observed_property_type.indicator_id)))
     LEFT JOIN classification_group_type ON ((classification_group_type.clsg_id = observed_property_type.classification_group_id)))
  ORDER BY typering_type.code, grootheid_type.code, chemische_stof_type.code, object_type.code, taxon_type.code, hoedanigheid_type.code;


--
-- Name: vw_waargenomen_eigenschap_db_id_work-around; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW "vw_waargenomen_eigenschap_db_id_work-around" AS
 SELECT DISTINCT ON (chemische_stof_type.chs_id) 'incomplete lijst' AS "WORK-AROUND",
    observed_property_type.opt_id AS "DB_ID",
    typering_type.typ_id AS "Typering_DB_ID",
    typering_type.code AS "Tpering_Code",
    typering_type.omschrijving AS "Typering_Omschrijving",
    grootheid_type.grh_id AS "Grootheid_DB_ID",
    grootheid_type.code AS "Grootheid_Code",
    grootheid_type.omschrijving AS "Grootheid_Omschrijving",
    chemische_stof_type.chs_id AS "ChemischeStof_DB_ID",
    chemische_stof_type.code AS "ChemischeStof_code",
    chemische_stof_type.naam AS "ChemischeStof_Omschrijving",
    chemische_stof_type.cas_nr AS "ChemischeStof_CASnr",
    classification_group_type.code AS "ClassificatieType_Code",
    classification_group_type.description AS "ClassificatieType_Omschrijving",
    object_type.obj_id AS "Object_DB_ID",
    object_type.omschrijving AS "Object_Omschrijving",
    object_type.code AS "Object_Code",
    taxon_type.txn_id AS "Taxon_DB_ID",
    taxon_type.code AS "Taxon_Naam",
    taxon_type.auteur AS "Taxon_Auteur",
    hoedanigheid_type.hdh_id AS "Hoedanigheid_DB_ID",
    hoedanigheid_type.code AS "Hoedanigheid_Code",
    hoedanigheid_type.omschrijving AS "Hoedanigheid_Omschrijving",
    observed_property_type.observed_property_type_class AS "Parameter_Type",
    observed_property_type.result_type AS "Parameter_Resultaat",
    observed_property_type.remarks AS "Opmerkingen"
   FROM (((((((observed_property_type
     LEFT JOIN (object_type
     JOIN object_group_element ON ((object_type.obj_id = object_group_element.obj_id))) ON ((object_group_element.ojg_id = observed_property_type.object_group_id)))
     LEFT JOIN hoedanigheid_type ON ((hoedanigheid_type.hdh_id = observed_property_type.hoedanigheid_id)))
     LEFT JOIN grootheid_type ON ((grootheid_type.grh_id = observed_property_type.quantity_id)))
     LEFT JOIN (taxon_type
     JOIN taxa_group_element ON ((taxon_type.txn_id = taxa_group_element.txn_id))) ON ((taxa_group_element.txg_id = observed_property_type.taxa_group_id)))
     LEFT JOIN (chemische_stof_type
     JOIN substance_group_element ON ((chemische_stof_type.chs_id = substance_group_element.chs_id))) ON ((substance_group_element.ssge_id = observed_property_type.substance_group_id)))
     LEFT JOIN typering_type ON ((typering_type.typ_id = observed_property_type.indicator_id)))
     LEFT JOIN classification_group_type ON ((classification_group_type.clsg_id = observed_property_type.classification_group_id)))
  ORDER BY chemische_stof_type.chs_id, typering_type.code, grootheid_type.code, chemische_stof_type.code, object_type.code, taxon_type.code, hoedanigheid_type.code;


--
-- Name: vw_waterbeheerder_deelstroomgebied; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_waterbeheerder_deelstroomgebied AS
 SELECT DISTINCT ON (vw_competent_authority.waterbeheerder_db_id, vw_sg_en_dsg_districten."Identificatie", hydro_object.wkrv_id) vw_competent_authority.waterbeheerder_db_id AS waterbeheerder_code,
    vw_competent_authority."Omschrijving" AS waterbeheerder_omschrijving,
    vw_sg_en_dsg_districten."Identificatie" AS stroomgebieddistrict,
    hydro_object.wkrv_id AS versie
   FROM (((((hydro_object
     LEFT JOIN management_regulation_or_restriction_zone ON ((management_regulation_or_restriction_zone.mrz_id = hydro_object.hdo_id)))
     LEFT JOIN competentauthority_namespacetype ON ((competentauthority_namespacetype.ns_id = hydro_object.inspire_id_namespace)))
     LEFT JOIN vw_competent_authority ON ((vw_competent_authority."DB_ID" = competentauthority_namespacetype.ore_id)))
     JOIN water_body ON ((water_body.wbd_id = hydro_object.hdo_id)))
     LEFT JOIN vw_sg_en_dsg_districten ON ((vw_sg_en_dsg_districten."DB_ID" = water_body.rbd_id)))
  ORDER BY vw_competent_authority.waterbeheerder_db_id, vw_sg_en_dsg_districten."Identificatie", hydro_object.wkrv_id;


--
-- Name: vw_waterdelen_g; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_waterdelen_g AS
 SELECT hydro_object.hdo_id AS "DB_ID",
    hydro_object.inspire_id_local_id AS "Identificatie",
    hydro_object.inspire_id_namespace AS "Waterbeheerder_DB_ID",
    hdo_names.name AS "Naam",
    watercourse.length AS "Lengte",
    watercourse.width_upper AS "Breedte_ondergrens",
    watercourse.width_lower AS "Breedte_bovengrens",
    watercourse."geometryLine",
    watercourse."geometrySurface",
    hydro_object.wkrv_id AS "Versie",
    hydro_object.related_hdo_id AS "Gerelateerd_HydroObject"
   FROM ((watercourse
     JOIN hydro_object ON ((hydro_object.hdo_id = watercourse.wtc_id)))
     LEFT JOIN hdo_names ON ((hdo_names.hdo_id = hydro_object.hdo_id)))
  ORDER BY hydro_object.related_hdo_id;


--
-- Name: vw_waterlichaam_organisatie_relatie; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_waterlichaam_organisatie_relatie AS
 SELECT relation_ore_wbd.ore_wbd_id AS "DB_ID",
    vw_waterlichamen.db_id AS "Waterlichaam_DB_ID",
    vw_waterlichamen.identificatie AS "Waterlichaam.Identificatie",
    vw_waterlichamen.waterbeheerder_code AS "Bron_WaterbeheerderCode",
    vw_waterlichamen.waterbeheerder_naam AS "Bron_WaterbeheerderNaam",
    vw_waterlichamen.omschrijving AS "Waterlichaam_Naam",
    vw_waterlichamen.stroomgebieddistrict AS "StroomgebiedDistrict",
    organisatorische_eenheid.ore_id AS "Organisatie_DB_ID",
    organisatorische_eenheid.organisatie_identificatie AS "Organisatie_Identificatie",
    organisatorische_eenheid.datum_ontstaan AS "Datum_Onstaan",
    organisatorische_eenheid.datum_opheffing AS "Datum_Opheffing",
    organisatorische_eenheid.naam AS "Organisatie_Naam",
    organisatorische_eenheid.naam_verkort AS "Organisatie_KorteNaam",
    organisation_category_type.ocat_id AS "OrganisatieType_DB_ID",
    organisation_category_type.omschrijving AS "OrganisatieType",
    vw_waterlichamen.versie AS "Versie"
   FROM (((relation_ore_wbd
     LEFT JOIN organisatorische_eenheid ON ((organisatorische_eenheid.ore_id = relation_ore_wbd.ore_id)))
     LEFT JOIN vw_waterlichamen ON ((vw_waterlichamen.db_id = relation_ore_wbd.wbd_id)))
     LEFT JOIN organisation_category_type ON ((organisation_category_type.ocat_id = organisatorische_eenheid.organisation_category_id)))
  ORDER BY vw_waterlichamen.identificatie, organisation_category_type.ocat_id;


--
-- Name: vw_waterlichaam_prognose_kwaliteitselement; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_waterlichaam_prognose_kwaliteitselement AS
 SELECT template.wbd_id,
    vw_krw_kwaliteitselement."Watertype_Code",
    vw_krw_kwaliteitselement."Waargenomen_Eigenschap_DB_ID",
    (concat_ws(' '::text, vw_krw_kwaliteitselement."Typering_Omschrijving", vw_krw_kwaliteitselement."Grootheid_Omschrijving", vw_krw_kwaliteitselement."ChemischeStof_Omschrijving"))::character varying(255) AS "Kwaliteitselement_Naam",
    ((lower((classification_type.description)::text) = ANY (ARRAY['matig'::text, 'ontoereikend'::text, 'slecht'::text, 'voldoet niet'::text])) OR (wb_prognosis.swb_id IS NULL)) AS nietgoed
   FROM (((((( SELECT DISTINCT surface_water_body_1.swb_id AS wbd_id,
            vw_krw_kwaliteitselement_1."Waargenomen_Eigenschap_DB_ID" AS opt_id
           FROM (surface_water_body surface_water_body_1
             CROSS JOIN vw_krw_kwaliteitselement vw_krw_kwaliteitselement_1)) template
     JOIN surface_water_body ON ((surface_water_body.swb_id = template.wbd_id)))
     JOIN sw_typology_type ON ((sw_typology_type.styp_id = surface_water_body.sw_target_typology_id)))
     JOIN vw_krw_kwaliteitselement ON (((vw_krw_kwaliteitselement."Waargenomen_Eigenschap_DB_ID" = template.opt_id) AND ((vw_krw_kwaliteitselement."Watertype_Code")::text = (sw_typology_type.code)::text))))
     JOIN wb_prognosis ON (((wb_prognosis.swb_id = surface_water_body.swb_id) AND (wb_prognosis.year = 2021) AND (wb_prognosis.opt_id = template.opt_id))))
     JOIN classification_type ON ((classification_type.cls_id = wb_prognosis.cls_id)))
  WHERE (vw_krw_kwaliteitselement."Is_van_toepassing" AND vw_krw_kwaliteitselement."Is_artikel_4" AND (vw_krw_kwaliteitselement."Waargenomen_Eigenschap_DB_ID" <> ALL (ARRAY[4476, 4479, 4480, 4520])))
UNION ALL
 SELECT template.wbd_id,
    NULL::character varying AS "Watertype_Code",
    vw_krw_kwaliteitselement_gw."Waargenomen_Eigenschap_DB_ID",
    vw_krw_kwaliteitselement_gw."Kwaliteitselement_Naam",
    ((lower((classification_type.description)::text) = ANY (ARRAY['matig'::text, 'ontoereikend'::text, 'slecht'::text, 'voldoet niet'::text])) OR (wb_prognosis.swb_id IS NULL)) AS nietgoed
   FROM ((((( SELECT DISTINCT ground_water_body_1.gwb_id AS wbd_id,
            vw_krw_kwaliteitselement_gw_1."Waargenomen_Eigenschap_DB_ID" AS opt_id
           FROM (vw_krw_kwaliteitselement_gw vw_krw_kwaliteitselement_gw_1
             CROSS JOIN ground_water_body ground_water_body_1)
          WHERE (vw_krw_kwaliteitselement_gw_1."Is_van_toepassing" AND vw_krw_kwaliteitselement_gw_1."Is_artikel_4")) template
     JOIN ground_water_body ON ((ground_water_body.gwb_id = template.wbd_id)))
     JOIN vw_krw_kwaliteitselement_gw ON ((vw_krw_kwaliteitselement_gw."Waargenomen_Eigenschap_DB_ID" = template.opt_id)))
     JOIN wb_prognosis ON (((wb_prognosis.swb_id = ground_water_body.gwb_id) AND (wb_prognosis.year = 2021) AND (wb_prognosis.opt_id = template.opt_id))))
     JOIN classification_type ON ((classification_type.cls_id = wb_prognosis.cls_id)));


--
-- Name: waterbody_protected_area_intersection; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE waterbody_protected_area_intersection (
    wbpa_id integer NOT NULL,
    wbd_id integer NOT NULL,
    wpa_id integer NOT NULL,
    relation_type integer,
    geometry geometry(Geometry,28992),
    last_change_time timestamp without time zone NOT NULL
);


--
-- Name: vw_waterlichamen_beschermdgebied_relatie; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_waterlichamen_beschermdgebied_relatie AS
 SELECT waterbody_protected_area_intersection.wbpa_id AS "DB_ID",
    vw_waterlichamen.db_id AS "Waterlichaam_DB_ID",
    vw_waterlichamen.identificatie AS "Waterlichaam_Identificatie",
    vw_waterlichamen.omschrijving AS "Waterlichaam_Omschrijving",
    vw_waterlichamen.stroomgebieddistrict AS "Waterlichaam_Stroomgebieddistrict",
    vw_waterlichamen.versie AS "Waterlichaam_Versie",
    vw_beschermdegebieden."DB_ID" AS "BeschermdGebied_DB_ID",
    vw_beschermdegebieden."Identificatie" AS "BeschermdGebied_Identificatie",
    vw_beschermdegebieden."Omschrijving" AS "BeschermdGebied_Omschrijving",
    vw_beschermdegebieden."Soort_Beschermd_Gebied",
    vw_beschermdegebieden."Soort_Beschermd_Gebied_Code",
    vw_beschermdegebieden."Versie_ID" AS "BeschermdGebied_Versie",
    waterbody_protected_area_intersection.geometry,
    relation_type.rlt_id AS "RelatieType_DB_ID",
    relation_type.description
   FROM (((waterbody_protected_area_intersection
     LEFT JOIN vw_waterlichamen ON ((vw_waterlichamen.db_id = waterbody_protected_area_intersection.wbd_id)))
     LEFT JOIN vw_beschermdegebieden ON ((vw_beschermdegebieden."DB_ID" = waterbody_protected_area_intersection.wpa_id)))
     JOIN relation_type ON ((relation_type.rlt_id = waterbody_protected_area_intersection.relation_type)))
  ORDER BY vw_waterlichamen.identificatie, vw_beschermdegebieden."Identificatie";


--
-- Name: vw_waterlichamen_g; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_waterlichamen_g AS
 SELECT hydro_object.hdo_id AS db_id,
    hydro_object.inspire_id_local_id AS identificatie,
    hydro_object.inspire_id_namespace AS waterbeheerder_code,
    water_body.is_article_7 AS drinkwateronttrekking_jn,
    hdo_names.name AS omschrijving,
    management_regulation_or_restriction_zone.geometry,
    hdo_rbd.inspire_id_local_id AS stroomgebieddistrict,
    hydro_object.wkrv_id AS versie
   FROM (((((((hydro_object
     LEFT JOIN hdo_names ON ((hdo_names.hdo_id = hydro_object.hdo_id)))
     JOIN wkr_version ON ((wkr_version.wkrv_id = hydro_object.wkrv_id)))
     JOIN management_regulation_or_restriction_zone ON ((management_regulation_or_restriction_zone.mrz_id = hydro_object.hdo_id)))
     JOIN water_body ON ((water_body.wbd_id = hydro_object.hdo_id)))
     JOIN river_basin_disrict rbd ON ((rbd.rbd_id = water_body.rbd_id)))
     JOIN hydro_object hdo_rbd ON ((rbd.rbd_id = hdo_rbd.hdo_id)))
     JOIN vw_sg_en_dsg_districten ON ((vw_sg_en_dsg_districten."DB_ID" = water_body.rbd_id)));


--
-- Name: vw_waterlichamen_inspire; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_waterlichamen_inspire AS
 SELECT ((((('NL.WBHCODE.'::text || hydro_object.inspire_id_namespace) || '.'::text) || (hydro_object.inspire_id_local_id)::text) || '.'::text) || hydro_object.wkrv_id) AS "InspireId",
    ('NL.WBHCODE.'::text || hydro_object.inspire_id_namespace) AS "inspireId.namespace",
    hydro_object.inspire_id_local_id AS "inspireId.localId",
    hydro_object.wkrv_id AS "inspireId.Version",
    hydro_object.inspire_id_local_id AS "thematicId",
    hdo_names.name AS "name.text",
    hdo_names.language AS "name.languate",
    'http://inspire.ec.europa.eu/codelist/NativenessValue/endonym'::text AS "name.nativeness",
    'http://inspire.ec.europa.eu/codelist/NameStatusValue/official'::text AS "name.nameStatus",
    namespace_type.descrption AS "name.sourceOfName",
    mrz.geometry_etrs89 AS st_transform,
    geometrytype(mrz.geometry_etrs89) AS geometry_type,
    'http://inspire.ec.europa.eu/codelist/ZoneTypeCode/waterBodyForWFD'::text AS "zoneType",
    ('WFD'::text || (hydro_object.hydro_object_type)::text) AS "specialisedZoneType",
    'http://inspire.ec.europa.eu/codelist/EnvironmentalDomain/water'::text AS "environmentalDomain",
    namespace_type.descrption AS "competentAuthority.organisationName",
    'http://inspire.ec.europa.eu/codelist/RelatedPartyRoleValue/authority'::text AS "competentAuthority.role",
    wkr_version.begin_lifespan_version AS "beginLifeSpanVersion",
    wkr_version.end_lifespan_version AS "endLifeSpanVersion",
    'Directive 2000/60/EC of the European Parliament and of the Council establishing a framework for the Community action in the field of water policy'::text AS "legalBasis.name",
    'Water Framework Directive'::text AS "legalBasis.shortName",
    '2000-10-23'::text AS "legalBasis.date",
    'http://eur-lex.europa.eu/LexUriServ/LexUriServ.do?uri=CELEX:32000L0060:EN:NOT'::text AS "legalBasis.link",
    '2000/60/EC'::text AS "legalBasis.identificationNumber",
    'European'::text AS "legalBasis.level"
   FROM (((((management_regulation_or_restriction_zone mrz
     JOIN water_body ON ((water_body.wbd_id = mrz.mrz_id)))
     JOIN hydro_object ON ((mrz.mrz_id = hydro_object.hdo_id)))
     LEFT JOIN hdo_names ON ((hdo_names.hdo_id = mrz.mrz_id)))
     JOIN wkr_version ON ((wkr_version.wkrv_id = hydro_object.wkrv_id)))
     JOIN namespace_type ON ((namespace_type.ns_id = hydro_object.inspire_id_namespace)));


--
-- Name: vw_waterlichamen_lzr; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW vw_waterlichamen_lzr AS
 SELECT hydro_object.inspire_id_local_id AS "Waterlichaam.identificatie",
    hdo_names.name AS "Waterlichaam.omschrijving",
    hydro_object.inspire_id_namespace AS "Waterbeheerder.code",
        CASE hydro_object.inspire_id_namespace
            WHEN 2 THEN 'NLBW02'::text
            WHEN 4 THEN 'NLBW04'::text
            WHEN 5 THEN 'NLBW05'::text
            WHEN 7 THEN 'NLBW07'::text
            WHEN 8 THEN 'NLBW43'::text
            WHEN 9 THEN 'NLBW09'::text
            WHEN 10 THEN 'NLBW10'::text
            WHEN 11 THEN 'NLBW11'::text
            WHEN 12 THEN 'NLBW12'::text
            WHEN 13 THEN 'NLBW13'::text
            WHEN 14 THEN 'NLBW14'::text
            WHEN 15 THEN 'NLBW15'::text
            WHEN 16 THEN 'NLBW16'::text
            WHEN 17 THEN 'NLBW17'::text
            WHEN 18 THEN 'NLBW18'::text
            WHEN 19 THEN 'NLBW19'::text
            WHEN 20 THEN 'NLBW20'::text
            WHEN 21 THEN 'NLBW21'::text
            WHEN 22 THEN 'NLBW22'::text
            WHEN 23 THEN 'NLBW23'::text
            WHEN 24 THEN 'NLBW24'::text
            WHEN 25 THEN 'NLBW25'::text
            WHEN 26 THEN 'NLBW26'::text
            WHEN 27 THEN 'NLBW27'::text
            WHEN 28 THEN 'NLBW28'::text
            WHEN 29 THEN 'NLBW29'::text
            WHEN 30 THEN 'NLBW30'::text
            WHEN 31 THEN 'NLBW31'::text
            WHEN 32 THEN 'NLBW32'::text
            WHEN 33 THEN 'NLBW33'::text
            WHEN 34 THEN 'NLBW34'::text
            WHEN 35 THEN 'NLBW35'::text
            WHEN 36 THEN 'NLBW36'::text
            WHEN 37 THEN 'NLBW37'::text
            WHEN 38 THEN 'NLBW38'::text
            WHEN 39 THEN 'NLBW39'::text
            WHEN 40 THEN 'NLBW40'::text
            WHEN 41 THEN 'NLBW41'::text
            WHEN 42 THEN 'NLBW42'::text
            WHEN 43 THEN 'NLBW43'::text
            WHEN 44 THEN 'NLBW44'::text
            WHEN 45 THEN 'NLBW45'::text
            WHEN 46 THEN 'NLBW46'::text
            WHEN 47 THEN 'NLBW47'::text
            WHEN 48 THEN 'NLBW48'::text
            WHEN 49 THEN 'NLBW49'::text
            WHEN 50 THEN 'NLBW50'::text
            WHEN 51 THEN 'NLBW51'::text
            WHEN 52 THEN 'NLBW52'::text
            WHEN 53 THEN 'NLBW53'::text
            WHEN 54 THEN 'NLBW54'::text
            WHEN 55 THEN 'NLBW55'::text
            WHEN 56 THEN 'NLBW56'::text
            WHEN 57 THEN 'NLBW57'::text
            WHEN 58 THEN 'NLBW58'::text
            WHEN 59 THEN 'NLBW59'::text
            WHEN 60 THEN 'NLBW60'::text
            WHEN 61 THEN 'NLBW61'::text
            WHEN 62 THEN 'NLBW62'::text
            WHEN 63 THEN 'NLBW63'::text
            WHEN 64 THEN 'NLBW64'::text
            WHEN 65 THEN 'NLBW65'::text
            WHEN 66 THEN 'NLBW66'::text
            WHEN 67 THEN 'NLBW67'::text
            WHEN 68 THEN 'NLBW68'::text
            WHEN 69 THEN 'NLBW69'::text
            WHEN 70 THEN 'NLBW70'::text
            WHEN 71 THEN 'NLBW71'::text
            WHEN 72 THEN 'NLBW72'::text
            WHEN 73 THEN 'NLBW73'::text
            WHEN 74 THEN 'NLBW74'::text
            WHEN 75 THEN 'NLBW75'::text
            WHEN 76 THEN 'NLBW76'::text
            WHEN 77 THEN 'NLBW77'::text
            WHEN 78 THEN 'NLBW78'::text
            WHEN 79 THEN 'NLBW79'::text
            WHEN 80 THEN 'NLBW80'::text
            WHEN 81 THEN 'NLBW81'::text
            WHEN 82 THEN 'NLBW82'::text
            WHEN 83 THEN 'NLBW83'::text
            WHEN 84 THEN 'NLBW84'::text
            WHEN 85 THEN 'NLBW85'::text
            WHEN 86 THEN 'NLBW86'::text
            WHEN 87 THEN 'NLBW87'::text
            WHEN 88 THEN 'NLBW88'::text
            WHEN 89 THEN 'NLBW89'::text
            WHEN 90 THEN 'NLBW90'::text
            WHEN 91 THEN 'NLBW91'::text
            WHEN 92 THEN 'NLBW92'::text
            WHEN 93 THEN 'NLBW93'::text
            WHEN 94 THEN 'NLBW94'::text
            WHEN 95 THEN 'NLBW95'::text
            WHEN 96 THEN 'NLBW96'::text
            WHEN 97 THEN 'NLBW97'::text
            WHEN 98 THEN 'NLBW98'::text
            WHEN 99 THEN 'NLBW99'::text
            ELSE 'other'::text
        END AS "Zwemwaterbeheerder.code",
    vw_competent_authority."Omschrijving" AS "Waterbeheerder.omschrijving",
        CASE vw_sg_en_dsg_districten."Identificatie"
            WHEN 'NLRNNO'::text THEN 'NLRN'::text
            WHEN 'NLRNOO'::text THEN 'NLRN'::text
            WHEN 'NLRNMI'::text THEN 'NLRN'::text
            WHEN 'NLRNWE'::text THEN 'NLRN'::text
            WHEN 'NLMS'::text THEN 'NLMS'::text
            WHEN 'NLSC'::text THEN 'NLSC'::text
            WHEN 'NLEM'::text THEN 'NLEM'::text
            ELSE 'Other'::text
        END AS "Stroomgebied.code",
    water_body.is_article_7 AS drinkwateronttrekking_jn,
    hydro_object.wkrv_id AS versie,
    wkr_version.begin_lifespan_version AS versie_begintijd,
    wkr_version.end_lifespan_version AS versie_eindtijd
   FROM (((((((hydro_object
     LEFT JOIN hdo_names ON ((hdo_names.hdo_id = hydro_object.hdo_id)))
     JOIN wkr_version ON ((wkr_version.wkrv_id = hydro_object.wkrv_id)))
     LEFT JOIN management_regulation_or_restriction_zone ON ((management_regulation_or_restriction_zone.mrz_id = hydro_object.hdo_id)))
     LEFT JOIN competentauthority_namespacetype ON ((competentauthority_namespacetype.ns_id = hydro_object.inspire_id_namespace)))
     LEFT JOIN vw_competent_authority ON ((vw_competent_authority."DB_ID" = competentauthority_namespacetype.ore_id)))
     JOIN water_body ON ((water_body.wbd_id = hydro_object.hdo_id)))
     LEFT JOIN vw_sg_en_dsg_districten ON ((vw_sg_en_dsg_districten."DB_ID" = water_body.rbd_id)))
  WHERE ((hydro_object.inspire_id_local_id)::text !~~ 'NLGW%'::text)
  ORDER BY hydro_object.inspire_id_namespace, hydro_object.inspire_id_local_id;


--
-- Name: waarde_bepalings_methode_type_wbpm_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE waarde_bepalings_methode_type_wbpm_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: waarde_bepalings_methode_type_wbpm_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE waarde_bepalings_methode_type_wbpm_id_seq OWNED BY waarde_bepalings_methode_type.wbpm_id;


--
-- Name: waarde_bewerkings_methode_type_wbm_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE waarde_bewerkings_methode_type_wbm_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: waarde_bewerkings_methode_type_wbm_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE waarde_bewerkings_methode_type_wbm_id_seq OWNED BY waarde_bewerkings_methode_type.wbm_id;


--
-- Name: waterbody_protected_area_intersection_wbpa_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE waterbody_protected_area_intersection_wbpa_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: waterbody_protected_area_intersection_wbpa_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE waterbody_protected_area_intersection_wbpa_id_seq OWNED BY waterbody_protected_area_intersection.wbpa_id;


--
-- Name: watercourse_local_type; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE watercourse_local_type (
    wtc_id integer NOT NULL,
    value character varying(90) NOT NULL,
    locale character varying(50) DEFAULT 'nl-nl'::text NOT NULL,
    d_begin timestamp without time zone,
    d_eind timestamp without time zone,
    last_changed_date timestamp without time zone,
    d_status character varying(50) DEFAULT 'Gepubliceerd'::character varying
);


--
-- Name: wb_status_change_motivation_wbsc_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE wb_status_change_motivation_wbsc_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: wb_status_change_motivation_wbsc_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE wb_status_change_motivation_wbsc_id_seq OWNED BY wb_status_change_motivation.wbsc_id;


--
-- Name: wfd_qe_gwtype_qegw_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE wfd_qe_gwtype_qegw_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: wfd_qe_gwtype_qegw_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE wfd_qe_gwtype_qegw_id_seq OWNED BY wfd_qe_gwtype.qegw_id;


--
-- Name: wfd_qe_swtype_qesw_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE wfd_qe_swtype_qesw_id_seq
    START WITH 1277
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: wfd_qe_swtype_qesw_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE wfd_qe_swtype_qesw_id_seq OWNED BY wfd_qe_swtype.qesw_id;


--
-- Name: wfd_status_code; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE wfd_status_code (
    wsc_id integer NOT NULL,
    status_code integer NOT NULL,
    status_description character varying(50) NOT NULL
);


--
-- Name: wfd_status_code_wsc_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE wfd_status_code_wsc_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: wfd_status_code_wsc_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE wfd_status_code_wsc_id_seq OWNED BY wfd_status_code.wsc_id;


--
-- Name: wkpuser; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE wkpuser (
    wkpuserid integer NOT NULL,
    applicationid integer NOT NULL,
    username character varying(50) NOT NULL,
    isanonymous boolean NOT NULL,
    lastactivitydate timestamp with time zone NOT NULL
);


--
-- Name: wkpuser_importtype; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE wkpuser_importtype (
    wkpuser_importtypeid integer NOT NULL,
    wkpuserid integer NOT NULL,
    importtypeid integer NOT NULL
);


--
-- Name: wkpuser_importtype_wkpuser_importtypeid_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE wkpuser_importtype_wkpuser_importtypeid_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: wkpuser_importtype_wkpuser_importtypeid_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE wkpuser_importtype_wkpuser_importtypeid_seq OWNED BY wkpuser_importtype.wkpuser_importtypeid;


--
-- Name: wkpuser_pagegroup; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE wkpuser_pagegroup (
    wupg_id integer NOT NULL,
    pg_id integer NOT NULL,
    wkpuserid integer NOT NULL
);


--
-- Name: wkpuser_pagegroup_wupg_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE wkpuser_pagegroup_wupg_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: wkpuser_pagegroup_wupg_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE wkpuser_pagegroup_wupg_id_seq OWNED BY wkpuser_pagegroup.wupg_id;


--
-- Name: wkpuser_settings; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE wkpuser_settings (
    wkpuserid integer NOT NULL,
    showwaterlichaamcodefirst boolean NOT NULL,
    griditemsperpage integer DEFAULT 10 NOT NULL
);


--
-- Name: wkpuser_wkpusergroup; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE wkpuser_wkpusergroup (
    wkpuser_wkpusergroup_id integer NOT NULL,
    wkpuserid integer NOT NULL,
    wkpusergroupid integer NOT NULL
);


--
-- Name: wkpuser_wkpusergroup_wkpuser_wkpusergroup_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE wkpuser_wkpusergroup_wkpuser_wkpusergroup_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: wkpuser_wkpusergroup_wkpuser_wkpusergroup_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE wkpuser_wkpusergroup_wkpuser_wkpusergroup_id_seq OWNED BY wkpuser_wkpusergroup.wkpuser_wkpusergroup_id;


--
-- Name: wkpuser_wkpuserid_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE wkpuser_wkpuserid_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: wkpuser_wkpuserid_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE wkpuser_wkpuserid_seq OWNED BY wkpuser.wkpuserid;


--
-- Name: wkpusergroup; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE wkpusergroup (
    wkpusergroupid integer NOT NULL,
    name character varying(75) NOT NULL,
    description text
);


--
-- Name: wkpusergroup_wkpusergroupid_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE wkpusergroup_wkpusergroupid_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: wkpusergroup_wkpusergroupid_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE wkpusergroup_wkpusergroupid_seq OWNED BY wkpusergroup.wkpusergroupid;


--
-- Name: wkpuserinrole; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE wkpuserinrole (
    wkpuserinroleid integer NOT NULL,
    wkpuserid integer NOT NULL,
    roleid integer NOT NULL
);


--
-- Name: wkpuserinrole_wkpuserinroleid_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE wkpuserinrole_wkpuserinroleid_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: wkpuserinrole_wkpuserinroleid_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE wkpuserinrole_wkpuserinroleid_seq OWNED BY wkpuserinrole.wkpuserinroleid;


--
-- Name: wkr_version_wkrv_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE wkr_version_wkrv_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: wkr_version_wkrv_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE wkr_version_wkrv_id_seq OWNED BY wkr_version.wkrv_id;


--
-- Name: yes_no_not_applicable_type; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE yes_no_not_applicable_type (
    ynna_id integer NOT NULL,
    code character varying(12) NOT NULL,
    omschrijving character varying(50) NOT NULL,
    d_begin timestamp without time zone,
    d_eind timestamp without time zone,
    last_changed_date timestamp without time zone,
    d_status character varying(50) DEFAULT 'Gepubliceerd'::character varying
);


--
-- Name: yes_no_not_applicable_type_ynna_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE yes_no_not_applicable_type_ynna_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: yes_no_not_applicable_type_ynna_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE yes_no_not_applicable_type_ynna_id_seq OWNED BY yes_no_not_applicable_type.ynna_id;


--
-- Name: zone_type_code_ztc_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE zone_type_code_ztc_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: zone_type_code_ztc_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE zone_type_code_ztc_id_seq OWNED BY zone_type_code.ztc_id;


SET search_path = sgbp_dgrw, pg_catalog;

--
-- Name: vw_achtergrondwaarden_gwl_dgrw; Type: VIEW; Schema: sgbp_dgrw; Owner: -
--

CREATE VIEW vw_achtergrondwaarden_gwl_dgrw AS
 SELECT natural_background_levels.nbl_id AS "DB_ID",
    vw_grondwaterlichamen.identificatie AS "Waterlichaam_Identificatie",
    vw_grondwaterlichamen.versie AS "Waterlichaam_Versie",
    vw_grondwaterlichamen.is_buiten_deelstroomgebied AS "Buiten_StroomgebiedJN",
    vw_grondwaterlichamen.is_grensoverschrijdend AS "GrensoverschrijdendJN",
    vw_grondwaterlichamen.horizon AS "Waterlichaam_Horizon",
    vw_grondwaterlichamen.substraat AS "Waterlichaam_Substraat",
    vw_waargenomen_eigenschap."DB_ID" AS "WaargenomenEigenschap_DB_ID",
    vw_waargenomen_eigenschap."Grootheid_Code",
    vw_waargenomen_eigenschap."Grootheid_Omschrijving",
    vw_waargenomen_eigenschap."ChemischeStof_code",
    vw_waargenomen_eigenschap."ChemischeStof_Omschrijving",
    concat(vw_waargenomen_eigenschap."Grootheid_Omschrijving", ' ', vw_waargenomen_eigenschap."ChemischeStof_Omschrijving") AS "Bepaalde_parameter",
    natural_background_levels.priority AS "PrioritaireStof_JN",
    vw_waargenomen_eigenschap."Hoedanigheid_Code",
    vw_waargenomen_eigenschap."Hoedanigheid_Omschrijving",
    natural_background_levels.concentration_value AS "Achtergrondwaarde",
    eenheid_type.code AS "Eenheid_Code",
    eenheid_type.omschrijving AS "Eenheid_Omschrijving"
   FROM (((public.natural_background_levels
     LEFT JOIN public.vw_grondwaterlichamen ON ((vw_grondwaterlichamen.db_id = natural_background_levels.gwb_id)))
     LEFT JOIN public.vw_waargenomen_eigenschap ON ((vw_waargenomen_eigenschap."DB_ID" = natural_background_levels.opt_id)))
     LEFT JOIN public.eenheid_type ON ((eenheid_type.eenh_id = natural_background_levels.concentration_uom_id)));


--
-- Name: vw_belastingen_gw_dgrw_nieuw; Type: VIEW; Schema: sgbp_dgrw; Owner: -
--

CREATE VIEW vw_belastingen_gw_dgrw_nieuw AS
 SELECT vw_grondwaterlichamen.identificatie AS "Waterlichaam_Identificatie",
    vw_grondwaterlichamen.versie AS "Waterlichaam_Versie",
    vw_grondwaterlichamen.is_buiten_deelstroomgebied AS "Buiten_StroomgebiedJN",
    vw_grondwaterlichamen.is_grensoverschrijdend AS "GrensoverschrijdendJN",
    vw_grondwaterlichamen.horizon AS "Waterlichaam_Horizon",
    vw_grondwaterlichamen.substraat AS "Waterlichaam_Substraat",
    namespace_type.descrption AS "Waterbeheerder_omschrijving",
    vw_grondwaterlichamen.omschrijving AS "Waterlichaam_naam",
    "left"((vw_grondwaterlichamen.stroomgebieddistrict)::text, 4) AS "Stroomgebieddistrict",
    gw_pressure_type.description AS "Belasting",
    pressure_category_type.omschrijving AS "Categorie",
    gwb_pressure.is_significant AS "SignificantJN",
    pressure_relevance_type.omschrijving AS "Urgentie",
    gwb_pressure.effect AS "Effecten",
    gwb_pressure.remark AS "Opmerking",
    ( SELECT array_to_string(ARRAY( SELECT drivers.naam
                   FROM (domains.drivers
                     JOIN public.gw_pressure_type_driver ON (((drivers.driver_id = gw_pressure_type_driver.driver_id) AND (gw_pressure_type_driver.gprs_id = gw_pressure_type.gprs_id))))), ','::text) AS array_to_string) AS "Functie",
    ( SELECT array_to_string(ARRAY( SELECT impacts.naam
                   FROM (domains.impacts
                     JOIN public.gwb_pressure_impact ON (((impacts.impact_id = gwb_pressure_impact.impact_id) AND (gwb_pressure_impact.gwbp_id = gwb_pressure.gwbp_id))))), ','::text) AS array_to_string) AS "Impact"
   FROM (((((public.vw_grondwaterlichamen
     JOIN public.gwb_pressure ON ((vw_grondwaterlichamen.db_id = gwb_pressure.gwb_id)))
     JOIN public.gw_pressure_type ON ((gw_pressure_type.gprs_id = gwb_pressure.gprs_id)))
     JOIN public.pressure_category_type ON ((pressure_category_type.pcat_id = gw_pressure_type.pressure_category_id)))
     JOIN public.namespace_type ON ((namespace_type.ns_id = vw_grondwaterlichamen.waterbeheerder_code)))
     JOIN public.pressure_relevance_type ON ((gwb_pressure.prr_id = pressure_relevance_type.prr_id)))
  WHERE ((vw_grondwaterlichamen.versie = 13) AND ((pressure_category_type.d_begin IS NULL) OR (pressure_category_type.d_begin <= to_date('2015-12-22'::text, 'YYYY-MM-DD'::text))) AND ((pressure_category_type.d_eind IS NULL) OR (pressure_category_type.d_eind >= to_date('2015-12-22'::text, 'YYYY-MM-DD'::text))) AND ((gw_pressure_type.d_begin IS NULL) OR (gw_pressure_type.d_begin <= to_date('2015-12-22'::text, 'YYYY-MM-DD'::text))) AND ((gw_pressure_type.d_eind IS NULL) OR (gw_pressure_type.d_eind >= to_date('2015-12-22'::text, 'YYYY-MM-DD'::text))));


--
-- Name: vw_belastingen_ow_dgrw_nieuw; Type: VIEW; Schema: sgbp_dgrw; Owner: -
--

CREATE VIEW vw_belastingen_ow_dgrw_nieuw AS
 SELECT vw_oppervlaktewaterlichamen.identificatie AS "Oppervlaktewaterlichaam_Identificatie",
    vw_oppervlaktewaterlichamen.versie AS "Waterlichaam_Versie",
    vw_oppervlaktewaterlichamen.type AS "Waterlichaam_Type",
    vw_oppervlaktewaterlichamen.referentietype AS "Waterlichaam_DoelType",
    vw_oppervlaktewaterlichamen.waterlichaam_status AS "Waterlichaam_Status",
    namespace_type.descrption AS "Waterbeheerder_omschrijving",
    vw_oppervlaktewaterlichamen.omschrijving AS "Waterlichaam_naam",
    "left"((vw_oppervlaktewaterlichamen.stroomgebieddistrict)::text, 4) AS "Stroomgebieddistrict",
    sw_pressure_type.description AS "Belasting",
    pressure_category_type.omschrijving AS "Categorie",
    swb_pressure.is_significant AS "SignificantJN",
    swb_pressure.effect AS "Effecten",
    swb_pressure.remark AS "Opmerking",
    ( SELECT array_to_string(ARRAY( SELECT drivers.naam
                   FROM (domains.drivers
                     JOIN public.sw_pressure_type_driver ON (((drivers.driver_id = sw_pressure_type_driver.driver_id) AND (sw_pressure_type_driver.sprs_id = sw_pressure_type.sprs_id))))), ','::text) AS array_to_string) AS "Functie",
    ( SELECT array_to_string(ARRAY( SELECT impacts.naam
                   FROM (domains.impacts
                     JOIN public.swb_pressure_impact ON (((impacts.impact_id = swb_pressure_impact.impact_id) AND (swb_pressure_impact.swbp_id = swb_pressure.swbp_id))))), ','::text) AS array_to_string) AS "Impact"
   FROM public.vw_oppervlaktewaterlichamen,
    public.swb_pressure,
    public.sw_pressure_type,
    public.pressure_category_type,
    public.namespace_type
  WHERE ((vw_oppervlaktewaterlichamen.db_id = swb_pressure.swb_id) AND (sw_pressure_type.sprs_id = swb_pressure.sprs_id) AND (pressure_category_type.pcat_id = sw_pressure_type.pressure_category_id) AND (namespace_type.ns_id = vw_oppervlaktewaterlichamen.waterbeheerder_code) AND (namespace_type.ns_id >= 99) AND (vw_oppervlaktewaterlichamen.versie = 13) AND ((pressure_category_type.d_begin IS NULL) OR (pressure_category_type.d_begin <= to_date('2015-12-22'::text, 'YYYY-MM-DD'::text))) AND ((pressure_category_type.d_eind IS NULL) OR (pressure_category_type.d_eind >= to_date('2015-12-22'::text, 'YYYY-MM-DD'::text))) AND ((sw_pressure_type.d_begin IS NULL) OR (sw_pressure_type.d_begin <= to_date('2015-12-22'::text, 'YYYY-MM-DD'::text))) AND ((sw_pressure_type.d_eind IS NULL) OR (sw_pressure_type.d_eind >= to_date('2015-12-22'::text, 'YYYY-MM-DD'::text))))
UNION ALL
 SELECT vw_oppervlaktewaterlichamen.identificatie AS "Oppervlaktewaterlichaam_Identificatie",
    vw_oppervlaktewaterlichamen.versie AS "Waterlichaam_Versie",
    vw_oppervlaktewaterlichamen.type AS "Waterlichaam_Type",
    vw_oppervlaktewaterlichamen.referentietype AS "Waterlichaam_DoelType",
    vw_oppervlaktewaterlichamen.waterlichaam_status AS "Waterlichaam_Status",
    vw_competent_authority."Omschrijving" AS "Waterbeheerder_omschrijving",
    vw_oppervlaktewaterlichamen.omschrijving AS "Waterlichaam_naam",
    "left"((vw_oppervlaktewaterlichamen.stroomgebieddistrict)::text, 4) AS "Stroomgebieddistrict",
    sw_pressure_type.description AS "Belasting",
    pressure_category_type.omschrijving AS "Categorie",
    swb_pressure.is_significant AS "SignificantJN",
    swb_pressure.effect AS "Effecten",
    swb_pressure.remark AS "Opmerking",
    ( SELECT array_to_string(ARRAY( SELECT drivers.naam
                   FROM (domains.drivers
                     JOIN public.sw_pressure_type_driver ON (((drivers.driver_id = sw_pressure_type_driver.driver_id) AND (sw_pressure_type_driver.sprs_id = sw_pressure_type.sprs_id))))), ','::text) AS array_to_string) AS "Functie",
    ( SELECT array_to_string(ARRAY( SELECT impacts.naam
                   FROM (domains.impacts
                     JOIN public.swb_pressure_impact ON (((impacts.impact_id = swb_pressure_impact.impact_id) AND (swb_pressure_impact.swbp_id = swb_pressure.swbp_id))))), ','::text) AS array_to_string) AS "Impact"
   FROM public.vw_oppervlaktewaterlichamen,
    public.swb_pressure,
    public.sw_pressure_type,
    public.pressure_category_type,
    public.competentauthority_namespacetype,
    public.vw_competent_authority
  WHERE ((vw_oppervlaktewaterlichamen.db_id = swb_pressure.swb_id) AND (sw_pressure_type.sprs_id = swb_pressure.sprs_id) AND (pressure_category_type.pcat_id = sw_pressure_type.pressure_category_id) AND (vw_oppervlaktewaterlichamen.waterbeheerder_code < 99) AND (competentauthority_namespacetype.ns_id = vw_oppervlaktewaterlichamen.waterbeheerder_code) AND (vw_competent_authority."DB_ID" = competentauthority_namespacetype.ore_id) AND (vw_oppervlaktewaterlichamen.versie = 13) AND ((pressure_category_type.d_begin IS NULL) OR (pressure_category_type.d_begin <= to_date('2015-12-22'::text, 'YYYY-MM-DD'::text))) AND ((pressure_category_type.d_eind IS NULL) OR (pressure_category_type.d_eind >= to_date('2015-12-22'::text, 'YYYY-MM-DD'::text))) AND ((sw_pressure_type.d_begin IS NULL) OR (sw_pressure_type.d_begin <= to_date('2015-12-22'::text, 'YYYY-MM-DD'::text))) AND ((sw_pressure_type.d_eind IS NULL) OR (sw_pressure_type.d_eind >= to_date('2015-12-22'::text, 'YYYY-MM-DD'::text))));


--
-- Name: vw_grondwaterlichamen_dgrw; Type: VIEW; Schema: sgbp_dgrw; Owner: -
--

CREATE VIEW vw_grondwaterlichamen_dgrw AS
 SELECT hydro_object.inspire_id_local_id AS identificatie,
    namespace_type.descrption AS "Waterbeheerder_Omschrijving",
        CASE
            WHEN (water_body.is_article_7 = true) THEN 'Aanwezig'::text
            ELSE 'Afwezig'::text
        END AS drinkwateronttrekking_jn,
    hdo_names.name AS omschrijving,
    "left"((hdo_rbd.inspire_id_local_id)::text, 4) AS stroomgebieddistrict,
    hydro_object.wkrv_id AS versie,
    ground_water_body.is_out_of_rbd AS is_buiten_deelstroomgebied,
    ground_water_body.is_transboundary AS is_grensoverschrijdend,
    ground_water_body.horizon_id AS horizon,
    substrate_type.omschrijving AS substraat,
    ground_water_body.is_layered AS is_gelaagd
   FROM ((((((((public.management_regulation_or_restriction_zone
     JOIN public.hydro_object ON ((management_regulation_or_restriction_zone.mrz_id = hydro_object.hdo_id)))
     LEFT JOIN public.hdo_names ON ((hdo_names.hdo_id = management_regulation_or_restriction_zone.mrz_id)))
     JOIN public.namespace_type ON ((namespace_type.ns_id = hydro_object.inspire_id_namespace)))
     JOIN public.water_body ON ((water_body.wbd_id = management_regulation_or_restriction_zone.mrz_id)))
     JOIN public.ground_water_body ON ((ground_water_body.gwb_id = management_regulation_or_restriction_zone.mrz_id)))
     JOIN public.river_basin_disrict rbd ON ((rbd.rbd_id = water_body.rbd_id)))
     JOIN public.hydro_object hdo_rbd ON ((rbd.rbd_id = hdo_rbd.hdo_id)))
     JOIN public.substrate_type ON ((substrate_type.sub_id = ground_water_body.substrate_id)))
  WHERE ((management_regulation_or_restriction_zone.mrz_type)::text = 'GroundWaterBody'::text);


--
-- Name: vw_gw_onttrekking_dgrw; Type: VIEW; Schema: sgbp_dgrw; Owner: -
--

CREATE VIEW vw_gw_onttrekking_dgrw AS
 SELECT namespace_type.code AS "Namespace",
    hydro_object.inspire_id_local_id AS "LokaalID",
    hdo_names.name AS "Omschrijving",
    gw_abstraction_point.company AS "Bedrijf",
    rewab_type.description AS "Onttrekking.Type",
    public.st_x((public.st_astext((public.st_dump(abstraction_point.geometry)).geom))::public.geometry) AS "RD_X",
    public.st_y((public.st_astext((public.st_dump(abstraction_point.geometry)).geom))::public.geometry) AS "RD_Y",
    vw_grondwaterlichamen.identificatie AS "Waterlichaam_Identificatie",
    vw_grondwaterlichamen.versie AS "Waterlichaam_Versie",
    vw_grondwaterlichamen.is_buiten_deelstroomgebied AS "Buiten_StroomgebiedJN",
    vw_grondwaterlichamen.is_grensoverschrijdend AS "GrensoverschrijdendJN",
    vw_grondwaterlichamen.horizon AS "Waterlichaam_Horizon",
    vw_grondwaterlichamen.substraat AS "Waterlichaam_Substraat",
    namespace_type.descrption AS "Waterbeheerder_omschrijving",
    vw_grondwaterlichamen.omschrijving AS "Waterlichaam_naam",
    "left"((vw_grondwaterlichamen.stroomgebieddistrict)::text, 4) AS "Stroomgebieddistrict"
   FROM ((((((public.hydro_object
     LEFT JOIN public.hdo_names ON ((hdo_names.hdo_id = hydro_object.hdo_id)))
     JOIN public.abstraction_point ON ((hydro_object.hdo_id = abstraction_point.asp_id)))
     JOIN public.gw_abstraction_point ON ((hydro_object.hdo_id = gw_abstraction_point.gasp_id)))
     JOIN public.rewab_type ON ((rewab_type.rwb_id = gw_abstraction_point.rewab_id)))
     JOIN public.namespace_type ON ((namespace_type.ns_id = hydro_object.inspire_id_namespace)))
     LEFT JOIN public.vw_grondwaterlichamen ON ((vw_grondwaterlichamen.db_id = abstraction_point.wbd_id)));


--
-- Name: vw_maatregelen_dgrw_totaal; Type: VIEW; Schema: sgbp_dgrw; Owner: -
--

CREATE VIEW vw_maatregelen_dgrw_totaal AS
 SELECT maatregelen.mtm_id AS "DB_ID",
    (vw_competent_authority.waterbeheerder_db_id)::text AS "Namespace",
        CASE
            WHEN (supp_add_measure_type.namespace_id >= 99) THEN wb_nst.descrption
            ELSE vw_competent_authority."Omschrijving"
        END AS "Waterbeheerder_Naam",
    regexp_replace((supp_add_measure_type.local_id)::text, '\r|\n'::text, ''::text, 'g'::text) AS "LokaalID",
    regexp_replace((supp_add_measure_type.measure_name)::text, '\r|\n'::text, ''::text, 'g'::text) AS "Naam",
    rpp.description AS "SGBPPeriode.Omschrijving",
    ((date_part('year'::text, rpp.period_start) || '-'::text) || date_part('year'::text, rpp.period_end)) AS "UitvoeringIn",
    regexp_replace((sw_supp_measure_eu_type.code)::text, '\r|\n'::text, ''::text, 'g'::text) AS "KRWmaatregel.Code",
    sw_supp_measure_eu_type.subcategorie AS "KRWmaatregel.Naam",
    sw_supp_measure_eu_type.hoofdcategorie AS "Hoofdcategorie",
    sw_supp_measure_eu_type.index AS "Index",
    sw_supp_measure_eu_type.klasse AS "SGBP_Klasse",
    sw_supp_measure_eu_type.harmonisatie AS "SGBP_Harmonisatie",
    sw_supp_measure_eu_type.code_sgbp AS "SGBP_code",
    sw_supp_measure_eu_type.artikel_sgbp AS "SGBP_artikel",
    sw_supp_measure_eu_type.tablkop_sgbp AS "SGBP_Hoofdcategorie",
    regexp_replace((level_of_area_type.code)::text, '\r|\n'::text, ''::text, 'g'::text) AS "KRWMaatregelNiveau.Code",
    regexp_replace((level_of_area_type.description)::text, '\r|\n'::text, ''::text, 'g'::text) AS "KRWMaatregelNiveau.Omschrijving",
    array_to_string(ARRAY( SELECT DISTINCT regexp_replace((ho.inspire_id_local_id)::text, '\r|\n'::text, ''::text, 'g'::text) AS regexp_replace
           FROM (public.hydro_object ho
             LEFT JOIN public.measure_per_man_reg_or_restr_zone mz ON ((mz.mrz_id = ho.hdo_id)))
          WHERE (mz.mtm_id = maatregelen.mtm_id)), '|'::text) AS "HoortbijKRWwaterlichaam",
    stroomgebieddistrict.inspire_id_local_id AS "KRWstroomgebiedDistrict.Code",
    array_to_string(ARRAY( SELECT DISTINCT regexp_replace((ho.inspire_id_local_id)::text, '\r|\n'::text, ''::text, 'g'::text) AS regexp_replace
           FROM ((public.hydro_object ho
             LEFT JOIN public.water_body wbd ON ((wbd.rbd_id = ho.hdo_id)))
             LEFT JOIN public.measure_per_man_reg_or_restr_zone mz ON ((mz.mrz_id = wbd.wbd_id)))
          WHERE (mz.mtm_id = maatregelen.mtm_id)), '|'::text) AS "KRWdeelstroomgebiedDistrict.Code",
    supp_add_measure_type.is_additional_measure AS "OpnameInSGBPJN",
    regexp_replace((organisation_category_type.code)::text, '\r|\n'::text, ''::text, 'g'::text) AS "Initiatiefnemer.Code",
    regexp_replace(supp_add_measure_type.initiative_party, '\r|\n'::text, ''::text, 'g'::text) AS "Initiatiefnemer.Naam",
    array_to_string(ARRAY( SELECT DISTINCT regexp_replace((t.code)::text, '\r|\n'::text, ''::text, 'g'::text) AS regexp_replace
           FROM (public.monitored_measure_eu_fund m
             JOIN public.eu_fund_type t ON ((t.euf_id = m.euf_id)))
          WHERE (m.mtm_id = maatregelen.mtm_id)), '|'::text) AS "EUFonds.Code",
    array_to_string(ARRAY( SELECT DISTINCT regexp_replace((vbg."Identificatie")::text, '\r|\n'::text, ''::text, 'g'::text) AS regexp_replace
           FROM (public.vw_beschermdegebieden vbg
             JOIN public.measure_per_man_protected_area mpmpa ON ((mpmpa.wpa_id = vbg."DB_ID")))
          WHERE ((mpmpa.mtm_id = maatregelen.mtm_id) AND (vbg."Versie_ID" = river_basin_management_plan.wkrv_id))), '|'::text) AS "RelatieMetNatura2000Gebied",
    array_to_string(ARRAY( SELECT DISTINCT regexp_replace((vgo."Identificatie")::text, '\r|\n'::text, ''::text, 'g'::text) AS regexp_replace
           FROM (public.vw_gw_onttrekking vgo
             JOIN public.measure_per_abstraction_point mpap ON ((mpap.asp_id = vgo."DB_ID")))
          WHERE ((mpap.mtm_id = maatregelen.mtm_id) AND (vgo.wkr_versie = river_basin_management_plan.wkrv_id))), '|'::text) AS "RelatieMetWaterwinning",
    river_basin_management_plan.wkrv_id AS versie,
    supp_add_measure_type.amount_value AS "OmvangNumeriekeWaarde",
    regexp_replace((eenheid_type.code)::text, '\r|\n'::text, ''::text, 'g'::text) AS omvangeenheidcode,
    mp1.amount_value AS voortgang,
    mp1.year AS "Jaar_voortgang",
    mst.code AS "Type_voortgang",
    concat(sw_supp_measure_eu_type.subcategorie, ' [', eenheid_type.code, ']') AS "Naam_Eenheid"
   FROM ((((((((((((((public.monitored_measure maatregelen
     JOIN public.supp_add_measure_type ON ((supp_add_measure_type.smnl_id = maatregelen.mtm_id)))
     JOIN public.sw_supp_measure_eu_type ON ((sw_supp_measure_eu_type.smeu_id = supp_add_measure_type.smeu_id)))
     JOIN public.eenheid_type ON ((eenheid_type.eenh_id = sw_supp_measure_eu_type.eenh_id)))
     JOIN public.namespace_type wb_nst ON ((wb_nst.ns_id = supp_add_measure_type.namespace_id)))
     JOIN public.competentauthority_namespacetype ON ((competentauthority_namespacetype.ns_id = supp_add_measure_type.namespace_id)))
     JOIN public.vw_competent_authority ON ((vw_competent_authority."DB_ID" = competentauthority_namespacetype.ore_id)))
     JOIN public.report_version ON ((report_version.rpv_id = maatregelen.rpv_id)))
     JOIN public.reporting_period rpp ON ((rpp.rpp_id = report_version.rpp_id)))
     JOIN public.level_of_area_type ON ((level_of_area_type.loa_id = maatregelen.level_of_measure_id)))
     JOIN public.organisation_category_type ON ((organisation_category_type.ocat_id = supp_add_measure_type.initiative_party_ocat_id)))
     JOIN public.river_basin_management_plan ON ((river_basin_management_plan.rbmp_id = supp_add_measure_type.rbmp_id)))
     JOIN public.hydro_object stroomgebieddistrict ON ((stroomgebieddistrict.hdo_id = river_basin_management_plan.rbd_id)))
     LEFT JOIN public.measure_progress mp1 ON ((mp1.mtm_id = maatregelen.mtm_id)))
     LEFT JOIN public.measure_status_type mst ON ((mst.mst_id = mp1.mst_id)))
  ORDER BY maatregelen.mtm_id;


--
-- Name: vw_maatregelen_dgrw_totaal_sgb; Type: VIEW; Schema: sgbp_dgrw; Owner: -
--

CREATE VIEW vw_maatregelen_dgrw_totaal_sgb AS
 SELECT maatregelen.mtm_id AS "DB_ID",
    (vw_competent_authority.waterbeheerder_db_id)::text AS "Namespace",
        CASE
            WHEN (supp_add_measure_type.namespace_id >= 99) THEN wb_nst.descrption
            ELSE vw_competent_authority."Omschrijving"
        END AS "Waterbeheerder_Naam",
    regexp_replace((supp_add_measure_type.local_id)::text, '\r|\n'::text, ''::text, 'g'::text) AS "LokaalID",
    regexp_replace((supp_add_measure_type.measure_name)::text, '\r|\n'::text, ''::text, 'g'::text) AS "Naam",
    rpp.description AS "SGBPPeriode.Omschrijving",
    ((date_part('year'::text, rpp.period_start) || '-'::text) || date_part('year'::text, rpp.period_end)) AS "UitvoeringIn",
    regexp_replace((sw_supp_measure_eu_type.code)::text, '\r|\n'::text, ''::text, 'g'::text) AS "KRWmaatregel.Code",
    sw_supp_measure_eu_type.subcategorie AS "KRWmaatregel.Naam",
    sw_supp_measure_eu_type.hoofdcategorie AS "Hoofdcategorie",
    sw_supp_measure_eu_type.index AS "Index",
    sw_supp_measure_eu_type.klasse AS "SGBP_Klasse",
    sw_supp_measure_eu_type.harmonisatie AS "SGBP_Harmonisatie",
    sw_supp_measure_eu_type.code_sgbp AS "SGBP_code",
    sw_supp_measure_eu_type.artikel_sgbp AS "SGBP_artikel",
    sw_supp_measure_eu_type.tablkop_sgbp AS "SGBP_Hoofdcategorie",
    regexp_replace((level_of_area_type.code)::text, '\r|\n'::text, ''::text, 'g'::text) AS "KRWMaatregelNiveau.Code",
    regexp_replace((level_of_area_type.description)::text, '\r|\n'::text, ''::text, 'g'::text) AS "KRWMaatregelNiveau.Omschrijving",
    array_to_string(ARRAY( SELECT DISTINCT regexp_replace((ho.inspire_id_local_id)::text, '\r|\n'::text, ''::text, 'g'::text) AS regexp_replace
           FROM ((public.hydro_object ho
             LEFT JOIN public.water_body wbd ON ((wbd.rbd_id = ho.hdo_id)))
             LEFT JOIN public.measure_per_man_reg_or_restr_zone mz ON ((mz.mrz_id = wbd.wbd_id)))
          WHERE (mz.mtm_id = maatregelen.mtm_id)), '|'::text) AS "KRWdeelstroomgebiedDistrict.Code",
    stroomgebieddistrict.inspire_id_local_id AS "KRWstroomgebiedDistrict.Code",
    supp_add_measure_type.is_additional_measure AS "OpnameInSGBPJN",
    regexp_replace((organisation_category_type.code)::text, '\r|\n'::text, ''::text, 'g'::text) AS "Initiatiefnemer.Code",
    regexp_replace(supp_add_measure_type.initiative_party, '\r|\n'::text, ''::text, 'g'::text) AS "Initiatiefnemer.Naam",
    array_to_string(ARRAY( SELECT DISTINCT regexp_replace((t.code)::text, '\r|\n'::text, ''::text, 'g'::text) AS regexp_replace
           FROM (public.monitored_measure_eu_fund m
             JOIN public.eu_fund_type t ON ((t.euf_id = m.euf_id)))
          WHERE (m.mtm_id = maatregelen.mtm_id)), '|'::text) AS "EUFonds.Code",
    array_to_string(ARRAY( SELECT DISTINCT regexp_replace((vbg."Identificatie")::text, '\r|\n'::text, ''::text, 'g'::text) AS regexp_replace
           FROM (public.vw_beschermdegebieden vbg
             JOIN public.measure_per_man_protected_area mpmpa ON ((mpmpa.wpa_id = vbg."DB_ID")))
          WHERE ((mpmpa.mtm_id = maatregelen.mtm_id) AND (vbg."Versie_ID" = river_basin_management_plan.wkrv_id))), '|'::text) AS "RelatieMetNatura2000Gebied",
    array_to_string(ARRAY( SELECT DISTINCT regexp_replace((vgo."Identificatie")::text, '\r|\n'::text, ''::text, 'g'::text) AS regexp_replace
           FROM (public.vw_gw_onttrekking vgo
             JOIN public.measure_per_abstraction_point mpap ON ((mpap.asp_id = vgo."DB_ID")))
          WHERE ((mpap.mtm_id = maatregelen.mtm_id) AND (vgo.wkr_versie = river_basin_management_plan.wkrv_id))), '|'::text) AS "RelatieMetWaterwinning",
    river_basin_management_plan.wkrv_id AS versie,
    supp_add_measure_type.amount_value AS "OmvangNumeriekeWaarde",
    regexp_replace((eenheid_type.code)::text, '\r|\n'::text, ''::text, 'g'::text) AS omvangeenheidcode,
    mp1.amount_value AS voortgang,
    mp1.year AS "Jaar_voortgang",
    mst.code AS "Type_voortgang",
    concat(sw_supp_measure_eu_type.subcategorie, ' [', eenheid_type.code, ']') AS "Naam_Eenheid"
   FROM ((((((((((((((public.monitored_measure maatregelen
     JOIN public.supp_add_measure_type ON ((supp_add_measure_type.smnl_id = maatregelen.mtm_id)))
     JOIN public.sw_supp_measure_eu_type ON ((sw_supp_measure_eu_type.smeu_id = supp_add_measure_type.smeu_id)))
     JOIN public.eenheid_type ON ((eenheid_type.eenh_id = sw_supp_measure_eu_type.eenh_id)))
     JOIN public.namespace_type wb_nst ON ((wb_nst.ns_id = supp_add_measure_type.namespace_id)))
     JOIN public.competentauthority_namespacetype ON ((competentauthority_namespacetype.ns_id = supp_add_measure_type.namespace_id)))
     JOIN public.vw_competent_authority ON ((vw_competent_authority."DB_ID" = competentauthority_namespacetype.ore_id)))
     JOIN public.report_version ON ((report_version.rpv_id = maatregelen.rpv_id)))
     JOIN public.reporting_period rpp ON ((rpp.rpp_id = report_version.rpp_id)))
     JOIN public.level_of_area_type ON ((level_of_area_type.loa_id = maatregelen.level_of_measure_id)))
     JOIN public.organisation_category_type ON ((organisation_category_type.ocat_id = supp_add_measure_type.initiative_party_ocat_id)))
     JOIN public.river_basin_management_plan ON ((river_basin_management_plan.rbmp_id = supp_add_measure_type.rbmp_id)))
     JOIN public.hydro_object stroomgebieddistrict ON ((stroomgebieddistrict.hdo_id = river_basin_management_plan.rbd_id)))
     LEFT JOIN public.measure_progress mp1 ON ((mp1.mtm_id = maatregelen.mtm_id)))
     LEFT JOIN public.measure_status_type mst ON ((mst.mst_id = mp1.mst_id)));


--
-- Name: vw_milieudoelstellingen_gw_dgrw; Type: VIEW; Schema: sgbp_dgrw; Owner: -
--

CREATE VIEW vw_milieudoelstellingen_gw_dgrw AS
 SELECT vw_grondwaterlichamen.identificatie AS "Waterlichaam_Identificatie",
    vw_grondwaterlichamen.versie AS "Waterlichaam_Versie",
    vw_grondwaterlichamen.is_buiten_deelstroomgebied AS "Buiten_StroomgebiedJN",
    vw_grondwaterlichamen.is_grensoverschrijdend AS "GrensoverschrijdendJN",
    vw_grondwaterlichamen.horizon AS "Waterlichaam_Horizon",
    vw_grondwaterlichamen.substraat AS "Waterlichaam_Substraat",
    namespace_type.descrption AS "Waterbeheerder_omschrijving",
    vw_grondwaterlichamen.omschrijving AS "Waterlichaam_naam",
    "left"((vw_grondwaterlichamen.stroomgebieddistrict)::text, 4) AS "Stroomgebieddistrict",
    objectives_exemption_type.article_nr AS "Artikel",
    objectives_exemption_type.obex_id AS "Motiveringsgrond_Functie_DB_ID",
    objectives_exemption_type.name AS "Motiveringsgrond_of_Functie"
   FROM ((((public.gwb_chemical_exemption
     LEFT JOIN public.objectives_exemption_type ON ((objectives_exemption_type.obex_id = gwb_chemical_exemption.obex_id)))
     LEFT JOIN public.hydro_object hdo_gwb ON ((hdo_gwb.hdo_id = gwb_chemical_exemption.gwb_id)))
     LEFT JOIN public.vw_grondwaterlichamen ON ((vw_grondwaterlichamen.db_id = hdo_gwb.hdo_id)))
     LEFT JOIN public.namespace_type ON ((namespace_type.ns_id = hdo_gwb.inspire_id_namespace)));


--
-- Name: vw_milieudoelstellingen_ow_dgrw; Type: VIEW; Schema: sgbp_dgrw; Owner: -
--

CREATE VIEW vw_milieudoelstellingen_ow_dgrw AS
 SELECT vw_oppervlaktewaterlichamen.identificatie AS "Waterlichaam_identificatie",
    vw_oppervlaktewaterlichamen.versie AS "Waterlichaam_Versie",
    vw_oppervlaktewaterlichamen.type AS "Waterlichaam_Type",
    "left"((vw_oppervlaktewaterlichamen.stroomgebieddistrict)::text, 4) AS "Stroomgebieddistrict",
    objectives_exemption_type.article_nr AS "Artikel",
    objectives_exemption_type.obex_id AS "Motiveringsgrond_Functie_DB_ID",
    objectives_exemption_type.name AS "Motiveringsgrond_of_Functie",
        CASE
            WHEN (hdo_swb.inspire_id_namespace >= 99) THEN namespace_type.descrption
            ELSE vw_competent_authority."Omschrijving"
        END AS "Waterbeheerder_omschrijving",
    vw_oppervlaktewaterlichamen.omschrijving AS "Waterlichaam_naam",
    vw_oppervlaktewaterlichamen.referentietype AS "Waterlichaam_DoelType",
    vw_oppervlaktewaterlichamen.waterlichaam_status AS "Waterlichaam_Status"
   FROM ((((((public.swb_exemption
     LEFT JOIN public.objectives_exemption_type ON ((objectives_exemption_type.obex_id = swb_exemption.obex_id)))
     LEFT JOIN public.hydro_object hdo_swb ON ((hdo_swb.hdo_id = swb_exemption.swb_id)))
     LEFT JOIN public.vw_oppervlaktewaterlichamen ON ((vw_oppervlaktewaterlichamen.db_id = hdo_swb.hdo_id)))
     LEFT JOIN public.namespace_type ON ((namespace_type.ns_id = hdo_swb.inspire_id_namespace)))
     JOIN public.competentauthority_namespacetype ON ((competentauthority_namespacetype.ns_id = hdo_swb.inspire_id_namespace)))
     JOIN public.vw_competent_authority ON ((vw_competent_authority."DB_ID" = competentauthority_namespacetype.ore_id)))
UNION ALL
 SELECT vw_oppervlaktewaterlichamen.identificatie AS "Waterlichaam_identificatie",
    vw_oppervlaktewaterlichamen.versie AS "Waterlichaam_Versie",
    vw_oppervlaktewaterlichamen.type AS "Waterlichaam_Type",
    "left"((vw_oppervlaktewaterlichamen.stroomgebieddistrict)::text, 4) AS "Stroomgebieddistrict",
    '4.3a'::character varying AS "Artikel",
    eu_function_43a_type.fu43_id AS "Motiveringsgrond_Functie_DB_ID",
    eu_function_43a_type.function AS "Motiveringsgrond_of_Functie",
        CASE
            WHEN (hdo_swb.inspire_id_namespace >= 99) THEN namespace_type.descrption
            ELSE vw_competent_authority."Omschrijving"
        END AS "Waterbeheerder_omschrijving",
    vw_oppervlaktewaterlichamen.omschrijving AS "Waterlichaam_naam",
    vw_oppervlaktewaterlichamen.referentietype AS "Waterlichaam_DoelType",
    vw_oppervlaktewaterlichamen.waterlichaam_status AS "Waterlichaam_Status"
   FROM ((((((public.swb_measures_43a
     LEFT JOIN public.hydro_object hdo_swb ON ((hdo_swb.hdo_id = swb_measures_43a.swb_id)))
     LEFT JOIN public.vw_oppervlaktewaterlichamen ON ((vw_oppervlaktewaterlichamen.db_id = hdo_swb.hdo_id)))
     LEFT JOIN public.eu_function_43a_type ON ((eu_function_43a_type.fu43_id = swb_measures_43a.fu43_id)))
     LEFT JOIN public.namespace_type ON ((namespace_type.ns_id = hdo_swb.inspire_id_namespace)))
     JOIN public.competentauthority_namespacetype ON ((competentauthority_namespacetype.ns_id = hdo_swb.inspire_id_namespace)))
     JOIN public.vw_competent_authority ON ((vw_competent_authority."DB_ID" = competentauthority_namespacetype.ore_id)))
  WHERE (vw_oppervlaktewaterlichamen.waterlichaam_status = 'Sterk veranderd'::text)
UNION ALL
 SELECT vw_oppervlaktewaterlichamen.identificatie AS "Waterlichaam_identificatie",
    vw_oppervlaktewaterlichamen.versie AS "Waterlichaam_Versie",
    vw_oppervlaktewaterlichamen.type AS "Waterlichaam_Type",
    "left"((vw_oppervlaktewaterlichamen.stroomgebieddistrict)::text, 4) AS "Stroomgebieddistrict",
    '4.3b'::character varying AS "Artikel",
    eu_article_43b_type.a43b_id AS "Motiveringsgrond_Functie_DB_ID",
    eu_article_43b_type.omschrijving AS "Motiveringsgrond_of_Functie",
        CASE
            WHEN (hdo_swb.inspire_id_namespace >= 99) THEN namespace_type.descrption
            ELSE vw_competent_authority."Omschrijving"
        END AS "Waterbeheerder_omschrijving",
    vw_oppervlaktewaterlichamen.omschrijving AS "Waterlichaam_naam",
    vw_oppervlaktewaterlichamen.referentietype AS "Waterlichaam_DoelType",
    vw_oppervlaktewaterlichamen.waterlichaam_status AS "Waterlichaam_Status"
   FROM ((((((public.swb_art43b_excemption
     LEFT JOIN public.hydro_object hdo_swb ON ((hdo_swb.hdo_id = swb_art43b_excemption.swb_id)))
     LEFT JOIN public.vw_oppervlaktewaterlichamen ON ((vw_oppervlaktewaterlichamen.db_id = hdo_swb.hdo_id)))
     LEFT JOIN public.eu_article_43b_type ON ((eu_article_43b_type.a43b_id = swb_art43b_excemption.a43b_id)))
     LEFT JOIN public.namespace_type ON ((namespace_type.ns_id = hdo_swb.inspire_id_namespace)))
     JOIN public.competentauthority_namespacetype ON ((competentauthority_namespacetype.ns_id = hdo_swb.inspire_id_namespace)))
     JOIN public.vw_competent_authority ON ((vw_competent_authority."DB_ID" = competentauthority_namespacetype.ore_id)))
  WHERE (vw_oppervlaktewaterlichamen.waterlichaam_status = 'Sterk veranderd'::text);


--
-- Name: vw_oordeel_totaal_gwl_dgrw; Type: VIEW; Schema: sgbp_dgrw; Owner: -
--

CREATE VIEW vw_oordeel_totaal_gwl_dgrw AS
 SELECT gwb_yearly_status.gys_id AS "DB_ID",
    vw_grondwaterlichamen.identificatie AS "Waterlichaam_Identificatie",
    gwb_yearly_status.year_of_status AS "Rapportagejaar",
    vw_waargenomen_eigenschap."DB_ID" AS "Waargenomen_Eigenschap_DB_ID",
    vw_waargenomen_eigenschap."Tpering_Code",
    vw_waargenomen_eigenschap."Typering_Omschrijving",
    vw_waargenomen_eigenschap."Grootheid_Code",
    vw_waargenomen_eigenschap."Grootheid_Omschrijving",
    vw_waargenomen_eigenschap."ChemischeStof_code",
    vw_waargenomen_eigenschap."ChemischeStof_Omschrijving",
    vw_waargenomen_eigenschap."Hoedanigheid_Code",
    vw_waargenomen_eigenschap."Hoedanigheid_Omschrijving",
    concat(vw_waargenomen_eigenschap."Typering_Omschrijving", vw_waargenomen_eigenschap."Grootheid_Omschrijving", ' ', vw_waargenomen_eigenschap."ChemischeStof_Omschrijving") AS concat,
    classification_type.description AS "Oordeel",
    eu_monitoring_goal_type.code AS "Oordeel_Type_Code",
    eu_monitoring_goal_type.description AS "Oordeel_Type_Omschrijving",
    waarde_bepalings_methode_type.code AS "WaardebepalingsMethode_Code",
    waarde_bepalings_methode_type.omschrijving AS "WaardebepalingsMethode_Omschrijving",
        CASE
            WHEN (krw_kwal."Is_van_toepassing" IS TRUE) THEN true
            ELSE false
        END AS "KWAL_ELEMENT",
    krw_kwal."Onderdeel_van_EU_Typering_Omschrijving",
    krw_kwal."Onderdeel_van_NL_Typering_Omschrijving",
    vw_grondwaterlichamen.versie AS "Waterlichaam_Versie",
    vw_grondwaterlichamen.is_buiten_deelstroomgebied AS "Buiten_StroomgebiedJN",
    vw_grondwaterlichamen.is_grensoverschrijdend AS "GrensoverschrijdendJN",
    vw_grondwaterlichamen.horizon AS "Waterlichaam_Horizon",
    vw_grondwaterlichamen.substraat AS "Waterlichaam_Substraat",
    namespace_type.descrption AS "Waterbeheerder_omschrijving",
    vw_grondwaterlichamen.omschrijving AS "Waterlichaam_naam",
    "left"((vw_grondwaterlichamen.stroomgebieddistrict)::text, 4) AS "Stroomgebieddistrict"
   FROM ((((((((public.gwb_yearly_status
     LEFT JOIN public.vw_grondwaterlichamen ON ((vw_grondwaterlichamen.db_id = gwb_yearly_status.gwb_id)))
     JOIN public.gw_chemical_status ON ((gw_chemical_status.gys_id = gwb_yearly_status.gys_id)))
     LEFT JOIN public.classification_type ON ((gw_chemical_status.clst_id = classification_type.cls_id)))
     LEFT JOIN public.vw_waargenomen_eigenschap ON ((vw_waargenomen_eigenschap."DB_ID" = gw_chemical_status.opt_id)))
     LEFT JOIN public.waarde_bepalings_methode_type ON ((waarde_bepalings_methode_type.wbpm_id = gw_chemical_status.wbpm_id)))
     LEFT JOIN public.eu_monitoring_goal_type ON ((eu_monitoring_goal_type.eumg_id = gw_chemical_status.eumg_id)))
     JOIN public.namespace_type ON ((namespace_type.ns_id = vw_grondwaterlichamen.waterbeheerder_code)))
     LEFT JOIN public.vw_krw_kwaliteitselement_gw krw_kwal ON ((krw_kwal."Waargenomen_Eigenschap_DB_ID" = vw_waargenomen_eigenschap."DB_ID")))
UNION ALL
 SELECT gwb_yearly_status.gys_id AS "DB_ID",
    vw_grondwaterlichamen.identificatie AS "Waterlichaam_Identificatie",
    gwb_yearly_status.year_of_status AS "Rapportagejaar",
    vw_waargenomen_eigenschap."DB_ID" AS "Waargenomen_Eigenschap_DB_ID",
    vw_waargenomen_eigenschap."Tpering_Code",
    vw_waargenomen_eigenschap."Typering_Omschrijving",
    vw_waargenomen_eigenschap."Grootheid_Code",
    vw_waargenomen_eigenschap."Grootheid_Omschrijving",
    vw_waargenomen_eigenschap."ChemischeStof_code",
    vw_waargenomen_eigenschap."ChemischeStof_Omschrijving",
    vw_waargenomen_eigenschap."Hoedanigheid_Code",
    vw_waargenomen_eigenschap."Hoedanigheid_Omschrijving",
    concat(vw_waargenomen_eigenschap."Typering_Omschrijving", vw_waargenomen_eigenschap."Grootheid_Omschrijving", ' ', vw_waargenomen_eigenschap."ChemischeStof_Omschrijving") AS concat,
    classification_type.description AS "Oordeel",
    eu_monitoring_goal_type.code AS "Oordeel_Type_Code",
    eu_monitoring_goal_type.description AS "Oordeel_Type_Omschrijving",
    waarde_bepalings_methode_type.code AS "WaardebepalingsMethode_Code",
    waarde_bepalings_methode_type.omschrijving AS "WaardebepalingsMethode_Omschrijving",
        CASE
            WHEN (krw_kwal."Is_van_toepassing" IS TRUE) THEN true
            ELSE false
        END AS "KWAL_ELEMENT",
    krw_kwal."Onderdeel_van_EU_Typering_Omschrijving",
    krw_kwal."Onderdeel_van_NL_Typering_Omschrijving",
    vw_grondwaterlichamen.versie AS "Waterlichaam_Versie",
    vw_grondwaterlichamen.is_buiten_deelstroomgebied AS "Buiten_StroomgebiedJN",
    vw_grondwaterlichamen.is_grensoverschrijdend AS "GrensoverschrijdendJN",
    vw_grondwaterlichamen.horizon AS "Waterlichaam_Horizon",
    vw_grondwaterlichamen.substraat AS "Waterlichaam_Substraat",
    namespace_type.descrption AS "Waterbeheerder_omschrijving",
    vw_grondwaterlichamen.omschrijving AS "Waterlichaam_naam",
    "left"((vw_grondwaterlichamen.stroomgebieddistrict)::text, 4) AS "Stroomgebieddistrict"
   FROM ((((((((public.gwb_yearly_status
     LEFT JOIN public.vw_grondwaterlichamen ON ((vw_grondwaterlichamen.db_id = gwb_yearly_status.gwb_id)))
     JOIN public.gw_quantity_status ON ((gw_quantity_status.gys_id = gwb_yearly_status.gys_id)))
     LEFT JOIN public.classification_type ON ((gw_quantity_status.gwst_id = classification_type.cls_id)))
     LEFT JOIN public.vw_waargenomen_eigenschap ON ((vw_waargenomen_eigenschap."DB_ID" = gw_quantity_status.opt_id)))
     LEFT JOIN public.waarde_bepalings_methode_type ON ((waarde_bepalings_methode_type.wbpm_id = gw_quantity_status.wbpm_id)))
     LEFT JOIN public.eu_monitoring_goal_type ON ((eu_monitoring_goal_type.eumg_id = gw_quantity_status.eumg_id)))
     JOIN public.namespace_type ON ((namespace_type.ns_id = vw_grondwaterlichamen.waterbeheerder_code)))
     LEFT JOIN public.vw_krw_kwaliteitselement_gw krw_kwal ON ((krw_kwal."Waargenomen_Eigenschap_DB_ID" = vw_waargenomen_eigenschap."DB_ID")));


--
-- Name: vw_oordeel_totaal_owm_dgrw_nieuw; Type: VIEW; Schema: sgbp_dgrw; Owner: -
--

CREATE VIEW vw_oordeel_totaal_owm_dgrw_nieuw AS
 SELECT swb_yearly_status.sys_id AS "Status_DB_ID",
    vw_oppervlaktewaterlichamen.identificatie AS "Waterlichaam_identificatie",
    vw_oppervlaktewaterlichamen.versie AS "Waterlichaam_Versie",
    vw_oppervlaktewaterlichamen.type AS "Waterlichaam_Type",
    "left"((vw_oppervlaktewaterlichamen.stroomgebieddistrict)::text, 4) AS "Stroomgebieddistrict",
    swb_yearly_status.year_of_status AS "Rapportagejaar",
    vw_waargenomen_eigenschap_db_id."DB_ID" AS "Waargenomen_Eigenschap_DB_ID",
    vw_waargenomen_eigenschap_db_id."Tpering_Code",
    vw_waargenomen_eigenschap_db_id."Typering_Omschrijving",
    vw_waargenomen_eigenschap_db_id."Grootheid_Code",
    vw_waargenomen_eigenschap_db_id."Grootheid_Omschrijving",
    vw_waargenomen_eigenschap_db_id."ChemischeStof_code",
    vw_waargenomen_eigenschap_db_id."ChemischeStof_Omschrijving",
    vw_waargenomen_eigenschap_db_id."Hoedanigheid_Code",
    vw_waargenomen_eigenschap_db_id."Hoedanigheid_Omschrijving",
    classification_type.description AS "Oordeel",
    eu_monitoring_goal_type.code AS "Oordeel_Type_Code",
    eu_monitoring_goal_type.description AS "Oordeel_Type_Omschrijving",
    waarde_bepalings_methode_type.code AS "WaardebepalingsMethode_Code",
    waarde_bepalings_methode_type.omschrijving AS "WaardebepalingsMethode_Omschrijving",
        CASE
            WHEN (namespace_type.ns_id >= 99) THEN namespace_type.descrption
            ELSE vw_competent_authority."Omschrijving"
        END AS "Waterbeheerder_omschrijving",
    vw_oppervlaktewaterlichamen.omschrijving AS "Waterlichaam_naam",
        CASE
            WHEN (ssg_2907.ssge_id = 2907) THEN true
            ELSE false
        END AS "CHEMT_stof",
        CASE
            WHEN (ssg_3124.ssge_id = 3124) THEN true
            ELSE false
        END AS "PRIO2008_Norm2012",
        CASE
            WHEN (ssg_3148.ssge_id = 3148) THEN true
            ELSE false
        END AS "PRIOSTOF 34-45",
        CASE
            WHEN (ssg_3150.ssge_id = 3150) THEN true
            ELSE false
        END AS "UBIQUITAIR",
        CASE
            WHEN (ssg_3149.ssge_id = 3149) THEN true
            ELSE false
        END AS "NIET-UBIQUITAIR",
        CASE
            WHEN (krw_kwal."Is_van_toepassing" IS TRUE) THEN true
            ELSE false
        END AS "KWAL_ELEMENT",
    vw_oppervlaktewaterlichamen.referentietype AS "Waterlichaam_DoelType",
    vw_oppervlaktewaterlichamen.waterlichaam_status AS "Waterlichaam_Status",
    concat(vw_waargenomen_eigenschap_db_id."Typering_Omschrijving", vw_waargenomen_eigenschap_db_id."Grootheid_Omschrijving", ' ', vw_waargenomen_eigenschap_db_id."ChemischeStof_Omschrijving") AS "BeoordeeldeParameter",
        CASE
            WHEN (ssg_2908.ssge_id = 3155) THEN true
            ELSE false
        END AS "SVS_stof"
   FROM ((((((((((((((((public.swb_yearly_status
     LEFT JOIN public.vw_oppervlaktewaterlichamen ON ((vw_oppervlaktewaterlichamen.db_id = swb_yearly_status.swb_id)))
     LEFT JOIN public.sw_chemical_substance_status ON ((sw_chemical_substance_status.sys_id = swb_yearly_status.sys_id)))
     LEFT JOIN public.classification_type ON ((sw_chemical_substance_status.swcs_id = classification_type.cls_id)))
     LEFT JOIN public.vw_waargenomen_eigenschap_db_id ON ((vw_waargenomen_eigenschap_db_id."DB_ID" = sw_chemical_substance_status.opt_id)))
     LEFT JOIN public.waarde_bepalings_methode_type ON ((waarde_bepalings_methode_type.wbpm_id = sw_chemical_substance_status.wbpm_id)))
     LEFT JOIN public.eu_monitoring_goal_type ON ((eu_monitoring_goal_type.eumg_id = sw_chemical_substance_status.eumg_id)))
     LEFT JOIN public.namespace_type ON ((namespace_type.ns_id = vw_oppervlaktewaterlichamen.waterbeheerder_code)))
     LEFT JOIN ( SELECT substance_group_element.chs_id,
            substance_group_element.ssge_id
           FROM public.substance_group_element
          WHERE (substance_group_element.ssge_id = 2907)) ssg_2907 ON ((ssg_2907.chs_id = vw_waargenomen_eigenschap_db_id."ChemischeStof_DB_ID")))
     LEFT JOIN ( SELECT substance_group_element.chs_id,
            substance_group_element.ssge_id
           FROM public.substance_group_element
          WHERE (substance_group_element.ssge_id = 3155)) ssg_2908 ON ((ssg_2908.chs_id = vw_waargenomen_eigenschap_db_id."ChemischeStof_DB_ID")))
     LEFT JOIN ( SELECT substance_group_element.chs_id,
            substance_group_element.ssge_id
           FROM public.substance_group_element
          WHERE (substance_group_element.ssge_id = 3148)) ssg_3148 ON ((ssg_3148.chs_id = vw_waargenomen_eigenschap_db_id."ChemischeStof_DB_ID")))
     LEFT JOIN ( SELECT substance_group_element.chs_id,
            substance_group_element.ssge_id
           FROM public.substance_group_element
          WHERE (substance_group_element.ssge_id = 3124)) ssg_3124 ON ((ssg_3124.chs_id = vw_waargenomen_eigenschap_db_id."ChemischeStof_DB_ID")))
     LEFT JOIN ( SELECT substance_group_element.chs_id,
            substance_group_element.ssge_id
           FROM public.substance_group_element
          WHERE (substance_group_element.ssge_id = 3150)) ssg_3150 ON ((ssg_3150.chs_id = vw_waargenomen_eigenschap_db_id."ChemischeStof_DB_ID")))
     LEFT JOIN ( SELECT substance_group_element.chs_id,
            substance_group_element.ssge_id
           FROM public.substance_group_element
          WHERE (substance_group_element.ssge_id = 3149)) ssg_3149 ON ((ssg_3149.chs_id = vw_waargenomen_eigenschap_db_id."ChemischeStof_DB_ID")))
     LEFT JOIN public.vw_krw_kwaliteitselement krw_kwal ON ((((krw_kwal."Watertype_Code")::text = (vw_oppervlaktewaterlichamen.referentietype)::text) AND (krw_kwal."Waargenomen_Eigenschap_DB_ID" = vw_waargenomen_eigenschap_db_id."DB_ID"))))
     JOIN public.competentauthority_namespacetype ON ((competentauthority_namespacetype.ns_id = vw_oppervlaktewaterlichamen.waterbeheerder_code)))
     JOIN public.vw_competent_authority ON ((vw_competent_authority."DB_ID" = competentauthority_namespacetype.ore_id)))
  WHERE ((eu_monitoring_goal_type.code)::text = 'TT_OM'::text)
UNION ALL
 SELECT swb_yearly_status.sys_id AS "Status_DB_ID",
    vw_oppervlaktewaterlichamen.identificatie AS "Waterlichaam_identificatie",
    vw_oppervlaktewaterlichamen.versie AS "Waterlichaam_Versie",
    vw_oppervlaktewaterlichamen.type AS "Waterlichaam_Type",
    "left"((vw_oppervlaktewaterlichamen.stroomgebieddistrict)::text, 4) AS "Stroomgebieddistrict",
    swb_yearly_status.year_of_status AS "Rapportagejaar",
    vw_waargenomen_eigenschap_db_id."DB_ID" AS "Waargenomen_Eigenschap_DB_ID",
    vw_waargenomen_eigenschap_db_id."Tpering_Code",
    vw_waargenomen_eigenschap_db_id."Typering_Omschrijving",
    vw_waargenomen_eigenschap_db_id."Grootheid_Code",
    vw_waargenomen_eigenschap_db_id."Grootheid_Omschrijving",
    vw_waargenomen_eigenschap_db_id."ChemischeStof_code",
    vw_waargenomen_eigenschap_db_id."ChemischeStof_Omschrijving",
    vw_waargenomen_eigenschap_db_id."Hoedanigheid_Code",
    vw_waargenomen_eigenschap_db_id."Hoedanigheid_Omschrijving",
    classification_type.description AS "Oordeel",
    eu_monitoring_goal_type.code AS "Oordeel_Type_Code",
    eu_monitoring_goal_type.description AS "Oordeel_Type_Omschrijving",
    waarde_bepalings_methode_type.code AS "WaardebepalingsMethode_Code",
    waarde_bepalings_methode_type.omschrijving AS "WaardebepalingsMethode_Omschrijving",
        CASE
            WHEN (namespace_type.ns_id >= 99) THEN namespace_type.descrption
            ELSE vw_competent_authority."Omschrijving"
        END AS "Waterbeheerder_omschrijving",
    vw_oppervlaktewaterlichamen.omschrijving AS "Waterlichaam_naam",
    false AS "CHEMT_stof",
    false AS "PRIO2008_Norm2012",
    false AS "PRIOSTOF 34-45",
    false AS "UBIQUITAIR",
    false AS "NIET-UBIQUITAIR",
        CASE
            WHEN (krw_kwal."Is_van_toepassing" IS TRUE) THEN true
            ELSE false
        END AS "KWAL_ELEMENT",
    vw_oppervlaktewaterlichamen.referentietype AS "Waterlichaam_DoelType",
    vw_oppervlaktewaterlichamen.waterlichaam_status AS "Waterlichaam_Status",
    concat(vw_waargenomen_eigenschap_db_id."Typering_Omschrijving", vw_waargenomen_eigenschap_db_id."Grootheid_Omschrijving", ' ', vw_waargenomen_eigenschap_db_id."ChemischeStof_Omschrijving") AS "BeoordeeldeParameter",
    false AS "SVS_stof"
   FROM ((((((((((public.swb_yearly_status
     LEFT JOIN public.vw_oppervlaktewaterlichamen ON ((vw_oppervlaktewaterlichamen.db_id = swb_yearly_status.swb_id)))
     LEFT JOIN public.sw_ecological_status ON ((sw_ecological_status.sys_id = swb_yearly_status.sys_id)))
     LEFT JOIN public.classification_type ON ((sw_ecological_status.swes_id = classification_type.cls_id)))
     LEFT JOIN public.vw_waargenomen_eigenschap_db_id ON ((vw_waargenomen_eigenschap_db_id."DB_ID" = sw_ecological_status.opt_id)))
     LEFT JOIN public.waarde_bepalings_methode_type ON ((waarde_bepalings_methode_type.wbpm_id = sw_ecological_status.wbpm_id)))
     LEFT JOIN public.eu_monitoring_goal_type ON ((eu_monitoring_goal_type.eumg_id = sw_ecological_status.eumg_id)))
     LEFT JOIN public.namespace_type ON ((namespace_type.ns_id = vw_oppervlaktewaterlichamen.waterbeheerder_code)))
     LEFT JOIN public.vw_krw_kwaliteitselement krw_kwal ON ((((krw_kwal."Watertype_Code")::text = (vw_oppervlaktewaterlichamen.referentietype)::text) AND (krw_kwal."Waargenomen_Eigenschap_DB_ID" = vw_waargenomen_eigenschap_db_id."DB_ID"))))
     JOIN public.competentauthority_namespacetype ON ((competentauthority_namespacetype.ns_id = vw_oppervlaktewaterlichamen.waterbeheerder_code)))
     JOIN public.vw_competent_authority ON ((vw_competent_authority."DB_ID" = competentauthority_namespacetype.ore_id)))
  WHERE ((eu_monitoring_goal_type.code)::text = 'TT_OM'::text);


--
-- Name: vw_oordeel_totaal_owm_for_crystal_reports; Type: VIEW; Schema: sgbp_dgrw; Owner: -
--

CREATE VIEW vw_oordeel_totaal_owm_for_crystal_reports AS
 WITH ssg AS (
         SELECT substance_group_element.chs_id,
            substance_group_element.ssge_id,
                CASE
                    WHEN (substance_group_element.ssge_id = 2908) THEN 'SVS_STOF'::text
                    ELSE
                    CASE
                        WHEN (substance_group_element.ssge_id = 3150) THEN 'UBIQUITAIR'::text
                        ELSE 'NIET_UBIQUITAIR'::text
                    END
                END AS "CATEGORIE"
           FROM public.substance_group_element
          WHERE (substance_group_element.ssge_id = ANY (ARRAY[2908, 3150, 3149]))
        ), krw_kwal AS (
         SELECT wfd_qe_swtype.name,
                CASE
                    WHEN (wfd_qe_swtype.part_of_opt_id = 4477) THEN 'CHEMT'::text
                    ELSE
                    CASE
                        WHEN (wfd_qe_swtype.part_of_opt_id = ANY (ARRAY[4480, 4514])) THEN 'FYSCHEM'::text
                        ELSE
                        CASE
                            WHEN (wfd_qe_swtype.part_of_opt_id = 4476) THEN 'BIOLT'::text
                            ELSE 'TOTAAL'::text
                        END
                    END
                END AS "CATEGORIE",
            wfd_qe_swtype.opt_id,
            wfd_qe_swtype.swt_id,
            wfd_qe_swtype.is_applicable
           FROM public.wfd_qe_swtype
        )
 SELECT swb_yearly_status.sys_id AS "DB_ID",
    hdo_swb.hdo_id AS "Waterlichaam_DB_ID",
    hdo_swb.inspire_id_local_id AS "Waterlichaam_identificatie",
    hdo_swb.wkrv_id AS "Waterlichaam_Versie",
    swb_yearly_status.year_of_status AS "Rapportagejaar",
    vw_waargenomen_eigenschap_db_id."DB_ID" AS "Waargenomen_Eigenschap_DB_ID",
        CASE
            WHEN (krw_kwal.name IS NOT NULL) THEN krw_kwal.name
            ELSE
            CASE
                WHEN (vw_waargenomen_eigenschap_db_id."ChemischeStof_Omschrijving" IS NOT NULL) THEN vw_waargenomen_eigenschap_db_id."ChemischeStof_Omschrijving"
                ELSE vw_waargenomen_eigenschap_db_id."Grootheid_Omschrijving"
            END
        END AS "Typering",
    classification_type.code AS "Oordeel_Code",
    classification_type.description AS "Oordeel",
        CASE
            WHEN ((eu_monitoring_goal_type.code)::text = 'TT_OM'::text) THEN 1
            WHEN ((eu_monitoring_goal_type.code)::text = 'OM'::text) THEN 2
            WHEN ((eu_monitoring_goal_type.code)::text = 'TT'::text) THEN 3
            WHEN (eu_monitoring_goal_type.code IS NULL) THEN 5
            ELSE 4
        END AS oordeel_type_sortorder,
    eu_monitoring_goal_type.eumg_id AS "Oordeel_Type_DB_ID",
    eu_monitoring_goal_type.code AS "Oordeel_Type_Code",
    eu_monitoring_goal_type.description AS "Oordeel_Type_Omschrijving",
        CASE
            WHEN ((waarde_bepalings_methode_type.code)::text = 'DESK'::text) THEN 1
            WHEN ((waarde_bepalings_methode_type.code)::text = 'AQUOKIT'::text) THEN 2
            WHEN (waarde_bepalings_methode_type.code IS NULL) THEN 4
            ELSE 3
        END AS waardebepalingsmethode_sortorder,
    waarde_bepalings_methode_type.code AS "WaardebepalingsMethode_Code",
    waarde_bepalings_methode_type.omschrijving AS "WaardebepalingsMethode_Omschrijving",
    (swb_yearly_status.comment_on_chemical_status)::character varying(5000) AS "Toelichting_ChemischeStatus",
    (swb_yearly_status.comment_on_ecological_status)::character varying(5000) AS "Toelichting_EcologischeStatus",
    (swb_yearly_status.motivation_4no_chemical_status)::character varying(5000) AS "Motivatie_Geen_ChemischeStatus",
    (swb_yearly_status.motivation_4no_ecological_status)::character varying(5000) AS "Motivatie_Geen_EcologischeStatus",
        CASE
            WHEN (krw_kwal.is_applicable = true) THEN (krw_kwal."CATEGORIE")::character varying(24)
            ELSE 'NVT'::character varying
        END AS "KWAL_ELEMENT",
    (ssg."CATEGORIE")::character varying(24) AS "STOF_CATEGORIE",
        CASE
            WHEN (wscm.scm_id IS NOT NULL) THEN 'A'::character varying(1)
            ELSE NULL::character varying
        END AS "Motivatie_Achteruitgang",
    krw_kwal.is_applicable
   FROM ((((((((((public.swb_yearly_status
     LEFT JOIN public.hydro_object hdo_swb ON ((hdo_swb.hdo_id = swb_yearly_status.swb_id)))
     LEFT JOIN public.surface_water_body swb ON ((swb.swb_id = hdo_swb.hdo_id)))
     LEFT JOIN public.sw_chemical_substance_status ON ((sw_chemical_substance_status.sys_id = swb_yearly_status.sys_id)))
     LEFT JOIN public.classification_type ON ((sw_chemical_substance_status.swcs_id = classification_type.cls_id)))
     LEFT JOIN public.vw_waargenomen_eigenschap_db_id ON ((vw_waargenomen_eigenschap_db_id."DB_ID" = sw_chemical_substance_status.opt_id)))
     LEFT JOIN public.waarde_bepalings_methode_type ON ((waarde_bepalings_methode_type.wbpm_id = sw_chemical_substance_status.wbpm_id)))
     LEFT JOIN public.eu_monitoring_goal_type ON ((eu_monitoring_goal_type.eumg_id = sw_chemical_substance_status.eumg_id)))
     LEFT JOIN ssg ON ((vw_waargenomen_eigenschap_db_id."ChemischeStof_DB_ID" = ssg.chs_id)))
     LEFT JOIN public.wb_status_change_motivation wscm ON (((wscm.wbd_id = hdo_swb.hdo_id) AND (wscm.opt_id = sw_chemical_substance_status.opt_id) AND (wscm.year_status = swb_yearly_status.year_of_status) AND (wscm.scm_id = 1))))
     FULL JOIN krw_kwal ON (((sw_chemical_substance_status.opt_id = krw_kwal.opt_id) AND (swb.sw_target_typology_id = krw_kwal.swt_id))))
UNION ALL
 SELECT swb_yearly_status.sys_id AS "DB_ID",
    hdo_swb.hdo_id AS "Waterlichaam_DB_ID",
    hdo_swb.inspire_id_local_id AS "Waterlichaam_identificatie",
    hdo_swb.wkrv_id AS "Waterlichaam_Versie",
    swb_yearly_status.year_of_status AS "Rapportagejaar",
    vw_waargenomen_eigenschap_db_id."DB_ID" AS "Waargenomen_Eigenschap_DB_ID",
        CASE
            WHEN (krw_kwal.name IS NOT NULL) THEN krw_kwal.name
            ELSE
            CASE
                WHEN (vw_waargenomen_eigenschap_db_id."ChemischeStof_Omschrijving" IS NOT NULL) THEN vw_waargenomen_eigenschap_db_id."ChemischeStof_Omschrijving"
                ELSE vw_waargenomen_eigenschap_db_id."Grootheid_Omschrijving"
            END
        END AS "Typering",
    classification_type.code AS "Oordeel_Code",
    classification_type.description AS "Oordeel",
        CASE
            WHEN ((eu_monitoring_goal_type.code)::text = 'TT_OM'::text) THEN 1
            WHEN ((eu_monitoring_goal_type.code)::text = 'OM'::text) THEN 2
            WHEN ((eu_monitoring_goal_type.code)::text = 'TT'::text) THEN 3
            WHEN (eu_monitoring_goal_type.code IS NULL) THEN 5
            ELSE 4
        END AS oordeel_type_sortorder,
    eu_monitoring_goal_type.eumg_id AS "Oordeel_Type_DB_ID",
    eu_monitoring_goal_type.code AS "Oordeel_Type_Code",
    eu_monitoring_goal_type.description AS "Oordeel_Type_Omschrijving",
        CASE
            WHEN ((waarde_bepalings_methode_type.code)::text = 'DESK'::text) THEN 1
            WHEN ((waarde_bepalings_methode_type.code)::text = 'AQUOKIT'::text) THEN 2
            WHEN (waarde_bepalings_methode_type.code IS NULL) THEN 4
            ELSE 3
        END AS waardebepalingsmethode_sortorder,
    waarde_bepalings_methode_type.code AS "WaardebepalingsMethode_Code",
    waarde_bepalings_methode_type.omschrijving AS "WaardebepalingsMethode_Omschrijving",
    (swb_yearly_status.comment_on_chemical_status)::character varying(5000) AS "Toelichting_ChemischeStatus",
    (swb_yearly_status.comment_on_ecological_status)::character varying(5000) AS "Toelichting_EcologischeStatus",
    (swb_yearly_status.motivation_4no_chemical_status)::character varying(5000) AS "Motivatie_Geen_ChemischeStatus",
    (swb_yearly_status.motivation_4no_ecological_status)::character varying(5000) AS "Motivatie_Geen_EcologischeStatus",
        CASE
            WHEN (krw_kwal.is_applicable = true) THEN (krw_kwal."CATEGORIE")::character varying(24)
            ELSE 'NVT'::character varying
        END AS "KWAL_ELEMENT",
    NULL::character varying(24) AS "STOF_CATEGORIE",
        CASE
            WHEN (wscm.scm_id IS NOT NULL) THEN 'A'::character varying(1)
            ELSE NULL::character varying
        END AS "Motivatie_Achteruitgang",
    krw_kwal.is_applicable
   FROM (((((((((public.swb_yearly_status
     LEFT JOIN public.hydro_object hdo_swb ON ((hdo_swb.hdo_id = swb_yearly_status.swb_id)))
     LEFT JOIN public.surface_water_body swb ON ((swb.swb_id = hdo_swb.hdo_id)))
     LEFT JOIN public.sw_ecological_status ON ((sw_ecological_status.sys_id = swb_yearly_status.sys_id)))
     LEFT JOIN public.classification_type ON ((sw_ecological_status.swes_id = classification_type.cls_id)))
     LEFT JOIN public.vw_waargenomen_eigenschap_db_id ON ((vw_waargenomen_eigenschap_db_id."DB_ID" = sw_ecological_status.opt_id)))
     LEFT JOIN public.waarde_bepalings_methode_type ON ((waarde_bepalings_methode_type.wbpm_id = sw_ecological_status.wbpm_id)))
     LEFT JOIN public.eu_monitoring_goal_type ON ((eu_monitoring_goal_type.eumg_id = sw_ecological_status.eumg_id)))
     LEFT JOIN public.wb_status_change_motivation wscm ON (((wscm.wbd_id = hdo_swb.hdo_id) AND (wscm.opt_id = sw_ecological_status.opt_id) AND (wscm.year_status = swb_yearly_status.year_of_status) AND (wscm.scm_id = 1))))
     FULL JOIN krw_kwal ON (((sw_ecological_status.opt_id = krw_kwal.opt_id) AND (swb.sw_target_typology_id = krw_kwal.swt_id))))
  ORDER BY 1, 6, 13 DESC, 11 DESC;


--
-- Name: vw_oppervlaktewaterlichamen_dgrw; Type: VIEW; Schema: sgbp_dgrw; Owner: -
--

CREATE VIEW vw_oppervlaktewaterlichamen_dgrw AS
 SELECT vw_oppervlaktewaterlichamen.identificatie AS "Waterlichaam_identificatie",
    vw_oppervlaktewaterlichamen.versie AS "Waterlichaam_Versie",
    vw_oppervlaktewaterlichamen.type AS "Waterlichaam_Type",
    vw_oppervlaktewaterlichamen.referentietype AS "Waterlichaam_DoelType",
    vw_oppervlaktewaterlichamen.waterlichaam_status AS "Waterlichaam_Status",
    "left"((vw_oppervlaktewaterlichamen.stroomgebieddistrict)::text, 4) AS "Stroomgebieddistrict",
    namespace_type.descrption AS "Waterbeheerder_omschrijving",
    vw_oppervlaktewaterlichamen.omschrijving AS "Waterlichaam_naam",
    surface_water_body.area_value AS oppervlakte,
    et1.omschrijving AS "oppervlakte.eenheid",
    surface_water_body.length_value AS lengte,
    et2.omschrijving AS "lengte.eenheid",
        CASE
            WHEN (vw_oppervlaktewaterlichamen.drinkwateronttrekking_jn = true) THEN 'Aanwezig'::text
            ELSE 'Afwezig'::text
        END AS "Drinkwateronttrekking"
   FROM ((((((public.surface_water_body
     LEFT JOIN public.vw_oppervlaktewaterlichamen ON ((surface_water_body.swb_id = vw_oppervlaktewaterlichamen.db_id)))
     JOIN public.namespace_type ON ((namespace_type.ns_id = vw_oppervlaktewaterlichamen.waterbeheerder_code)))
     JOIN public.sw_typology_type type ON ((type.styp_id = surface_water_body.sw_typology_id)))
     JOIN public.eenheid_type et1 ON ((et1.eenh_id = surface_water_body.area_uom_id)))
     JOIN public.eenheid_type et2 ON ((et2.eenh_id = surface_water_body.length_uom_id)))
     JOIN public.sw_typology_type typer ON ((typer.styp_id = surface_water_body.sw_target_typology_id)))
  WHERE (vw_oppervlaktewaterlichamen.waterbeheerder_code >= 99)
UNION ALL
 SELECT vw_oppervlaktewaterlichamen.identificatie AS "Waterlichaam_identificatie",
    vw_oppervlaktewaterlichamen.versie AS "Waterlichaam_Versie",
    vw_oppervlaktewaterlichamen.type AS "Waterlichaam_Type",
    vw_oppervlaktewaterlichamen.referentietype AS "Waterlichaam_DoelType",
    vw_oppervlaktewaterlichamen.waterlichaam_status AS "Waterlichaam_Status",
    "left"((vw_oppervlaktewaterlichamen.stroomgebieddistrict)::text, 4) AS "Stroomgebieddistrict",
    vw_competent_authority."Omschrijving" AS "Waterbeheerder_omschrijving",
    vw_oppervlaktewaterlichamen.omschrijving AS "Waterlichaam_naam",
    surface_water_body.area_value AS oppervlakte,
    et1.omschrijving AS "oppervlakte.eenheid",
    surface_water_body.length_value AS lengte,
    et2.omschrijving AS "lengte.eenheid",
        CASE
            WHEN (vw_oppervlaktewaterlichamen.drinkwateronttrekking_jn = true) THEN 'Aanwezig'::text
            ELSE 'Afwezig'::text
        END AS "Drinkwateronttrekking"
   FROM (((((((public.surface_water_body
     LEFT JOIN public.vw_oppervlaktewaterlichamen ON ((surface_water_body.swb_id = vw_oppervlaktewaterlichamen.db_id)))
     JOIN public.competentauthority_namespacetype ON ((competentauthority_namespacetype.ns_id = vw_oppervlaktewaterlichamen.waterbeheerder_code)))
     JOIN public.vw_competent_authority ON ((vw_competent_authority."DB_ID" = competentauthority_namespacetype.ore_id)))
     JOIN public.sw_typology_type type ON ((type.styp_id = surface_water_body.sw_typology_id)))
     JOIN public.eenheid_type et1 ON ((et1.eenh_id = surface_water_body.area_uom_id)))
     JOIN public.eenheid_type et2 ON ((et2.eenh_id = surface_water_body.length_uom_id)))
     JOIN public.sw_typology_type typer ON ((typer.styp_id = surface_water_body.sw_target_typology_id)))
  WHERE (vw_oppervlaktewaterlichamen.waterbeheerder_code < 99);


--
-- Name: vw_ow_onttrekking_dgrw; Type: VIEW; Schema: sgbp_dgrw; Owner: -
--

CREATE VIEW vw_ow_onttrekking_dgrw AS
 SELECT namespace_type.code AS "Namespace",
    hydro_object.inspire_id_local_id AS "LokaalID",
    hdo_names.name AS "Omschrijving",
    sw_abstraction_point.waterabstraction_from AS "OntrekkingsPunt",
    sw_abstraction_type.description AS "Onttrekking_Type",
    public.st_x((public.st_astext((public.st_dump(abstraction_point.geometry)).geom))::public.geometry) AS "RD_X",
    public.st_y((public.st_astext((public.st_dump(abstraction_point.geometry)).geom))::public.geometry) AS "RD_Y",
    hdo.identificatie AS "Waterlichaam_identificatie",
    hdo.omschrijving AS "Waterlichaam_naam",
    "left"((hdo.stroomgebieddistrict)::text, 4) AS "Stroomgebieddistrict",
    hdo.versie AS "Versie"
   FROM (((((((public.hydro_object
     LEFT JOIN public.hdo_names ON ((hdo_names.hdo_id = hydro_object.hdo_id)))
     JOIN public.abstraction_point ON ((hydro_object.hdo_id = abstraction_point.asp_id)))
     JOIN public.sw_abstraction_point ON ((hydro_object.hdo_id = sw_abstraction_point.sasp_id)))
     JOIN public.rewab_type ON ((rewab_type.rwb_id = sw_abstraction_point.rewab_id)))
     JOIN public.namespace_type ON ((namespace_type.ns_id = hydro_object.inspire_id_namespace)))
     JOIN public.sw_abstraction_type ON ((sw_abstraction_type.swat_id = sw_abstraction_point.swat_id)))
     LEFT JOIN public.vw_oppervlaktewaterlichamen hdo ON ((hdo.db_id = abstraction_point.wbd_id)))
  ORDER BY hydro_object.inspire_id_local_id DESC;


--
-- Name: vw_prognose_gw_dgrw; Type: VIEW; Schema: sgbp_dgrw; Owner: -
--

CREATE VIEW vw_prognose_gw_dgrw AS
 SELECT vw_grondwaterlichamen.identificatie AS "Waterlichaam_Identificatie",
    vw_grondwaterlichamen.versie AS "Waterlichaam_Versie",
    vw_grondwaterlichamen.is_buiten_deelstroomgebied AS "Buiten_StroomgebiedJN",
    vw_grondwaterlichamen.is_grensoverschrijdend AS "GrensoverschrijdendJN",
    vw_grondwaterlichamen.horizon AS "Waterlichaam_Horizon",
    vw_grondwaterlichamen.substraat AS "Waterlichaam_Substraat",
    namespace_type.descrption AS "Waterbeheerder_omschrijving",
    vw_grondwaterlichamen.omschrijving AS "Waterlichaam_naam",
    "left"((vw_grondwaterlichamen.stroomgebieddistrict)::text, 4) AS "Stroomgebieddistrict",
    wb_prognosis.year AS "PrognoseJaar",
    concat(vw_waargenomen_eigenschap."Typering_Omschrijving", vw_waargenomen_eigenschap."Grootheid_Omschrijving", ' ', vw_waargenomen_eigenschap."ChemischeStof_Omschrijving") AS "BeoordeeldeParameter",
    vw_waargenomen_eigenschap."Tpering_Code" AS "Typering.Code",
    vw_waargenomen_eigenschap."Typering_Omschrijving" AS "Typering.Omschrijving",
    vw_waargenomen_eigenschap."Grootheid_Code" AS "Grootheid.Code",
    vw_waargenomen_eigenschap."Grootheid_Omschrijving" AS "Grootheid.Omschrijving",
    vw_waargenomen_eigenschap."ChemischeStof_code" AS "ChemischeStof.Code",
    vw_waargenomen_eigenschap."ChemischeStof_Omschrijving" AS "ChemischeStof.Omschrijving",
    vw_waargenomen_eigenschap."Hoedanigheid_Code" AS "Hoedanigheid.Code",
    vw_waargenomen_eigenschap."Hoedanigheid_Omschrijving" AS "Hoedanigheid.Omschrijving",
    classification_type.description AS "Prognose"
   FROM ((((public.wb_prognosis
     LEFT JOIN public.vw_grondwaterlichamen ON ((wb_prognosis.swb_id = vw_grondwaterlichamen.db_id)))
     LEFT JOIN public.vw_waargenomen_eigenschap ON ((vw_waargenomen_eigenschap."DB_ID" = wb_prognosis.opt_id)))
     LEFT JOIN public.classification_type ON ((classification_type.cls_id = wb_prognosis.cls_id)))
     LEFT JOIN public.namespace_type ON ((namespace_type.ns_id = vw_grondwaterlichamen.waterbeheerder_code)))
  WHERE (vw_grondwaterlichamen.versie IS NOT NULL);


--
-- Name: vw_prognose_ow_dgrw; Type: VIEW; Schema: sgbp_dgrw; Owner: -
--

CREATE VIEW vw_prognose_ow_dgrw AS
 SELECT hydro_object.inspire_id_local_id AS "Waterlichaam.Identificatie",
    vw_oppervlaktewaterlichamen.versie AS "Waterlichaam_Versie",
    vw_oppervlaktewaterlichamen.type AS "Waterlichaam_Type",
    vw_oppervlaktewaterlichamen.referentietype AS "Waterlichaam_DoelType",
    vw_oppervlaktewaterlichamen.waterlichaam_status AS "Waterlichaam_Status",
    namespace_type.descrption AS "Waterbeheerder_omschrijving",
    vw_oppervlaktewaterlichamen.omschrijving AS "Waterlichaam_naam",
    "left"((vw_oppervlaktewaterlichamen.stroomgebieddistrict)::text, 4) AS "Stroomgebieddistrict",
    wb_prognosis.year AS "PrognoseJaar",
    concat(vw_waargenomen_eigenschap."Typering_Omschrijving", vw_waargenomen_eigenschap."Grootheid_Omschrijving", ' ', vw_waargenomen_eigenschap."ChemischeStof_Omschrijving") AS "BeoordeeldeParameter",
    vw_waargenomen_eigenschap."Tpering_Code" AS "Typering.Code",
    vw_waargenomen_eigenschap."Typering_Omschrijving" AS "Typering.Omschrijving",
    vw_waargenomen_eigenschap."Grootheid_Code" AS "Grootheid.Code",
    vw_waargenomen_eigenschap."Grootheid_Omschrijving" AS "Grootheid.Omschrijving",
    vw_waargenomen_eigenschap."ChemischeStof_code" AS "ChemischeStof.Code",
    vw_waargenomen_eigenschap."ChemischeStof_Omschrijving" AS "ChemischeStof.Omschrijving",
    vw_waargenomen_eigenschap."Hoedanigheid_Code" AS "Hoedanigheid.Code",
    vw_waargenomen_eigenschap."Hoedanigheid_Omschrijving" AS "Hoedanigheid.Omschrijving",
    classification_type.description AS "Prognose"
   FROM (((((public.wb_prognosis
     LEFT JOIN public.hydro_object ON ((wb_prognosis.swb_id = hydro_object.hdo_id)))
     LEFT JOIN public.vw_waargenomen_eigenschap ON ((vw_waargenomen_eigenschap."DB_ID" = wb_prognosis.opt_id)))
     LEFT JOIN public.classification_type ON ((classification_type.cls_id = wb_prognosis.cls_id)))
     LEFT JOIN public.vw_oppervlaktewaterlichamen ON ((vw_oppervlaktewaterlichamen.db_id = hydro_object.hdo_id)))
     LEFT JOIN public.namespace_type ON ((namespace_type.ns_id = vw_oppervlaktewaterlichamen.waterbeheerder_code)))
  WHERE ((vw_oppervlaktewaterlichamen.versie IS NOT NULL) AND (vw_oppervlaktewaterlichamen.waterbeheerder_code >= 99))
UNION ALL
 SELECT hydro_object.inspire_id_local_id AS "Waterlichaam.Identificatie",
    vw_oppervlaktewaterlichamen.versie AS "Waterlichaam_Versie",
    vw_oppervlaktewaterlichamen.type AS "Waterlichaam_Type",
    vw_oppervlaktewaterlichamen.referentietype AS "Waterlichaam_DoelType",
    vw_oppervlaktewaterlichamen.waterlichaam_status AS "Waterlichaam_Status",
    vw_competent_authority."Omschrijving" AS "Waterbeheerder_omschrijving",
    vw_oppervlaktewaterlichamen.omschrijving AS "Waterlichaam_naam",
    "left"((vw_oppervlaktewaterlichamen.stroomgebieddistrict)::text, 4) AS "Stroomgebieddistrict",
    wb_prognosis.year AS "PrognoseJaar",
    concat(vw_waargenomen_eigenschap."Typering_Omschrijving", vw_waargenomen_eigenschap."Grootheid_Omschrijving", ' ', vw_waargenomen_eigenschap."ChemischeStof_Omschrijving") AS "BeoordeeldeParameter",
    vw_waargenomen_eigenschap."Tpering_Code" AS "Typering.Code",
    vw_waargenomen_eigenschap."Typering_Omschrijving" AS "Typering.Omschrijving",
    vw_waargenomen_eigenschap."Grootheid_Code" AS "Grootheid.Code",
    vw_waargenomen_eigenschap."Grootheid_Omschrijving" AS "Grootheid.Omschrijving",
    vw_waargenomen_eigenschap."ChemischeStof_code" AS "ChemischeStof.Code",
    vw_waargenomen_eigenschap."ChemischeStof_Omschrijving" AS "ChemischeStof.Omschrijving",
    vw_waargenomen_eigenschap."Hoedanigheid_Code" AS "Hoedanigheid.Code",
    vw_waargenomen_eigenschap."Hoedanigheid_Omschrijving" AS "Hoedanigheid.Omschrijving",
    classification_type.description AS "Prognose"
   FROM ((((((public.wb_prognosis
     LEFT JOIN public.hydro_object ON ((wb_prognosis.swb_id = hydro_object.hdo_id)))
     LEFT JOIN public.vw_waargenomen_eigenschap ON ((vw_waargenomen_eigenschap."DB_ID" = wb_prognosis.opt_id)))
     LEFT JOIN public.classification_type ON ((classification_type.cls_id = wb_prognosis.cls_id)))
     LEFT JOIN public.vw_oppervlaktewaterlichamen ON ((vw_oppervlaktewaterlichamen.db_id = hydro_object.hdo_id)))
     JOIN public.competentauthority_namespacetype ON ((competentauthority_namespacetype.ns_id = vw_oppervlaktewaterlichamen.waterbeheerder_code)))
     JOIN public.vw_competent_authority ON ((vw_competent_authority."DB_ID" = competentauthority_namespacetype.ore_id)))
  WHERE ((vw_oppervlaktewaterlichamen.versie IS NOT NULL) AND (vw_oppervlaktewaterlichamen.waterbeheerder_code < 99));


--
-- Name: vw_toetsresultaat_owm; Type: VIEW; Schema: sgbp_dgrw; Owner: -
--

CREATE VIEW vw_toetsresultaat_owm AS
 SELECT observation.obs_id AS "DB_ID",
    hydro_object.hdo_id AS "Waterlichaam_DB_ID",
    hydro_object.inspire_id_local_id AS "Waterlichaam_Identificatie",
    hydro_object.wkrv_id AS "Waterlichaam_Versie",
    swb_yearly_status.year_of_status AS "Rapportagejaar",
    vw_waargenomen_eigenschap."DB_ID" AS "Waargenomen_Eigenschap_DB_ID",
    vw_waargenomen_eigenschap."Tpering_Code",
    vw_waargenomen_eigenschap."Typering_Omschrijving",
    vw_waargenomen_eigenschap."Grootheid_Code",
    vw_waargenomen_eigenschap."Grootheid_Omschrijving",
    vw_waargenomen_eigenschap."ChemischeStof_code",
    vw_waargenomen_eigenschap."ChemischeStof_Omschrijving",
    vw_waargenomen_eigenschap."ChemischeStof_CASnr",
    waarde_bewerkings_methode_type.code AS "Waardebewerkingsmethode_Code",
    waarde_bewerkings_methode_type.omschrijving AS "Waardebewerkingsmethode_Omschrijving",
    observation.result_time AS "Begintijd_Toetsresultaat",
    observation.phenomenon_time_end AS "Eindtijd_Toetsreeks",
    observation.phenomenon_time_begin AS "Begintijd_Toetsreeks",
    observation.numeric_value AS "Numerieke_waarde",
    observation.numeric_value_significance AS "Numerieke_waarde_Significantie",
    bepaling_grens_type.omschrijving AS "Bepalingsgrens",
    eenheid_type.code AS "Eenheid_Code",
    eenheid_type.omschrijving AS "Eenheid_Omschrijving",
    vw_waargenomen_eigenschap."Hoedanigheid_Code",
    vw_waargenomen_eigenschap."Hoedanigheid_Omschrijving",
    kwaliteitsoordeel_type.code AS "KwaliteitsOordeel_Code",
    kwaliteitsoordeel_type.description AS "KwaliteitsOordeel_Omschrijving",
    eu_monitoring_goal_type.eumg_id AS "Oordeel_Type_DB_ID",
    eu_monitoring_goal_type.code AS "Oordeel_Type_Code",
    eu_monitoring_goal_type.description AS "Oordeel_Type_Omschrijving",
    waarde_bepalings_methode_type.code AS "Waardebepalingsmethode_Code",
    waarde_bepalings_methode_type.omschrijving AS "Waardebepalingsmethode_Omschrijving"
   FROM (((((((((((public.observation
     LEFT JOIN public.vw_waargenomen_eigenschap ON ((vw_waargenomen_eigenschap."DB_ID" = observation.observed_property_type)))
     LEFT JOIN public.waarde_bewerkings_methode_type ON ((waarde_bewerkings_methode_type.wbm_id = observation.value_processing_method_id)))
     LEFT JOIN public.eenheid_type ON ((eenheid_type.eenh_id = observation.numeric_value_uom_id)))
     LEFT JOIN public.bepaling_grens_type ON ((bepaling_grens_type.bpg_id = observation.limit_symbol_id)))
     LEFT JOIN public.kwaliteitsoordeel_type ON ((kwaliteitsoordeel_type.kwod_id = observation.quality_indicator_id)))
     LEFT JOIN public.observation_process ON ((observation_process.obp_id = observation.result_nature_id)))
     LEFT JOIN public.waarde_bepalings_methode_type ON ((waarde_bepalings_methode_type.wbpm_id = observation_process.wbpm_id)))
     LEFT JOIN public.sw_testing_conclusion ON ((sw_testing_conclusion.stcc_id = observation.obs_id)))
     LEFT JOIN public.swb_yearly_status ON ((swb_yearly_status.sys_id = sw_testing_conclusion.sys_id)))
     LEFT JOIN public.hydro_object ON ((hydro_object.hdo_id = swb_yearly_status.swb_id)))
     LEFT JOIN public.eu_monitoring_goal_type ON ((eu_monitoring_goal_type.eumg_id = sw_testing_conclusion.eumg_id)))
  WHERE (swb_yearly_status.year_of_status IS NOT NULL)
  ORDER BY hydro_object.hdo_id, vw_waargenomen_eigenschap."Tpering_Code", vw_waargenomen_eigenschap."Grootheid_Code", vw_waargenomen_eigenschap."ChemischeStof_code", swb_yearly_status.year_of_status;


--
-- Name: vw_trends_gwl_dgrw; Type: VIEW; Schema: sgbp_dgrw; Owner: -
--

CREATE VIEW vw_trends_gwl_dgrw AS
 SELECT vw_grondwaterlichamen.identificatie AS "Waterlichaam_Identificatie",
    vw_grondwaterlichamen.versie AS "Waterlichaam_Versie",
    vw_grondwaterlichamen.is_buiten_deelstroomgebied AS "Buiten_StroomgebiedJN",
    vw_grondwaterlichamen.is_grensoverschrijdend AS "GrensoverschrijdendJN",
    vw_grondwaterlichamen.horizon AS "Waterlichaam_Horizon",
    vw_grondwaterlichamen.substraat AS "Waterlichaam_Substraat",
    namespace_type.descrption AS "Waterbeheerder_omschrijving",
    vw_grondwaterlichamen.omschrijving AS "Waterlichaam_naam",
    "left"((vw_grondwaterlichamen.stroomgebieddistrict)::text, 4) AS "Stroomgebieddistrict",
    gwb_yearly_status.year_of_status AS "Rapportagejaar",
    vw_waargenomen_eigenschap."DB_ID" AS "Waargenomen_Eigenschap_DB_ID",
    vw_waargenomen_eigenschap."Grootheid_Code",
    vw_waargenomen_eigenschap."Grootheid_Omschrijving",
    vw_waargenomen_eigenschap."ChemischeStof_code",
    vw_waargenomen_eigenschap."ChemischeStof_Omschrijving",
    vw_waargenomen_eigenschap."Hoedanigheid_Code",
    vw_waargenomen_eigenschap."Hoedanigheid_Omschrijving",
    concat(vw_waargenomen_eigenschap."Typering_Omschrijving", vw_waargenomen_eigenschap."Grootheid_Omschrijving", ' ', vw_waargenomen_eigenschap."ChemischeStof_Omschrijving") AS "BeoordeeldeParameter",
    classification_type.description AS "TypeTrend",
    pollutant_trend.depth_m AS "TrendDiepte"
   FROM (((((public.pollutant_trend
     LEFT JOIN public.gwb_yearly_status ON ((gwb_yearly_status.gys_id = pollutant_trend.gwys_id)))
     LEFT JOIN public.vw_grondwaterlichamen ON ((vw_grondwaterlichamen.db_id = gwb_yearly_status.gwb_id)))
     LEFT JOIN public.vw_waargenomen_eigenschap ON ((vw_waargenomen_eigenschap."DB_ID" = pollutant_trend.opt_id)))
     LEFT JOIN public.classification_type ON ((pollutant_trend.cls_id = classification_type.cls_id)))
     LEFT JOIN public.namespace_type ON ((namespace_type.ns_id = vw_grondwaterlichamen.waterbeheerder_code)));


SET search_path = wfd_reporting, pg_catalog;

--
-- Name: eu_stoffenlijst; Type: TABLE; Schema: wfd_reporting; Owner: -
--

CREATE TABLE eu_stoffenlijst (
    domeinnaam character varying,
    value character varying,
    grootheidcode character varying,
    parametercode character varying,
    "swFailingRBSPOther" character varying
);


--
-- Name: geological_formation_enum; Type: TABLE; Schema: wfd_reporting; Owner: -
--

CREATE TABLE geological_formation_enum (
    nl_id integer NOT NULL,
    eu_xsd text
);


--
-- Name: ktm_enum; Type: TABLE; Schema: wfd_reporting; Owner: -
--

CREATE TABLE ktm_enum (
    smeu_id integer,
    eu_xsd character varying
);


--
-- Name: missing_qe; Type: TABLE; Schema: wfd_reporting; Owner: -
--

CREATE TABLE missing_qe (
    qetype character varying
);


--
-- Name: significant_impact_enum; Type: TABLE; Schema: wfd_reporting; Owner: -
--

CREATE TABLE significant_impact_enum (
    eu_xsd text,
    i_id integer
);


--
-- Name: significant_pressure_enum; Type: TABLE; Schema: wfd_reporting; Owner: -
--

CREATE TABLE significant_pressure_enum (
    eu_xsd text NOT NULL,
    gw_p_id integer,
    sw_p_id integer
);


--
-- Name: swb_unknown_ps; Type: TABLE; Schema: wfd_reporting; Owner: -
--

CREATE TABLE swb_unknown_ps (
    local_id character varying(100)
);


--
-- Name: vw__monitoring_site; Type: VIEW; Schema: wfd_reporting; Owner: -
--

CREATE VIEW vw__monitoring_site AS
 WITH mpn AS (
         SELECT DISTINCT ON (monprog_2015.mpnident, monprog_2015.montype) monprog_2015.mpnident,
            monprog_2015.ligt_in_owm,
                CASE
                    WHEN ((monprog_2015.rd_x IS NULL) OR (monprog_2015.rd_x = (0)::double precision)) THEN ((155000)::numeric)::double precision
                    ELSE monprog_2015.rd_x
                END AS rd_x,
                CASE
                    WHEN ((monprog_2015.rd_y IS NULL) OR (monprog_2015.rd_x = (0)::double precision)) THEN ((463000)::numeric)::double precision
                    ELSE monprog_2015.rd_y
                END AS rd_y,
            monprog_2015.parameter,
            monprog_2015.monfreq,
            monprog_2015.moncyclus,
            monprog_2015.monsoort,
            monprog_2015.repr_owm,
            monprog_2015.mpntype,
            monprog_2015.diepte,
            monprog_2015.montype,
            monprog_2015.sinds,
            monprog_2015.tot,
            monprog_2015.naam
           FROM eu_state_of_environment.monprog_2015
          ORDER BY monprog_2015.mpnident
        ), mpn_eu AS (
         SELECT public.st_transform(public.st_geomfromtext((((('POINT('::text || mpn.rd_x) || ' '::text) || mpn.rd_y) || ')'::text), 28992), 4258) AS geometry,
                CASE
                    WHEN ("substring"((mpn.mpnident)::text, 1, 2) <> 'NL'::text) THEN 'NL.WBHCODE.99'::text
                    ELSE ('NL.WBHCODE.'::text || "substring"((mpn.mpnident)::text, 3, 2))
                END AS namespace,
                CASE
                    WHEN ("substring"((mpn.mpnident)::text, 1, 2) <> 'NL'::text) THEN (mpn.mpnident)::text
                    ELSE "substring"((mpn.mpnident)::text, 6)
                END AS localid,
            '13'::text AS version,
                CASE
                    WHEN ("substring"((mpn.mpnident)::text, 1, 2) <> 'NL'::text) THEN replace((('NL0-'::text || upper(('NL_'::text || (mpn.mpnident)::text))) || '-M'::text), '.'::text, '_'::text)
                    ELSE replace((('NL0-'::text || upper((mpn.mpnident)::text)) || '-M'::text), '.'::text, '_'::text)
                END AS thematicid,
            'euMonitoringSiteCode'::text AS themaidsch,
            ((mpn.sinds)::text || '-01-01'::text) AS beginlife,
            ((mpn.tot)::text || '-12-31'::text) AS endlife,
            NULL::text AS predecesid,
            NULL::text AS predeidsch,
            NULL::text AS successoid,
            NULL::text AS succeidsch,
            'noChange'::text AS wevolution,
            NULL::text AS nametxtint,
            mpn.naam AS nametext,
            'dut'::text AS nametxtlan,
            ((mpn.sinds)::text || '-01-01'::text) AS opactbegin,
            ((mpn.tot)::text || '-12-31'::text) AS opactend,
            NULL::text AS rsiteid,
            NULL::text AS rsiteidsch,
                CASE
                    WHEN ((mpn.montype)::text = 'ow'::text) THEN (('NL0-'::text || upper((mpn.repr_owm)::text)) || '-O'::text)
                    ELSE (('NL0-'::text || upper((mpn.repr_owm)::text)) || '-G'::text)
                END AS foiid,
                CASE
                    WHEN ((mpn.montype)::text = 'ow'::text) THEN 'euSurfaceWaterBodyCode'::text
                    ELSE 'euGroundWaterBodyCode'::text
                END AS foidsch,
            'FALSE'::text AS mediabiota,
            'TRUE'::text AS mediawater,
            'FALSE'::text AS mediasedim,
            array_to_string(ARRAY( SELECT DISTINCT
                        CASE mp.monsoort
                            WHEN 'OM'::text THEN 'OPE'::text
                            WHEN 'TT'::text THEN 'SUR'::text
                            ELSE NULL::text
                        END AS regexp_replace
                   FROM mpn mp
                  WHERE ((mp.mpnident)::text = (mpn.mpnident)::text)), ','::text) AS purpose,
            'F'::text AS confstatus,
            'http://www.waterkwaliteitsportaal.nl'::text AS link,
            0.01 AS catcharea
           FROM mpn
        )
 SELECT DISTINCT ON (mpn_eu.namespace, mpn_eu.localid, mpn_eu.version) mpn_eu.geometry,
    mpn_eu.namespace,
    mpn_eu.localid,
    mpn_eu.version,
    mpn_eu.thematicid,
    mpn_eu.themaidsch,
    mpn_eu.beginlife,
    mpn_eu.endlife,
    mpn_eu.predecesid,
    mpn_eu.predeidsch,
    mpn_eu.successoid,
    mpn_eu.succeidsch,
    mpn_eu.wevolution,
    mpn_eu.nametxtint,
    mpn_eu.nametext,
    mpn_eu.nametxtlan,
    mpn_eu.opactbegin,
    mpn_eu.opactend,
    mpn_eu.rsiteid,
    mpn_eu.rsiteidsch,
    mpn_eu.foiid,
    mpn_eu.foidsch,
    mpn_eu.mediabiota,
    mpn_eu.mediawater,
    mpn_eu.mediasedim,
    mpn_eu.purpose,
    mpn_eu.confstatus,
    mpn_eu.link,
    mpn_eu.catcharea
   FROM mpn_eu
  ORDER BY mpn_eu.namespace, mpn_eu.localid, mpn_eu.version, mpn_eu.foiid;


--
-- Name: vw__river_basin_district; Type: VIEW; Schema: wfd_reporting; Owner: -
--

CREATE VIEW vw__river_basin_district AS
 SELECT DISTINCT ON (hydro_object.inspire_id_namespace, hydro_object.inspire_id_local_id, hydro_object.wkrv_id) mrz.geometry_etrs89 AS geometry,
    ('NL.WBHCODE.'::text || hydro_object.inspire_id_namespace) AS namespace,
    hydro_object.inspire_id_local_id AS localid,
    hydro_object.wkrv_id AS inspireid_version_id,
    "left"((hydro_object.inspire_id_local_id)::text, 4) AS thematicid,
    'euRBDCode'::text AS themaidsch,
    to_char(wkr_version.begin_lifespan_version, 'YYYY-MM-DD'::text) AS beginlife,
    to_char(wkr_version.end_lifespan_version, 'YYYY-MM-DD'::text) AS endlife,
    "left"((hydro_object.inspire_id_local_id)::text, 4) AS predecesid,
    'euRBDCode'::text AS predeidsch,
    NULL::text AS successoid,
    'euRBDCode'::text AS succeidsch,
    'noChange'::text AS wevolution,
    NULL::text AS nametxtint,
    hdo_names.name AS nametext,
    'dut'::text AS nametxtlan,
    to_char(mrz.begin_designation, 'YYYY-MM-DD'::text) AS desigbegin,
        CASE
            WHEN (mrz.end_designation IS NULL) THEN NULL::text
            ELSE to_char(mrz.end_designation, 'YYYY-MM-DD'::text)
        END AS desigend,
    'riverBasinDistrict'::text AS zonetype,
    'http://www.waterkwaliteitsportaal.nl'::text AS link
   FROM (((((((public.management_regulation_or_restriction_zone mrz
     LEFT JOIN public.river_basin_disrict ON (((mrz.mrz_id = river_basin_disrict.rbd_id) AND (river_basin_disrict.international_rbd IS NOT NULL))))
     JOIN public.hydro_object ON ((hydro_object.hdo_id = mrz.mrz_id)))
     LEFT JOIN public.hdo_names ON ((hdo_names.hdo_id = mrz.mrz_id)))
     JOIN public.wkr_version ON ((wkr_version.wkrv_id = hydro_object.wkrv_id)))
     JOIN public.namespace_type ON ((namespace_type.ns_id = hydro_object.inspire_id_namespace)))
     LEFT JOIN public.competentauthority_namespacetype ON ((namespace_type.ns_id = competentauthority_namespacetype.ns_id)))
     LEFT JOIN public.organisatorische_eenheid ON ((organisatorische_eenheid.ore_id = competentauthority_namespacetype.ore_id)))
  WHERE (((hydro_object.hydro_object_type)::text = 'RiverBasinDistrict'::text) AND (hydro_object.wkrv_id = 13) AND ((hydro_object.inspire_id_local_id)::text ~~ 'NL%'::text) AND (river_basin_disrict.international_rbd IS NOT NULL))
  ORDER BY hydro_object.inspire_id_namespace, hydro_object.inspire_id_local_id, hydro_object.wkrv_id DESC;


--
-- Name: vw__shape_ground_water_body; Type: VIEW; Schema: wfd_reporting; Owner: -
--

CREATE VIEW vw__shape_ground_water_body AS
 SELECT DISTINCT ON (hydro_object.inspire_id_namespace, hydro_object.inspire_id_local_id, hydro_object.wkrv_id) mrz.geometry_etrs89 AS geometry,
    ('NL.WBHCODE.'::text || hydro_object.inspire_id_namespace) AS namespace,
    hydro_object.inspire_id_local_id AS localid,
    hydro_object.wkrv_id AS inspireid_version_id,
    (('NL0-'::text || upper((hydro_object.inspire_id_local_id)::text)) || '-G'::text) AS thematicid,
    'euGroundWaterBodyCode'::text AS themaidsch,
    to_char(wkr_version.begin_lifespan_version, 'YYYY-MM-DD'::text) AS beginlife,
    to_char(wkr_version.end_lifespan_version, 'YYYY-MM-DD'::text) AS endlife,
    array_to_string(ARRAY( SELECT DISTINCT regexp_replace((ho2009.inspire_id_local_id)::text, '\r|\n'::text, ''::text, 'g'::text) AS regexp_replace
           FROM ((public.hydro_object ho
             JOIN public.related_hydro_object rho ON (((rho.from_hdo = ho.hdo_id) AND (rho.rrt_id = 2) AND (ho.wkrv_id = 13))))
             JOIN public.hydro_object ho2009 ON (((rho.to_hdo = ho2009.hdo_id) AND (ho2009.wkrv_id = 2))))
          WHERE (ho.hdo_id = hydro_object.hdo_id)), ','::text) AS predecesid,
    'euGroundWaterBodyCode'::text AS predeidsch,
    NULL::text AS successoid,
    NULL::text AS succeidsch,
    'noChange'::text AS wevolution,
    NULL::text AS nametxtint,
    hdo_names.name AS nametext,
    'dut'::text AS nametxtlan,
    to_char(mrz.begin_designation, 'YYYY-MM-DD'::text) AS desigbegin,
        CASE
            WHEN (mrz.end_designation IS NULL) THEN NULL::text
            ELSE to_char(mrz.end_designation, 'YYYY-MM-DD'::text)
        END AS desigend,
    'waterBody'::text AS zonetype,
    'groundWaterBody'::text AS spzonetype,
    (('NL0-'::text || "left"((hdo_rbd.inspire_id_local_id)::text, 4)) || '-S'::text) AS rzoneid,
    'NotApplicable'::text AS rtrnsid,
    'euRBDCode'::text AS rzoneidsch,
    'NotApplicable'::text AS rtrnsidsch,
    'http://www.waterkwaliteitsportaal.nl'::text AS link,
    ground_water_body.horizon_id AS horizon,
    ground_water_body.area AS sizevalue,
    'km2'::text AS sizeuom
   FROM (((((((((((public.management_regulation_or_restriction_zone mrz
     LEFT JOIN public.river_basin_disrict ON ((mrz.mrz_id = river_basin_disrict.rbd_id)))
     JOIN public.hydro_object ON ((hydro_object.hdo_id = mrz.mrz_id)))
     LEFT JOIN public.hdo_names ON ((hdo_names.hdo_id = mrz.mrz_id)))
     JOIN public.wkr_version ON ((wkr_version.wkrv_id = hydro_object.wkrv_id)))
     JOIN public.namespace_type ON ((namespace_type.ns_id = hydro_object.inspire_id_namespace)))
     LEFT JOIN public.competentauthority_namespacetype ON ((namespace_type.ns_id = competentauthority_namespacetype.ns_id)))
     LEFT JOIN public.organisatorische_eenheid ON ((organisatorische_eenheid.ore_id = competentauthority_namespacetype.ore_id)))
     LEFT JOIN public.water_body ON ((water_body.wbd_id = hydro_object.hdo_id)))
     LEFT JOIN public.river_basin_disrict rbd ON ((rbd.rbd_id = water_body.rbd_id)))
     LEFT JOIN public.hydro_object hdo_rbd ON ((rbd.rbd_id = hdo_rbd.hdo_id)))
     LEFT JOIN public.ground_water_body ON ((ground_water_body.gwb_id = hydro_object.hdo_id)))
  WHERE (((hydro_object.hydro_object_type)::text = 'GroundWaterBody'::text) AND (hydro_object.wkrv_id = 13))
  ORDER BY hydro_object.inspire_id_namespace, hydro_object.inspire_id_local_id, hydro_object.wkrv_id DESC;


--
-- Name: vw__shape_ground_water_body_horizon; Type: VIEW; Schema: wfd_reporting; Owner: -
--

CREATE VIEW vw__shape_ground_water_body_horizon AS
 SELECT DISTINCT ON (hydro_object.inspire_id_namespace, hydro_object.inspire_id_local_id, hydro_object.wkrv_id) mrz.geometry_etrs89 AS geometry,
    (('NL0-'::text || upper((hydro_object.inspire_id_local_id)::text)) || '-G'::text) AS thematicid,
    'euGroundWaterBodyCode'::text AS themaidsch,
    ground_water_body.horizon_id AS horizon
   FROM (((public.management_regulation_or_restriction_zone mrz
     LEFT JOIN public.river_basin_disrict ON ((mrz.mrz_id = river_basin_disrict.rbd_id)))
     JOIN public.hydro_object ON ((hydro_object.hdo_id = mrz.mrz_id)))
     LEFT JOIN public.ground_water_body ON ((ground_water_body.gwb_id = hydro_object.hdo_id)))
  WHERE (((hydro_object.hydro_object_type)::text = 'GroundWaterBody'::text) AND (hydro_object.wkrv_id = 13))
  ORDER BY hydro_object.inspire_id_namespace, hydro_object.inspire_id_local_id, hydro_object.wkrv_id DESC;


--
-- Name: vw__shape_protected_area_lijn; Type: VIEW; Schema: wfd_reporting; Owner: -
--

CREATE VIEW vw__shape_protected_area_lijn AS
 SELECT DISTINCT ON (hydro_object.inspire_id_namespace, hydro_object.inspire_id_local_id, hydro_object.wkrv_id) mrz.geometry_etrs89 AS geometry,
    ('NL.WBHCODE.'::text || hydro_object.inspire_id_namespace) AS namespace,
    hydro_object.inspire_id_local_id AS localid,
    hydro_object.wkrv_id AS version,
    (('NL0-'::text || upper((hydro_object.inspire_id_local_id)::text)) || '-B'::text) AS thematicid,
    'euProtectedAreaCode'::text AS themaidsch,
    to_char(wkr_version.begin_lifespan_version, 'YYYY-MM-DD'::text) AS beginlife,
    to_char(wkr_version.end_lifespan_version, 'YYYY-MM-DD'::text) AS endlife,
    array_to_string(ARRAY( SELECT DISTINCT regexp_replace(upper((ho2009.inspire_id_local_id)::text), '\r|\n'::text, ''::text, 'g'::text) AS regexp_replace
           FROM ((public.hydro_object ho
             JOIN public.related_hydro_object rho ON (((rho.from_hdo = ho.hdo_id) AND (rho.rrt_id = 2) AND (ho.wkrv_id = 13))))
             JOIN public.hydro_object ho2009 ON (((rho.to_hdo = ho2009.hdo_id) AND (ho2009.wkrv_id = 2))))
          WHERE (ho.hdo_id = hydro_object.hdo_id)), ','::text) AS predecesid,
    'euProtectedAreaCode'::text AS predeidsch,
    NULL::text AS successoid,
    'euProtectedAreaCode'::text AS succeidsch,
    'noChange'::text AS wevolution,
    NULL::text AS nametxtint,
    hdo_names.name AS nametext,
    'dut'::text AS nametxtlan,
    to_char(mrz.begin_designation, 'YYYY-MM-DD'::text) AS desigbegin,
        CASE
            WHEN (mrz.end_designation IS NULL) THEN NULL::text
            ELSE to_char(mrz.end_designation, 'YYYY-MM-DD'::text)
        END AS desigend,
    'designatedWaters'::text AS zonetype,
        CASE wfd_protected_area.protected_area_type_id
            WHEN 2 THEN 'freshwaterFishDesignatedWater'::text
            WHEN 3 THEN 'shellfishDesignatedWater'::text
            ELSE 'oeps'::text
        END AS spzonetype,
    'national'::text AS legislevel,
    'Directive EC/2000/60 of the European Parliament'::text AS legisname,
    'http://wetten.overheid.nl/zoeken'::text AS legislink,
    round(((public.st_length(mrz.geometry) / (1000000)::double precision))::numeric, 2) AS sizevalue,
    'km'::text AS sizeuom
   FROM ((((((((public.management_regulation_or_restriction_zone mrz
     LEFT JOIN public.river_basin_disrict ON ((mrz.mrz_id = river_basin_disrict.rbd_id)))
     JOIN public.hydro_object ON ((hydro_object.hdo_id = mrz.mrz_id)))
     LEFT JOIN public.hdo_names ON ((hdo_names.hdo_id = mrz.mrz_id)))
     JOIN public.wkr_version ON ((wkr_version.wkrv_id = hydro_object.wkrv_id)))
     JOIN public.namespace_type ON ((namespace_type.ns_id = hydro_object.inspire_id_namespace)))
     LEFT JOIN public.competentauthority_namespacetype ON ((namespace_type.ns_id = competentauthority_namespacetype.ns_id)))
     LEFT JOIN public.organisatorische_eenheid ON ((organisatorische_eenheid.ore_id = competentauthority_namespacetype.ore_id)))
     JOIN public.wfd_protected_area ON ((wfd_protected_area.wpa_id = hydro_object.hdo_id)))
  WHERE (((hydro_object.hydro_object_type)::text = 'ProtectedArea'::text) AND (hydro_object.wkrv_id = 13) AND (public.geometrytype(mrz.geometry_etrs89) ~~ '%STRING'::text) AND (wfd_protected_area.protected_area_type_id = ANY (ARRAY[2, 3])))
UNION ALL
 SELECT DISTINCT ON (hydro_object.inspire_id_namespace, hydro_object.inspire_id_local_id, hydro_object.wkrv_id) mrz.geometry_etrs89 AS geometry,
    ('NL.WBHCODE.'::text || hydro_object.inspire_id_namespace) AS namespace,
    hydro_object.inspire_id_local_id AS localid,
    hydro_object.wkrv_id AS version,
    (('NL0-'::text || upper((hydro_object.inspire_id_local_id)::text)) || '-D'::text) AS thematicid,
    'euProtectedAreaCode'::text AS themaidsch,
    to_char(wkr_version.begin_lifespan_version, 'YYYY-MM-DD'::text) AS beginlife,
    to_char(wkr_version.end_lifespan_version, 'YYYY-MM-DD'::text) AS endlife,
    array_to_string(ARRAY( SELECT DISTINCT regexp_replace(upper((ho2009.inspire_id_local_id)::text), '\r|\n'::text, ''::text, 'g'::text) AS regexp_replace
           FROM ((public.hydro_object ho
             JOIN public.related_hydro_object rho ON (((rho.from_hdo = ho.hdo_id) AND (rho.rrt_id = 2) AND (ho.wkrv_id = 13))))
             JOIN public.hydro_object ho2009 ON (((rho.to_hdo = ho2009.hdo_id) AND (ho2009.wkrv_id = 2))))
          WHERE (ho.hdo_id = hydro_object.hdo_id)), ','::text) AS predecesid,
    'euProtectedAreaCode'::text AS predeidsch,
    NULL::text AS successoid,
    NULL::text AS succeidsch,
    'noChange'::text AS wevolution,
    NULL::text AS nametxtint,
    hdo_names.name AS nametext,
    'dut'::text AS nametxtlan,
    to_char(mrz.begin_designation, 'YYYY-MM-DD'::text) AS desigbegin,
        CASE
            WHEN (mrz.end_designation IS NULL) THEN NULL::text
            ELSE to_char(mrz.end_designation, 'YYYY-MM-DD'::text)
        END AS desigend,
    'drinkingWaterProtectionArea'::text AS zonetype,
    'riverWaterBody'::text AS spzonetype,
    'national'::text AS legislevel,
    'Directive EC/2000/60 of the European Parliament'::text AS legisname,
    'http://wetten.overheid.nl/zoeken'::text AS legislink,
    round(((public.st_length(mrz.geometry) / (1000000)::double precision))::numeric, 4) AS sizevalue,
    'km2'::text AS sizeuom
   FROM ((((((((public.management_regulation_or_restriction_zone mrz
     LEFT JOIN public.river_basin_disrict ON ((mrz.mrz_id = river_basin_disrict.rbd_id)))
     JOIN public.hydro_object ON ((hydro_object.hdo_id = mrz.mrz_id)))
     LEFT JOIN public.hdo_names ON ((hdo_names.hdo_id = mrz.mrz_id)))
     JOIN public.wkr_version ON ((wkr_version.wkrv_id = hydro_object.wkrv_id)))
     JOIN public.namespace_type ON ((namespace_type.ns_id = hydro_object.inspire_id_namespace)))
     LEFT JOIN public.competentauthority_namespacetype ON ((namespace_type.ns_id = competentauthority_namespacetype.ns_id)))
     LEFT JOIN public.organisatorische_eenheid ON ((organisatorische_eenheid.ore_id = competentauthority_namespacetype.ore_id)))
     JOIN public.water_body ON ((water_body.wbd_id = hydro_object.hdo_id)))
  WHERE (((hydro_object.hydro_object_type)::text = ANY (ARRAY['GroundWaterBody'::text, 'SurfaceWaterBody'::text])) AND (water_body.is_article_7 IS TRUE) AND (hydro_object.wkrv_id = 13) AND (public.geometrytype(mrz.geometry_etrs89) ~~ '%STRING'::text))
  ORDER BY 2, 3, 4 DESC;


--
-- Name: vw__shape_protected_area_punt; Type: VIEW; Schema: wfd_reporting; Owner: -
--

CREATE VIEW vw__shape_protected_area_punt AS
 SELECT DISTINCT ON (hydro_object.inspire_id_namespace, hydro_object.inspire_id_local_id, hydro_object.wkrv_id) mrz.geometry_etrs89 AS geometry,
    ('NL.WBHCODE.'::text || hydro_object.inspire_id_namespace) AS namespace,
    replace((hydro_object.inspire_id_local_id)::text, ' '::text, '_'::text) AS localid,
    hydro_object.wkrv_id AS version,
    replace((('NL0-'::text || upper((hydro_object.inspire_id_local_id)::text)) || '-Z'::text), ' '::text, '_'::text) AS thematicid,
    'euProtectedAreaCode'::text AS themaidsch,
    to_char(wkr_version.begin_lifespan_version, 'YYYY-MM-DD'::text) AS beginlife,
    to_char(wkr_version.end_lifespan_version, 'YYYY-MM-DD'::text) AS endlife,
    NULL::text AS predecesid,
    NULL::text AS predeidsch,
    NULL::text AS successoid,
    NULL::text AS succeidsch,
    'noChange'::text AS wevolution,
    NULL::text AS nametxtint,
    replace(replace((hdo_names.name)::text, '''t'::text, 'het'::text), '''T'::text, 'Het'::text) AS nametext,
    'dut'::text AS nametxtlan,
    to_char(mrz.begin_designation, 'YYYY-MM-DD'::text) AS desigbegin,
        CASE
            WHEN (mrz.end_designation IS NULL) THEN NULL::text
            ELSE to_char(mrz.end_designation, 'YYYY-MM-DD'::text)
        END AS desigend,
    'bathingWaters'::text AS zonetype,
    'otherProtectedArea'::text AS spzonetype,
    'national'::text AS legislevel,
    'Directive EC/2000/60 of the European Parliament'::text AS legisname,
    'http://www.wetten.nl'::text AS legislink,
    0.01 AS sizevalue,
    'km2'::text AS sizeuom
   FROM ((((((((public.management_regulation_or_restriction_zone mrz
     LEFT JOIN public.river_basin_disrict ON ((mrz.mrz_id = river_basin_disrict.rbd_id)))
     JOIN public.hydro_object ON ((hydro_object.hdo_id = mrz.mrz_id)))
     LEFT JOIN public.hdo_names ON ((hdo_names.hdo_id = mrz.mrz_id)))
     JOIN public.wkr_version ON ((wkr_version.wkrv_id = hydro_object.wkrv_id)))
     JOIN public.namespace_type ON ((namespace_type.ns_id = hydro_object.inspire_id_namespace)))
     LEFT JOIN public.competentauthority_namespacetype ON ((namespace_type.ns_id = competentauthority_namespacetype.ns_id)))
     LEFT JOIN public.organisatorische_eenheid ON ((organisatorische_eenheid.ore_id = competentauthority_namespacetype.ore_id)))
     JOIN public.wfd_protected_area ON ((wfd_protected_area.wpa_id = hydro_object.hdo_id)))
  WHERE (((hydro_object.hydro_object_type)::text = 'ProtectedArea'::text) AND (hydro_object.wkrv_id = 13) AND (public.geometrytype(mrz.geometry_etrs89) ~~ '%POINT'::text) AND (wfd_protected_area.protected_area_type_id = 7))
  ORDER BY hydro_object.inspire_id_namespace, hydro_object.inspire_id_local_id, hydro_object.wkrv_id DESC;


--
-- Name: vw__shape_protected_area_vlak; Type: VIEW; Schema: wfd_reporting; Owner: -
--

CREATE VIEW vw__shape_protected_area_vlak AS
 SELECT DISTINCT ON (hydro_object.inspire_id_namespace, hydro_object.inspire_id_local_id, hydro_object.wkrv_id) mrz.geometry_etrs89 AS geometry,
    ('NL.WBHCODE.'::text || hydro_object.inspire_id_namespace) AS namespace,
    hydro_object.inspire_id_local_id AS localid,
    hydro_object.wkrv_id AS version,
    (('NL0-'::text || upper((hydro_object.inspire_id_local_id)::text)) || '-B'::text) AS thematicid,
    'euProtectedAreaCode'::text AS themaidsch,
    to_char(wkr_version.begin_lifespan_version, 'YYYY-MM-DD'::text) AS beginlife,
    to_char(wkr_version.end_lifespan_version, 'YYYY-MM-DD'::text) AS endlife,
    array_to_string(ARRAY( SELECT DISTINCT regexp_replace((ho2009.inspire_id_local_id)::text, '\r|\n'::text, ''::text, 'g'::text) AS regexp_replace
           FROM ((public.hydro_object ho
             JOIN public.related_hydro_object rho ON (((rho.from_hdo = ho.hdo_id) AND (rho.rrt_id = 2) AND (ho.wkrv_id = 13))))
             JOIN public.hydro_object ho2009 ON (((rho.to_hdo = ho2009.hdo_id) AND (ho2009.wkrv_id = 2))))
          WHERE (ho.hdo_id = hydro_object.hdo_id)), ','::text) AS predecesid,
    'euProtectedAreaCode'::text AS predeidsch,
    NULL::text AS successoid,
    NULL::text AS succeidsch,
    'noChange'::text AS wevolution,
    NULL::text AS nametxtint,
    hdo_names.name AS nametext,
    'dut'::text AS nametxtlan,
    to_char(mrz.begin_designation, 'YYYY-MM-DD'::text) AS desigbegin,
        CASE
            WHEN (mrz.end_designation IS NULL) THEN NULL::text
            ELSE to_char(mrz.end_designation, 'YYYY-MM-DD'::text)
        END AS desigend,
    'designatedWaters'::text AS zonetype,
        CASE wfd_protected_area.protected_area_type_id
            WHEN 2 THEN 'freshwaterFishDesignatedWater'::text
            WHEN 3 THEN 'shellfishDesignatedWater'::text
            ELSE 'oeps'::text
        END AS spzonetype,
    'national'::text AS legislevel,
    'Directive EC/2000/60 of the European Parliament'::text AS legisname,
    'http://wetten.overheid.nl/zoeken'::text AS legislink,
    round(((public.st_area(mrz.geometry) / (1000000)::double precision))::numeric, 2) AS sizevalue,
    'km2'::text AS sizeuom
   FROM ((((((((public.management_regulation_or_restriction_zone mrz
     LEFT JOIN public.river_basin_disrict ON ((mrz.mrz_id = river_basin_disrict.rbd_id)))
     JOIN public.hydro_object ON ((hydro_object.hdo_id = mrz.mrz_id)))
     LEFT JOIN public.hdo_names ON ((hdo_names.hdo_id = mrz.mrz_id)))
     JOIN public.wkr_version ON ((wkr_version.wkrv_id = hydro_object.wkrv_id)))
     JOIN public.namespace_type ON ((namespace_type.ns_id = hydro_object.inspire_id_namespace)))
     LEFT JOIN public.competentauthority_namespacetype ON ((namespace_type.ns_id = competentauthority_namespacetype.ns_id)))
     LEFT JOIN public.organisatorische_eenheid ON ((organisatorische_eenheid.ore_id = competentauthority_namespacetype.ore_id)))
     JOIN public.wfd_protected_area ON ((wfd_protected_area.wpa_id = hydro_object.hdo_id)))
  WHERE (((hydro_object.hydro_object_type)::text = 'ProtectedArea'::text) AND (hydro_object.wkrv_id = 13) AND (public.geometrytype(mrz.geometry_etrs89) ~~ '%POLYGON'::text) AND (wfd_protected_area.protected_area_type_id = ANY (ARRAY[2, 3])))
UNION ALL
 SELECT DISTINCT ON (hydro_object.inspire_id_namespace, hydro_object.inspire_id_local_id, hydro_object.wkrv_id) mrz.geometry_etrs89 AS geometry,
    ('NL.WBHCODE.'::text || hydro_object.inspire_id_namespace) AS namespace,
    hydro_object.inspire_id_local_id AS localid,
    hydro_object.wkrv_id AS version,
    (('NL0-'::text || upper((hydro_object.inspire_id_local_id)::text)) || '-D'::text) AS thematicid,
    'euProtectedAreaCode'::text AS themaidsch,
    to_char(wkr_version.begin_lifespan_version, 'YYYY-MM-DD'::text) AS beginlife,
    to_char(wkr_version.end_lifespan_version, 'YYYY-MM-DD'::text) AS endlife,
    array_to_string(ARRAY( SELECT DISTINCT regexp_replace((ho2009.inspire_id_local_id)::text, '\r|\n'::text, ''::text, 'g'::text) AS regexp_replace
           FROM ((public.hydro_object ho
             JOIN public.related_hydro_object rho ON (((rho.from_hdo = ho.hdo_id) AND (rho.rrt_id = 2) AND (ho.wkrv_id = 13))))
             JOIN public.hydro_object ho2009 ON (((rho.to_hdo = ho2009.hdo_id) AND (ho2009.wkrv_id = 2))))
          WHERE (ho.hdo_id = hydro_object.hdo_id)), ','::text) AS predecesid,
    'euProtectedAreaCode'::text AS predeidsch,
    NULL::text AS successoid,
    NULL::text AS succeidsch,
    'noChange'::text AS wevolution,
    NULL::text AS nametxtint,
    hdo_names.name AS nametext,
    'dut'::text AS nametxtlan,
    to_char(mrz.begin_designation, 'YYYY-MM-DD'::text) AS desigbegin,
        CASE
            WHEN (mrz.end_designation IS NULL) THEN NULL::text
            ELSE to_char(mrz.end_designation, 'YYYY-MM-DD'::text)
        END AS desigend,
    'drinkingWaterProtectionArea'::text AS zonetype,
        CASE
            WHEN ((hydro_object.hydro_object_type)::text = 'GroundWaterBody'::text) THEN 'groundWaterBody'::text
            ELSE 'lakeWaterBody'::text
        END AS spzonetype,
    'national'::text AS legislevel,
    'Directive EC/2000/60 of the European Parliament'::text AS legisname,
    'http://wetten.overheid.nl/zoeken'::text AS legislink,
    round(((public.st_area(mrz.geometry) / (1000000)::double precision))::numeric, 2) AS sizevalue,
    'km2'::text AS sizeuom
   FROM ((((((((public.management_regulation_or_restriction_zone mrz
     LEFT JOIN public.river_basin_disrict ON ((mrz.mrz_id = river_basin_disrict.rbd_id)))
     JOIN public.hydro_object ON ((hydro_object.hdo_id = mrz.mrz_id)))
     LEFT JOIN public.hdo_names ON ((hdo_names.hdo_id = mrz.mrz_id)))
     JOIN public.wkr_version ON ((wkr_version.wkrv_id = hydro_object.wkrv_id)))
     JOIN public.namespace_type ON ((namespace_type.ns_id = hydro_object.inspire_id_namespace)))
     LEFT JOIN public.competentauthority_namespacetype ON ((namespace_type.ns_id = competentauthority_namespacetype.ns_id)))
     LEFT JOIN public.organisatorische_eenheid ON ((organisatorische_eenheid.ore_id = competentauthority_namespacetype.ore_id)))
     JOIN public.water_body ON ((water_body.wbd_id = hydro_object.hdo_id)))
  WHERE (((hydro_object.hydro_object_type)::text = ANY (ARRAY['GroundWaterBody'::text, 'SurfaceWaterBody'::text])) AND (water_body.is_article_7 IS TRUE) AND (hydro_object.wkrv_id = 13) AND (public.geometrytype(mrz.geometry_etrs89) ~~ '%POLYGON'::text))
  ORDER BY 2, 3, 4 DESC;


--
-- Name: vw__shape_surface_water_body_centerlijn; Type: VIEW; Schema: wfd_reporting; Owner: -
--

CREATE VIEW vw__shape_surface_water_body_centerlijn AS
 SELECT DISTINCT ON (hydro_object.inspire_id_namespace, hydro_object.inspire_id_local_id, hydro_object.wkrv_id) mrz.geometry_etrs89 AS geometry,
    (('NL0-'::text || upper((hydro_object.inspire_id_local_id)::text)) || '-C'::text) AS thematicid,
    'euSurfaceWaterBodyCode'::text AS themaidsch,
    ('NL.WBHCODE.'::text || hydro_object.inspire_id_namespace) AS namespace,
    upper((hydro_object.inspire_id_local_id)::text) AS hydroid,
    hdo_names.name AS geonametxt,
    'dut'::text AS genonamtxtl,
    'realSurfaceWaterSegment'::text AS coninua
   FROM ((((((((((public.management_regulation_or_restriction_zone mrz
     LEFT JOIN public.river_basin_disrict ON ((mrz.mrz_id = river_basin_disrict.rbd_id)))
     JOIN public.hydro_object ON ((hydro_object.hdo_id = mrz.mrz_id)))
     LEFT JOIN public.hdo_names ON ((hdo_names.hdo_id = mrz.mrz_id)))
     JOIN public.wkr_version ON ((wkr_version.wkrv_id = hydro_object.wkrv_id)))
     JOIN public.namespace_type ON ((namespace_type.ns_id = hydro_object.inspire_id_namespace)))
     LEFT JOIN public.competentauthority_namespacetype ON ((namespace_type.ns_id = competentauthority_namespacetype.ns_id)))
     LEFT JOIN public.organisatorische_eenheid ON ((organisatorische_eenheid.ore_id = competentauthority_namespacetype.ore_id)))
     LEFT JOIN public.surface_water_body ON ((surface_water_body.swb_id = hydro_object.hdo_id)))
     LEFT JOIN public.sw_typology_type stt ON ((stt.styp_id = surface_water_body.sw_typology_id)))
     LEFT JOIN public.water_body ON ((water_body.wbd_id = hydro_object.hdo_id)))
  WHERE (((hydro_object.hydro_object_type)::text = 'SurfaceWaterBody'::text) AND (hydro_object.wkrv_id = 13) AND (public.geometrytype(mrz.geometry_etrs89) ~~ '%STRING'::text) AND (hydro_object.inspire_id_namespace >= 80) AND (hydro_object.inspire_id_namespace < 99))
  ORDER BY hydro_object.inspire_id_namespace, hydro_object.inspire_id_local_id, hydro_object.wkrv_id DESC;


--
-- Name: vw__shape_surface_water_body_lijn; Type: VIEW; Schema: wfd_reporting; Owner: -
--

CREATE VIEW vw__shape_surface_water_body_lijn AS
 SELECT DISTINCT ON (hydro_object.inspire_id_namespace, hydro_object.inspire_id_local_id, hydro_object.wkrv_id) mrz.geometry_etrs89 AS geometry,
    ('NL.WBHCODE.'::text || hydro_object.inspire_id_namespace) AS namespace,
    hydro_object.inspire_id_local_id AS localid,
    hydro_object.wkrv_id AS inspireid_version_id,
    (('NL0-'::text || substr(upper((hydro_object.inspire_id_local_id)::text), 1, 34)) || '-O'::text) AS thematicid,
    'euSurfaceWaterBodyCode'::text AS themaidsch,
    to_char(wkr_version.begin_lifespan_version, 'YYYY-MM-DD'::text) AS beginlife,
    to_char(wkr_version.end_lifespan_version, 'YYYY-MM-DD'::text) AS endlife,
    array_to_string(ARRAY( SELECT DISTINCT regexp_replace(upper((ho2009.inspire_id_local_id)::text), '\r|\n'::text, ''::text, 'g'::text) AS regexp_replace
           FROM ((public.hydro_object ho
             JOIN public.related_hydro_object rho ON (((rho.from_hdo = ho.hdo_id) AND (rho.rrt_id = 2) AND (ho.wkrv_id = 13))))
             JOIN public.hydro_object ho2009 ON (((rho.to_hdo = ho2009.hdo_id) AND (ho2009.wkrv_id = 2))))
          WHERE (ho.hdo_id = hydro_object.hdo_id)), ','::text) AS predecesid,
        CASE
            WHEN (array_to_string(ARRAY( SELECT DISTINCT regexp_replace(upper((ho2009.inspire_id_local_id)::text), '\r|\n'::text, ''::text, 'g'::text) AS regexp_replace
               FROM ((public.hydro_object ho
                 JOIN public.related_hydro_object rho ON (((rho.from_hdo = ho.hdo_id) AND (rho.rrt_id = 2) AND (ho.wkrv_id = 13))))
                 JOIN public.hydro_object ho2009 ON (((rho.to_hdo = ho2009.hdo_id) AND (ho2009.wkrv_id = 2))))
              WHERE (ho.hdo_id = hydro_object.hdo_id)), ','::text) = ''::text) THEN NULL::text
            ELSE 'euSurfaceWaterBodyCode'::text
        END AS predeidsch,
    NULL::text AS successoid,
    NULL::text AS succeidsch,
    'noChange'::text AS wevolution,
    NULL::text AS nametxtint,
    hdo_names.name AS nametext,
    'dut'::text AS nametxtlan,
    to_char(mrz.begin_designation, 'YYYY-MM-DD'::text) AS desigbegin,
        CASE
            WHEN (mrz.end_designation IS NULL) THEN NULL::text
            ELSE to_char(mrz.end_designation, 'YYYY-MM-DD'::text)
        END AS desigend,
    'waterBody'::text AS zonetype,
        CASE "left"((stt.code)::text, 1)
            WHEN 'K'::text THEN 'coastalWaterBody'::text
            WHEN 'O'::text THEN 'transitionalWaterBody'::text
            WHEN 'M'::text THEN 'lakeWaterBody'::text
            WHEN 'R'::text THEN 'riverWaterBody'::text
            ELSE 'oeps'::text
        END AS spzonetype,
    (('NL0-'::text || "left"((hdo_rbd.inspire_id_local_id)::text, 4)) || '-S'::text) AS rzoneid,
    'NotApplicable'::text AS rtrnsid,
    'euRBDCode'::text AS rzoneidsch,
    'NotApplicable'::text AS rtrnsidsch,
        CASE
            WHEN ("left"((stt.code)::text, 1) = ANY (ARRAY['K'::text, 'O'::text, 'M'::text])) THEN surface_water_body.area_value
            ELSE surface_water_body.length_value
        END AS sizevalue,
        CASE
            WHEN (((hydro_object.hydro_object_type)::text = 'SurfaceWaterBody'::text) AND ("left"((stt.code)::text, 1) <> ALL (ARRAY['K'::text, 'O'::text, 'M'::text]))) THEN 'km2'::text
            ELSE 'km'::text
        END AS sizeuom,
    'http://www.waterkwaliteitsportaal.nl'::text AS link,
    (1)::numeric AS meandepth
   FROM ((((((((((((public.management_regulation_or_restriction_zone mrz
     LEFT JOIN public.river_basin_disrict ON ((mrz.mrz_id = river_basin_disrict.rbd_id)))
     JOIN public.hydro_object ON ((hydro_object.hdo_id = mrz.mrz_id)))
     LEFT JOIN public.hdo_names ON ((hdo_names.hdo_id = mrz.mrz_id)))
     JOIN public.wkr_version ON ((wkr_version.wkrv_id = hydro_object.wkrv_id)))
     JOIN public.namespace_type ON ((namespace_type.ns_id = hydro_object.inspire_id_namespace)))
     LEFT JOIN public.competentauthority_namespacetype ON ((namespace_type.ns_id = competentauthority_namespacetype.ns_id)))
     LEFT JOIN public.organisatorische_eenheid ON ((organisatorische_eenheid.ore_id = competentauthority_namespacetype.ore_id)))
     LEFT JOIN public.surface_water_body ON ((surface_water_body.swb_id = hydro_object.hdo_id)))
     LEFT JOIN public.sw_typology_type stt ON ((stt.styp_id = surface_water_body.sw_typology_id)))
     LEFT JOIN public.water_body ON ((water_body.wbd_id = hydro_object.hdo_id)))
     LEFT JOIN public.river_basin_disrict rbd ON ((rbd.rbd_id = water_body.rbd_id)))
     LEFT JOIN public.hydro_object hdo_rbd ON ((rbd.rbd_id = hdo_rbd.hdo_id)))
  WHERE (((hydro_object.hydro_object_type)::text = 'SurfaceWaterBody'::text) AND (hydro_object.wkrv_id = 13) AND (public.geometrytype(mrz.geometry_etrs89) ~~ '%STRING'::text))
  ORDER BY hydro_object.inspire_id_namespace, hydro_object.inspire_id_local_id, hydro_object.wkrv_id DESC;


--
-- Name: vw__shape_surface_water_body_vlak; Type: VIEW; Schema: wfd_reporting; Owner: -
--

CREATE VIEW vw__shape_surface_water_body_vlak AS
 SELECT DISTINCT ON (hydro_object.inspire_id_namespace, hydro_object.inspire_id_local_id, hydro_object.wkrv_id) mrz.geometry_etrs89 AS geometry,
    ('NL.WBHCODE.'::text || hydro_object.inspire_id_namespace) AS namespace,
    hydro_object.inspire_id_local_id AS localid,
    hydro_object.wkrv_id AS inspireid_version_id,
    (('NL0-'::text || substr(upper((hydro_object.inspire_id_local_id)::text), 1, 34)) || '-O'::text) AS thematicid,
    'euSurfaceWaterBodyCode'::text AS themaidsch,
    to_char(wkr_version.begin_lifespan_version, 'YYYY-MM-DD'::text) AS beginlife,
    to_char(wkr_version.end_lifespan_version, 'YYYY-MM-DD'::text) AS endlife,
    array_to_string(ARRAY( SELECT DISTINCT regexp_replace(upper((ho2009.inspire_id_local_id)::text), '\r|\n'::text, ''::text, 'g'::text) AS regexp_replace
           FROM ((public.hydro_object ho
             JOIN public.related_hydro_object rho ON (((rho.from_hdo = ho.hdo_id) AND (rho.rrt_id = 2) AND (ho.wkrv_id = 13))))
             JOIN public.hydro_object ho2009 ON (((rho.to_hdo = ho2009.hdo_id) AND (ho2009.wkrv_id = 2))))
          WHERE (ho.hdo_id = hydro_object.hdo_id)), ','::text) AS predecesid,
        CASE
            WHEN (array_to_string(ARRAY( SELECT DISTINCT regexp_replace(upper((ho2009.inspire_id_local_id)::text), '\r|\n'::text, ''::text, 'g'::text) AS regexp_replace
               FROM ((public.hydro_object ho
                 JOIN public.related_hydro_object rho ON (((rho.from_hdo = ho.hdo_id) AND (rho.rrt_id = 2) AND (ho.wkrv_id = 13))))
                 JOIN public.hydro_object ho2009 ON (((rho.to_hdo = ho2009.hdo_id) AND (ho2009.wkrv_id = 2))))
              WHERE (ho.hdo_id = hydro_object.hdo_id)), ','::text) = ''::text) THEN NULL::text
            ELSE 'euSurfaceWaterBodyCode'::text
        END AS predeidsch,
    NULL::text AS successoid,
    NULL::text AS succeidsch,
    'noChange'::text AS wevolution,
    NULL::text AS nametxtint,
    hdo_names.name AS nametext,
    'dut'::text AS nametxtlan,
    to_char(mrz.begin_designation, 'YYYY-MM-DD'::text) AS desigbegin,
        CASE
            WHEN (mrz.end_designation IS NULL) THEN NULL::text
            ELSE to_char(mrz.end_designation, 'YYYY-MM-DD'::text)
        END AS desigend,
    'waterBody'::text AS zonetype,
        CASE "left"((stt.code)::text, 1)
            WHEN 'K'::text THEN 'coastalWaterBody'::text
            WHEN 'O'::text THEN 'transitionalWaterBody'::text
            WHEN 'M'::text THEN 'lakeWaterBody'::text
            WHEN 'R'::text THEN 'riverWaterBody'::text
            ELSE 'oeps'::text
        END AS spzonetype,
    (('NL0-'::text || "left"((hdo_rbd.inspire_id_local_id)::text, 4)) || '-S'::text) AS rzoneid,
    'NotApplicable'::text AS rtrnsid,
    'euRBDCode'::text AS rzoneidsch,
    'NotApplicable'::text AS rtrnsidsch,
        CASE
            WHEN ("left"((stt.code)::text, 1) = ANY (ARRAY['K'::text, 'O'::text, 'M'::text])) THEN surface_water_body.area_value
            ELSE surface_water_body.length_value
        END AS sizevalue,
        CASE
            WHEN (((hydro_object.hydro_object_type)::text = 'SurfaceWaterBody'::text) AND ("left"((stt.code)::text, 1) <> ALL (ARRAY['K'::text, 'O'::text, 'M'::text]))) THEN 'km2'::text
            ELSE 'km'::text
        END AS sizeuom,
    'http://www.waterkwaliteitsportaal.nl'::text AS link,
    (1)::numeric AS meandepth
   FROM ((((((((((((public.management_regulation_or_restriction_zone mrz
     LEFT JOIN public.river_basin_disrict ON ((mrz.mrz_id = river_basin_disrict.rbd_id)))
     JOIN public.hydro_object ON ((hydro_object.hdo_id = mrz.mrz_id)))
     LEFT JOIN public.hdo_names ON ((hdo_names.hdo_id = mrz.mrz_id)))
     JOIN public.wkr_version ON ((wkr_version.wkrv_id = hydro_object.wkrv_id)))
     JOIN public.namespace_type ON ((namespace_type.ns_id = hydro_object.inspire_id_namespace)))
     LEFT JOIN public.competentauthority_namespacetype ON ((namespace_type.ns_id = competentauthority_namespacetype.ns_id)))
     LEFT JOIN public.organisatorische_eenheid ON ((organisatorische_eenheid.ore_id = competentauthority_namespacetype.ore_id)))
     LEFT JOIN public.surface_water_body ON ((surface_water_body.swb_id = hydro_object.hdo_id)))
     LEFT JOIN public.sw_typology_type stt ON ((stt.styp_id = surface_water_body.sw_typology_id)))
     LEFT JOIN public.water_body ON ((water_body.wbd_id = hydro_object.hdo_id)))
     LEFT JOIN public.river_basin_disrict rbd ON ((rbd.rbd_id = water_body.rbd_id)))
     LEFT JOIN public.hydro_object hdo_rbd ON ((rbd.rbd_id = hdo_rbd.hdo_id)))
  WHERE (((hydro_object.hydro_object_type)::text = 'SurfaceWaterBody'::text) AND (hydro_object.wkrv_id = 13) AND (public.geometrytype(mrz.geometry_etrs89) ~~ '%POLYGON'::text))
  ORDER BY hydro_object.inspire_id_namespace, hydro_object.inspire_id_local_id, hydro_object.wkrv_id DESC;


--
-- Name: vw_chemicalmonitoring; Type: VIEW; Schema: wfd_reporting; Owner: -
--

CREATE VIEW vw_chemicalmonitoring AS
 SELECT DISTINCT ON (mpn.mpnident, mpn.parameter) eu_stoffenlijst.value AS "chemicalSubstanceCode",
    (eu_stoffenlijst."swFailingRBSPOther")::text AS "chemicalSubstanceOther",
    'Water'::text AS "chemicalMatrix",
        CASE
            WHEN ((mpn.mpntype)::text = 'gw'::text) THEN 'Both'::text
            ELSE 'Status'::text
        END AS "chemicalPurpose",
    mpn.monfreq AS "chemicalFrequency",
    mpn.moncyclus AS "chemicalCycle",
    mpn.tot AS "chemicalLastMonitored",
        CASE
            WHEN ("substring"((mpn.mpnident)::text, 1, 2) <> 'NL'::text) THEN ('NL_'::text || (mpn.mpnident)::text)
            ELSE (mpn.mpnident)::text
        END AS "euMonitoringSiteCode",
    "left"((mpn.sgb)::text, 4) AS sgb
   FROM (eu_state_of_environment.monprog_2015 mpn
     JOIN eu_stoffenlijst ON ((((mpn.parameter)::text = (eu_stoffenlijst.parametercode)::text) AND ((eu_stoffenlijst.domeinnaam)::text = ANY (ARRAY[('PS_Enum'::character varying)::text, ('AdditionalPollutant_Enum'::character varying)::text, ('RBSP_Enum'::character varying)::text])))))
  WHERE ((mpn.purpose)::text = 'chemie'::text)
  ORDER BY mpn.mpnident, mpn.parameter, mpn.purpose, mpn.monsoort DESC;


--
-- Name: vw_competentauthority; Type: VIEW; Schema: wfd_reporting; Owner: -
--

CREATE VIEW vw_competentauthority AS
 SELECT DISTINCT ON (organisatorische_eenheid.organisatie_identificatie, ("left"((hdo_rbd.inspire_id_local_id)::text, 4))) organisatorische_eenheid.ore_id AS wkp_db_id,
    organisatorische_eenheid.organisatie_identificatie AS "euCACode",
    competent_authority.name_uk AS "competentAuthorityName",
    organisatorische_eenheid.naam AS "competentAuthorityNameNL",
    'Dutch'::text AS "competentAuthorityNameNLLanguage",
    competent_authority.url AS "linkToCompetentAuthority",
    organisatorische_eenheid.naam_verkort AS acronym,
    organisatorische_eenheid.adres AS street,
    organisatorische_eenheid.plaatsnaam AS "cityNL",
    'the Netherlands'::text AS country,
    organisatorische_eenheid.postcode,
    "left"((hdo_rbd.inspire_id_local_id)::text, 4) AS sgb,
        CASE
            WHEN (rbd.part_of_district IS NULL) THEN rbd.rbd_id
            ELSE rbd.part_of_district
        END AS "rBDSUCAID"
   FROM (((((((public.competent_authority
     JOIN public.organisatorische_eenheid ON ((organisatorische_eenheid.ore_id = competent_authority.ore_id)))
     LEFT JOIN public.competentauthority_namespacetype ca_ns ON ((ca_ns.ore_id = competent_authority.ore_id)))
     LEFT JOIN public.namespace_type ns ON ((ca_ns.ns_id = ns.ns_id)))
     LEFT JOIN public.hydro_object hdo ON (((ns.ns_id = hdo.inspire_id_namespace) AND (hdo.wkrv_id = 13))))
     JOIN public.water_body wbd ON ((wbd.wbd_id = hdo.hdo_id)))
     JOIN public.hydro_object hdo_rbd ON ((wbd.rbd_id = hdo_rbd.hdo_id)))
     JOIN public.river_basin_disrict rbd ON ((rbd.rbd_id = hdo_rbd.hdo_id)))
  ORDER BY organisatorische_eenheid.organisatie_identificatie;


--
-- Name: vw_competentauthority_mainrole; Type: VIEW; Schema: wfd_reporting; Owner: -
--

CREATE VIEW vw_competentauthority_mainrole AS
 SELECT organisatorische_eenheid.ore_id AS wkp_db_id,
    organisatorische_eenheid.organisatie_identificatie AS "euCACode",
    ca_role_code.description AS "mainRole"
   FROM public.competent_authority,
    public.organisatorische_eenheid,
    public.competent_authority_roles,
    public.ca_role_code
  WHERE ((organisatorische_eenheid.ore_id = competent_authority.ore_id) AND (organisatorische_eenheid.ore_id = competent_authority_roles.ore_id) AND (ca_role_code.crc_id = competent_authority_roles.crc_id) AND (competent_authority_roles.main = true) AND (ca_role_code.lgr_id = 1));


--
-- Name: vw_competentauthority_otherrole; Type: VIEW; Schema: wfd_reporting; Owner: -
--

CREATE VIEW vw_competentauthority_otherrole AS
 SELECT organisatorische_eenheid.ore_id AS wkp_db_id,
    organisatorische_eenheid.organisatie_identificatie AS "euCACode",
    ca_role_code.description AS "otherRole"
   FROM public.competent_authority,
    public.organisatorische_eenheid,
    public.competent_authority_roles,
    public.ca_role_code
  WHERE ((organisatorische_eenheid.ore_id = competent_authority.ore_id) AND (organisatorische_eenheid.ore_id = competent_authority_roles.ore_id) AND (ca_role_code.crc_id = competent_authority_roles.crc_id) AND (competent_authority_roles.main = false) AND (ca_role_code.lgr_id = 1));


--
-- Name: vw_failingrbsp; Type: VIEW; Schema: wfd_reporting; Owner: -
--

CREATE VIEW vw_failingrbsp AS
 WITH oordeel AS (
         SELECT DISTINCT ON (sys.sys_id, swcs.opt_id) sys.sys_id,
            sys.swb_id,
            hydro_object.inspire_id_local_id,
            swcs.opt_id,
            swcs.swcs_id,
            sge.chs_id
           FROM ((((public.swb_yearly_status sys
             JOIN public.sw_chemical_substance_status swcs ON ((swcs.sys_id = sys.sys_id)))
             JOIN public.observed_property_type ON ((observed_property_type.opt_id = swcs.opt_id)))
             JOIN public.substance_group_element sge ON ((sge.ssge_id = observed_property_type.substance_group_id)))
             JOIN public.hydro_object ON ((hydro_object.hdo_id = sys.swb_id)))
          WHERE ((sge.chs_id IS NOT NULL) AND (swcs.eumg_id = 3) AND (sys.year_of_status = 2015) AND (hydro_object.wkrv_id = 13))
          ORDER BY sys.sys_id, swcs.opt_id, swcs.wbpm_id DESC
        ), stofgroep AS (
         SELECT substance_group_element.chs_id,
            substance_group_element.ssge_id,
                CASE substance_group_element.ssge_id
                    WHEN 3155 THEN 'STOFOV'::text
                    WHEN 3149 THEN 'STOFPR_UBQN'::text
                    WHEN 3150 THEN 'STOFPR_UBQJ'::text
                    WHEN 2907 THEN 'CHEMT'::text
                    WHEN 3148 THEN 'STOFPR_34-45'::text
                    ELSE NULL::text
                END AS categorie
           FROM public.substance_group_element
          WHERE (substance_group_element.ssge_id = ANY (ARRAY[3155, 3150, 3149, 3148, 2907]))
        ), eu_stoffenlijst AS (
         SELECT chemische_stof_type.chs_id,
            chemische_stof_type.cas_nr,
            chemische_stof_type.naam,
            chemische_stof_type.code,
            chemische_stof_type.d_begin,
            chemische_stof_type.d_eind,
            chemische_stof_type.last_changed_date,
            chemische_stof_type.d_status,
            chemische_stof_type.id,
            eu_stoffenlijst_1.domeinnaam,
            eu_stoffenlijst_1.value,
            eu_stoffenlijst_1.grootheidcode,
            eu_stoffenlijst_1.parametercode,
            eu_stoffenlijst_1."swFailingRBSPOther"
           FROM public.chemische_stof_type,
            wfd_reporting.eu_stoffenlijst eu_stoffenlijst_1
          WHERE (((eu_stoffenlijst_1.parametercode)::text = (chemische_stof_type.code)::text) AND ((eu_stoffenlijst_1.domeinnaam)::text = 'RBSP_Enum'::text))
        )
 SELECT oordeel.inspire_id_local_id AS "euSurfaceWaterBodyCode",
    eu_stoffenlijst.value AS "swFailingRBSP",
    rb.inspire_id_local_id AS stroomgebieddistrict
   FROM (((((oordeel
     JOIN stofgroep ON ((stofgroep.chs_id = oordeel.chs_id)))
     JOIN public.chemische_stof_type chs ON ((chs.chs_id = oordeel.chs_id)))
     JOIN public.water_body ON ((oordeel.swb_id = water_body.wbd_id)))
     JOIN public.hydro_object rb ON ((rb.hdo_id = water_body.rbd_id)))
     LEFT JOIN eu_stoffenlijst ON (((chs.code)::text = (eu_stoffenlijst.parametercode)::text)))
  WHERE ((oordeel.swcs_id = 2) AND (stofgroep.categorie = 'STOFOV'::text) AND (eu_stoffenlijst.value IS NOT NULL))
  ORDER BY rb.inspire_id_local_id, oordeel.inspire_id_local_id, eu_stoffenlijst.value;


--
-- Name: vw_failingrbsp2; Type: VIEW; Schema: wfd_reporting; Owner: -
--

CREATE VIEW vw_failingrbsp2 AS
 WITH oordeel AS (
         SELECT DISTINCT ON (sys.sys_id, swcs.opt_id) sys.sys_id,
            sys.swb_id,
            hydro_object.inspire_id_local_id,
            swcs.opt_id,
            swcs.swcs_id,
            sge.chs_id
           FROM ((((public.swb_yearly_status sys
             JOIN public.sw_chemical_substance_status swcs ON ((swcs.sys_id = sys.sys_id)))
             JOIN public.observed_property_type ON ((observed_property_type.opt_id = swcs.opt_id)))
             JOIN public.substance_group_element sge ON ((sge.ssge_id = observed_property_type.substance_group_id)))
             JOIN public.hydro_object ON ((hydro_object.hdo_id = sys.swb_id)))
          WHERE ((sge.chs_id IS NOT NULL) AND (swcs.eumg_id = 3) AND (sys.year_of_status = 2015) AND (hydro_object.wkrv_id = 13))
          ORDER BY sys.sys_id, swcs.opt_id, swcs.wbpm_id DESC
        ), stofgroep AS (
         SELECT substance_group_element.chs_id,
            substance_group_element.ssge_id,
                CASE substance_group_element.ssge_id
                    WHEN 3155 THEN 'STOFOV'::text
                    WHEN 3149 THEN 'STOFPR_UBQN'::text
                    WHEN 3150 THEN 'STOFPR_UBQJ'::text
                    WHEN 2907 THEN 'CHEMT'::text
                    WHEN 3148 THEN 'STOFPR_34-45'::text
                    ELSE NULL::text
                END AS categorie
           FROM public.substance_group_element
          WHERE (substance_group_element.ssge_id = ANY (ARRAY[3155, 3150, 3149, 3148, 2907]))
        )
 SELECT oordeel.inspire_id_local_id AS "euSurfaceWaterBodyCode",
    chs.cas_nr AS "swFailingRBSP_Casnr",
    chs.code AS "swFailingRBSP_code",
    chs.naam AS "swFailingRBSP_naam",
    rb.inspire_id_local_id AS stroomgebieddistrict
   FROM ((((oordeel
     JOIN stofgroep ON ((stofgroep.chs_id = oordeel.chs_id)))
     JOIN public.chemische_stof_type chs ON ((chs.chs_id = oordeel.chs_id)))
     JOIN public.water_body ON ((oordeel.swb_id = water_body.wbd_id)))
     JOIN public.hydro_object rb ON ((rb.hdo_id = water_body.rbd_id)))
  WHERE ((oordeel.swcs_id = 2) AND (stofgroep.categorie = 'STOFOV'::text))
  ORDER BY rb.inspire_id_local_id, oordeel.inspire_id_local_id, chs.code;


--
-- Name: vw_groundwaterbody; Type: VIEW; Schema: wfd_reporting; Owner: -
--

CREATE VIEW vw_groundwaterbody AS
 WITH gwb_prot AS (
         SELECT DISTINCT ON (wpi.wbd_id) wpi.wbd_id
           FROM public.waterbody_protected_area_intersection wpi,
            public.wfd_protected_area,
            public.hydro_object hydro_object_1
          WHERE ((wfd_protected_area.wpa_id = wpi.wpa_id) AND (wfd_protected_area.protected_area_type_id = ANY (ARRAY[1, 4])) AND (hydro_object_1.hdo_id = wpi.wbd_id) AND (hydro_object_1.wkrv_id = 13) AND ((hydro_object_1.hydro_object_type)::text = 'GroundWaterBody'::text))
          ORDER BY wpi.wbd_id
        ), gwb_swb AS (
         SELECT DISTINCT ON (relation_gwb_swb.gwb_id) relation_gwb_swb.gwb_id
           FROM public.relation_gwb_swb,
            public.hydro_object hydro_object_1
          WHERE ((hydro_object_1.hdo_id = relation_gwb_swb.gwb_id) AND (hydro_object_1.wkrv_id = 13) AND ((hydro_object_1.hydro_object_type)::text = 'GroundWaterBody'::text))
          ORDER BY relation_gwb_swb.gwb_id
        ), gwb_oordeel AS (
         SELECT hdo_gwb.hdo_id AS gwb_id,
            gwb_yearly_status.year_of_status AS jaar,
            gw_chemical_status.opt_id,
            classification_type.description AS oordeel,
            waarde_bepalings_methode_type.code AS wbpm
           FROM (((((public.gwb_yearly_status
             LEFT JOIN public.hydro_object hdo_gwb ON ((hdo_gwb.hdo_id = gwb_yearly_status.gwb_id)))
             JOIN public.gw_chemical_status ON ((gw_chemical_status.gys_id = gwb_yearly_status.gys_id)))
             LEFT JOIN public.classification_type ON ((gw_chemical_status.clst_id = classification_type.cls_id)))
             LEFT JOIN public.vw_waargenomen_eigenschap ON ((vw_waargenomen_eigenschap."DB_ID" = gw_chemical_status.opt_id)))
             LEFT JOIN public.waarde_bepalings_methode_type ON ((waarde_bepalings_methode_type.wbpm_id = gw_chemical_status.wbpm_id)))
          WHERE ((hdo_gwb.wkrv_id = 13) AND (gwb_yearly_status.year_of_status = ANY (ARRAY[2014, 2015])) AND ((waarde_bepalings_methode_type.code)::text = 'GWPROTNL'::text) AND (gw_chemical_status.opt_id = ANY (ARRAY[4495, 4494])))
        UNION ALL
         SELECT hdo_gwb.hdo_id AS gwb_id,
            gwb_yearly_status.year_of_status AS jaar,
            gw_quantity_status.opt_id,
            classification_type.description AS oordeel,
            waarde_bepalings_methode_type.code AS wbpm
           FROM (((((public.gwb_yearly_status
             LEFT JOIN public.hydro_object hdo_gwb ON ((hdo_gwb.hdo_id = gwb_yearly_status.gwb_id)))
             JOIN public.gw_quantity_status ON ((gw_quantity_status.gys_id = gwb_yearly_status.gys_id)))
             LEFT JOIN public.classification_type ON ((gw_quantity_status.gwst_id = classification_type.cls_id)))
             LEFT JOIN public.vw_waargenomen_eigenschap ON ((vw_waargenomen_eigenschap."DB_ID" = gw_quantity_status.opt_id)))
             LEFT JOIN public.waarde_bepalings_methode_type ON ((waarde_bepalings_methode_type.wbpm_id = gw_quantity_status.wbpm_id)))
          WHERE ((hdo_gwb.wkrv_id = 13) AND (gwb_yearly_status.year_of_status = ANY (ARRAY[2014, 2015])) AND ((waarde_bepalings_methode_type.code)::text = 'GWPROTNL'::text) AND (gw_quantity_status.opt_id = ANY (ARRAY[4495, 4494])))
        ), gwb_prognose_2021_4494 AS (
         SELECT hydro_object_1.hdo_id AS gwb_id,
                CASE
                    WHEN ((wp4486.cls_id = 9) OR (wp4491.cls_id = 9) OR (wp4492.cls_id = 9) OR (wp4493.cls_id = 9) OR (wp4498.cls_id = 9)) THEN 'Ontoereikend'::text
                    ELSE 'Goed'::text
                END AS prognose
           FROM (((((public.hydro_object hydro_object_1
             JOIN public.wb_prognosis wp4486 ON (((wp4486.swb_id = hydro_object_1.hdo_id) AND (wp4486.year = 2021) AND (wp4486.opt_id = 4486))))
             JOIN public.wb_prognosis wp4491 ON (((wp4491.swb_id = hydro_object_1.hdo_id) AND (wp4491.year = 2021) AND (wp4491.opt_id = 4491))))
             JOIN public.wb_prognosis wp4492 ON (((wp4492.swb_id = hydro_object_1.hdo_id) AND (wp4492.year = 2021) AND (wp4492.opt_id = 4492))))
             JOIN public.wb_prognosis wp4493 ON (((wp4493.swb_id = hydro_object_1.hdo_id) AND (wp4493.year = 2021) AND (wp4493.opt_id = 4493))))
             JOIN public.wb_prognosis wp4498 ON (((wp4498.swb_id = hydro_object_1.hdo_id) AND (wp4498.year = 2021) AND (wp4498.opt_id = 4498))))
          WHERE (hydro_object_1.wkrv_id = 13)
        ), gwb_prognose_2027_4494 AS (
         SELECT hydro_object_1.hdo_id AS gwb_id,
                CASE
                    WHEN ((wp4486.cls_id = 9) OR (wp4491.cls_id = 9) OR (wp4492.cls_id = 9) OR (wp4493.cls_id = 9) OR (wp4498.cls_id = 9)) THEN 'Ontoereikend'::text
                    ELSE 'Goed'::text
                END AS prognose
           FROM (((((public.hydro_object hydro_object_1
             JOIN public.wb_prognosis wp4486 ON (((wp4486.swb_id = hydro_object_1.hdo_id) AND (wp4486.year = 2027) AND (wp4486.opt_id = 4486))))
             JOIN public.wb_prognosis wp4491 ON (((wp4491.swb_id = hydro_object_1.hdo_id) AND (wp4491.year = 2027) AND (wp4491.opt_id = 4491))))
             JOIN public.wb_prognosis wp4492 ON (((wp4492.swb_id = hydro_object_1.hdo_id) AND (wp4492.year = 2027) AND (wp4492.opt_id = 4492))))
             JOIN public.wb_prognosis wp4493 ON (((wp4493.swb_id = hydro_object_1.hdo_id) AND (wp4493.year = 2027) AND (wp4493.opt_id = 4493))))
             JOIN public.wb_prognosis wp4498 ON (((wp4498.swb_id = hydro_object_1.hdo_id) AND (wp4498.year = 2027) AND (wp4498.opt_id = 4498))))
          WHERE (hydro_object_1.wkrv_id = 13)
        ), gwb_prognose_2021_4495 AS (
         SELECT hydro_object_1.hdo_id AS gwb_id,
                CASE
                    WHEN ((wp4488.cls_id = 9) OR (wp4489.cls_id = 9) OR (wp4490.cls_id = 9) OR (wp4497.cls_id = 9)) THEN 'Ontoereikend'::text
                    ELSE 'Goed'::text
                END AS prognose
           FROM ((((public.hydro_object hydro_object_1
             JOIN public.wb_prognosis wp4488 ON (((wp4488.swb_id = hydro_object_1.hdo_id) AND (wp4488.year = 2021) AND (wp4488.opt_id = 4488))))
             JOIN public.wb_prognosis wp4489 ON (((wp4489.swb_id = hydro_object_1.hdo_id) AND (wp4489.year = 2021) AND (wp4489.opt_id = 4489))))
             JOIN public.wb_prognosis wp4490 ON (((wp4490.swb_id = hydro_object_1.hdo_id) AND (wp4490.year = 2021) AND (wp4490.opt_id = 4490))))
             JOIN public.wb_prognosis wp4497 ON (((wp4497.swb_id = hydro_object_1.hdo_id) AND (wp4497.year = 2021) AND (wp4497.opt_id = 4497))))
          WHERE (hydro_object_1.wkrv_id = 13)
        ), gwb_prognose_2027_4495 AS (
         SELECT hydro_object_1.hdo_id AS gwb_id,
                CASE
                    WHEN ((wp4488.cls_id = 9) OR (wp4489.cls_id = 9) OR (wp4490.cls_id = 9) OR (wp4497.cls_id = 9)) THEN 'Ontoereikend'::text
                    ELSE 'Goed'::text
                END AS prognose
           FROM ((((public.hydro_object hydro_object_1
             JOIN public.wb_prognosis wp4488 ON (((wp4488.swb_id = hydro_object_1.hdo_id) AND (wp4488.year = 2027) AND (wp4488.opt_id = 4488))))
             JOIN public.wb_prognosis wp4489 ON (((wp4489.swb_id = hydro_object_1.hdo_id) AND (wp4489.year = 2027) AND (wp4489.opt_id = 4489))))
             JOIN public.wb_prognosis wp4490 ON (((wp4490.swb_id = hydro_object_1.hdo_id) AND (wp4490.year = 2027) AND (wp4490.opt_id = 4490))))
             JOIN public.wb_prognosis wp4497 ON (((wp4497.swb_id = hydro_object_1.hdo_id) AND (wp4497.year = 2027) AND (wp4497.opt_id = 4497))))
          WHERE (hydro_object_1.wkrv_id = 13)
        ), gwb_oordeel_sub AS (
         SELECT hdo_gwb.hdo_id AS gwb_id,
            gwb_yearly_status.year_of_status AS jaar,
            gw_chemical_status.opt_id,
            classification_type.description AS oordeel,
            waarde_bepalings_methode_type.code AS wbpm
           FROM ((((public.gwb_yearly_status
             LEFT JOIN public.hydro_object hdo_gwb ON ((hdo_gwb.hdo_id = gwb_yearly_status.gwb_id)))
             JOIN public.gw_chemical_status ON ((gw_chemical_status.gys_id = gwb_yearly_status.gys_id)))
             LEFT JOIN public.classification_type ON ((gw_chemical_status.clst_id = classification_type.cls_id)))
             LEFT JOIN public.waarde_bepalings_methode_type ON ((waarde_bepalings_methode_type.wbpm_id = gw_chemical_status.wbpm_id)))
          WHERE ((hdo_gwb.wkrv_id = 13) AND (gwb_yearly_status.year_of_status = ANY (ARRAY[2014, 2015])) AND (gw_chemical_status.opt_id > 4400) AND (gw_chemical_status.opt_id <> ALL (ARRAY[4495, 4494, 4487])))
        UNION ALL
         SELECT hdo_gwb.hdo_id AS gwb_id,
            gwb_yearly_status.year_of_status AS jaar,
            gw_quantity_status.opt_id,
            classification_type.description AS oordeel,
            waarde_bepalings_methode_type.code AS wbpm
           FROM ((((public.gwb_yearly_status
             LEFT JOIN public.hydro_object hdo_gwb ON ((hdo_gwb.hdo_id = gwb_yearly_status.gwb_id)))
             JOIN public.gw_quantity_status ON ((gw_quantity_status.gys_id = gwb_yearly_status.gys_id)))
             LEFT JOIN public.classification_type ON ((gw_quantity_status.gwst_id = classification_type.cls_id)))
             LEFT JOIN public.waarde_bepalings_methode_type ON ((waarde_bepalings_methode_type.wbpm_id = gw_quantity_status.wbpm_id)))
          WHERE ((hdo_gwb.wkrv_id = 13) AND (gwb_yearly_status.year_of_status = ANY (ARRAY[2014, 2015])) AND (gw_quantity_status.opt_id > 4400) AND (gw_quantity_status.opt_id <> ALL (ARRAY[4495, 4494, 4487])))
  ORDER BY 1, 2, 3
        ), gwb_oordeel_subt AS (
         SELECT DISTINCT ON (gwb_oordeel_sub.gwb_id, gwb_oordeel_sub.opt_id) gwb_oordeel_sub.gwb_id,
            gwb_oordeel_sub.jaar,
            gwb_oordeel_sub.opt_id,
            gwb_oordeel_sub.oordeel
           FROM gwb_oordeel_sub
          ORDER BY gwb_oordeel_sub.gwb_id, gwb_oordeel_sub.opt_id, gwb_oordeel_sub.jaar DESC, gwb_oordeel_sub.wbpm
        ), gwb_oordeel_subt_q AS (
         SELECT hydro_object_1.hdo_id AS gwb_id,
                CASE
                    WHEN ((((gwb_oordeel_subt_4488.oordeel)::text = 'Ontoereikend'::text) OR ((gwb_oordeel_subt_4489.oordeel)::text = 'Ontoereikend'::text)) AND (((gwb_oordeel_subt_4490.oordeel)::text = 'Ontoereikend'::text) OR ((gwb_oordeel_subt_4497.oordeel)::text = 'Ontoereikend'::text))) THEN 'Both'::text
                    ELSE
                    CASE
                        WHEN (((gwb_oordeel_subt_4488.oordeel)::text = 'Ontoereikend'::text) OR ((gwb_oordeel_subt_4489.oordeel)::text = 'Ontoereikend'::text)) THEN 'Surface waters / terrestial ecosystems'::text
                        ELSE 'Uses of functions'::text
                    END
                END AS oordeel
           FROM ((((public.hydro_object hydro_object_1
             LEFT JOIN gwb_oordeel_subt gwb_oordeel_subt_4488 ON (((gwb_oordeel_subt_4488.gwb_id = hydro_object_1.hdo_id) AND ((gwb_oordeel_subt_4488.oordeel)::text = 'Ontoereikend'::text) AND (gwb_oordeel_subt_4488.opt_id = 4888))))
             LEFT JOIN gwb_oordeel_subt gwb_oordeel_subt_4489 ON (((gwb_oordeel_subt_4489.gwb_id = hydro_object_1.hdo_id) AND ((gwb_oordeel_subt_4489.oordeel)::text = 'Ontoereikend'::text) AND (gwb_oordeel_subt_4489.opt_id = 4489))))
             LEFT JOIN gwb_oordeel_subt gwb_oordeel_subt_4490 ON (((gwb_oordeel_subt_4490.gwb_id = hydro_object_1.hdo_id) AND ((gwb_oordeel_subt_4490.oordeel)::text = 'Ontoereikend'::text) AND (gwb_oordeel_subt_4490.opt_id = 4490))))
             LEFT JOIN gwb_oordeel_subt gwb_oordeel_subt_4497 ON (((gwb_oordeel_subt_4497.gwb_id = hydro_object_1.hdo_id) AND ((gwb_oordeel_subt_4497.oordeel)::text = 'Ontoereikend'::text) AND (gwb_oordeel_subt_4497.opt_id = 4497))))
          WHERE (((hydro_object_1.hydro_object_type)::text = 'GroundWaterBody'::text) AND (hydro_object_1.wkrv_id = 13))
        ), gwb_oordeel_subt_c AS (
         SELECT hydro_object_1.hdo_id AS gwb_id,
                CASE
                    WHEN ((((gwb_oordeel_subt_4492.oordeel)::text = 'Ontoereikend'::text) OR ((gwb_oordeel_subt_4493.oordeel)::text = 'Ontoereikend'::text)) AND (((gwb_oordeel_subt_4491.oordeel)::text = 'Ontoereikend'::text) OR ((gwb_oordeel_subt_4486.oordeel)::text = 'Ontoereikend'::text) OR ((gwb_oordeel_subt_4498.oordeel)::text = 'Ontoereikend'::text))) THEN 'Both'::text
                    ELSE
                    CASE
                        WHEN (((gwb_oordeel_subt_4492.oordeel)::text = 'Ontoereikend'::text) OR ((gwb_oordeel_subt_4493.oordeel)::text = 'Ontoereikend'::text)) THEN 'Surface waters / terrestial ecosystems'::text
                        ELSE 'Uses of functions'::text
                    END
                END AS oordeel
           FROM (((((public.hydro_object hydro_object_1
             LEFT JOIN gwb_oordeel_subt gwb_oordeel_subt_4486 ON (((gwb_oordeel_subt_4486.gwb_id = hydro_object_1.hdo_id) AND ((gwb_oordeel_subt_4486.oordeel)::text = 'Ontoereikend'::text) AND (gwb_oordeel_subt_4486.opt_id = 4886))))
             LEFT JOIN gwb_oordeel_subt gwb_oordeel_subt_4491 ON (((gwb_oordeel_subt_4491.gwb_id = hydro_object_1.hdo_id) AND ((gwb_oordeel_subt_4491.oordeel)::text = 'Ontoereikend'::text) AND (gwb_oordeel_subt_4491.opt_id = 4491))))
             LEFT JOIN gwb_oordeel_subt gwb_oordeel_subt_4492 ON (((gwb_oordeel_subt_4492.gwb_id = hydro_object_1.hdo_id) AND ((gwb_oordeel_subt_4492.oordeel)::text = 'Ontoereikend'::text) AND (gwb_oordeel_subt_4492.opt_id = 4492))))
             LEFT JOIN gwb_oordeel_subt gwb_oordeel_subt_4493 ON (((gwb_oordeel_subt_4493.gwb_id = hydro_object_1.hdo_id) AND ((gwb_oordeel_subt_4493.oordeel)::text = 'Ontoereikend'::text) AND (gwb_oordeel_subt_4493.opt_id = 4493))))
             LEFT JOIN gwb_oordeel_subt gwb_oordeel_subt_4498 ON (((gwb_oordeel_subt_4498.gwb_id = hydro_object_1.hdo_id) AND ((gwb_oordeel_subt_4498.oordeel)::text = 'Ontoereikend'::text) AND (gwb_oordeel_subt_4498.opt_id = 4498))))
          WHERE (((hydro_object_1.hydro_object_type)::text = 'GroundWaterBody'::text) AND (hydro_object_1.wkrv_id = 13))
        ), pressure AS (
         SELECT DISTINCT ON (hydro_object_1.hdo_id, spe.eu_xsd) hydro_object_1.hdo_id AS db_id,
            hydro_object_1.inspire_id_local_id AS "euGroundWaterBodyCode",
                CASE
                    WHEN (spe.eu_xsd IS NULL) THEN 'No significant pressure'::text
                    ELSE spe.eu_xsd
                END AS pressure_type
           FROM ((public.hydro_object hydro_object_1
             LEFT JOIN public.gwb_pressure ON ((hydro_object_1.hdo_id = gwb_pressure.gwb_id)))
             LEFT JOIN significant_pressure_enum spe ON (((spe.gw_p_id = gwb_pressure.gprs_id) AND (spe.eu_xsd ~~ '7 - %'::text))))
          WHERE ((gwb_pressure.is_significant = true) AND (hydro_object_1.wkrv_id = 13))
          ORDER BY hydro_object_1.hdo_id, spe.eu_xsd
        ), gwb_oordeel_i AS (
         SELECT DISTINCT ON (gwb_oordeel.gwb_id) gwb_oordeel.gwb_id,
            gwb_oordeel.jaar,
            gwb_oordeel.oordeel,
            gwb_oordeel.wbpm
           FROM gwb_oordeel
          ORDER BY gwb_oordeel.gwb_id, gwb_oordeel.oordeel DESC
        ), impact AS (
         SELECT DISTINCT ON (hydro_object_1.hdo_id, ipe.eu_xsd) hydro_object_1.hdo_id AS db_id,
                CASE
                    WHEN (ipe.eu_xsd IS NULL) THEN
                    CASE
                        WHEN ((gwb_oordeel_i.oordeel)::text = 'Goed'::text) THEN 'NOSI - No significant impact'::text
                        ELSE 'UNKN - Unknown impact type'::text
                    END
                    ELSE ipe.eu_xsd
                END AS impact_type
           FROM ((((public.hydro_object hydro_object_1
             LEFT JOIN public.gwb_pressure ON (((hydro_object_1.hdo_id = gwb_pressure.gwb_id) AND (gwb_pressure.is_significant = true))))
             LEFT JOIN public.gwb_pressure_impact ON ((gwb_pressure.gwbp_id = gwb_pressure_impact.gwbp_id)))
             LEFT JOIN significant_impact_enum ipe ON (((ipe.i_id = gwb_pressure_impact.impact_id) AND (ipe.eu_xsd ~~ 'OTHE%'::text))))
             LEFT JOIN gwb_oordeel_i ON ((gwb_oordeel_i.gwb_id = hydro_object_1.hdo_id)))
          WHERE ((hydro_object_1.wkrv_id = 13) AND ((hydro_object_1.hydro_object_type)::text = 'GroundWaterBody'::text))
          ORDER BY hydro_object_1.hdo_id, ipe.eu_xsd
        )
 SELECT hydro_object.hdo_id AS db_id,
    hydro_object.inspire_id_local_id AS "euGroundWaterBodyCode",
    "left"((hdo_rbd.inspire_id_local_id)::text, 4) AS "euRBDCode",
    hdo_names.name AS "groundwaterBodyName",
        CASE ground_water_body.is_layered
            WHEN true THEN 'Yes'::text
            ELSE 'No'::text
        END AS layered,
        CASE
            WHEN (gsw.gwb_id IS NULL) THEN 'No'::text
            ELSE 'Yes'::text
        END AS "linkSurfaceWaterBody",
        CASE ground_water_body.is_linked_to_terrestrial_ecosystems
            WHEN true THEN 'Yes'::text
            ELSE 'No'::text
        END AS "linkTerrestrialEcosystem",
    gfe.eu_xsd AS "geologicalFormation",
        CASE ground_water_body.is_transboundary
            WHEN true THEN 'Yes'::text
            ELSE 'No'::text
        END AS "groundwaterBodyTransboundary",
        CASE
            WHEN (gpb.wbd_id IS NULL) THEN 'False'::text
            ELSE 'True'::text
        END AS "gwAssociatedProtectedArea",
        CASE
            WHEN (pressure.pressure_type ~~ '7 - %'::text) THEN ground_water_body.other_pressure_description
            ELSE NULL::character varying
        END AS "gwSignificantPressureOther",
        CASE
            WHEN (impact.impact_type ~~ 'OTHE%'::text) THEN 'No further details available'::text
            ELSE NULL::text
        END AS "gwSignificantImpactOther",
        CASE
            WHEN ((goq.oordeel)::text = 'Goed'::text) THEN 'No'::text
            ELSE 'Yes'::text
        END AS "gwAtRiskQuantitative",
        CASE
            WHEN ((goq.oordeel)::text = 'Goed'::text) THEN 'No'::text
            ELSE
            CASE
                WHEN ((gpq_2021.prognose = 'Goed'::text) OR (gpq_2027.prognose = 'Goed'::text)) THEN 'No'::text
                ELSE 'Yes'::text
            END
        END AS "gwEORiskQuantitative",
        CASE
            WHEN ((goq.oordeel)::text = 'Goed'::text) THEN 2
            ELSE 3
        END AS "gwQuantitativeStatusValue",
    '2007-2014'::text AS "gwQuantitativeAssessmentYear",
    3 AS "gwQuantitativeAssessmentConfidence",
        CASE
            WHEN ((goq.oordeel)::text = 'Goed'::text) THEN 'Yes'::text
            ELSE 'No'::text
        END AS "gwQuantitativeStatusExpectedGoodIn2015",
        CASE
            WHEN ((goq.oordeel)::text = 'Goed'::text) THEN NULL::text
            ELSE
            CASE
                WHEN (gpq_2021.prognose = 'Goed'::text) THEN '2016-2021'::text
                ELSE
                CASE
                    WHEN ((gpq_2027.prognose = 'Goed'::text) OR (gpq_2027.prognose IS NULL)) THEN '2022-2027'::text
                    ELSE 'Beyond 2027'::text
                END
            END
        END AS "gwQuantitativeStatusExpectedAchievementDate",
        CASE
            WHEN ((goc.oordeel)::text = 'Goed'::text) THEN 'No'::text
            ELSE
            CASE
                WHEN ((gpc_2021.prognose = 'Goed'::text) OR (gpc_2027.prognose = 'Goed'::text)) THEN 'No'::text
                ELSE 'Yes'::text
            END
        END AS "gwAtRiskChemical",
        CASE
            WHEN ((goc.oordeel)::text = 'Ontoereikend'::text) THEN gwb_oordeel_subt_c.oordeel
            ELSE NULL::text
        END AS "gwEORiskChemical",
        CASE
            WHEN ((goc.oordeel)::text = 'Goed'::text) THEN 2
            ELSE 3
        END AS "gwChemicalStatusValue",
    '2007-2013'::text AS "gwChemicalAssessmentYear",
    3 AS "gwChemicalAssessmentConfidence",
        CASE
            WHEN ((goc.oordeel)::text = 'Goed'::text) THEN 'Yes'::text
            ELSE 'No'::text
        END AS "gwChemicalStatusExpectedGoodIn2015",
        CASE
            WHEN ((goc.oordeel)::text = 'Goed'::text) THEN NULL::text
            ELSE
            CASE
                WHEN (gpc_2021.prognose = 'Goed'::text) THEN '2016-2021'::text
                ELSE
                CASE
                    WHEN ((gpc_2027.prognose = 'Goed'::text) OR (gpc_2027.prognose IS NULL)) THEN '2022-2027'::text
                    ELSE 'Beyond 2027'::text
                END
            END
        END AS "gwChemicalStatusExpectedAchievementDate"
   FROM ((((((((((((((((((public.hydro_object
     LEFT JOIN public.hdo_names ON ((hdo_names.hdo_id = hydro_object.hdo_id)))
     JOIN public.water_body ON ((water_body.wbd_id = hydro_object.hdo_id)))
     JOIN public.ground_water_body ON ((ground_water_body.gwb_id = hydro_object.hdo_id)))
     JOIN public.river_basin_disrict rbd ON ((rbd.rbd_id = water_body.rbd_id)))
     JOIN public.hydro_object hdo_rbd ON ((rbd.rbd_id = hdo_rbd.hdo_id)))
     JOIN geological_formation_enum gfe ON ((ground_water_body.geological_formation_id = gfe.nl_id)))
     LEFT JOIN gwb_prot gpb ON ((gpb.wbd_id = hydro_object.hdo_id)))
     LEFT JOIN gwb_swb gsw ON ((gsw.gwb_id = hydro_object.hdo_id)))
     LEFT JOIN gwb_oordeel goc ON (((goc.gwb_id = hydro_object.hdo_id) AND (goc.opt_id = 4494))))
     LEFT JOIN gwb_oordeel goq ON (((goq.gwb_id = hydro_object.hdo_id) AND (goq.opt_id = 4495))))
     LEFT JOIN gwb_prognose_2021_4494 gpc_2021 ON ((gpc_2021.gwb_id = hydro_object.hdo_id)))
     LEFT JOIN gwb_prognose_2027_4494 gpc_2027 ON ((gpc_2027.gwb_id = hydro_object.hdo_id)))
     LEFT JOIN gwb_prognose_2021_4495 gpq_2021 ON ((gpq_2021.gwb_id = hydro_object.hdo_id)))
     LEFT JOIN gwb_prognose_2027_4495 gpq_2027 ON ((gpq_2027.gwb_id = hydro_object.hdo_id)))
     LEFT JOIN gwb_oordeel_subt_q ON ((gwb_oordeel_subt_q.gwb_id = hydro_object.hdo_id)))
     LEFT JOIN gwb_oordeel_subt_c ON ((gwb_oordeel_subt_c.gwb_id = hydro_object.hdo_id)))
     LEFT JOIN pressure ON ((pressure.db_id = hydro_object.hdo_id)))
     LEFT JOIN impact ON ((impact.db_id = hydro_object.hdo_id)))
  WHERE (((hydro_object.hydro_object_type)::text = 'GroundWaterBody'::text) AND (hydro_object.wkrv_id = 13))
  ORDER BY hydro_object.inspire_id_local_id;


--
-- Name: vw_groundwaterbody_groundwaterbody_gwreasonsforriskquantitative; Type: VIEW; Schema: wfd_reporting; Owner: -
--

CREATE VIEW vw_groundwaterbody_groundwaterbody_gwreasonsforriskquantitative AS
 WITH gwb_oordeel AS (
         SELECT hdo_gwb.hdo_id AS gwb_id,
            gwb_yearly_status.year_of_status AS jaar,
            gw_chemical_status.opt_id,
            classification_type.description AS oordeel,
            waarde_bepalings_methode_type.code AS wbpm
           FROM ((((public.gwb_yearly_status
             LEFT JOIN public.hydro_object hdo_gwb ON ((hdo_gwb.hdo_id = gwb_yearly_status.gwb_id)))
             JOIN public.gw_chemical_status ON ((gw_chemical_status.gys_id = gwb_yearly_status.gys_id)))
             LEFT JOIN public.classification_type ON ((gw_chemical_status.clst_id = classification_type.cls_id)))
             LEFT JOIN public.waarde_bepalings_methode_type ON ((waarde_bepalings_methode_type.wbpm_id = gw_chemical_status.wbpm_id)))
          WHERE ((hdo_gwb.wkrv_id = 13) AND (gwb_yearly_status.year_of_status = ANY (ARRAY[2014, 2015])) AND ((waarde_bepalings_methode_type.code)::text = 'GWPROTNL'::text) AND (gw_chemical_status.opt_id = ANY (ARRAY[4495, 4494])))
        UNION ALL
         SELECT hdo_gwb.hdo_id AS gwb_id,
            gwb_yearly_status.year_of_status AS jaar,
            gw_quantity_status.opt_id,
            classification_type.description AS oordeel,
            waarde_bepalings_methode_type.code AS wbpm
           FROM ((((public.gwb_yearly_status
             LEFT JOIN public.hydro_object hdo_gwb ON ((hdo_gwb.hdo_id = gwb_yearly_status.gwb_id)))
             JOIN public.gw_quantity_status ON ((gw_quantity_status.gys_id = gwb_yearly_status.gys_id)))
             LEFT JOIN public.classification_type ON ((gw_quantity_status.gwst_id = classification_type.cls_id)))
             LEFT JOIN public.waarde_bepalings_methode_type ON ((waarde_bepalings_methode_type.wbpm_id = gw_quantity_status.wbpm_id)))
          WHERE ((hdo_gwb.wkrv_id = 13) AND (gwb_yearly_status.year_of_status = ANY (ARRAY[2014, 2015])) AND ((waarde_bepalings_methode_type.code)::text = 'GWPROTNL'::text) AND (gw_quantity_status.opt_id = ANY (ARRAY[4495, 4494])))
        ), gwb_oordeel_sub AS (
         SELECT hdo_gwb.hdo_id AS gwb_id,
            gwb_yearly_status.year_of_status AS jaar,
            gw_chemical_status.opt_id,
            classification_type.description AS oordeel,
            waarde_bepalings_methode_type.code AS wbpm
           FROM ((((public.gwb_yearly_status
             LEFT JOIN public.hydro_object hdo_gwb ON ((hdo_gwb.hdo_id = gwb_yearly_status.gwb_id)))
             JOIN public.gw_chemical_status ON ((gw_chemical_status.gys_id = gwb_yearly_status.gys_id)))
             LEFT JOIN public.classification_type ON ((gw_chemical_status.clst_id = classification_type.cls_id)))
             LEFT JOIN public.waarde_bepalings_methode_type ON ((waarde_bepalings_methode_type.wbpm_id = gw_chemical_status.wbpm_id)))
          WHERE ((hdo_gwb.wkrv_id = 13) AND (gwb_yearly_status.year_of_status = ANY (ARRAY[2014, 2015])) AND (gw_chemical_status.opt_id > 4400) AND (gw_chemical_status.opt_id <> ALL (ARRAY[4495, 4494, 4487])))
        UNION ALL
         SELECT hdo_gwb.hdo_id AS gwb_id,
            gwb_yearly_status.year_of_status AS jaar,
            gw_quantity_status.opt_id,
            classification_type.description AS oordeel,
            waarde_bepalings_methode_type.code AS wbpm
           FROM ((((public.gwb_yearly_status
             LEFT JOIN public.hydro_object hdo_gwb ON ((hdo_gwb.hdo_id = gwb_yearly_status.gwb_id)))
             JOIN public.gw_quantity_status ON ((gw_quantity_status.gys_id = gwb_yearly_status.gys_id)))
             LEFT JOIN public.classification_type ON ((gw_quantity_status.gwst_id = classification_type.cls_id)))
             LEFT JOIN public.waarde_bepalings_methode_type ON ((waarde_bepalings_methode_type.wbpm_id = gw_quantity_status.wbpm_id)))
          WHERE ((hdo_gwb.wkrv_id = 13) AND (gwb_yearly_status.year_of_status = ANY (ARRAY[2014, 2015])) AND (gw_quantity_status.opt_id > 4400) AND (gw_quantity_status.opt_id <> ALL (ARRAY[4495, 4494, 4487])))
  ORDER BY 1, 2, 3
        ), gwb_oordeel_subt AS (
         SELECT DISTINCT ON (gwb_oordeel_sub.gwb_id, gwb_oordeel_sub.opt_id) gwb_oordeel_sub.gwb_id,
            gwb_oordeel_sub.jaar,
            gwb_oordeel_sub.opt_id,
            gwb_oordeel_sub.oordeel
           FROM gwb_oordeel_sub
          ORDER BY gwb_oordeel_sub.gwb_id, gwb_oordeel_sub.opt_id, gwb_oordeel_sub.jaar DESC, gwb_oordeel_sub.wbpm
        )
 SELECT hydro_object.hdo_id AS db_id,
    hydro_object.inspire_id_local_id AS "euGroundWaterBodyCode",
        CASE gwb_oordeel_subt.opt_id
            WHEN 4490 THEN 'Saline or intrusions'::text
            WHEN 4488 THEN 'Surface water'::text
            WHEN 4489 THEN 'Groundwater dependent terrestial ecosystems'::text
            WHEN 4497 THEN 'Water balance'::text
            ELSE 'oeps, foutje'::text
        END AS "gwQuantitativeReasonsForFailure"
   FROM ((public.hydro_object
     JOIN gwb_oordeel ON (((gwb_oordeel.gwb_id = hydro_object.hdo_id) AND ((gwb_oordeel.oordeel)::text = 'Ontoereikend'::text) AND (gwb_oordeel.opt_id = 4495))))
     JOIN gwb_oordeel_subt ON (((gwb_oordeel_subt.gwb_id = hydro_object.hdo_id) AND ((gwb_oordeel_subt.oordeel)::text = 'Ontoereikend'::text) AND (gwb_oordeel_subt.opt_id = ANY (ARRAY[4488, 4489, 4490, 4497])))))
  WHERE (((hydro_object.hydro_object_type)::text = 'GroundWaterBody'::text) AND (hydro_object.wkrv_id = 13))
  ORDER BY hydro_object.inspire_id_local_id, gwb_oordeel_subt.opt_id;


--
-- Name: vw_groundwaterbody_gwchemicalreasonsforfailure; Type: VIEW; Schema: wfd_reporting; Owner: -
--

CREATE VIEW vw_groundwaterbody_gwchemicalreasonsforfailure AS
 WITH gwb_oordeel AS (
         SELECT hdo_gwb.hdo_id AS gwb_id,
            gwb_yearly_status.year_of_status AS jaar,
            gw_chemical_status.opt_id,
            classification_type.description AS oordeel,
            waarde_bepalings_methode_type.code AS wbpm
           FROM ((((public.gwb_yearly_status
             LEFT JOIN public.hydro_object hdo_gwb ON ((hdo_gwb.hdo_id = gwb_yearly_status.gwb_id)))
             JOIN public.gw_chemical_status ON ((gw_chemical_status.gys_id = gwb_yearly_status.gys_id)))
             LEFT JOIN public.classification_type ON ((gw_chemical_status.clst_id = classification_type.cls_id)))
             LEFT JOIN public.waarde_bepalings_methode_type ON ((waarde_bepalings_methode_type.wbpm_id = gw_chemical_status.wbpm_id)))
          WHERE ((hdo_gwb.wkrv_id = 13) AND (gwb_yearly_status.year_of_status = ANY (ARRAY[2014, 2015])) AND ((waarde_bepalings_methode_type.code)::text = 'GWPROTNL'::text) AND (gw_chemical_status.opt_id = ANY (ARRAY[4495, 4494])))
        UNION ALL
         SELECT hdo_gwb.hdo_id AS gwb_id,
            gwb_yearly_status.year_of_status AS jaar,
            gw_quantity_status.opt_id,
            classification_type.description AS oordeel,
            waarde_bepalings_methode_type.code AS wbpm
           FROM ((((public.gwb_yearly_status
             LEFT JOIN public.hydro_object hdo_gwb ON ((hdo_gwb.hdo_id = gwb_yearly_status.gwb_id)))
             JOIN public.gw_quantity_status ON ((gw_quantity_status.gys_id = gwb_yearly_status.gys_id)))
             LEFT JOIN public.classification_type ON ((gw_quantity_status.gwst_id = classification_type.cls_id)))
             LEFT JOIN public.waarde_bepalings_methode_type ON ((waarde_bepalings_methode_type.wbpm_id = gw_quantity_status.wbpm_id)))
          WHERE ((hdo_gwb.wkrv_id = 13) AND (gwb_yearly_status.year_of_status = ANY (ARRAY[2014, 2015])) AND ((waarde_bepalings_methode_type.code)::text = 'GWPROTNL'::text) AND (gw_quantity_status.opt_id = ANY (ARRAY[4495, 4494])))
        ), gwb_oordeel_sub AS (
         SELECT hdo_gwb.hdo_id AS gwb_id,
            gwb_yearly_status.year_of_status AS jaar,
            gw_chemical_status.opt_id,
            classification_type.description AS oordeel,
            waarde_bepalings_methode_type.code AS wbpm
           FROM ((((public.gwb_yearly_status
             LEFT JOIN public.hydro_object hdo_gwb ON ((hdo_gwb.hdo_id = gwb_yearly_status.gwb_id)))
             JOIN public.gw_chemical_status ON ((gw_chemical_status.gys_id = gwb_yearly_status.gys_id)))
             LEFT JOIN public.classification_type ON ((gw_chemical_status.clst_id = classification_type.cls_id)))
             LEFT JOIN public.waarde_bepalings_methode_type ON ((waarde_bepalings_methode_type.wbpm_id = gw_chemical_status.wbpm_id)))
          WHERE ((hdo_gwb.wkrv_id = 13) AND (gwb_yearly_status.year_of_status = ANY (ARRAY[2014, 2015])) AND (gw_chemical_status.opt_id > 4400) AND (gw_chemical_status.opt_id <> ALL (ARRAY[4495, 4494, 4487])))
        UNION ALL
         SELECT hdo_gwb.hdo_id AS gwb_id,
            gwb_yearly_status.year_of_status AS jaar,
            gw_quantity_status.opt_id,
            classification_type.description AS oordeel,
            waarde_bepalings_methode_type.code AS wbpm
           FROM ((((public.gwb_yearly_status
             LEFT JOIN public.hydro_object hdo_gwb ON ((hdo_gwb.hdo_id = gwb_yearly_status.gwb_id)))
             JOIN public.gw_quantity_status ON ((gw_quantity_status.gys_id = gwb_yearly_status.gys_id)))
             LEFT JOIN public.classification_type ON ((gw_quantity_status.gwst_id = classification_type.cls_id)))
             LEFT JOIN public.waarde_bepalings_methode_type ON ((waarde_bepalings_methode_type.wbpm_id = gw_quantity_status.wbpm_id)))
          WHERE ((hdo_gwb.wkrv_id = 13) AND (gwb_yearly_status.year_of_status = ANY (ARRAY[2014, 2015])) AND (gw_quantity_status.opt_id > 4400) AND (gw_quantity_status.opt_id <> ALL (ARRAY[4495, 4494, 4487])))
  ORDER BY 1, 2, 3
        ), gwb_oordeel_subt AS (
         SELECT DISTINCT ON (gwb_oordeel_sub.gwb_id, gwb_oordeel_sub.opt_id) gwb_oordeel_sub.gwb_id,
            gwb_oordeel_sub.jaar,
            gwb_oordeel_sub.opt_id,
            gwb_oordeel_sub.oordeel
           FROM gwb_oordeel_sub
          ORDER BY gwb_oordeel_sub.gwb_id, gwb_oordeel_sub.opt_id, gwb_oordeel_sub.jaar DESC, gwb_oordeel_sub.wbpm
        )
 SELECT hydro_object.hdo_id AS db_id,
    hydro_object.inspire_id_local_id AS "euGroundWaterBodyCode",
        CASE gwb_oordeel_subt.opt_id
            WHEN 4486 THEN 'General water quality assessment'::text
            WHEN 4491 THEN 'Drinking Water Protected Area'::text
            WHEN 4492 THEN 'Surface water'::text
            WHEN 4493 THEN 'Groundwater dependent terrestial ecosystems'::text
            WHEN 4498 THEN 'Saline or other intrusion'::text
            ELSE 'oeps, foutje'::text
        END AS "gwChemicalReasonsForFailure"
   FROM ((public.hydro_object
     JOIN gwb_oordeel ON (((gwb_oordeel.gwb_id = hydro_object.hdo_id) AND ((gwb_oordeel.oordeel)::text = 'Ontoereikend'::text) AND (gwb_oordeel.opt_id = 4494))))
     JOIN gwb_oordeel_subt ON (((gwb_oordeel_subt.gwb_id = hydro_object.hdo_id) AND ((gwb_oordeel_subt.oordeel)::text = 'Ontoereikend'::text) AND (gwb_oordeel_subt.opt_id = ANY (ARRAY[4486, 4491, 4492, 4493, 4498])))))
  WHERE (((hydro_object.hydro_object_type)::text = 'GroundWaterBody'::text) AND (hydro_object.wkrv_id = 13))
  ORDER BY hydro_object.inspire_id_local_id, gwb_oordeel_subt.opt_id;


--
-- Name: vw_groundwaterbody_gwquantitativeexemptionpressure; Type: VIEW; Schema: wfd_reporting; Owner: -
--

CREATE VIEW vw_groundwaterbody_gwquantitativeexemptionpressure AS
 WITH gwb_oordeel AS (
         SELECT DISTINCT ON (hdo_gwb.hdo_id, gw_quantity_status.opt_id) hdo_gwb.hdo_id AS gwb_id,
            hdo_gwb.inspire_id_local_id,
            gwb_yearly_status.year_of_status AS jaar,
            gw_quantity_status.opt_id,
            classification_type.description AS oordeel,
            waarde_bepalings_methode_type.code AS wbpm
           FROM ((((public.gwb_yearly_status
             LEFT JOIN public.hydro_object hdo_gwb ON ((hdo_gwb.hdo_id = gwb_yearly_status.gwb_id)))
             JOIN public.gw_quantity_status ON ((gw_quantity_status.gys_id = gwb_yearly_status.gys_id)))
             LEFT JOIN public.classification_type ON ((gw_quantity_status.gwst_id = classification_type.cls_id)))
             LEFT JOIN public.waarde_bepalings_methode_type ON ((waarde_bepalings_methode_type.wbpm_id = gw_quantity_status.wbpm_id)))
          WHERE ((hdo_gwb.wkrv_id = 13) AND (gwb_yearly_status.year_of_status = ANY (ARRAY[2014, 2015])) AND ((classification_type.description)::text = 'Ontoereikend'::text))
          ORDER BY hdo_gwb.hdo_id, gw_quantity_status.opt_id, waarde_bepalings_methode_type.code DESC
        ), pressures AS (
         SELECT DISTINCT ON (hydro_object.hdo_id, spe.eu_xsd) hydro_object.hdo_id AS db_id,
            hydro_object.inspire_id_local_id AS "euGroundWaterBodyCode",
                CASE
                    WHEN (spe.eu_xsd IS NULL) THEN 'No significant pressure'::text
                    ELSE spe.eu_xsd
                END AS "gwSignificantPressureType"
           FROM ((public.hydro_object
             LEFT JOIN public.gwb_pressure ON ((hydro_object.hdo_id = gwb_pressure.gwb_id)))
             LEFT JOIN significant_pressure_enum spe ON ((spe.gw_p_id = gwb_pressure.gprs_id)))
          WHERE ((gwb_pressure.is_significant = true) AND (hydro_object.wkrv_id = 13))
          ORDER BY hydro_object.hdo_id, spe.eu_xsd
        )
 SELECT DISTINCT ON (gwb_oordeel.gwb_id, gwce.obex_id) gwb_oordeel.inspire_id_local_id AS "euGroundWaterBodyCode",
    pressures."gwSignificantPressureType" AS "gwQuantitativeExemptionPressure"
   FROM ((((((((gwb_oordeel
     LEFT JOIN public.gwb_chemical_exemption gwce ON ((gwce.gwb_id = gwb_oordeel.gwb_id)))
     LEFT JOIN public.gwb_chem_exemp_pollutant gce ON ((gce.gwce_id = gwce.gwce_id)))
     LEFT JOIN public.observed_property_type ON ((observed_property_type.opt_id = gwb_oordeel.opt_id)))
     LEFT JOIN pressures ON ((gwb_oordeel.gwb_id = pressures.db_id)))
     LEFT JOIN public.substance_group_element sge ON ((sge.ssge_id = observed_property_type.substance_group_id)))
     LEFT JOIN public.chemische_stof_type chs ON ((chs.chs_id = sge.chs_id)))
     LEFT JOIN public.grootheid_type grh ON ((grh.grh_id = observed_property_type.quantity_id)))
     LEFT JOIN public.objectives_exemption_type ON ((objectives_exemption_type.obex_id = gwce.obex_id)))
  WHERE ((gce.opt_id = ANY (ARRAY[4488, 4489, 4490, 4497])) AND (gwce.obex_id IS NOT NULL))
  ORDER BY gwb_oordeel.gwb_id, gwce.obex_id;


--
-- Name: vw_groundwaterbody_gwquantitativeexemptiontype; Type: VIEW; Schema: wfd_reporting; Owner: -
--

CREATE VIEW vw_groundwaterbody_gwquantitativeexemptiontype AS
 WITH gwb_oordeel AS (
         SELECT DISTINCT ON (hdo_gwb.hdo_id, gw_quantity_status.opt_id) hdo_gwb.hdo_id AS gwb_id,
            hdo_gwb.inspire_id_local_id,
            gwb_yearly_status.year_of_status AS jaar,
            gw_quantity_status.opt_id,
            classification_type.description AS oordeel,
            waarde_bepalings_methode_type.code AS wbpm
           FROM ((((public.gwb_yearly_status
             LEFT JOIN public.hydro_object hdo_gwb ON ((hdo_gwb.hdo_id = gwb_yearly_status.gwb_id)))
             JOIN public.gw_quantity_status ON ((gw_quantity_status.gys_id = gwb_yearly_status.gys_id)))
             LEFT JOIN public.classification_type ON ((gw_quantity_status.gwst_id = classification_type.cls_id)))
             LEFT JOIN public.waarde_bepalings_methode_type ON ((waarde_bepalings_methode_type.wbpm_id = gw_quantity_status.wbpm_id)))
          WHERE ((hdo_gwb.wkrv_id = 13) AND (gwb_yearly_status.year_of_status = ANY (ARRAY[2014, 2015])) AND ((classification_type.description)::text = 'Ontoereikend'::text))
          ORDER BY hdo_gwb.hdo_id, gw_quantity_status.opt_id, waarde_bepalings_methode_type.code DESC
        )
 SELECT DISTINCT ON (gwb_oordeel.gwb_id, gwce.obex_id) gwb_oordeel.inspire_id_local_id AS "euGroundWaterBodyCode",
        CASE
            WHEN (objectives_exemption_type.description IS NULL) THEN 'No exemption'::text
            ELSE objectives_exemption_type.description
        END AS "gwQuantitativeExemptionType"
   FROM (((((((gwb_oordeel
     LEFT JOIN public.gwb_chemical_exemption gwce ON ((gwce.gwb_id = gwb_oordeel.gwb_id)))
     LEFT JOIN public.gwb_chem_exemp_pollutant gce ON ((gce.gwce_id = gwce.gwce_id)))
     LEFT JOIN public.observed_property_type ON ((observed_property_type.opt_id = gwb_oordeel.opt_id)))
     LEFT JOIN public.substance_group_element sge ON ((sge.ssge_id = observed_property_type.substance_group_id)))
     LEFT JOIN public.chemische_stof_type chs ON ((chs.chs_id = sge.chs_id)))
     LEFT JOIN public.grootheid_type grh ON ((grh.grh_id = observed_property_type.quantity_id)))
     LEFT JOIN public.objectives_exemption_type ON ((objectives_exemption_type.obex_id = gwce.obex_id)))
  WHERE ((gce.opt_id IS NULL) OR (gce.opt_id = ANY (ARRAY[4488, 4489, 4490, 4497])))
  ORDER BY gwb_oordeel.gwb_id, gwce.obex_id;


--
-- Name: vw_groundwaterbody_gwquantitativereasonsforfailure; Type: VIEW; Schema: wfd_reporting; Owner: -
--

CREATE VIEW vw_groundwaterbody_gwquantitativereasonsforfailure AS
 WITH gwb_oordeel AS (
         SELECT hdo_gwb.hdo_id AS gwb_id,
            gwb_yearly_status.year_of_status AS jaar,
            gw_chemical_status.opt_id,
            classification_type.description AS oordeel,
            waarde_bepalings_methode_type.code AS wbpm
           FROM ((((public.gwb_yearly_status
             LEFT JOIN public.hydro_object hdo_gwb ON ((hdo_gwb.hdo_id = gwb_yearly_status.gwb_id)))
             JOIN public.gw_chemical_status ON ((gw_chemical_status.gys_id = gwb_yearly_status.gys_id)))
             LEFT JOIN public.classification_type ON ((gw_chemical_status.clst_id = classification_type.cls_id)))
             LEFT JOIN public.waarde_bepalings_methode_type ON ((waarde_bepalings_methode_type.wbpm_id = gw_chemical_status.wbpm_id)))
          WHERE ((hdo_gwb.wkrv_id = 13) AND (gwb_yearly_status.year_of_status = ANY (ARRAY[2014, 2015])) AND ((waarde_bepalings_methode_type.code)::text = 'GWPROTNL'::text) AND (gw_chemical_status.opt_id = ANY (ARRAY[4495, 4494])))
        UNION ALL
         SELECT hdo_gwb.hdo_id AS gwb_id,
            gwb_yearly_status.year_of_status AS jaar,
            gw_quantity_status.opt_id,
            classification_type.description AS oordeel,
            waarde_bepalings_methode_type.code AS wbpm
           FROM ((((public.gwb_yearly_status
             LEFT JOIN public.hydro_object hdo_gwb ON ((hdo_gwb.hdo_id = gwb_yearly_status.gwb_id)))
             JOIN public.gw_quantity_status ON ((gw_quantity_status.gys_id = gwb_yearly_status.gys_id)))
             LEFT JOIN public.classification_type ON ((gw_quantity_status.gwst_id = classification_type.cls_id)))
             LEFT JOIN public.waarde_bepalings_methode_type ON ((waarde_bepalings_methode_type.wbpm_id = gw_quantity_status.wbpm_id)))
          WHERE ((hdo_gwb.wkrv_id = 13) AND (gwb_yearly_status.year_of_status = ANY (ARRAY[2014, 2015])) AND ((waarde_bepalings_methode_type.code)::text = 'GWPROTNL'::text) AND (gw_quantity_status.opt_id = ANY (ARRAY[4495, 4494])))
        ), gwb_oordeel_sub AS (
         SELECT hdo_gwb.hdo_id AS gwb_id,
            gwb_yearly_status.year_of_status AS jaar,
            gw_chemical_status.opt_id,
            classification_type.description AS oordeel,
            waarde_bepalings_methode_type.code AS wbpm
           FROM ((((public.gwb_yearly_status
             LEFT JOIN public.hydro_object hdo_gwb ON ((hdo_gwb.hdo_id = gwb_yearly_status.gwb_id)))
             JOIN public.gw_chemical_status ON ((gw_chemical_status.gys_id = gwb_yearly_status.gys_id)))
             LEFT JOIN public.classification_type ON ((gw_chemical_status.clst_id = classification_type.cls_id)))
             LEFT JOIN public.waarde_bepalings_methode_type ON ((waarde_bepalings_methode_type.wbpm_id = gw_chemical_status.wbpm_id)))
          WHERE ((hdo_gwb.wkrv_id = 13) AND (gwb_yearly_status.year_of_status = ANY (ARRAY[2014, 2015])) AND (gw_chemical_status.opt_id > 4400) AND (gw_chemical_status.opt_id <> ALL (ARRAY[4495, 4494, 4487])))
        UNION ALL
         SELECT hdo_gwb.hdo_id AS gwb_id,
            gwb_yearly_status.year_of_status AS jaar,
            gw_quantity_status.opt_id,
            classification_type.description AS oordeel,
            waarde_bepalings_methode_type.code AS wbpm
           FROM ((((public.gwb_yearly_status
             LEFT JOIN public.hydro_object hdo_gwb ON ((hdo_gwb.hdo_id = gwb_yearly_status.gwb_id)))
             JOIN public.gw_quantity_status ON ((gw_quantity_status.gys_id = gwb_yearly_status.gys_id)))
             LEFT JOIN public.classification_type ON ((gw_quantity_status.gwst_id = classification_type.cls_id)))
             LEFT JOIN public.waarde_bepalings_methode_type ON ((waarde_bepalings_methode_type.wbpm_id = gw_quantity_status.wbpm_id)))
          WHERE ((hdo_gwb.wkrv_id = 13) AND (gwb_yearly_status.year_of_status = ANY (ARRAY[2014, 2015])) AND (gw_quantity_status.opt_id > 4400) AND (gw_quantity_status.opt_id <> ALL (ARRAY[4495, 4494, 4487])))
  ORDER BY 1, 2, 3
        ), gwb_oordeel_subt AS (
         SELECT DISTINCT ON (gwb_oordeel_sub.gwb_id, gwb_oordeel_sub.opt_id) gwb_oordeel_sub.gwb_id,
            gwb_oordeel_sub.jaar,
            gwb_oordeel_sub.opt_id,
            gwb_oordeel_sub.oordeel
           FROM gwb_oordeel_sub
          ORDER BY gwb_oordeel_sub.gwb_id, gwb_oordeel_sub.opt_id, gwb_oordeel_sub.jaar DESC, gwb_oordeel_sub.wbpm
        )
 SELECT hydro_object.hdo_id AS db_id,
    hydro_object.inspire_id_local_id AS "euGroundWaterBodyCode",
        CASE gwb_oordeel_subt.opt_id
            WHEN 4490 THEN 'Saline or intrusions'::text
            WHEN 4488 THEN 'Surface water'::text
            WHEN 4489 THEN 'Groundwater dependent terrestial ecosystems'::text
            WHEN 4497 THEN 'Water balance'::text
            ELSE 'oeps, foutje'::text
        END AS "gwQuantitativeReasonsForFailure"
   FROM ((public.hydro_object
     JOIN gwb_oordeel ON (((gwb_oordeel.gwb_id = hydro_object.hdo_id) AND ((gwb_oordeel.oordeel)::text = 'Ontoereikend'::text) AND (gwb_oordeel.opt_id = 4495))))
     JOIN gwb_oordeel_subt ON (((gwb_oordeel_subt.gwb_id = hydro_object.hdo_id) AND ((gwb_oordeel_subt.oordeel)::text = 'Ontoereikend'::text) AND (gwb_oordeel_subt.opt_id = ANY (ARRAY[4488, 4489, 4490, 4497])))))
  WHERE (((hydro_object.hydro_object_type)::text = 'GroundWaterBody'::text) AND (hydro_object.wkrv_id = 13))
  ORDER BY hydro_object.inspire_id_local_id, gwb_oordeel_subt.opt_id;


--
-- Name: vw_groundwaterbody_gwsignificantimpacttype; Type: VIEW; Schema: wfd_reporting; Owner: -
--

CREATE VIEW vw_groundwaterbody_gwsignificantimpacttype AS
 WITH gwb_oordeel_all AS (
         SELECT hdo_gwb.hdo_id AS gwb_id,
            hdo_gwb.inspire_id_local_id,
            gwb_yearly_status.year_of_status AS jaar,
            classification_type.description AS oordeel,
            waarde_bepalings_methode_type.code AS wbpm
           FROM (((((public.gwb_yearly_status
             LEFT JOIN public.hydro_object hdo_gwb ON ((hdo_gwb.hdo_id = gwb_yearly_status.gwb_id)))
             JOIN public.gw_chemical_status ON ((gw_chemical_status.gys_id = gwb_yearly_status.gys_id)))
             LEFT JOIN public.classification_type ON ((gw_chemical_status.clst_id = classification_type.cls_id)))
             LEFT JOIN public.vw_waargenomen_eigenschap ON ((vw_waargenomen_eigenschap."DB_ID" = gw_chemical_status.opt_id)))
             LEFT JOIN public.waarde_bepalings_methode_type ON ((waarde_bepalings_methode_type.wbpm_id = gw_chemical_status.wbpm_id)))
          WHERE ((hdo_gwb.wkrv_id = 13) AND (gwb_yearly_status.year_of_status = ANY (ARRAY[2014, 2015])) AND ((waarde_bepalings_methode_type.code)::text = 'GWPROTNL'::text) AND (gw_chemical_status.opt_id = ANY (ARRAY[4495, 4494])))
        UNION ALL
         SELECT hdo_gwb.hdo_id AS gwb_id,
            hdo_gwb.inspire_id_local_id,
            gwb_yearly_status.year_of_status AS jaar,
            classification_type.description AS oordeel,
            waarde_bepalings_methode_type.code AS wbpm
           FROM (((((public.gwb_yearly_status
             LEFT JOIN public.hydro_object hdo_gwb ON ((hdo_gwb.hdo_id = gwb_yearly_status.gwb_id)))
             JOIN public.gw_quantity_status ON ((gw_quantity_status.gys_id = gwb_yearly_status.gys_id)))
             LEFT JOIN public.classification_type ON ((gw_quantity_status.gwst_id = classification_type.cls_id)))
             LEFT JOIN public.vw_waargenomen_eigenschap ON ((vw_waargenomen_eigenschap."DB_ID" = gw_quantity_status.opt_id)))
             LEFT JOIN public.waarde_bepalings_methode_type ON ((waarde_bepalings_methode_type.wbpm_id = gw_quantity_status.wbpm_id)))
          WHERE ((hdo_gwb.wkrv_id = 13) AND (gwb_yearly_status.year_of_status = ANY (ARRAY[2014, 2015])) AND ((waarde_bepalings_methode_type.code)::text = 'GWPROTNL'::text) AND (gw_quantity_status.opt_id = ANY (ARRAY[4495, 4494])))
        ), gwb_oordeel AS (
         SELECT DISTINCT ON (gwb_oordeel_all.gwb_id) gwb_oordeel_all.gwb_id,
            gwb_oordeel_all.inspire_id_local_id,
            gwb_oordeel_all.jaar,
            gwb_oordeel_all.oordeel,
            gwb_oordeel_all.wbpm
           FROM gwb_oordeel_all
          ORDER BY gwb_oordeel_all.gwb_id, gwb_oordeel_all.oordeel DESC
        )
 SELECT DISTINCT ON (hydro_object.hdo_id, ipe.eu_xsd) hydro_object.hdo_id AS db_id,
    hydro_object.inspire_id_local_id AS "euGroundWaterBodyCode",
        CASE
            WHEN (ipe.eu_xsd IS NULL) THEN
            CASE
                WHEN ((gwb_oordeel.oordeel)::text = 'Goed'::text) THEN 'NOSI - No significant impact'::text
                ELSE 'UNKN - Unknown impact type'::text
            END
            ELSE ipe.eu_xsd
        END AS "gwSignificantImpactType"
   FROM ((((public.hydro_object
     LEFT JOIN public.gwb_pressure ON (((hydro_object.hdo_id = gwb_pressure.gwb_id) AND (gwb_pressure.is_significant = true))))
     LEFT JOIN public.gwb_pressure_impact ON ((gwb_pressure.gwbp_id = gwb_pressure_impact.gwbp_id)))
     LEFT JOIN significant_impact_enum ipe ON ((ipe.i_id = gwb_pressure_impact.impact_id)))
     LEFT JOIN gwb_oordeel ON ((gwb_oordeel.gwb_id = hydro_object.hdo_id)))
  WHERE ((hydro_object.wkrv_id = 13) AND ((hydro_object.hydro_object_type)::text = 'GroundWaterBody'::text))
  ORDER BY hydro_object.hdo_id, ipe.eu_xsd;


--
-- Name: vw_groundwaterbody_gwsignificantpressuretype; Type: VIEW; Schema: wfd_reporting; Owner: -
--

CREATE VIEW vw_groundwaterbody_gwsignificantpressuretype AS
 WITH bel_aant AS (
         SELECT hydro_object_1.hdo_id AS db_id,
            count(spe_1.eu_xsd) AS aant
           FROM ((public.hydro_object hydro_object_1
             LEFT JOIN public.gwb_pressure gwb_pressure_1 ON ((hydro_object_1.hdo_id = gwb_pressure_1.gwb_id)))
             LEFT JOIN significant_pressure_enum spe_1 ON (((spe_1.gw_p_id = gwb_pressure_1.gprs_id) AND (gwb_pressure_1.is_significant = true))))
          GROUP BY hydro_object_1.hdo_id, hydro_object_1.wkrv_id, hydro_object_1.hydro_object_type
         HAVING ((hydro_object_1.wkrv_id = 13) AND ((hydro_object_1.hydro_object_type)::text = 'GroundWaterBody'::text))
        )
 SELECT DISTINCT ON (hydro_object.inspire_id_local_id, spe.eu_xsd) hydro_object.hdo_id AS db_id,
    hydro_object.inspire_id_local_id AS "euGroundWaterBodyCode",
        CASE
            WHEN (spe.eu_xsd IS NULL) THEN 'No significant pressure'::text
            ELSE spe.eu_xsd
        END AS "gwSignificantPressureType"
   FROM (((public.hydro_object
     LEFT JOIN public.gwb_pressure ON ((hydro_object.hdo_id = gwb_pressure.gwb_id)))
     LEFT JOIN significant_pressure_enum spe ON (((spe.gw_p_id = gwb_pressure.gprs_id) AND (gwb_pressure.is_significant = true))))
     LEFT JOIN bel_aant ON ((bel_aant.db_id = hydro_object.hdo_id)))
  WHERE ((hydro_object.wkrv_id = 13) AND ((hydro_object.hydro_object_type)::text = 'GroundWaterBody'::text) AND (((bel_aant.aant = 0) AND (spe.eu_xsd IS NULL)) OR ((bel_aant.aant > 0) AND (spe.eu_xsd IS NOT NULL))))
  ORDER BY hydro_object.inspire_id_local_id, spe.eu_xsd;


--
-- Name: vw_gwassociatedprotectedarea; Type: VIEW; Schema: wfd_reporting; Owner: -
--

CREATE VIEW vw_gwassociatedprotectedarea AS
 WITH gwb_oordeel_dc AS (
         SELECT hdo_gwb.hdo_id AS gwb_id,
            gwb_yearly_status.year_of_status AS jaar,
            gw_quantity_status.opt_id,
            classification_type.description AS oordeel,
            waarde_bepalings_methode_type.code AS wbpm
           FROM (((((public.gwb_yearly_status
             LEFT JOIN public.hydro_object hdo_gwb ON ((hdo_gwb.hdo_id = gwb_yearly_status.gwb_id)))
             JOIN public.gw_quantity_status ON ((gw_quantity_status.gys_id = gwb_yearly_status.gys_id)))
             LEFT JOIN public.classification_type ON ((gw_quantity_status.gwst_id = classification_type.cls_id)))
             LEFT JOIN public.vw_waargenomen_eigenschap ON ((vw_waargenomen_eigenschap."DB_ID" = gw_quantity_status.opt_id)))
             LEFT JOIN public.waarde_bepalings_methode_type ON ((waarde_bepalings_methode_type.wbpm_id = gw_quantity_status.wbpm_id)))
          WHERE ((hdo_gwb.wkrv_id = 13) AND (gwb_yearly_status.year_of_status = ANY (ARRAY[2014, 2015])) AND (gw_quantity_status.opt_id = ANY (ARRAY[4489])))
        ), gwb_oordeel_dq AS (
         SELECT hdo_gwb.hdo_id AS gwb_id,
            gwb_yearly_status.year_of_status AS jaar,
            gw_chemical_status.opt_id,
            classification_type.description AS oordeel,
            waarde_bepalings_methode_type.code AS wbpm
           FROM (((((public.gwb_yearly_status
             LEFT JOIN public.hydro_object hdo_gwb ON ((hdo_gwb.hdo_id = gwb_yearly_status.gwb_id)))
             JOIN public.gw_chemical_status ON ((gw_chemical_status.gys_id = gwb_yearly_status.gys_id)))
             LEFT JOIN public.classification_type ON ((gw_chemical_status.clst_id = classification_type.cls_id)))
             LEFT JOIN public.vw_waargenomen_eigenschap ON ((vw_waargenomen_eigenschap."DB_ID" = gw_chemical_status.opt_id)))
             LEFT JOIN public.waarde_bepalings_methode_type ON ((waarde_bepalings_methode_type.wbpm_id = gw_chemical_status.wbpm_id)))
          WHERE ((hdo_gwb.wkrv_id = 13) AND (gwb_yearly_status.year_of_status = ANY (ARRAY[2014, 2015])) AND (gw_chemical_status.opt_id = ANY (ARRAY[4493])))
        ), gwb_oordeel_d AS (
         SELECT gwb_oordeel_dc.gwb_id,
            gwb_oordeel_dc.jaar,
            gwb_oordeel_dc.opt_id,
            gwb_oordeel_dc.oordeel AS oordeel_dc,
            gwb_oordeel_dq.oordeel AS oordeel_dq
           FROM (gwb_oordeel_dc
             LEFT JOIN gwb_oordeel_dq ON ((gwb_oordeel_dc.gwb_id = gwb_oordeel_dq.gwb_id)))
        ), gwb_oordeel_b AS (
         SELECT gwn.wpa_id,
            gwb.hdo_id,
            gwn.cls_id,
            gwn.opt_id
           FROM ((public.gw_n2000_status gwn
             JOIN public.gwb_yearly_status gys ON ((gwn.gwsy = gys.gys_id)))
             JOIN public.hydro_object gwb ON (((gwb.hdo_id = gys.gwb_id) AND ((gwb.hydro_object_type)::text = 'GroundWaterBody'::text) AND (gwb.wkrv_id = 13))))
          WHERE (gys.year_of_status = ANY (ARRAY[2014, 2015]))
        )
 SELECT gwb.hdo_id,
    wpa.inspire_id_local_id AS "euProtectedAreaCode",
    gwb.inspire_id_local_id AS "euGroundWaterBodyCode",
        CASE protected_area_type.code
            WHEN 'HA'::text THEN 'Habitats'::text
            WHEN 'BI'::text THEN 'Birds'::text
            ELSE 'oeps'::text
        END AS "protectedAreaType",
    'Dynamically / hydrologically connected with Protected Area'::text AS "protectedAreaAssociationType",
        CASE
            WHEN ((gob.cls_id = 9) OR (gob.cls_id = 8)) THEN 'Yes, some specific water objectives have been set to protect dependent habitats and species but work is still on-going to determine needs.'::text
            ELSE NULL::text
        END AS "protectedAreaHabitatsBirdsObjectivesSet",
        CASE
            WHEN (gob.cls_id = 9) THEN 'No'::text
            ELSE
            CASE
                WHEN (gob.cls_id = 8) THEN 'Yes'::text
                ELSE NULL::text
            END
        END AS "protectedAreaHabitatsBirdsObjectivesMet",
    NULL::text AS "protectedAreaDrinkingWaterObjectivesSet",
    NULL::text AS "protectedAreaDrinkingWaterObjectivesMet",
    NULL::text AS "protectedAreaComment"
   FROM (((((public.waterbody_protected_area_intersection
     JOIN public.wfd_protected_area ON ((waterbody_protected_area_intersection.wpa_id = wfd_protected_area.wpa_id)))
     JOIN public.hydro_object wpa ON ((wpa.hdo_id = wfd_protected_area.wpa_id)))
     JOIN public.hydro_object gwb ON ((waterbody_protected_area_intersection.wbd_id = gwb.hdo_id)))
     JOIN public.protected_area_type ON ((protected_area_type.pat_id = wfd_protected_area.protected_area_type_id)))
     LEFT JOIN gwb_oordeel_b gob ON (((gob.wpa_id = wpa.hdo_id) AND (gob.hdo_id = gwb.hdo_id))))
  WHERE ((gwb.wkrv_id = 13) AND ((gwb.hydro_object_type)::text = 'GroundWaterBody'::text) AND (protected_area_type.gw_type = true))
UNION ALL
 SELECT gwb.hdo_id,
    gwb.inspire_id_local_id AS "euProtectedAreaCode",
    gwb.inspire_id_local_id AS "euGroundWaterBodyCode",
    'Article 7 Abstraction for drinking water'::text AS "protectedAreaType",
    'Within Protected Area'::text AS "protectedAreaAssociationType",
    NULL::text AS "protectedAreaHabitatsBirdsObjectivesSet",
    NULL::text AS "protectedAreaHabitatsBirdsObjectivesMet",
        CASE
            WHEN (((gwb_oordeel_d.oordeel_dc)::text = 'Ontoereikend'::text) OR ((gwb_oordeel_d.oordeel_dc)::text = 'Voldoet'::text) OR ((gwb_oordeel_d.oordeel_dq)::text = 'Ontoereikend'::text) OR ((gwb_oordeel_d.oordeel_dq)::text = 'Voldoet'::text)) THEN 'Yes'::text
            ELSE NULL::text
        END AS "protectedAreaDrinkingWaterObjectivesSet",
        CASE
            WHEN (((gwb_oordeel_d.oordeel_dc)::text = 'Ontoereikend'::text) OR ((gwb_oordeel_d.oordeel_dq)::text = 'Ontoereikend'::text)) THEN 'No'::text
            ELSE
            CASE
                WHEN (((gwb_oordeel_d.oordeel_dc)::text = 'Voldoet'::text) OR ((gwb_oordeel_d.oordeel_dq)::text = 'Voldoet'::text)) THEN 'Yes'::text
                ELSE NULL::text
            END
        END AS "protectedAreaDrinkingWaterObjectivesMet",
    NULL::text AS "protectedAreaComment"
   FROM public.hydro_object gwb,
    public.water_body,
    gwb_oordeel_d
  WHERE ((water_body.wbd_id = gwb.hdo_id) AND (water_body.is_article_7 = true) AND (gwb.wkrv_id = 13) AND ((gwb.hydro_object_type)::text = 'GroundWaterBody'::text) AND (gwb_oordeel_d.gwb_id = gwb.hdo_id))
  ORDER BY 3;


--
-- Name: vw_gwassociatedprotectedarea_protectedareaexemption; Type: VIEW; Schema: wfd_reporting; Owner: -
--

CREATE VIEW vw_gwassociatedprotectedarea_protectedareaexemption AS
 WITH exemption AS (
         SELECT objectives_exemption_type.name,
            objectives_exemption_type.description,
            objectives_exemption_type.article_nr,
            hydro_object.hdo_id,
            hydro_object.inspire_id_local_id,
            gwb_chem_exemp_pollutant.opt_id
           FROM public.objectives_exemption_type,
            public.gwb_chemical_exemption,
            public.hydro_object,
            public.gwb_chem_exemp_pollutant
          WHERE ((gwb_chemical_exemption.obex_id = objectives_exemption_type.obex_id) AND (hydro_object.hdo_id = gwb_chemical_exemption.gwb_id) AND (gwb_chem_exemp_pollutant.gwce_id = gwb_chemical_exemption.gwce_id) AND (gwb_chem_exemp_pollutant.opt_id = ANY (ARRAY[4489, 4493])))
        ), gwb_oordeel_b AS (
         SELECT gwn.wpa_id,
            gwb.hdo_id,
            gwn.cls_id,
            gwn.opt_id
           FROM ((public.gw_n2000_status gwn
             JOIN public.gwb_yearly_status gys ON ((gwn.gwsy = gys.gys_id)))
             JOIN public.hydro_object gwb ON (((gwb.hdo_id = gys.gwb_id) AND ((gwb.hydro_object_type)::text = 'GroundWaterBody'::text) AND (gwb.wkrv_id = 13))))
          WHERE (gys.year_of_status = ANY (ARRAY[2014, 2015]))
        ), exemptions AS (
         SELECT wpa.inspire_id_local_id AS "euProtectedAreaCode",
                CASE
                    WHEN (gob.cls_id = 9) THEN exemption.description
                    ELSE 'No exemption'::text
                END AS "protectedAreaExemption",
                CASE
                    WHEN (gob.cls_id = 9) THEN 1
                    ELSE 2
                END AS volgorde
           FROM ((((((public.waterbody_protected_area_intersection
             JOIN public.wfd_protected_area ON ((waterbody_protected_area_intersection.wpa_id = wfd_protected_area.wpa_id)))
             JOIN public.hydro_object wpa ON ((wpa.hdo_id = wfd_protected_area.wpa_id)))
             JOIN public.hydro_object gwb ON ((waterbody_protected_area_intersection.wbd_id = gwb.hdo_id)))
             JOIN public.protected_area_type ON ((protected_area_type.pat_id = wfd_protected_area.protected_area_type_id)))
             LEFT JOIN gwb_oordeel_b gob ON (((gob.wpa_id = wpa.hdo_id) AND (gob.hdo_id = gwb.hdo_id))))
             JOIN exemption ON ((exemption.hdo_id = gwb.hdo_id)))
          WHERE ((gwb.wkrv_id = 13) AND ((gwb.hydro_object_type)::text = 'GroundWaterBody'::text) AND (protected_area_type.gw_type = true))
        )
 SELECT DISTINCT ON (exemptions."euProtectedAreaCode", exemptions.volgorde, exemptions."protectedAreaExemption") exemptions."euProtectedAreaCode",
    exemptions."protectedAreaExemption"
   FROM exemptions
  ORDER BY exemptions."euProtectedAreaCode", exemptions.volgorde, exemptions."protectedAreaExemption";


--
-- Name: vw_gwchemicalexemptiontype; Type: VIEW; Schema: wfd_reporting; Owner: -
--

CREATE VIEW vw_gwchemicalexemptiontype AS
 WITH gwb_oordeel_ruw AS (
         SELECT DISTINCT ON (hdo_gwb.hdo_id, gw_chemical_status.opt_id) hdo_gwb.hdo_id AS gwb_id,
            gwb_yearly_status.year_of_status AS jaar,
            gw_chemical_status.opt_id,
            classification_type.description AS oordeel,
            waarde_bepalings_methode_type.code AS wbpm,
            wfd_qe_gwtype.is_backgroundlevelsubstance AS bglevel,
            gwb_yearly_status.gys_id
           FROM (((((public.gwb_yearly_status
             LEFT JOIN public.hydro_object hdo_gwb ON ((hdo_gwb.hdo_id = gwb_yearly_status.gwb_id)))
             JOIN public.gw_chemical_status ON ((gw_chemical_status.gys_id = gwb_yearly_status.gys_id)))
             LEFT JOIN public.classification_type ON ((gw_chemical_status.clst_id = classification_type.cls_id)))
             LEFT JOIN public.waarde_bepalings_methode_type ON ((waarde_bepalings_methode_type.wbpm_id = gw_chemical_status.wbpm_id)))
             LEFT JOIN public.wfd_qe_gwtype ON ((gw_chemical_status.opt_id = wfd_qe_gwtype.opt_id)))
          WHERE ((hdo_gwb.wkrv_id = 13) AND (gwb_yearly_status.year_of_status = ANY (ARRAY[2014, 2015])) AND (gw_chemical_status.opt_id < 4000))
          ORDER BY hdo_gwb.hdo_id, gw_chemical_status.opt_id, waarde_bepalings_methode_type.code DESC
        ), gwb_oordeel AS (
         SELECT DISTINCT ON (gwb_oordeel_ruw.gwb_id, gwb_oordeel_ruw.opt_id) gwb_oordeel_ruw.gwb_id,
            gwb_oordeel_ruw.jaar,
            gwb_oordeel_ruw.opt_id,
            gwb_oordeel_ruw.oordeel,
            gwb_oordeel_ruw.wbpm,
            gwb_oordeel_ruw.bglevel,
            observation.numeric_value
           FROM ((gwb_oordeel_ruw
             LEFT JOIN public.gw_testing_conclusion ON ((gwb_oordeel_ruw.gys_id = gw_testing_conclusion.gys_id)))
             LEFT JOIN public.observation ON (((gw_testing_conclusion.gtcc_id = observation.obs_id) AND (gwb_oordeel_ruw.opt_id = observation.observed_property_type))))
          WHERE (((gwb_oordeel_ruw.oordeel)::text = 'Ontoereikend'::text) OR (observation.numeric_value < (100)::double precision) OR (gwb_oordeel_ruw.bglevel = true))
          ORDER BY gwb_oordeel_ruw.gwb_id, gwb_oordeel_ruw.opt_id, observation.numeric_value
        ), gwb_trend AS (
         SELECT hdo_gwb.hdo_id AS gwb_id,
            gwb_yearly_status.year_of_status AS jaar,
            pollutant_trend.opt_id,
            pollutant_trend.depth_m,
            classification_type.description AS oordeel
           FROM (((public.gwb_yearly_status
             LEFT JOIN public.hydro_object hdo_gwb ON ((hdo_gwb.hdo_id = gwb_yearly_status.gwb_id)))
             JOIN public.pollutant_trend ON ((pollutant_trend.gwys_id = gwb_yearly_status.gys_id)))
             LEFT JOIN public.classification_type ON ((pollutant_trend.cls_id = classification_type.cls_id)))
          WHERE ((hdo_gwb.wkrv_id = 13) AND (gwb_yearly_status.year_of_status = ANY (ARRAY[2014, 2015])) AND (pollutant_trend.opt_id < 4000) AND ((classification_type.description)::text <> ALL (ARRAY[('Niet stijgend'::character varying)::text, ('Niet bepaald'::character varying)::text])))
        ), eu_stoffenlijst AS (
         SELECT chemische_stof_type.chs_id,
            chemische_stof_type.cas_nr,
            chemische_stof_type.naam,
            chemische_stof_type.code,
            chemische_stof_type.d_begin,
            chemische_stof_type.d_eind,
            chemische_stof_type.last_changed_date,
            chemische_stof_type.d_status,
            chemische_stof_type.id,
            eu_stoffenlijst.domeinnaam,
            eu_stoffenlijst.value,
            eu_stoffenlijst.grootheidcode,
            eu_stoffenlijst.parametercode,
            eu_stoffenlijst."swFailingRBSPOther"
           FROM public.chemische_stof_type,
            wfd_reporting.eu_stoffenlijst
          WHERE (((eu_stoffenlijst.parametercode)::text = (chemische_stof_type.code)::text) AND (((eu_stoffenlijst.domeinnaam)::text = 'PS_Enum'::text) OR ((eu_stoffenlijst.domeinnaam)::text = 'AdditionalPollutant_Enum'::text) OR ((eu_stoffenlijst.domeinnaam)::text = 'RBSP_Enum'::text)))
        )
 SELECT DISTINCT ON (gwb_oordeel.gwb_id, gwb_oordeel.opt_id)
        CASE
            WHEN (gwce.gwce_id IS NULL) THEN ((gwb_oordeel.gwb_id)::text || (gwb_oordeel.opt_id)::text)
            ELSE (((gwb_oordeel.gwb_id)::text || (gwb_oordeel.opt_id)::text) || (gwce.gwce_id)::text)
        END AS "gWChemicalExemptionTypeID",
        CASE
            WHEN (objectives_exemption_type.description IS NULL) THEN 'No exemption'::text
            ELSE objectives_exemption_type.description
        END AS "gwChemicalExemptionType",
    ((gwb_oordeel.gwb_id)::text || (gwb_oordeel.opt_id)::text) AS "gWPollutantID",
    "left"((hdo.inspire_id_local_id)::text, 4) AS sgb
   FROM ((((((((((((((((public.hydro_object
     LEFT JOIN gwb_oordeel ON ((gwb_oordeel.gwb_id = hydro_object.hdo_id)))
     LEFT JOIN gwb_trend ON (((gwb_trend.gwb_id = hydro_object.hdo_id) AND (gwb_trend.opt_id = gwb_oordeel.opt_id))))
     LEFT JOIN public.observed_property_type ON ((observed_property_type.opt_id = gwb_oordeel.opt_id)))
     LEFT JOIN public.substance_group_element sge ON ((sge.ssge_id = observed_property_type.substance_group_id)))
     LEFT JOIN public.chemische_stof_type chs ON ((chs.chs_id = sge.chs_id)))
     LEFT JOIN public.grootheid_type grh ON ((grh.grh_id = observed_property_type.quantity_id)))
     LEFT JOIN public.natural_background_levels bglevel ON (((bglevel.gwb_id = hydro_object.hdo_id) AND (gwb_oordeel.opt_id = bglevel.opt_id))))
     LEFT JOIN public.eenheid_type ON ((bglevel.concentration_uom_id = eenheid_type.eenh_id)))
     LEFT JOIN public.observed_property_type opt ON ((opt.opt_id = bglevel.opt_id)))
     LEFT JOIN public.hoedanigheid_type ON ((opt.hoedanigheid_id = hoedanigheid_type.hdh_id)))
     LEFT JOIN public.gwb_chemical_exemption gwce ON ((gwce.gwb_id = gwb_oordeel.gwb_id)))
     LEFT JOIN public.gwb_chem_exemp_pollutant gce ON ((gce.gwce_id = gwce.gwce_id)))
     LEFT JOIN public.objectives_exemption_type ON ((objectives_exemption_type.obex_id = gwce.obex_id)))
     JOIN public.water_body wbd ON ((wbd.wbd_id = gwb_oordeel.gwb_id)))
     JOIN public.river_basin_disrict rbd ON ((rbd.rbd_id = wbd.rbd_id)))
     JOIN public.hydro_object hdo ON ((hdo.hdo_id = rbd.rbd_id)))
  WHERE ((gce.opt_id IS NULL) OR (gce.opt_id < 4000) OR ((gce.opt_id = ANY (ARRAY[4486, 4491, 4492, 4493, 4498])) AND ((hydro_object.hydro_object_type)::text = 'GroundWaterBody'::text) AND (hydro_object.wkrv_id = 13)))
  ORDER BY gwb_oordeel.gwb_id, gwb_oordeel.opt_id, gwce.obex_id;


--
-- Name: vw_gwchemicalexemptiontype_gwchemicalexemptionpressure; Type: VIEW; Schema: wfd_reporting; Owner: -
--

CREATE VIEW vw_gwchemicalexemptiontype_gwchemicalexemptionpressure AS
 WITH gwb_oordeel_ruw AS (
         SELECT DISTINCT ON (hdo_gwb.hdo_id, gw_chemical_status.opt_id) hdo_gwb.hdo_id AS gwb_id,
            gwb_yearly_status.year_of_status AS jaar,
            gw_chemical_status.opt_id,
            classification_type.description AS oordeel,
            waarde_bepalings_methode_type.code AS wbpm,
            wfd_qe_gwtype.is_backgroundlevelsubstance AS bglevel,
            gwb_yearly_status.gys_id
           FROM (((((public.gwb_yearly_status
             LEFT JOIN public.hydro_object hdo_gwb ON ((hdo_gwb.hdo_id = gwb_yearly_status.gwb_id)))
             JOIN public.gw_chemical_status ON ((gw_chemical_status.gys_id = gwb_yearly_status.gys_id)))
             LEFT JOIN public.classification_type ON ((gw_chemical_status.clst_id = classification_type.cls_id)))
             LEFT JOIN public.waarde_bepalings_methode_type ON ((waarde_bepalings_methode_type.wbpm_id = gw_chemical_status.wbpm_id)))
             LEFT JOIN public.wfd_qe_gwtype ON ((gw_chemical_status.opt_id = wfd_qe_gwtype.opt_id)))
          WHERE ((hdo_gwb.wkrv_id = 13) AND (gwb_yearly_status.year_of_status = ANY (ARRAY[2014, 2015])) AND (gw_chemical_status.opt_id < 4000))
          ORDER BY hdo_gwb.hdo_id, gw_chemical_status.opt_id, waarde_bepalings_methode_type.code DESC
        ), gwb_oordeel AS (
         SELECT DISTINCT ON (gwb_oordeel_ruw.gwb_id, gwb_oordeel_ruw.opt_id) gwb_oordeel_ruw.gwb_id,
            gwb_oordeel_ruw.jaar,
            gwb_oordeel_ruw.opt_id,
            gwb_oordeel_ruw.oordeel,
            gwb_oordeel_ruw.wbpm,
            gwb_oordeel_ruw.bglevel,
            observation.numeric_value
           FROM ((gwb_oordeel_ruw
             LEFT JOIN public.gw_testing_conclusion ON ((gwb_oordeel_ruw.gys_id = gw_testing_conclusion.gys_id)))
             LEFT JOIN public.observation ON (((gw_testing_conclusion.gtcc_id = observation.obs_id) AND (gwb_oordeel_ruw.opt_id = observation.observed_property_type))))
          WHERE (((gwb_oordeel_ruw.oordeel)::text = 'Ontoereikend'::text) OR (observation.numeric_value < (100)::double precision) OR (gwb_oordeel_ruw.bglevel = true))
          ORDER BY gwb_oordeel_ruw.gwb_id, gwb_oordeel_ruw.opt_id, observation.numeric_value
        ), gwb_trend AS (
         SELECT hdo_gwb.hdo_id AS gwb_id,
            gwb_yearly_status.year_of_status AS jaar,
            pollutant_trend.opt_id,
            pollutant_trend.depth_m,
            classification_type.description AS oordeel
           FROM (((public.gwb_yearly_status
             LEFT JOIN public.hydro_object hdo_gwb ON ((hdo_gwb.hdo_id = gwb_yearly_status.gwb_id)))
             JOIN public.pollutant_trend ON ((pollutant_trend.gwys_id = gwb_yearly_status.gys_id)))
             LEFT JOIN public.classification_type ON ((pollutant_trend.cls_id = classification_type.cls_id)))
          WHERE ((hdo_gwb.wkrv_id = 13) AND (gwb_yearly_status.year_of_status = ANY (ARRAY[2014, 2015])) AND (pollutant_trend.opt_id < 4000) AND ((classification_type.description)::text <> ALL (ARRAY[('Niet stijgend'::character varying)::text, ('Niet bepaald'::character varying)::text])))
        ), eu_stoffenlijst AS (
         SELECT chemische_stof_type.chs_id,
            chemische_stof_type.cas_nr,
            chemische_stof_type.naam,
            chemische_stof_type.code,
            chemische_stof_type.d_begin,
            chemische_stof_type.d_eind,
            chemische_stof_type.last_changed_date,
            chemische_stof_type.d_status,
            chemische_stof_type.id,
            eu_stoffenlijst.domeinnaam,
            eu_stoffenlijst.value,
            eu_stoffenlijst.grootheidcode,
            eu_stoffenlijst.parametercode,
            eu_stoffenlijst."swFailingRBSPOther"
           FROM public.chemische_stof_type,
            wfd_reporting.eu_stoffenlijst
          WHERE (((eu_stoffenlijst.parametercode)::text = (chemische_stof_type.code)::text) AND (((eu_stoffenlijst.domeinnaam)::text = 'PS_Enum'::text) OR ((eu_stoffenlijst.domeinnaam)::text = 'AdditionalPollutant_Enum'::text) OR ((eu_stoffenlijst.domeinnaam)::text = 'RBSP_Enum'::text)))
        ), pressures AS (
         SELECT DISTINCT ON (hydro_object_1.hdo_id, spe.eu_xsd) hydro_object_1.hdo_id AS db_id,
            hydro_object_1.inspire_id_local_id AS "euGroundWaterBodyCode",
                CASE
                    WHEN (spe.eu_xsd IS NULL) THEN 'No significant pressure'::text
                    ELSE spe.eu_xsd
                END AS "gwSignificantPressureType"
           FROM ((public.hydro_object hydro_object_1
             LEFT JOIN public.gwb_pressure ON ((hydro_object_1.hdo_id = gwb_pressure.gwb_id)))
             LEFT JOIN significant_pressure_enum spe ON ((spe.gw_p_id = gwb_pressure.gprs_id)))
          WHERE ((gwb_pressure.is_significant = true) AND (hydro_object_1.wkrv_id = 13))
          ORDER BY hydro_object_1.hdo_id, spe.eu_xsd
        )
 SELECT DISTINCT ON (gwb_oordeel.gwb_id, gwb_oordeel.opt_id, gwce.obex_id)
        CASE
            WHEN (gwce.gwce_id IS NULL) THEN ((gwb_oordeel.gwb_id)::text || (gwb_oordeel.opt_id)::text)
            ELSE (((gwb_oordeel.gwb_id)::text || (gwb_oordeel.opt_id)::text) || (gwce.gwce_id)::text)
        END AS "gWChemicalExemptionTypeID",
    pressures."gwSignificantPressureType" AS "gwChemicalExemptionPressure"
   FROM (((((((((((((((((public.hydro_object
     LEFT JOIN gwb_oordeel ON ((gwb_oordeel.gwb_id = hydro_object.hdo_id)))
     LEFT JOIN gwb_trend ON (((gwb_trend.gwb_id = hydro_object.hdo_id) AND (gwb_trend.opt_id = gwb_oordeel.opt_id))))
     LEFT JOIN public.observed_property_type ON ((observed_property_type.opt_id = gwb_oordeel.opt_id)))
     LEFT JOIN public.substance_group_element sge ON ((sge.ssge_id = observed_property_type.substance_group_id)))
     LEFT JOIN public.chemische_stof_type chs ON ((chs.chs_id = sge.chs_id)))
     LEFT JOIN public.grootheid_type grh ON ((grh.grh_id = observed_property_type.quantity_id)))
     LEFT JOIN public.natural_background_levels bglevel ON (((bglevel.gwb_id = hydro_object.hdo_id) AND (gwb_oordeel.opt_id = bglevel.opt_id))))
     LEFT JOIN public.eenheid_type ON ((bglevel.concentration_uom_id = eenheid_type.eenh_id)))
     LEFT JOIN public.observed_property_type opt ON ((opt.opt_id = bglevel.opt_id)))
     LEFT JOIN public.hoedanigheid_type ON ((opt.hoedanigheid_id = hoedanigheid_type.hdh_id)))
     LEFT JOIN public.gwb_chemical_exemption gwce ON ((gwce.gwb_id = gwb_oordeel.gwb_id)))
     LEFT JOIN public.gwb_chem_exemp_pollutant gce ON ((gce.gwce_id = gwce.gwce_id)))
     LEFT JOIN public.objectives_exemption_type ON ((objectives_exemption_type.obex_id = gwce.obex_id)))
     JOIN public.water_body wbd ON ((wbd.wbd_id = gwb_oordeel.gwb_id)))
     JOIN public.river_basin_disrict rbd ON ((rbd.rbd_id = wbd.rbd_id)))
     JOIN public.hydro_object hdo ON ((hdo.hdo_id = rbd.rbd_id)))
     LEFT JOIN pressures ON ((gwb_oordeel.gwb_id = pressures.db_id)))
  WHERE (((gce.opt_id IS NULL) OR (gce.opt_id < 4000) OR (gce.opt_id = ANY (ARRAY[4486, 4491, 4492, 4493, 4498]))) AND (gwce.obex_id IS NOT NULL) AND ((hydro_object.hydro_object_type)::text = 'GroundWaterBody'::text) AND (hydro_object.wkrv_id = 13) AND (objectives_exemption_type.description IS NOT NULL))
  ORDER BY gwb_oordeel.gwb_id, gwb_oordeel.opt_id, gwce.obex_id;


--
-- Name: vw_gwexemptions; Type: VIEW; Schema: wfd_reporting; Owner: -
--

CREATE VIEW vw_gwexemptions AS
 SELECT DISTINCT ON (("left"((hdo_rbd2.inspire_id_local_id)::text, 4))) (hdo_rbd2.hdo_id)::text AS "gWExemptionsID",
    "left"((hdo_rbd2.inspire_id_local_id)::text, 4) AS "euRBDCode",
        CASE
            WHEN (gwce.obex_id = 2) THEN 'Yes'::text
            ELSE 'No'::text
        END AS "gwDisproportionateCost",
    'No'::text AS "gwDisproportionateCostOtherEULegislation",
    'No'::text AS "gwExemptionsTransboundary"
   FROM (((((public.hydro_object hdo_rbd2
     LEFT JOIN public.objectives_exemption_type ON ((1 = 1)))
     LEFT JOIN public.gwb_chemical_exemption gwce ON ((objectives_exemption_type.obex_id = gwce.obex_id)))
     LEFT JOIN public.water_body ON ((water_body.wbd_id = gwce.gwb_id)))
     LEFT JOIN public.river_basin_disrict rbd ON ((rbd.rbd_id = water_body.rbd_id)))
     LEFT JOIN public.hydro_object hdo_rbd ON ((rbd.rbd_id = hdo_rbd.hdo_id)))
  WHERE ((hdo_rbd2.wkrv_id = 13) AND ((hdo_rbd2.hydro_object_type)::text = 'RiverBasinDistrict'::text) AND ((hdo_rbd2.inspire_id_local_id)::text ~~ 'NL%'::text) AND (((substr(objectives_exemption_type.description, 8, 4) = '4(4)'::text) AND (gwce.obex_id = 2)) OR (substr(objectives_exemption_type.description, 8, 4) = ANY (ARRAY['4(5)'::text, '4(6)'::text, '4(7)'::text]))))
  ORDER BY ("left"((hdo_rbd2.inspire_id_local_id)::text, 4));


--
-- Name: vw_gwexemptions_gwexemption44driver; Type: VIEW; Schema: wfd_reporting; Owner: -
--

CREATE VIEW vw_gwexemptions_gwexemption44driver AS
 WITH gwb_oordeel AS (
         SELECT DISTINCT ON (hdo_gwb.hdo_id, gw_quantity_status.opt_id) hdo_gwb.hdo_id AS gwb_id,
            gwb_yearly_status.year_of_status AS jaar,
            gw_quantity_status.opt_id,
            classification_type.description AS oordeel,
            waarde_bepalings_methode_type.code AS wbpm
           FROM ((((public.gwb_yearly_status
             LEFT JOIN public.hydro_object hdo_gwb ON ((hdo_gwb.hdo_id = gwb_yearly_status.gwb_id)))
             JOIN public.gw_quantity_status ON ((gw_quantity_status.gys_id = gwb_yearly_status.gys_id)))
             LEFT JOIN public.classification_type ON ((gw_quantity_status.gwst_id = classification_type.cls_id)))
             LEFT JOIN public.waarde_bepalings_methode_type ON ((waarde_bepalings_methode_type.wbpm_id = gw_quantity_status.wbpm_id)))
          WHERE ((hdo_gwb.wkrv_id = 13) AND (gwb_yearly_status.year_of_status = ANY (ARRAY[2014, 2015])) AND ((classification_type.description)::text = 'Ontoereikend'::text))
        UNION ALL
         SELECT DISTINCT ON (hdo_gwb.hdo_id, gw_chemical_status.opt_id) hdo_gwb.hdo_id AS gwb_id,
            gwb_yearly_status.year_of_status AS jaar,
            gw_chemical_status.opt_id,
            classification_type.description AS oordeel,
            waarde_bepalings_methode_type.code AS wbpm
           FROM ((((public.gwb_yearly_status
             LEFT JOIN public.hydro_object hdo_gwb ON ((hdo_gwb.hdo_id = gwb_yearly_status.gwb_id)))
             JOIN public.gw_chemical_status ON ((gw_chemical_status.gys_id = gwb_yearly_status.gys_id)))
             LEFT JOIN public.classification_type ON ((gw_chemical_status.clst_id = classification_type.cls_id)))
             LEFT JOIN public.waarde_bepalings_methode_type ON ((waarde_bepalings_methode_type.wbpm_id = gw_chemical_status.wbpm_id)))
          WHERE ((hdo_gwb.wkrv_id = 13) AND (gwb_yearly_status.year_of_status = ANY (ARRAY[2014, 2015])) AND ((classification_type.description)::text = 'Ontoereikend'::text))
  ORDER BY 1, 3, 4 DESC
        ), gwb_oordeel_i AS (
         SELECT DISTINCT ON (gwb_oordeel_1.gwb_id) gwb_oordeel_1.gwb_id,
            gwb_oordeel_1.opt_id,
            gwb_oordeel_1.jaar,
            gwb_oordeel_1.oordeel,
            gwb_oordeel_1.wbpm
           FROM gwb_oordeel gwb_oordeel_1
          ORDER BY gwb_oordeel_1.gwb_id, gwb_oordeel_1.oordeel DESC
        ), driver AS (
         SELECT hydro_object.hdo_id AS db_id,
            drivers.naam
           FROM (((public.hydro_object
             LEFT JOIN public.gwb_pressure ON (((hydro_object.hdo_id = gwb_pressure.gwb_id) AND (gwb_pressure.is_significant = true))))
             LEFT JOIN public.gw_pressure_type_driver ON ((gwb_pressure.gprs_id = gw_pressure_type_driver.gprs_id)))
             LEFT JOIN domains.drivers ON ((drivers.driver_id = gw_pressure_type_driver.driver_id)))
          WHERE ((hydro_object.wkrv_id = 13) AND ((hydro_object.hydro_object_type)::text = 'GroundWaterBody'::text))
          ORDER BY hydro_object.hdo_id
        ), driver_aant_ruw AS (
         SELECT "left"((hdo_rbd2_1.inspire_id_local_id)::text, 4) AS rbd,
            substr(objectives_exemption_type_1.description, 8, 4) AS art,
            count(driver_1.naam) AS aant
           FROM (((((((public.hydro_object hdo_rbd2_1
             LEFT JOIN public.objectives_exemption_type objectives_exemption_type_1 ON ((1 = 1)))
             LEFT JOIN public.gwb_chemical_exemption gwce_1 ON ((objectives_exemption_type_1.obex_id = gwce_1.obex_id)))
             LEFT JOIN gwb_oordeel gwb_oordeel_1 ON ((gwce_1.gwb_id = gwb_oordeel_1.gwb_id)))
             LEFT JOIN public.water_body water_body_1 ON ((water_body_1.wbd_id = gwb_oordeel_1.gwb_id)))
             LEFT JOIN public.river_basin_disrict rbd_1 ON ((rbd_1.rbd_id = water_body_1.rbd_id)))
             LEFT JOIN public.hydro_object hdo_rbd_1 ON ((rbd_1.rbd_id = hdo_rbd_1.hdo_id)))
             LEFT JOIN driver driver_1 ON ((gwb_oordeel_1.gwb_id = driver_1.db_id)))
          GROUP BY ("left"((hdo_rbd2_1.inspire_id_local_id)::text, 4)), (substr(objectives_exemption_type_1.description, 8, 4)), driver_1.naam, hdo_rbd2_1.wkrv_id, hdo_rbd2_1.hydro_object_type, hdo_rbd2_1.inspire_id_local_id
         HAVING ((hdo_rbd2_1.wkrv_id = 13) AND ((hdo_rbd2_1.hydro_object_type)::text = 'RiverBasinDistrict'::text) AND ((hdo_rbd2_1.inspire_id_local_id)::text ~~ 'NL%'::text))
          ORDER BY ("left"((hdo_rbd2_1.inspire_id_local_id)::text, 4)), (substr(objectives_exemption_type_1.description, 8, 4))
        ), driver_aant AS (
         SELECT DISTINCT ON (driver_aant_ruw.rbd, driver_aant_ruw.art) driver_aant_ruw.rbd,
            driver_aant_ruw.art,
            driver_aant_ruw.aant
           FROM driver_aant_ruw
          ORDER BY driver_aant_ruw.rbd, driver_aant_ruw.art, driver_aant_ruw.aant DESC
        )
 SELECT DISTINCT ON (("left"((hdo_rbd2.inspire_id_local_id)::text, 4)), driver.naam) (hdo_rbd2.hdo_id)::text AS "gWExemptionsID",
        CASE
            WHEN (driver_aant.aant = 0) THEN 'Exemption not applied'::text
            ELSE
            CASE driver.naam
                WHEN 'Landbouw'::text THEN 'Agriculture'::text
                WHEN 'Klimaatverandering'::text THEN 'Climate change'::text
                WHEN 'Energie (hydropower)'::text THEN 'Energy - hydropower'::text
                WHEN 'Energie (geen hydropower)'::text THEN 'Energy - non-hydropower'::text
                WHEN 'Visserij & Aquacultuur'::text THEN 'Fisheries and aquaculture'::text
                WHEN 'Hoogwaterbescherming'::text THEN 'Flood protection'::text
                WHEN 'Bosbouw'::text THEN 'Forestry'::text
                WHEN 'Industrie'::text THEN 'Industry'::text
                WHEN 'Toerisme en Recreatie'::text THEN 'Tourism and recreation'::text
                WHEN 'Transport'::text THEN 'Transport'::text
                WHEN 'Stedelijke ontwikkeling'::text THEN 'Urban development'::text
                WHEN 'Recreatie'::text THEN 'Tourism and recreation'::text
                WHEN 'Niet bekend of verouderd'::text THEN 'Unknown - other'::text
                WHEN 'Eén of meerdere'::text THEN 'Unknown - other'::text
                WHEN 'Anders'::text THEN 'Unknown - other'::text
                ELSE 'oeps'::text
            END
        END AS "gwExemption44Driver"
   FROM ((((((((public.hydro_object hdo_rbd2
     LEFT JOIN public.objectives_exemption_type ON ((1 = 1)))
     LEFT JOIN public.gwb_chemical_exemption gwce ON ((objectives_exemption_type.obex_id = gwce.obex_id)))
     LEFT JOIN gwb_oordeel ON ((gwce.gwb_id = gwb_oordeel.gwb_id)))
     LEFT JOIN public.water_body ON ((water_body.wbd_id = gwb_oordeel.gwb_id)))
     LEFT JOIN public.river_basin_disrict rbd ON ((rbd.rbd_id = water_body.rbd_id)))
     LEFT JOIN public.hydro_object hdo_rbd ON ((rbd.rbd_id = hdo_rbd.hdo_id)))
     LEFT JOIN driver_aant ON ((("left"((hdo_rbd2.inspire_id_local_id)::text, 4) = driver_aant.rbd) AND (driver_aant.art = substr(objectives_exemption_type.description, 8, 4)))))
     LEFT JOIN driver ON ((gwb_oordeel.gwb_id = driver.db_id)))
  WHERE ((hdo_rbd2.wkrv_id = 13) AND ((hdo_rbd2.hydro_object_type)::text = 'RiverBasinDistrict'::text) AND ((hdo_rbd2.inspire_id_local_id)::text ~~ 'NL%'::text) AND (((driver.naam IS NOT NULL) AND (driver_aant.aant > 0)) OR ((driver.naam IS NULL) AND (driver_aant.aant = 0))) AND (substr(objectives_exemption_type.description, 8, 4) = '4(4)'::text))
  ORDER BY ("left"((hdo_rbd2.inspire_id_local_id)::text, 4)), driver.naam;


--
-- Name: vw_gwexemptions_gwexemption44impact; Type: VIEW; Schema: wfd_reporting; Owner: -
--

CREATE VIEW vw_gwexemptions_gwexemption44impact AS
 WITH gwb_oordeel AS (
         SELECT DISTINCT ON (hdo_gwb.hdo_id, gw_quantity_status.opt_id) hdo_gwb.hdo_id AS gwb_id,
            gwb_yearly_status.year_of_status AS jaar,
            gw_quantity_status.opt_id,
            classification_type.description AS oordeel,
            waarde_bepalings_methode_type.code AS wbpm
           FROM ((((public.gwb_yearly_status
             LEFT JOIN public.hydro_object hdo_gwb ON ((hdo_gwb.hdo_id = gwb_yearly_status.gwb_id)))
             JOIN public.gw_quantity_status ON ((gw_quantity_status.gys_id = gwb_yearly_status.gys_id)))
             LEFT JOIN public.classification_type ON ((gw_quantity_status.gwst_id = classification_type.cls_id)))
             LEFT JOIN public.waarde_bepalings_methode_type ON ((waarde_bepalings_methode_type.wbpm_id = gw_quantity_status.wbpm_id)))
          WHERE ((hdo_gwb.wkrv_id = 13) AND (gwb_yearly_status.year_of_status = ANY (ARRAY[2014, 2015])) AND ((classification_type.description)::text = 'Ontoereikend'::text))
        UNION ALL
         SELECT DISTINCT ON (hdo_gwb.hdo_id, gw_chemical_status.opt_id) hdo_gwb.hdo_id AS gwb_id,
            gwb_yearly_status.year_of_status AS jaar,
            gw_chemical_status.opt_id,
            classification_type.description AS oordeel,
            waarde_bepalings_methode_type.code AS wbpm
           FROM ((((public.gwb_yearly_status
             LEFT JOIN public.hydro_object hdo_gwb ON ((hdo_gwb.hdo_id = gwb_yearly_status.gwb_id)))
             JOIN public.gw_chemical_status ON ((gw_chemical_status.gys_id = gwb_yearly_status.gys_id)))
             LEFT JOIN public.classification_type ON ((gw_chemical_status.clst_id = classification_type.cls_id)))
             LEFT JOIN public.waarde_bepalings_methode_type ON ((waarde_bepalings_methode_type.wbpm_id = gw_chemical_status.wbpm_id)))
          WHERE ((hdo_gwb.wkrv_id = 13) AND (gwb_yearly_status.year_of_status = ANY (ARRAY[2014, 2015])) AND ((classification_type.description)::text = 'Ontoereikend'::text))
  ORDER BY 1, 3, 4 DESC
        ), gwb_oordeel_i AS (
         SELECT DISTINCT ON (gwb_oordeel_1.gwb_id) gwb_oordeel_1.gwb_id,
            gwb_oordeel_1.opt_id,
            gwb_oordeel_1.jaar,
            gwb_oordeel_1.oordeel,
            gwb_oordeel_1.wbpm
           FROM gwb_oordeel gwb_oordeel_1
          ORDER BY gwb_oordeel_1.gwb_id, gwb_oordeel_1.oordeel DESC
        ), impact AS (
         SELECT hydro_object.hdo_id AS db_id,
                CASE
                    WHEN (ipe.eu_xsd IS NULL) THEN
                    CASE
                        WHEN ((gwb_oordeel_i.oordeel)::text = 'Goed'::text) THEN 'NOSI - No significant impact'::text
                        ELSE 'UNKN - Unknown impact type'::text
                    END
                    ELSE ipe.eu_xsd
                END AS impact_type
           FROM ((((public.hydro_object
             LEFT JOIN public.gwb_pressure ON (((hydro_object.hdo_id = gwb_pressure.gwb_id) AND (gwb_pressure.is_significant = true))))
             LEFT JOIN public.gwb_pressure_impact ON ((gwb_pressure.gwbp_id = gwb_pressure_impact.gwbp_id)))
             LEFT JOIN significant_impact_enum ipe ON ((ipe.i_id = gwb_pressure_impact.impact_id)))
             LEFT JOIN gwb_oordeel_i ON ((gwb_oordeel_i.gwb_id = hydro_object.hdo_id)))
          WHERE ((hydro_object.wkrv_id = 13) AND ((hydro_object.hydro_object_type)::text = 'GroundWaterBody'::text))
          ORDER BY hydro_object.hdo_id, ipe.eu_xsd
        ), impact_aant_ruw AS (
         SELECT "left"((hdo_rbd2_1.inspire_id_local_id)::text, 4) AS rbd,
            substr(objectives_exemption_type_1.description, 8, 4) AS art,
            count(impact_1.impact_type) AS aant
           FROM (((((((public.hydro_object hdo_rbd2_1
             LEFT JOIN public.objectives_exemption_type objectives_exemption_type_1 ON ((1 = 1)))
             LEFT JOIN public.gwb_chemical_exemption gwce_1 ON ((objectives_exemption_type_1.obex_id = gwce_1.obex_id)))
             LEFT JOIN gwb_oordeel gwb_oordeel_1 ON ((gwce_1.gwb_id = gwb_oordeel_1.gwb_id)))
             LEFT JOIN public.water_body water_body_1 ON ((water_body_1.wbd_id = gwb_oordeel_1.gwb_id)))
             LEFT JOIN public.river_basin_disrict rbd_1 ON ((rbd_1.rbd_id = water_body_1.rbd_id)))
             LEFT JOIN public.hydro_object hdo_rbd_1 ON ((rbd_1.rbd_id = hdo_rbd_1.hdo_id)))
             LEFT JOIN impact impact_1 ON ((gwb_oordeel_1.gwb_id = impact_1.db_id)))
          GROUP BY ("left"((hdo_rbd2_1.inspire_id_local_id)::text, 4)), (substr(objectives_exemption_type_1.description, 8, 4)), impact_1.impact_type, hdo_rbd2_1.wkrv_id, hdo_rbd2_1.hydro_object_type, hdo_rbd2_1.inspire_id_local_id
         HAVING ((hdo_rbd2_1.wkrv_id = 13) AND ((hdo_rbd2_1.hydro_object_type)::text = 'RiverBasinDistrict'::text) AND ((hdo_rbd2_1.inspire_id_local_id)::text ~~ 'NL%'::text))
          ORDER BY ("left"((hdo_rbd2_1.inspire_id_local_id)::text, 4)), (substr(objectives_exemption_type_1.description, 8, 4))
        ), impact_aant AS (
         SELECT DISTINCT ON (impact_aant_ruw.rbd, impact_aant_ruw.art) impact_aant_ruw.rbd,
            impact_aant_ruw.art,
            impact_aant_ruw.aant
           FROM impact_aant_ruw
          ORDER BY impact_aant_ruw.rbd, impact_aant_ruw.art, impact_aant_ruw.aant DESC
        )
 SELECT DISTINCT ON (("left"((hdo_rbd2.inspire_id_local_id)::text, 4)), impact.impact_type) (hdo_rbd2.hdo_id)::text AS "gWExemptionsID",
        CASE
            WHEN (impact_aant.aant = 0) THEN 'Not applicable'::text
            ELSE impact.impact_type
        END AS "gwExemption44Impact"
   FROM ((((((((public.hydro_object hdo_rbd2
     LEFT JOIN public.objectives_exemption_type ON ((1 = 1)))
     LEFT JOIN public.gwb_chemical_exemption gwce ON ((objectives_exemption_type.obex_id = gwce.obex_id)))
     LEFT JOIN gwb_oordeel ON ((gwce.gwb_id = gwb_oordeel.gwb_id)))
     LEFT JOIN public.water_body ON ((water_body.wbd_id = gwb_oordeel.gwb_id)))
     LEFT JOIN public.river_basin_disrict rbd ON ((rbd.rbd_id = water_body.rbd_id)))
     LEFT JOIN public.hydro_object hdo_rbd ON ((rbd.rbd_id = hdo_rbd.hdo_id)))
     LEFT JOIN impact_aant ON ((("left"((hdo_rbd2.inspire_id_local_id)::text, 4) = impact_aant.rbd) AND (impact_aant.art = substr(objectives_exemption_type.description, 8, 4)))))
     LEFT JOIN impact ON ((gwb_oordeel.gwb_id = impact.db_id)))
  WHERE ((hdo_rbd2.wkrv_id = 13) AND ((hdo_rbd2.hydro_object_type)::text = 'RiverBasinDistrict'::text) AND ((hdo_rbd2.inspire_id_local_id)::text ~~ 'NL%'::text) AND (((impact.impact_type IS NOT NULL) AND (impact_aant.aant > 0)) OR ((impact.impact_type IS NULL) AND (impact_aant.aant = 0))) AND (substr(objectives_exemption_type.description, 8, 4) = '4(4)'::text))
  ORDER BY ("left"((hdo_rbd2.inspire_id_local_id)::text, 4)), impact.impact_type;


--
-- Name: vw_gwexemptions_gwexemption45driver; Type: VIEW; Schema: wfd_reporting; Owner: -
--

CREATE VIEW vw_gwexemptions_gwexemption45driver AS
 SELECT DISTINCT ON (hdo_rbd2.hdo_id) (hdo_rbd2.hdo_id || '5'::text) AS "gWExemptionsID",
    'Exemption not applied'::text AS "gwExemption45Driver"
   FROM (((((public.hydro_object hdo_rbd2
     LEFT JOIN public.objectives_exemption_type ON ((1 = 1)))
     LEFT JOIN public.gwb_chemical_exemption gwce ON ((objectives_exemption_type.obex_id = gwce.obex_id)))
     LEFT JOIN public.water_body ON ((water_body.wbd_id = gwce.gwb_id)))
     LEFT JOIN public.river_basin_disrict rbd ON ((rbd.rbd_id = water_body.rbd_id)))
     LEFT JOIN public.hydro_object hdo_rbd ON ((rbd.rbd_id = hdo_rbd.hdo_id)))
  WHERE ((hdo_rbd2.wkrv_id = 13) AND ((hdo_rbd2.hydro_object_type)::text = 'RiverBasinDistrict'::text) AND ((hdo_rbd2.inspire_id_local_id)::text ~~ 'NL%'::text) AND (rbd.international_rbd IS NOT NULL) AND (length((hdo_rbd2.inspire_id_local_id)::text) = 4))
  ORDER BY hdo_rbd2.hdo_id;


--
-- Name: vw_gwexemptions_gwexemption45impact; Type: VIEW; Schema: wfd_reporting; Owner: -
--

CREATE VIEW vw_gwexemptions_gwexemption45impact AS
 SELECT DISTINCT ON (hdo_rbd2.hdo_id) (hdo_rbd2.hdo_id || '5'::text) AS "gWExemptionsID",
    'Not applicable'::text AS "gwExemption45Impact"
   FROM (((((public.hydro_object hdo_rbd2
     LEFT JOIN public.objectives_exemption_type ON ((1 = 1)))
     LEFT JOIN public.gwb_chemical_exemption gwce ON ((objectives_exemption_type.obex_id = gwce.obex_id)))
     LEFT JOIN public.water_body ON ((water_body.wbd_id = gwce.gwb_id)))
     LEFT JOIN public.river_basin_disrict rbd ON ((rbd.rbd_id = water_body.rbd_id)))
     LEFT JOIN public.hydro_object hdo_rbd ON ((rbd.rbd_id = hdo_rbd.hdo_id)))
  WHERE ((hdo_rbd2.wkrv_id = 13) AND ((hdo_rbd2.hydro_object_type)::text = 'RiverBasinDistrict'::text) AND ((hdo_rbd2.inspire_id_local_id)::text ~~ 'NL%'::text) AND (rbd.international_rbd IS NOT NULL) AND (length((hdo_rbd2.inspire_id_local_id)::text) = 4))
  ORDER BY hdo_rbd2.hdo_id;


--
-- Name: vw_gwexemptions_gwexemption46; Type: VIEW; Schema: wfd_reporting; Owner: -
--

CREATE VIEW vw_gwexemptions_gwexemption46 AS
 WITH e46_1 AS (
         SELECT DISTINCT ON (("left"((hdo_rbd2.inspire_id_local_id)::text, 4)), gwce.obex_id) (hdo_rbd2.hdo_id)::text AS "gWExemptionsID",
                CASE
                    WHEN (gwce.obex_id = ANY (ARRAY[4, 5, 6])) THEN 'Yes (prolonged droughts)'::text
                    ELSE 'Article 4(6) has not been applied'::text
                END AS "gwExemption46"
           FROM (((((public.hydro_object hdo_rbd2
             LEFT JOIN public.objectives_exemption_type ON ((1 = 1)))
             LEFT JOIN public.gwb_chemical_exemption gwce ON ((objectives_exemption_type.obex_id = gwce.obex_id)))
             LEFT JOIN public.water_body ON ((water_body.wbd_id = gwce.gwb_id)))
             LEFT JOIN public.river_basin_disrict rbd ON ((rbd.rbd_id = water_body.rbd_id)))
             LEFT JOIN public.hydro_object hdo_rbd ON ((rbd.rbd_id = hdo_rbd.hdo_id)))
          WHERE ((hdo_rbd2.wkrv_id = 13) AND ((hdo_rbd2.hydro_object_type)::text = 'RiverBasinDistrict'::text) AND ((hdo_rbd2.inspire_id_local_id)::text ~~ 'NL%'::text) AND (substr(objectives_exemption_type.description, 8, 4) = '4(6)'::text))
          ORDER BY ("left"((hdo_rbd2.inspire_id_local_id)::text, 4)), gwce.obex_id
        ), e46_2 AS (
         SELECT DISTINCT ON (("left"((hdo_rbd2.inspire_id_local_id)::text, 4)), gwce.obex_id) (hdo_rbd2.hdo_id)::text AS "gWExemptionsID",
                CASE
                    WHEN (gwce.obex_id = ANY (ARRAY[4, 5, 6])) THEN 'Yes (accidents)'::text
                    ELSE 'Article 4(6) has not been applied'::text
                END AS "gwExemption46"
           FROM (((((public.hydro_object hdo_rbd2
             LEFT JOIN public.objectives_exemption_type ON ((1 = 1)))
             LEFT JOIN public.gwb_chemical_exemption gwce ON ((objectives_exemption_type.obex_id = gwce.obex_id)))
             LEFT JOIN public.water_body ON ((water_body.wbd_id = gwce.gwb_id)))
             LEFT JOIN public.river_basin_disrict rbd ON ((rbd.rbd_id = water_body.rbd_id)))
             LEFT JOIN public.hydro_object hdo_rbd ON ((rbd.rbd_id = hdo_rbd.hdo_id)))
          WHERE ((hdo_rbd2.wkrv_id = 13) AND ((hdo_rbd2.hydro_object_type)::text = 'RiverBasinDistrict'::text) AND ((hdo_rbd2.inspire_id_local_id)::text ~~ 'NL%'::text) AND (substr(objectives_exemption_type.description, 8, 4) = '4(6)'::text))
          ORDER BY ("left"((hdo_rbd2.inspire_id_local_id)::text, 4)), gwce.obex_id
        ), e46_3 AS (
         SELECT DISTINCT ON (("left"((hdo_rbd2.inspire_id_local_id)::text, 4)), gwce.obex_id) (hdo_rbd2.hdo_id)::text AS "gWExemptionsID",
                CASE
                    WHEN (gwce.obex_id = ANY (ARRAY[4, 5, 6])) THEN 'Yes (extreme floods)'::text
                    ELSE 'Article 4(6) has not been applied'::text
                END AS "gwExemption46"
           FROM (((((public.hydro_object hdo_rbd2
             LEFT JOIN public.objectives_exemption_type ON ((1 = 1)))
             LEFT JOIN public.gwb_chemical_exemption gwce ON ((objectives_exemption_type.obex_id = gwce.obex_id)))
             LEFT JOIN public.water_body ON ((water_body.wbd_id = gwce.gwb_id)))
             LEFT JOIN public.river_basin_disrict rbd ON ((rbd.rbd_id = water_body.rbd_id)))
             LEFT JOIN public.hydro_object hdo_rbd ON ((rbd.rbd_id = hdo_rbd.hdo_id)))
          WHERE ((hdo_rbd2.wkrv_id = 13) AND ((hdo_rbd2.hydro_object_type)::text = 'RiverBasinDistrict'::text) AND ((hdo_rbd2.inspire_id_local_id)::text ~~ 'NL%'::text) AND (substr(objectives_exemption_type.description, 8, 4) = '4(6)'::text))
          ORDER BY ("left"((hdo_rbd2.inspire_id_local_id)::text, 4)), gwce.obex_id
        ), e46 AS (
         SELECT e46_1."gWExemptionsID",
            e46_1."gwExemption46"
           FROM e46_1
        UNION ALL
         SELECT e46_2."gWExemptionsID",
            e46_2."gwExemption46"
           FROM e46_2
        UNION ALL
         SELECT e46_3."gWExemptionsID",
            e46_3."gwExemption46"
           FROM e46_3
        )
 SELECT DISTINCT ON (e46."gWExemptionsID", e46."gwExemption46") e46."gWExemptionsID",
    e46."gwExemption46"
   FROM e46
  ORDER BY e46."gWExemptionsID", e46."gwExemption46";


--
-- Name: vw_gwexemptions_gwexemption47; Type: VIEW; Schema: wfd_reporting; Owner: -
--

CREATE VIEW vw_gwexemptions_gwexemption47 AS
 SELECT DISTINCT ON (("left"((hdo_rbd2.inspire_id_local_id)::text, 4)), (substr(objectives_exemption_type.description, 8, 4)), gwce.obex_id) ((hdo_rbd2.hdo_id)::text || substr(objectives_exemption_type.description, 10, 1)) AS "gWExemptionsID",
        CASE
            WHEN (gwce.obex_id = ANY (ARRAY[7, 8])) THEN 'Other'::text
            ELSE 'Article 4(7) has not been applied'::text
        END AS "gwExemption47"
   FROM (((((public.hydro_object hdo_rbd2
     LEFT JOIN public.objectives_exemption_type ON ((1 = 1)))
     LEFT JOIN public.gwb_chemical_exemption gwce ON ((objectives_exemption_type.obex_id = gwce.obex_id)))
     LEFT JOIN public.water_body ON ((water_body.wbd_id = gwce.gwb_id)))
     LEFT JOIN public.river_basin_disrict rbd ON ((rbd.rbd_id = water_body.rbd_id)))
     LEFT JOIN public.hydro_object hdo_rbd ON ((rbd.rbd_id = hdo_rbd.hdo_id)))
  WHERE ((hdo_rbd2.wkrv_id = 13) AND ((hdo_rbd2.hydro_object_type)::text = 'RiverBasinDistrict'::text) AND ((hdo_rbd2.inspire_id_local_id)::text ~~ 'NL%'::text) AND (substr(objectives_exemption_type.description, 8, 4) = '4(7)'::text))
  ORDER BY ("left"((hdo_rbd2.inspire_id_local_id)::text, 4)), (substr(objectives_exemption_type.description, 8, 4)), gwce.obex_id;


--
-- Name: vw_gwpollutant; Type: VIEW; Schema: wfd_reporting; Owner: -
--

CREATE VIEW vw_gwpollutant AS
 WITH gwb_oordeel_ruw AS (
         SELECT DISTINCT ON (hdo_gwb.hdo_id, gw_chemical_status.opt_id) hdo_gwb.hdo_id AS gwb_id,
            gwb_yearly_status.year_of_status AS jaar,
            gw_chemical_status.opt_id,
            classification_type.description AS oordeel,
            waarde_bepalings_methode_type.code AS wbpm,
            wfd_qe_gwtype.is_backgroundlevelsubstance AS bglevel,
            gwb_yearly_status.gys_id
           FROM (((((public.gwb_yearly_status
             LEFT JOIN public.hydro_object hdo_gwb ON ((hdo_gwb.hdo_id = gwb_yearly_status.gwb_id)))
             JOIN public.gw_chemical_status ON ((gw_chemical_status.gys_id = gwb_yearly_status.gys_id)))
             LEFT JOIN public.classification_type ON ((gw_chemical_status.clst_id = classification_type.cls_id)))
             LEFT JOIN public.waarde_bepalings_methode_type ON ((waarde_bepalings_methode_type.wbpm_id = gw_chemical_status.wbpm_id)))
             LEFT JOIN public.wfd_qe_gwtype ON ((gw_chemical_status.opt_id = wfd_qe_gwtype.opt_id)))
          WHERE ((hdo_gwb.wkrv_id = 13) AND (gwb_yearly_status.year_of_status = ANY (ARRAY[2014, 2015])) AND (gw_chemical_status.opt_id < 4000))
          ORDER BY hdo_gwb.hdo_id, gw_chemical_status.opt_id, waarde_bepalings_methode_type.code DESC
        ), gwb_oordeel AS (
         SELECT DISTINCT ON (gwb_oordeel_ruw.gwb_id, gwb_oordeel_ruw.opt_id) gwb_oordeel_ruw.gwb_id,
            gwb_oordeel_ruw.jaar,
            gwb_oordeel_ruw.opt_id,
            gwb_oordeel_ruw.oordeel,
            gwb_oordeel_ruw.wbpm,
            gwb_oordeel_ruw.bglevel,
            observation.numeric_value
           FROM ((gwb_oordeel_ruw
             LEFT JOIN public.gw_testing_conclusion ON ((gwb_oordeel_ruw.gys_id = gw_testing_conclusion.gys_id)))
             LEFT JOIN public.observation ON (((gw_testing_conclusion.gtcc_id = observation.obs_id) AND (gwb_oordeel_ruw.opt_id = observation.observed_property_type))))
          WHERE (((gwb_oordeel_ruw.oordeel)::text = 'Ontoereikend'::text) OR (observation.numeric_value < (100)::double precision) OR (gwb_oordeel_ruw.bglevel = true))
          ORDER BY gwb_oordeel_ruw.gwb_id, gwb_oordeel_ruw.opt_id, observation.numeric_value
        ), gwb_trend AS (
         SELECT hdo_gwb.hdo_id AS gwb_id,
            gwb_yearly_status.year_of_status AS jaar,
            pollutant_trend.opt_id,
            pollutant_trend.depth_m,
            classification_type.description AS oordeel
           FROM (((public.gwb_yearly_status
             LEFT JOIN public.hydro_object hdo_gwb ON ((hdo_gwb.hdo_id = gwb_yearly_status.gwb_id)))
             JOIN public.pollutant_trend ON ((pollutant_trend.gwys_id = gwb_yearly_status.gys_id)))
             LEFT JOIN public.classification_type ON ((pollutant_trend.cls_id = classification_type.cls_id)))
          WHERE ((hdo_gwb.wkrv_id = 13) AND (gwb_yearly_status.year_of_status = ANY (ARRAY[2014, 2015])) AND (pollutant_trend.opt_id < 4000) AND ((classification_type.description)::text <> ALL (ARRAY[('Niet stijgend'::character varying)::text, ('Niet bepaald'::character varying)::text])))
        ), eu_stoffenlijst AS (
         SELECT chemische_stof_type.chs_id,
            chemische_stof_type.cas_nr,
            chemische_stof_type.naam,
            chemische_stof_type.code,
            chemische_stof_type.d_begin,
            chemische_stof_type.d_eind,
            chemische_stof_type.last_changed_date,
            chemische_stof_type.d_status,
            chemische_stof_type.id,
            eu_stoffenlijst_1.domeinnaam,
            eu_stoffenlijst_1.value,
            eu_stoffenlijst_1.grootheidcode,
            eu_stoffenlijst_1.parametercode,
            eu_stoffenlijst_1."swFailingRBSPOther"
           FROM public.chemische_stof_type,
            wfd_reporting.eu_stoffenlijst eu_stoffenlijst_1
          WHERE (((eu_stoffenlijst_1.parametercode)::text = (chemische_stof_type.code)::text) AND (((eu_stoffenlijst_1.domeinnaam)::text = 'PS_Enum'::text) OR ((eu_stoffenlijst_1.domeinnaam)::text = 'AdditionalPollutant_Enum'::text) OR ((eu_stoffenlijst_1.domeinnaam)::text = 'RBSP_Enum'::text)))
        )
 SELECT hydro_object.hdo_id AS db_id,
    ((hydro_object.hdo_id)::text || (gwb_oordeel.opt_id)::text) AS "gWPollutantID",
    hydro_object.inspire_id_local_id AS "euGroundWaterBodyCode",
        CASE
            WHEN (eu_stoffenlijst.value IS NULL) THEN grh.code
            ELSE eu_stoffenlijst.value
        END AS "gwPollutantCode",
        CASE
            WHEN ((gwb_oordeel.oordeel)::text = 'Ontoereikend'::text) THEN 'Yes'::text
            ELSE 'No'::text
        END AS "gwPollutantCausingRisk",
        CASE
            WHEN ((gwb_oordeel.oordeel)::text = 'Ontoereikend'::text) THEN 'Yes'::text
            ELSE 'No'::text
        END AS "gwPollutantCausingFailure",
        CASE
            WHEN ((gwb_trend.oordeel)::text = 'Stijgend'::text) THEN 'Yes'::text
            ELSE 'No'::text
        END AS "gwPollutantUpwardTrend",
        CASE
            WHEN ((gwb_trend.oordeel)::text = 'Omgebogen'::text) THEN 'Yes'::text
            ELSE 'No'::text
        END AS "gwPollutantTrendReversal",
        CASE
            WHEN (((gwb_oordeel.oordeel)::text = 'Goed'::text) AND (gwb_oordeel.numeric_value < (100)::double precision)) THEN 'Yes'::text
            ELSE 'No'::text
        END AS "gwPollutantsExceedancesNotCounted",
        CASE
            WHEN ((gwb_oordeel.bglevel = true) AND (bglevel.concentration_value IS NOT NULL)) THEN 'Yes'::text
            ELSE 'No'::text
        END AS "gwPollutantBackgroundLevelSet",
        CASE
            WHEN ((gwb_oordeel.bglevel = true) AND (bglevel.concentration_value IS NOT NULL)) THEN bglevel.concentration_value
            ELSE NULL::double precision
        END AS "gwPollutantBackgroundLevelValue",
        CASE
            WHEN ((gwb_oordeel.bglevel = true) AND (bglevel.concentration_value IS NOT NULL)) THEN
            CASE eenheid_type.code
                WHEN 'mg/l'::text THEN
                CASE
                    WHEN ((hoedanigheid_type.code)::text = 'Pnf'::text) THEN 'mg{P}/L'::text
                    WHEN ((hoedanigheid_type.code)::text = 'Nnf'::text) THEN 'mg{N}/L'::text
                    ELSE 'mg/L'::text
                END
                WHEN 'ug/l'::text THEN 'ug/L'::text
                ELSE NULL::text
            END
            ELSE NULL::text
        END AS "gwPollutantBackgroundLevelUnit"
   FROM (((((((((((public.hydro_object
     LEFT JOIN gwb_oordeel ON ((gwb_oordeel.gwb_id = hydro_object.hdo_id)))
     LEFT JOIN gwb_trend ON (((gwb_trend.gwb_id = hydro_object.hdo_id) AND (gwb_trend.opt_id = gwb_oordeel.opt_id))))
     LEFT JOIN public.observed_property_type ON ((observed_property_type.opt_id = gwb_oordeel.opt_id)))
     LEFT JOIN public.substance_group_element sge ON ((sge.ssge_id = observed_property_type.substance_group_id)))
     LEFT JOIN public.chemische_stof_type chs ON ((chs.chs_id = sge.chs_id)))
     LEFT JOIN public.grootheid_type grh ON ((grh.grh_id = observed_property_type.quantity_id)))
     LEFT JOIN public.natural_background_levels bglevel ON (((bglevel.gwb_id = hydro_object.hdo_id) AND (gwb_oordeel.opt_id = bglevel.opt_id))))
     LEFT JOIN public.eenheid_type ON ((bglevel.concentration_uom_id = eenheid_type.eenh_id)))
     LEFT JOIN public.observed_property_type opt ON ((opt.opt_id = bglevel.opt_id)))
     LEFT JOIN public.hoedanigheid_type ON ((opt.hoedanigheid_id = hoedanigheid_type.hdh_id)))
     JOIN eu_stoffenlijst ON (((chs.code)::text = (eu_stoffenlijst.parametercode)::text)))
  WHERE (((hydro_object.hydro_object_type)::text = 'GroundWaterBody'::text) AND (hydro_object.wkrv_id = 13));


--
-- Name: vw_gwpollutant2; Type: VIEW; Schema: wfd_reporting; Owner: -
--

CREATE VIEW vw_gwpollutant2 AS
 WITH gwb_oordeel AS (
         SELECT DISTINCT ON (hdo_gwb.hdo_id, gw_chemical_status.opt_id) hdo_gwb.hdo_id AS gwb_id,
            gwb_yearly_status.year_of_status AS jaar,
            gw_chemical_status.opt_id,
            classification_type.description AS oordeel,
            waarde_bepalings_methode_type.code AS wbpm,
            wfd_qe_gwtype.is_backgroundlevelsubstance AS bglevel
           FROM (((((public.gwb_yearly_status
             LEFT JOIN public.hydro_object hdo_gwb ON ((hdo_gwb.hdo_id = gwb_yearly_status.gwb_id)))
             JOIN public.gw_chemical_status ON ((gw_chemical_status.gys_id = gwb_yearly_status.gys_id)))
             LEFT JOIN public.classification_type ON ((gw_chemical_status.clst_id = classification_type.cls_id)))
             LEFT JOIN public.waarde_bepalings_methode_type ON ((waarde_bepalings_methode_type.wbpm_id = gw_chemical_status.wbpm_id)))
             LEFT JOIN public.wfd_qe_gwtype ON ((gw_chemical_status.opt_id = wfd_qe_gwtype.opt_id)))
          WHERE ((hdo_gwb.wkrv_id = 13) AND (gwb_yearly_status.year_of_status = ANY (ARRAY[2014, 2015])) AND (gw_chemical_status.opt_id < 4000) AND (((classification_type.description)::text = 'Ontoereikend'::text) OR (wfd_qe_gwtype.is_backgroundlevelsubstance = true)))
          ORDER BY hdo_gwb.hdo_id, gw_chemical_status.opt_id, waarde_bepalings_methode_type.code DESC
        ), gwb_trend AS (
         SELECT hdo_gwb.hdo_id AS gwb_id,
            gwb_yearly_status.year_of_status AS jaar,
            pollutant_trend.opt_id,
            pollutant_trend.depth_m,
            classification_type.description AS oordeel
           FROM (((public.gwb_yearly_status
             LEFT JOIN public.hydro_object hdo_gwb ON ((hdo_gwb.hdo_id = gwb_yearly_status.gwb_id)))
             JOIN public.pollutant_trend ON ((pollutant_trend.gwys_id = gwb_yearly_status.gys_id)))
             LEFT JOIN public.classification_type ON ((pollutant_trend.cls_id = classification_type.cls_id)))
          WHERE ((hdo_gwb.wkrv_id = 13) AND (gwb_yearly_status.year_of_status = ANY (ARRAY[2014, 2015])) AND (pollutant_trend.opt_id < 4000) AND ((classification_type.description)::text <> ALL (ARRAY[('Niet stijgend'::character varying)::text, ('Niet bepaald'::character varying)::text])))
        )
 SELECT hydro_object.hdo_id AS db_id,
    ((hydro_object.hdo_id)::text || (gwb_oordeel.opt_id)::text) AS "gWPollutantID",
    hydro_object.inspire_id_local_id AS "euGroundWaterBodyCode",
        CASE
            WHEN (chs.code IS NULL) THEN grh.code
            ELSE chs.code
        END AS "gwPollutantCode",
        CASE
            WHEN ((gwb_oordeel.oordeel)::text = 'Ontoereikend'::text) THEN 'Yes'::text
            ELSE 'No'::text
        END AS "gwPollutantCausingRisk",
        CASE
            WHEN ((gwb_oordeel.oordeel)::text = 'Ontoereikend'::text) THEN 'Yes'::text
            ELSE 'No'::text
        END AS "gwPollutantCausingFailure",
        CASE
            WHEN ((gwb_trend.oordeel)::text = 'Stijgend'::text) THEN 'Yes'::text
            ELSE 'No'::text
        END AS "gwPollutantUpwardTrend",
        CASE
            WHEN ((gwb_trend.oordeel)::text = 'Omgebogen'::text) THEN 'Yes'::text
            ELSE 'No'::text
        END AS "gwPollutantTrendReversal",
    'No'::text AS "gwPollutantsExceedancesNotCounted",
        CASE
            WHEN ((gwb_oordeel.bglevel = true) AND (bglevel.concentration_value IS NOT NULL)) THEN 'Yes'::text
            ELSE 'No'::text
        END AS "gwPollutantBackgroundLevelSet",
        CASE
            WHEN ((gwb_oordeel.bglevel = true) AND (bglevel.concentration_value IS NOT NULL)) THEN bglevel.concentration_value
            ELSE NULL::double precision
        END AS "gwPollutantBackgroundLevelValue",
        CASE
            WHEN ((gwb_oordeel.bglevel = true) AND (bglevel.concentration_value IS NOT NULL)) THEN
            CASE eenheid_type.code
                WHEN 'mg/l'::text THEN
                CASE
                    WHEN ((hoedanigheid_type.code)::text = 'Pnf'::text) THEN 'mg{P}/L'::text
                    WHEN ((hoedanigheid_type.code)::text = 'Nnf'::text) THEN 'mg{N}/L'::text
                    ELSE 'mg/L'::text
                END
                WHEN 'ug/l'::text THEN 'ug/L'::text
                ELSE NULL::text
            END
            ELSE NULL::text
        END AS "gwPollutantBackgroundLevelUnit"
   FROM ((((((((((public.hydro_object
     LEFT JOIN gwb_oordeel ON ((gwb_oordeel.gwb_id = hydro_object.hdo_id)))
     LEFT JOIN gwb_trend ON (((gwb_trend.gwb_id = hydro_object.hdo_id) AND (gwb_trend.opt_id = gwb_oordeel.opt_id))))
     LEFT JOIN public.observed_property_type ON ((observed_property_type.opt_id = gwb_oordeel.opt_id)))
     LEFT JOIN public.substance_group_element sge ON ((sge.ssge_id = observed_property_type.substance_group_id)))
     LEFT JOIN public.chemische_stof_type chs ON ((chs.chs_id = sge.chs_id)))
     LEFT JOIN public.grootheid_type grh ON ((grh.grh_id = observed_property_type.quantity_id)))
     LEFT JOIN public.natural_background_levels bglevel ON (((bglevel.gwb_id = hydro_object.hdo_id) AND (gwb_oordeel.opt_id = bglevel.opt_id))))
     LEFT JOIN public.eenheid_type ON ((bglevel.concentration_uom_id = eenheid_type.eenh_id)))
     LEFT JOIN public.observed_property_type opt ON ((opt.opt_id = bglevel.opt_id)))
     LEFT JOIN public.hoedanigheid_type ON ((opt.hoedanigheid_id = hoedanigheid_type.hdh_id)))
  WHERE (((hydro_object.hydro_object_type)::text = 'GroundWaterBody'::text) AND (hydro_object.wkrv_id = 13));


--
-- Name: vw_ktm; Type: VIEW; Schema: wfd_reporting; Owner: -
--

CREATE VIEW vw_ktm AS
 SELECT DISTINCT ON (rbd.inspire_id_local_id, ktm_enum.eu_xsd) (((rbd.inspire_id_local_id)::text || '-'::text) || "substring"((ktm_enum.eu_xsd)::text, 1, ("position"((ktm_enum.eu_xsd)::text, ' - '::text) - 1))) AS "kTMID",
    rbd.inspire_id_local_id AS "euRBDCode",
    ktm_enum.eu_xsd AS "keyTypeMeasure",
        CASE
            WHEN ("substring"((ktm_enum.eu_xsd)::text, 1, ("position"((ktm_enum.eu_xsd)::text, ' - '::text) - 1)) = 'KTM99'::text) THEN 'No additional information available'::text
            ELSE NULL::text
        END AS "keyTypeMeasureOther"
   FROM ((((public.sw_supp_measure_eu_type
     JOIN public.supp_add_measure_type smnl ON ((smnl.smeu_id = sw_supp_measure_eu_type.smeu_id)))
     FULL JOIN ktm_enum ON ((ktm_enum.smeu_id = smnl.smeu_id)))
     LEFT JOIN public.river_basin_management_plan rbmp ON (((smnl.rbmp_id = rbmp.rbmp_id) AND (rbmp.wkrv_id = 13))))
     JOIN public.hydro_object rbd ON ((rbd.hdo_id = rbmp.rbd_id)))
  ORDER BY rbd.inspire_id_local_id, ktm_enum.eu_xsd;


--
-- Name: vw_linksurfacewaterbodycode; Type: VIEW; Schema: wfd_reporting; Owner: -
--

CREATE VIEW vw_linksurfacewaterbodycode AS
 SELECT gwb.hdo_id,
    gwb.inspire_id_local_id AS "euGroundWaterBodyCode",
    swb.inspire_id_local_id AS "linkSurfaceWaterBodyCode",
    "left"((srbd.inspire_id_local_id)::text, 4) AS rbd
   FROM ((((((public.hydro_object gwb
     JOIN public.water_body gwbd ON ((gwbd.wbd_id = gwb.hdo_id)))
     JOIN public.hydro_object grbd ON (((grbd.hdo_id = gwbd.rbd_id) AND (grbd.wkrv_id = 13))))
     JOIN public.relation_gwb_swb ON ((relation_gwb_swb.gwb_id = gwb.hdo_id)))
     JOIN public.hydro_object swb ON (((relation_gwb_swb.swb_id = swb.hdo_id) AND (swb.wkrv_id = 13))))
     JOIN public.water_body swbd ON ((swbd.wbd_id = swb.hdo_id)))
     JOIN public.hydro_object srbd ON (((srbd.hdo_id = swbd.rbd_id) AND (srbd.wkrv_id = 13) AND ((srbd.hydro_object_type)::text = 'RiverBasinDistrict'::text))))
  WHERE ((gwb.wkrv_id = 13) AND ("left"((srbd.inspire_id_local_id)::text, 4) = "left"((grbd.inspire_id_local_id)::text, 4)));


--
-- Name: vw_measure; Type: VIEW; Schema: wfd_reporting; Owner: -
--

CREATE VIEW vw_measure AS
 SELECT DISTINCT ON (rbd.inspire_id_local_id, smnl.smeu_id, ktm_enum.eu_xsd) ((rbd.inspire_id_local_id)::text || smnl.smeu_id) AS "measureID",
    (((rbd.inspire_id_local_id)::text || '-'::text) || "substring"((ktm_enum.eu_xsd)::text, 1, ("position"((ktm_enum.eu_xsd)::text, ' - '::text) - 1))) AS "kTMID",
    sw_supp_measure_eu_type.code AS "measureCode",
    sw_supp_measure_eu_type.name AS "measureName",
        CASE sw_supp_measure_eu_type.tablkop_sgbp
            WHEN 'aanpak diffuse bronnen'::text THEN 'Basic'::text
            WHEN 'regulering waterbeweging en hydromorfologie'::text THEN 'Basic'::text
            WHEN 'aanvullende maatregelen'::text THEN 'Supplementary'::text
            WHEN 'aanpak puntbronnen'::text THEN 'Basic'::text
            WHEN 'uitvoeren onderzoek'::text THEN 'Supplementary'::text
            WHEN 'wateronttrekking grond- en oppervlaktewater'::text THEN 'Basic'::text
            ELSE 'Basic'::text
        END AS "measureType",
    'No'::text AS "msfdRelevance"
   FROM ((((public.sw_supp_measure_eu_type
     JOIN public.supp_add_measure_type smnl ON ((smnl.smeu_id = sw_supp_measure_eu_type.smeu_id)))
     FULL JOIN ktm_enum ON ((ktm_enum.smeu_id = smnl.smeu_id)))
     LEFT JOIN public.river_basin_management_plan rbmp ON (((smnl.rbmp_id = rbmp.rbmp_id) AND (rbmp.wkrv_id = 13))))
     JOIN public.hydro_object rbd ON ((rbd.hdo_id = rbmp.rbd_id)))
  ORDER BY rbd.inspire_id_local_id, smnl.smeu_id, ktm_enum.eu_xsd;


--
-- Name: vw_measure_basicmeasuretype; Type: VIEW; Schema: wfd_reporting; Owner: -
--

CREATE VIEW vw_measure_basicmeasuretype AS
 WITH measure AS (
         SELECT DISTINCT ON (rbd.inspire_id_local_id, smnl.smeu_id, ktm_enum.eu_xsd) smnl.smeu_id,
            ((rbd.inspire_id_local_id)::text || smnl.smeu_id) AS "measureID",
            (((rbd.inspire_id_local_id)::text || '-'::text) || "substring"((ktm_enum.eu_xsd)::text, 1, ("position"((ktm_enum.eu_xsd)::text, ' - '::text) - 1))) AS "kTMID",
            sw_supp_measure_eu_type.code AS "measureCode",
            sw_supp_measure_eu_type.name AS "measureName",
                CASE sw_supp_measure_eu_type.tablkop_sgbp
                    WHEN 'aanpak diffuse bronnen'::text THEN 'Basic'::text
                    WHEN 'regulering waterbeweging en hydromorfologie'::text THEN 'Basic'::text
                    WHEN 'aanvullende maatregelen'::text THEN 'Supplementary'::text
                    WHEN 'aanpak puntbronnen'::text THEN 'Basic'::text
                    WHEN 'uitvoeren onderzoek'::text THEN 'Supplementary'::text
                    WHEN 'wateronttrekking grond- en oppervlaktewater'::text THEN 'Basic'::text
                    ELSE 'Basic'::text
                END AS "measureType",
            'No' AS "msfdRelevance"
           FROM ((((public.sw_supp_measure_eu_type
             JOIN public.supp_add_measure_type smnl ON ((smnl.smeu_id = sw_supp_measure_eu_type.smeu_id)))
             FULL JOIN ktm_enum ON ((ktm_enum.smeu_id = smnl.smeu_id)))
             LEFT JOIN public.river_basin_management_plan rbmp ON (((smnl.rbmp_id = rbmp.rbmp_id) AND (rbmp.wkrv_id = 13))))
             JOIN public.hydro_object rbd ON ((rbd.hdo_id = rbmp.rbd_id)))
          ORDER BY rbd.inspire_id_local_id, smnl.smeu_id, ktm_enum.eu_xsd
        ), basics AS (
         SELECT sw_supp_measure_eu_type.smeu_id,
                CASE sw_supp_measure_eu_type.tablkop_sgbp
                    WHEN 'aanpak diffuse bronnen'::text THEN 'Pollutants diffuse'::text
                    WHEN 'regulering waterbeweging en hydromorfologie'::text THEN 'Hydromorphology'::text
                    WHEN 'aanpak puntbronnen'::text THEN 'Point source discharges'::text
                    WHEN 'wateronttrekking grond- en oppervlaktewater'::text THEN 'Controls water abstraction'::text
                    ELSE NULL::text
                END AS basic
           FROM public.sw_supp_measure_eu_type
        UNION
         SELECT sw_supp_measure_eu_type.smeu_id,
                CASE sw_supp_measure_eu_type.tablkop_sgbp
                    WHEN 'aanpak puntbronnen'::text THEN 'Pollutants direct groundwater'::text
                    WHEN 'wateronttrekking grond- en oppervlaktewater'::text THEN 'Recharge augmentation groundwaters'::text
                    ELSE NULL::text
                END AS basic
           FROM public.sw_supp_measure_eu_type
        UNION
         SELECT sw_supp_measure_eu_type.smeu_id,
                CASE sw_supp_measure_eu_type.tablkop_sgbp
                    WHEN 'wateronttrekking grond- en oppervlaktewater'::text THEN 'Protection water abstraction'::text
                    ELSE NULL::text
                END AS basic
           FROM public.sw_supp_measure_eu_type
        ), basics2 AS (
         SELECT DISTINCT ON (basics.smeu_id, basics.basic) basics.smeu_id,
            basics.basic
           FROM basics
          WHERE (basics.basic IS NOT NULL)
          ORDER BY basics.smeu_id, basics.basic
        )
 SELECT DISTINCT ON (measure."measureID", basics2.basic) measure."measureID",
    basics2.basic AS "basicMeasureType"
   FROM (basics2
     JOIN measure ON (((measure.smeu_id = basics2.smeu_id) AND (measure."measureID" IS NOT NULL))))
  WHERE (basics2.basic IS NOT NULL)
  ORDER BY measure."measureID", basics2.basic;


--
-- Name: vw_monitoringpurpose; Type: VIEW; Schema: wfd_reporting; Owner: -
--

CREATE VIEW vw_monitoringpurpose AS
 SELECT DISTINCT ON (mpn.mpnident) 'CHE - Chemical status'::text AS "monitoringPurpose",
        CASE
            WHEN ((mpn.montype)::text = 'ow'::text) THEN ("left"((mpn.sgb)::text, 4) || '_MONPROG_OW'::text)
            ELSE ("left"((mpn.sgb)::text, 4) || '_MONPROG_GW'::text)
        END AS "euProgrammeCode",
        CASE
            WHEN ("substring"((mpn.mpnident)::text, 1, 2) <> 'NL'::text) THEN ('NL_'::text || (mpn.mpnident)::text)
            ELSE (mpn.mpnident)::text
        END AS "euMonitoringSiteCode"
   FROM eu_state_of_environment.monprog_2015 mpn
  WHERE ((mpn.purpose)::text = 'chemie'::text)
UNION ALL
 SELECT DISTINCT ON (mpn.mpnident) 'DRI - Groundwater abstraction site for human consumption'::text AS "monitoringPurpose",
        CASE
            WHEN ((mpn.montype)::text = 'ow'::text) THEN ("left"((mpn.sgb)::text, 4) || '_MONPROG_OW'::text)
            ELSE ("left"((mpn.sgb)::text, 4) || '_MONPROG_GW'::text)
        END AS "euProgrammeCode",
        CASE
            WHEN ("substring"((mpn.mpnident)::text, 1, 2) <> 'NL'::text) THEN ('NL_'::text || (mpn.mpnident)::text)
            ELSE (mpn.mpnident)::text
        END AS "euMonitoringSiteCode"
   FROM eu_state_of_environment.monprog_2015 mpn
  WHERE ((mpn.purpose)::text = 'drinkwater'::text)
UNION ALL
 SELECT DISTINCT ON (mpn.mpnident) 'ECO - Ecological status'::text AS "monitoringPurpose",
        CASE
            WHEN ((mpn.montype)::text = 'ow'::text) THEN ("left"((mpn.sgb)::text, 4) || '_MONPROG_OW'::text)
            ELSE ("left"((mpn.sgb)::text, 4) || '_MONPROG_GW'::text)
        END AS "euProgrammeCode",
        CASE
            WHEN ("substring"((mpn.mpnident)::text, 1, 2) <> 'NL'::text) THEN ('NL_'::text || (mpn.mpnident)::text)
            ELSE (mpn.mpnident)::text
        END AS "euMonitoringSiteCode"
   FROM eu_state_of_environment.monprog_2015 mpn
  WHERE ((mpn.purpose)::text = 'ecologie'::text)
UNION ALL
 SELECT DISTINCT ON (mpn.mpnident) 'OPE - Operational monitoring'::text AS "monitoringPurpose",
        CASE
            WHEN ((mpn.montype)::text = 'ow'::text) THEN ("left"((mpn.sgb)::text, 4) || '_MONPROG_OW'::text)
            ELSE ("left"((mpn.sgb)::text, 4) || '_MONPROG_GW'::text)
        END AS "euProgrammeCode",
        CASE
            WHEN ("substring"((mpn.mpnident)::text, 1, 2) <> 'NL'::text) THEN ('NL_'::text || (mpn.mpnident)::text)
            ELSE (mpn.mpnident)::text
        END AS "euMonitoringSiteCode"
   FROM eu_state_of_environment.monprog_2015 mpn
  WHERE ((mpn.monsoort)::text = 'OM'::text)
UNION ALL
 SELECT DISTINCT ON (mpn.mpnident) 'QUA - Quantitative status'::text AS "monitoringPurpose",
        CASE
            WHEN ((mpn.montype)::text = 'ow'::text) THEN ("left"((mpn.sgb)::text, 4) || '_MONPROG_OW'::text)
            ELSE ("left"((mpn.sgb)::text, 4) || '_MONPROG_GW'::text)
        END AS "euProgrammeCode",
        CASE
            WHEN ("substring"((mpn.mpnident)::text, 1, 2) <> 'NL'::text) THEN ('NL_'::text || (mpn.mpnident)::text)
            ELSE (mpn.mpnident)::text
        END AS "euMonitoringSiteCode"
   FROM eu_state_of_environment.monprog_2015 mpn
  WHERE ((mpn.purpose)::text = 'kwantiteit'::text)
UNION ALL
 SELECT DISTINCT ON (mpn.mpnident) 'SUR - Surveillance monitoring'::text AS "monitoringPurpose",
        CASE
            WHEN ((mpn.montype)::text = 'ow'::text) THEN ("left"((mpn.sgb)::text, 4) || '_MONPROG_OW'::text)
            ELSE ("left"((mpn.sgb)::text, 4) || '_MONPROG_GW'::text)
        END AS "euProgrammeCode",
        CASE
            WHEN ("substring"((mpn.mpnident)::text, 1, 2) <> 'NL'::text) THEN ('NL_'::text || (mpn.mpnident)::text)
            ELSE (mpn.mpnident)::text
        END AS "euMonitoringSiteCode"
   FROM eu_state_of_environment.monprog_2015 mpn
  WHERE ((mpn.monsoort)::text = 'TT'::text)
UNION ALL
 SELECT DISTINCT ON (mpn.mpnident) 'SOE - EIONET State of Environment monitoring'::text AS "monitoringPurpose",
        CASE
            WHEN ((mpn.montype)::text = 'ow'::text) THEN ("left"((mpn.sgb)::text, 4) || '_MONPROG_OW'::text)
            ELSE ("left"((mpn.sgb)::text, 4) || '_MONPROG_GW'::text)
        END AS "euProgrammeCode",
        CASE
            WHEN ("substring"((mpn.mpnident)::text, 1, 2) <> 'NL'::text) THEN ('NL_'::text || (mpn.mpnident)::text)
            ELSE (mpn.mpnident)::text
        END AS "euMonitoringSiteCode"
   FROM eu_state_of_environment.monprog_2015 mpn
  WHERE (("left"((mpn.mpnident)::text, 3) = ANY (ARRAY['NL8'::text, 'NL9'::text])) AND ("left"((mpn.mpnident)::text, 4) <> 'NL99'::text))
UNION ALL
 SELECT DISTINCT ON (mpn.mpnident) 'TRE - Chemical trend assessment'::text AS "monitoringPurpose",
        CASE
            WHEN ((mpn.montype)::text = 'ow'::text) THEN ("left"((mpn.sgb)::text, 4) || '_MONPROG_OW'::text)
            ELSE ("left"((mpn.sgb)::text, 4) || '_MONPROG_GW'::text)
        END AS "euProgrammeCode",
        CASE
            WHEN ("substring"((mpn.mpnident)::text, 1, 2) <> 'NL'::text) THEN ('NL_'::text || (mpn.mpnident)::text)
            ELSE (mpn.mpnident)::text
        END AS "euMonitoringSiteCode"
   FROM eu_state_of_environment.monprog_2015 mpn
  WHERE (((mpn.purpose)::text = 'chemie'::text) AND ((mpn.montype)::text = 'gw'::text))
  ORDER BY 3;


--
-- Name: vw_monitoringsite; Type: VIEW; Schema: wfd_reporting; Owner: -
--

CREATE VIEW vw_monitoringsite AS
 WITH mpn AS (
         SELECT DISTINCT ON (monprog_2015.mpnident) monprog_2015.mpnident,
            monprog_2015.ligt_in_owm,
                CASE
                    WHEN ((monprog_2015.rd_x IS NULL) OR (monprog_2015.rd_x = (0)::double precision)) THEN ((155000)::numeric)::double precision
                    ELSE monprog_2015.rd_x
                END AS rd_x,
                CASE
                    WHEN ((monprog_2015.rd_y IS NULL) OR (monprog_2015.rd_x = (0)::double precision)) THEN ((463000)::numeric)::double precision
                    ELSE monprog_2015.rd_y
                END AS rd_y,
            monprog_2015.parameter,
            monprog_2015.monfreq,
            monprog_2015.moncyclus,
            monprog_2015.monsoort,
            monprog_2015.repr_owm,
            monprog_2015.mpntype,
            monprog_2015.diepte,
            monprog_2015.montype,
            monprog_2015.sinds,
            monprog_2015.tot,
            monprog_2015.naam,
            monprog_2015.purpose,
            monprog_2015.sgb
           FROM eu_state_of_environment.monprog_2015
          ORDER BY monprog_2015.mpnident
        ), chem AS (
         SELECT DISTINCT ON (monprog_2015.mpnident) monprog_2015.mpnident
           FROM eu_state_of_environment.monprog_2015
          WHERE ((monprog_2015.purpose)::text = ANY (ARRAY[('chemie'::character varying)::text, ('drinkwater'::character varying)::text]))
          ORDER BY monprog_2015.mpnident
        ), ecol AS (
         SELECT DISTINCT ON (monprog_2015.mpnident) monprog_2015.mpnident
           FROM eu_state_of_environment.monprog_2015
          WHERE ((monprog_2015.purpose)::text = 'ecologie'::text)
          ORDER BY monprog_2015.mpnident
        ), kwant AS (
         SELECT DISTINCT ON (monprog_2015.mpnident) monprog_2015.mpnident,
            monprog_2015.monfreq,
            monprog_2015.moncyclus,
            monprog_2015.sinds,
            monprog_2015.tot
           FROM eu_state_of_environment.monprog_2015
          WHERE ((monprog_2015.purpose)::text = 'kwantiteit'::text)
          ORDER BY monprog_2015.mpnident
        )
 SELECT
        CASE
            WHEN ("substring"((mpn.mpnident)::text, 1, 2) <> 'NL'::text) THEN ('NL_'::text || (mpn.mpnident)::text)
            ELSE (mpn.mpnident)::text
        END AS "euMonitoringSiteCode",
    mpn.naam AS "euMonitoringSiteName",
    (mpn.ligt_in_owm)::text AS "euWaterBodyCode",
        CASE "left"((swt.code)::text, 1)
            WHEN 'K'::text THEN 'CW'::text
            WHEN 'O'::text THEN 'TW'::text
            WHEN 'M'::text THEN 'LW'::text
            WHEN 'R'::text THEN 'RW'::text
            ELSE 'GW'::text
        END AS "waterCategory",
        CASE
            WHEN ((mpn.montype)::text = 'ow'::text) THEN
            CASE
                WHEN (ecol.mpnident IS NOT NULL) THEN 'Yes'::text
                ELSE 'No'::text
            END
            ELSE 'Not applicable'::text
        END AS "ecologicalMonitoring",
        CASE
            WHEN (chem.mpnident IS NOT NULL) THEN 'Yes'::text
            ELSE 'No'::text
        END AS "chemicalMonitoring",
        CASE
            WHEN ((mpn.montype)::text <> 'ow'::text) THEN
            CASE
                WHEN (kwant.mpnident IS NOT NULL) THEN 'Yes'::text
                ELSE 'No'::text
            END
            ELSE 'Not applicable'::text
        END AS "quantitativeMonitoring",
    kwant.monfreq AS "quantitativeFrequency",
    kwant.moncyclus AS "quantitativeCycle",
    kwant.tot AS "quantitativeLastMonitored",
        CASE
            WHEN ((mpn.montype)::text = 'ow'::text) THEN NULL::text
            ELSE
            CASE
                WHEN ((mpn.mpntype)::text = 'bron'::text) THEN 'Spring'::text
                ELSE 'Well'::text
            END
        END AS "wellSpring",
        CASE
            WHEN ((mpn.montype)::text = 'ow'::text) THEN NULL::text
            ELSE
            CASE mpn.diepte
                WHEN 'Ondiep'::text THEN 'Upper'::text
                WHEN 'ondiep'::text THEN 'Upper'::text
                WHEN 'medium'::text THEN 'Medium'::text
                WHEN 'diep'::text THEN 'Lower'::text
                WHEN 'zeer diep'::text THEN 'Lower'::text
                ELSE 'Mixed'::text
            END
        END AS depth,
    mpn.sgb AS "euRBDCode"
   FROM ((((mpn
     LEFT JOIN (public.hydro_object hdo
     JOIN (public.surface_water_body swb
     JOIN public.sw_typology_type swt ON ((swt.styp_id = swb.sw_typology_id))) ON ((swb.swb_id = hdo.hdo_id))) ON ((((hdo.inspire_id_local_id)::text = (mpn.ligt_in_owm)::text) AND (hdo.wkrv_id = 13) AND ((hdo.hydro_object_type)::text = 'SurfaceWaterBody'::text))))
     LEFT JOIN chem ON (((chem.mpnident)::text = (mpn.mpnident)::text)))
     LEFT JOIN ecol ON (((ecol.mpnident)::text = (mpn.mpnident)::text)))
     LEFT JOIN kwant ON (((kwant.mpnident)::text = (mpn.mpnident)::text)));


--
-- Name: vw_quality_element_missing; Type: VIEW; Schema: wfd_reporting; Owner: -
--

CREATE VIEW vw_quality_element_missing AS
 SELECT missing_qe.qetype,
    hydro_object.inspire_id_local_id
   FROM missing_qe,
    public.hydro_object
  WHERE ((hydro_object.wkrv_id = 13) AND ((hydro_object.hydro_object_type)::text = 'SurfaceWaterBody'::text))
  ORDER BY hydro_object.inspire_id_local_id;


--
-- Name: vw_qualityelement; Type: VIEW; Schema: wfd_reporting; Owner: -
--

CREATE VIEW vw_qualityelement AS
 WITH oordeel_2015 AS (
         SELECT DISTINCT ON (swb.swb_id, ses.opt_id) swb.swb_id,
            ses.opt_id,
            ses.wbpm_id,
            hydro_object.inspire_id_local_id,
            ses.swes_id AS cls_id,
            swb.sw_target_typology_id
           FROM (((public.surface_water_body swb
             LEFT JOIN public.hydro_object ON ((hydro_object.hdo_id = swb.swb_id)))
             LEFT JOIN public.swb_yearly_status ON (((swb.swb_id = swb_yearly_status.swb_id) AND (swb_yearly_status.year_of_status = 2015))))
             LEFT JOIN public.sw_ecological_status ses ON (((ses.sys_id = swb_yearly_status.sys_id) AND (ses.opt_id = ANY (ARRAY[579, 3685, 4212, 3841, 3773, 619, 2948, 4507, 4515, 4521, 4482, 632])))))
          WHERE ((ses.eumg_id = 3) AND (hydro_object.wkrv_id = 13))
        UNION ALL
         SELECT DISTINCT ON (swb.swb_id, ses.opt_id) swb.swb_id,
            ses.opt_id,
            ses.wbpm_id,
            hydro_object.inspire_id_local_id,
            ses.swcs_id AS cls_id,
            swb.sw_target_typology_id
           FROM (((public.surface_water_body swb
             LEFT JOIN public.hydro_object ON ((hydro_object.hdo_id = swb.swb_id)))
             LEFT JOIN public.swb_yearly_status ON (((swb.swb_id = swb_yearly_status.swb_id) AND (swb_yearly_status.year_of_status = 2015))))
             LEFT JOIN public.sw_chemical_substance_status ses ON (((ses.sys_id = swb_yearly_status.sys_id) AND (ses.opt_id = 4519))))
          WHERE ((ses.eumg_id = 3) AND (hydro_object.wkrv_id = 13))
  ORDER BY 1, 2, 3 DESC
        ), oordeel_qe_2015 AS (
         SELECT swb.swb_id,
            wfd_qe_swtype.opt_id,
            ((swb.swb_id)::text || (wfd_qe_swtype.opt_id)::text) AS "qualityElementID",
            hydro_object.inspire_id_local_id AS "euSurfaceWaterBodyCode",
                CASE wfd_qe_swtype.opt_id
                    WHEN 579 THEN 'QE3-1-4 - Salinity conditions'::text
                    WHEN 619 THEN 'QE3-1-6-1 - Nitrogen conditions'::text
                    WHEN 2948 THEN 'QE3-1-6-1 - Nitrogen conditions'::text
                    WHEN 3685 THEN 'QE3-1-5 - Acidification status'::text
                    WHEN 4212 THEN 'QE3-1-3 - Oxygenation conditions'::text
                    WHEN 3841 THEN 'QE3-1-1 - Transparency conditions'::text
                    WHEN 3773 THEN 'QE3-1-2 - Thermal conditions'::text
                    WHEN 4519 THEN 'QE3-3 - River Basin Specific Pollutants'::text
                    WHEN 4507 THEN 'QE1-3 – Benthic invertebrates'::text
                    WHEN 4515 THEN 'QE1-2 - Other aquatic flora'::text
                    WHEN 4521 THEN 'QE1-4 - Fish'::text
                    WHEN 4482 THEN 'QE1-1 - Phytoplankton'::text
                    WHEN 632 THEN 'QE3-1-6-2 - Phosphorus Conditions'::text
                    ELSE NULL::text
                END AS "qeCode",
                CASE
                    WHEN (wfd_qe_swtype.is_applicable IS TRUE) THEN (
                    CASE
                        WHEN ((classification_type.code)::integer = ANY (ARRAY[1, 2, 3, 4, 5])) THEN
                        CASE
                            WHEN (wfd_qe_swtype.opt_id = ANY (ARRAY[579, 3685, 4212, 3841, 3773, 4519, 619, 2948, 632])) THEN
                            CASE
                                WHEN ((classification_type.code)::integer > 3) THEN ((3)::text)::character varying
                                ELSE classification_type.code
                            END
                            ELSE classification_type.code
                        END
                        ELSE 'Unknown'::character varying
                    END)::text
                    ELSE 'Not applicable'::text
                END AS "qeStatusOrPotentialValue",
                CASE
                    WHEN ((wfd_qe_swtype.is_applicable IS TRUE) AND (oordeel_2015.wbpm_id IS NOT NULL)) THEN
                    CASE
                        WHEN (oordeel_2015.wbpm_id = 1) THEN 'Monitoring'::text
                        ELSE 'Expert judgement'::text
                    END
                    ELSE NULL::text
                END AS "qeMonitoringResults",
                CASE
                    WHEN ((wfd_qe_swtype.is_applicable IS TRUE) AND (oordeel_2015.wbpm_id IS NOT NULL)) THEN
                    CASE
                        WHEN (oordeel_2015.wbpm_id = 1) THEN '2009-2014'::text
                        ELSE NULL::text
                    END
                    ELSE NULL::text
                END AS "qeMonitoringPeriod",
                CASE
                    WHEN (wfd_qe_swtype.is_applicable IS TRUE) THEN (
                    CASE
                        WHEN ((classification_type.code)::integer = ANY (ARRAY[1, 2, 3, 4, 5])) THEN
                        CASE
                            WHEN (wfd_qe_swtype.opt_id = ANY (ARRAY[579, 3685, 4212, 3841, 3773, 4519, 619, 2948, 632])) THEN
                            CASE
                                WHEN ((classification_type.code)::integer > 3) THEN ((3)::text)::character varying
                                ELSE classification_type.code
                            END
                            ELSE classification_type.code
                        END
                        ELSE '0'::character varying
                    END)::text
                    ELSE '6'::text
                END AS cls_code
           FROM ((((public.surface_water_body swb
             LEFT JOIN public.hydro_object ON ((hydro_object.hdo_id = swb.swb_id)))
             LEFT JOIN public.wfd_qe_swtype ON (((swb.sw_target_typology_id = wfd_qe_swtype.swt_id) AND (wfd_qe_swtype.opt_id <> ALL (ARRAY[4477, 4520, 4480, 4476, 4479, 5892, 5893, 5891, 4514])))))
             LEFT JOIN oordeel_2015 ON (((oordeel_2015.swb_id = swb.swb_id) AND (oordeel_2015.opt_id = wfd_qe_swtype.opt_id))))
             LEFT JOIN public.classification_type ON ((classification_type.cls_id = oordeel_2015.cls_id)))
          WHERE (hydro_object.wkrv_id = 13)
        ), qe_2015 AS (
         SELECT DISTINCT ON (oordeel_qe_2015_1."euSurfaceWaterBodyCode", oordeel_qe_2015_1."qeCode") oordeel_qe_2015_1.swb_id,
            oordeel_qe_2015_1.opt_id AS "qualityElementID",
            oordeel_qe_2015_1."euSurfaceWaterBodyCode",
            oordeel_qe_2015_1."qeCode",
            oordeel_qe_2015_1."qeStatusOrPotentialValue",
            oordeel_qe_2015_1."qeMonitoringResults",
            oordeel_qe_2015_1."qeMonitoringPeriod",
            oordeel_qe_2015_1.cls_code
           FROM oordeel_qe_2015 oordeel_qe_2015_1
          ORDER BY oordeel_qe_2015_1."euSurfaceWaterBodyCode", oordeel_qe_2015_1."qeCode", oordeel_qe_2015_1.cls_code
        ), oordeel_2009 AS (
         SELECT DISTINCT ON (swb.swb_id, ses.opt_id) swb.swb_id,
            ses.opt_id,
            ses.wbpm_id,
            hydro_object.inspire_id_local_id,
            ses.swes_id AS cls_id,
            swb.sw_target_typology_id
           FROM (((public.surface_water_body swb
             LEFT JOIN public.hydro_object ON ((hydro_object.hdo_id = swb.swb_id)))
             LEFT JOIN public.swb_yearly_status ON (((swb.swb_id = swb_yearly_status.swb_id) AND (swb_yearly_status.year_of_status = 2009))))
             LEFT JOIN public.sw_ecological_status ses ON (((ses.sys_id = swb_yearly_status.sys_id) AND (ses.opt_id = ANY (ARRAY[579, 3685, 4212, 3841, 3773, 619, 2948, 4507, 4515, 4521, 4482, 632])))))
          WHERE ((ses.eumg_id = 3) AND (hydro_object.wkrv_id = 2))
        UNION ALL
         SELECT DISTINCT ON (swb.swb_id, ses.opt_id) swb.swb_id,
            ses.opt_id,
            ses.wbpm_id,
            hydro_object.inspire_id_local_id,
            ses.swcs_id AS cls_id,
            swb.sw_target_typology_id
           FROM (((public.surface_water_body swb
             LEFT JOIN public.hydro_object ON ((hydro_object.hdo_id = swb.swb_id)))
             LEFT JOIN public.swb_yearly_status ON (((swb.swb_id = swb_yearly_status.swb_id) AND (swb_yearly_status.year_of_status = 2009))))
             LEFT JOIN public.sw_chemical_substance_status ses ON (((ses.sys_id = swb_yearly_status.sys_id) AND (ses.opt_id = 4519))))
          WHERE ((ses.eumg_id = 3) AND (hydro_object.wkrv_id = 2))
  ORDER BY 1, 2, 3 DESC
        ), oordeel_qe_2009 AS (
         SELECT swb.swb_id,
            wfd_qe_swtype.opt_id,
            ((swb.swb_id)::text || (wfd_qe_swtype.opt_id)::text) AS "qualityElementID",
            hydro_object.inspire_id_local_id AS "euSurfaceWaterBodyCode",
                CASE wfd_qe_swtype.opt_id
                    WHEN 579 THEN 'QE3-1-4 - Salinity conditions'::text
                    WHEN 619 THEN 'QE3-1-6-1 - Nitrogen conditions'::text
                    WHEN 2948 THEN 'QE3-1-6-1 - Nitrogen conditions'::text
                    WHEN 3685 THEN 'QE3-1-5 - Acidification status'::text
                    WHEN 4212 THEN 'QE3-1-3 - Oxygenation conditions'::text
                    WHEN 3841 THEN 'QE3-1-1 - Transparency conditions'::text
                    WHEN 3773 THEN 'QE3-1-2 - Thermal conditions'::text
                    WHEN 4519 THEN 'QE3-3 - River Basin Specific Pollutants'::text
                    WHEN 4507 THEN 'QE1-3 – Benthic invertebrates'::text
                    WHEN 4515 THEN 'QE1-2 - Other aquatic flora'::text
                    WHEN 4521 THEN 'QE1-4 - Fish'::text
                    WHEN 4482 THEN 'QE1-1 - Phytoplankton'::text
                    WHEN 632 THEN 'QE3-1-6-2 - Phosphorus Conditions'::text
                    ELSE NULL::text
                END AS "qeCode",
                CASE
                    WHEN (wfd_qe_swtype.is_applicable IS TRUE) THEN (
                    CASE
                        WHEN ((classification_type.code)::integer = ANY (ARRAY[1, 2, 3, 4, 5])) THEN
                        CASE
                            WHEN (wfd_qe_swtype.opt_id = ANY (ARRAY[579, 3685, 4212, 3841, 3773, 4519, 619, 2948, 632])) THEN
                            CASE
                                WHEN ((classification_type.code)::integer > 3) THEN ((3)::text)::character varying
                                ELSE classification_type.code
                            END
                            ELSE classification_type.code
                        END
                        ELSE 'Unknown'::character varying
                    END)::text
                    ELSE 'Not applicable'::text
                END AS "qeStatusOrPotentialValue",
                CASE
                    WHEN (wfd_qe_swtype.is_applicable IS TRUE) THEN
                    CASE
                        WHEN (oordeel_2009.wbpm_id = 1) THEN 'Monitoring'::text
                        ELSE 'Expert judgement'::text
                    END
                    ELSE NULL::text
                END AS "qeMonitoringResults",
                CASE
                    WHEN (wfd_qe_swtype.is_applicable IS TRUE) THEN
                    CASE
                        WHEN (oordeel_2009.wbpm_id = 1) THEN '2009-2014'::text
                        ELSE NULL::text
                    END
                    ELSE NULL::text
                END AS "qeMonitoringPeriod",
                CASE
                    WHEN (wfd_qe_swtype.is_applicable IS TRUE) THEN (
                    CASE
                        WHEN ((classification_type.code)::integer = ANY (ARRAY[1, 2, 3, 4, 5])) THEN
                        CASE
                            WHEN (wfd_qe_swtype.opt_id = ANY (ARRAY[579, 3685, 4212, 3841, 3773, 4519, 619, 2948, 632])) THEN
                            CASE
                                WHEN ((classification_type.code)::integer > 3) THEN ((3)::text)::character varying
                                ELSE classification_type.code
                            END
                            ELSE classification_type.code
                        END
                        ELSE '0'::character varying
                    END)::text
                    ELSE '6'::text
                END AS cls_code
           FROM ((((public.surface_water_body swb
             LEFT JOIN public.hydro_object ON ((hydro_object.hdo_id = swb.swb_id)))
             LEFT JOIN public.wfd_qe_swtype ON (((swb.sw_target_typology_id = wfd_qe_swtype.swt_id) AND (wfd_qe_swtype.opt_id <> ALL (ARRAY[4477, 4520, 4480, 4476, 4479, 5892, 5893, 5891, 4514])))))
             LEFT JOIN oordeel_2009 ON (((oordeel_2009.swb_id = swb.swb_id) AND (oordeel_2009.opt_id = wfd_qe_swtype.opt_id))))
             LEFT JOIN public.classification_type ON ((classification_type.cls_id = oordeel_2009.cls_id)))
          WHERE (hydro_object.wkrv_id = 2)
        ), qe_2009 AS (
         SELECT DISTINCT ON (oordeel_qe_2009_1."euSurfaceWaterBodyCode", oordeel_qe_2009_1."qeCode") oordeel_qe_2009_1.swb_id,
            oordeel_qe_2009_1.opt_id,
            oordeel_qe_2009_1."qualityElementID",
            oordeel_qe_2009_1."euSurfaceWaterBodyCode",
            oordeel_qe_2009_1."qeCode",
            oordeel_qe_2009_1."qeStatusOrPotentialValue",
            oordeel_qe_2009_1."qeMonitoringResults",
            oordeel_qe_2009_1."qeMonitoringPeriod",
            oordeel_qe_2009_1.cls_code
           FROM oordeel_qe_2009 oordeel_qe_2009_1
          ORDER BY oordeel_qe_2009_1."euSurfaceWaterBodyCode", oordeel_qe_2009_1."qeCode", oordeel_qe_2009_1.cls_code
        )
 SELECT DISTINCT ON (oordeel_qe_2015."euSurfaceWaterBodyCode", oordeel_qe_2015."qeCode") oordeel_qe_2015."qualityElementID",
    oordeel_qe_2015."euSurfaceWaterBodyCode",
    oordeel_qe_2015."qeCode",
    oordeel_qe_2015."qeStatusOrPotentialValue",
    oordeel_qe_2015."qeMonitoringResults",
    oordeel_qe_2015."qeMonitoringPeriod",
        CASE
            WHEN ((oordeel_qe_2009.cls_code IS NULL) OR ((oordeel_qe_2009.cls_code)::integer = 0)) THEN 'Unknown2010'::text
            ELSE
            CASE
                WHEN ((oordeel_qe_2015.cls_code IS NULL) OR ((oordeel_qe_2015.cls_code)::integer = 0) OR ((oordeel_qe_2015.cls_code)::integer = 6)) THEN NULL::text
                ELSE
                CASE ((oordeel_qe_2015.cls_code)::integer - (oordeel_qe_2009.cls_code)::integer)
                    WHEN 1 THEN '+1'::text
                    ELSE 'oeps'::text
                END
            END
        END AS "qeStatusOrPotentialChange",
        CASE
            WHEN ((oordeel_qe_2009.cls_code IS NULL) OR ((oordeel_qe_2009.cls_code)::integer = 0)) THEN NULL::text
            ELSE
            CASE
                WHEN ((oordeel_qe_2015.cls_code IS NULL) OR ((oordeel_qe_2015.cls_code)::integer = 0) OR ((oordeel_qe_2015.cls_code)::integer = 6)) THEN NULL::text
                ELSE
                CASE
                    WHEN (((oordeel_qe_2015.cls_code)::integer - (oordeel_qe_2009.cls_code)::integer) = 0) THEN NULL::text
                    ELSE
                    CASE scm.scm_id
                        WHEN 1 THEN 'Consistent change'::text
                        WHEN 2 THEN 'Inconsistent due to changes to monitoring'::text
                        WHEN 3 THEN 'Inconsistent due to changes to assessment methods'::text
                        WHEN 4 THEN 'Inconsistent due to changes to monitoring and assessment methods'::text
                        ELSE 'No information or unknown'::text
                    END
                END
            END
        END AS "qeStatusOrPotentialComparability"
   FROM ((((oordeel_qe_2015
     LEFT JOIN public.related_hydro_object rho ON (((rho.from_hdo = oordeel_qe_2015.swb_id) AND (rho.rrt_id = 9))))
     LEFT JOIN public.wb_status_change_motivation wsc ON (((wsc.wbd_id = oordeel_qe_2015.swb_id) AND (wsc.opt_id = oordeel_qe_2015.opt_id) AND (wsc.year_status = 2015) AND (wsc.year_initial = 2009))))
     LEFT JOIN domains.status_change_motivation_type scm ON ((wsc.scm_id = scm.scm_id)))
     LEFT JOIN oordeel_qe_2009 ON (((oordeel_qe_2009.swb_id = rho.to_hdo) AND (oordeel_qe_2009.opt_id = oordeel_qe_2015.opt_id))))
  ORDER BY oordeel_qe_2015."euSurfaceWaterBodyCode", oordeel_qe_2015."qeCode", oordeel_qe_2015."qeStatusOrPotentialValue";


--
-- Name: vw_qualityelement_qexecologicalexemptiontype; Type: VIEW; Schema: wfd_reporting; Owner: -
--

CREATE VIEW vw_qualityelement_qexecologicalexemptiontype AS
 WITH oordeel_2015 AS (
         SELECT DISTINCT ON (swb.swb_id, ses.opt_id) swb.swb_id,
            ses.opt_id,
            ses.wbpm_id,
            hydro_object.inspire_id_local_id,
            ses.swes_id AS cls_id,
            swb.sw_target_typology_id
           FROM (((public.surface_water_body swb
             LEFT JOIN public.hydro_object ON ((hydro_object.hdo_id = swb.swb_id)))
             LEFT JOIN public.swb_yearly_status ON (((swb.swb_id = swb_yearly_status.swb_id) AND (swb_yearly_status.year_of_status = 2015))))
             LEFT JOIN public.sw_ecological_status ses ON (((ses.sys_id = swb_yearly_status.sys_id) AND (ses.opt_id = ANY (ARRAY[579, 3685, 4212, 3841, 3773, 619, 2948, 4507, 4515, 4521, 4482, 632])))))
          WHERE ((ses.eumg_id = 3) AND (hydro_object.wkrv_id = 13))
        UNION ALL
         SELECT DISTINCT ON (swb.swb_id, ses.opt_id) swb.swb_id,
            ses.opt_id,
            ses.wbpm_id,
            hydro_object.inspire_id_local_id,
            ses.swcs_id AS cls_id,
            swb.sw_target_typology_id
           FROM (((public.surface_water_body swb
             LEFT JOIN public.hydro_object ON ((hydro_object.hdo_id = swb.swb_id)))
             LEFT JOIN public.swb_yearly_status ON (((swb.swb_id = swb_yearly_status.swb_id) AND (swb_yearly_status.year_of_status = 2015))))
             LEFT JOIN public.sw_chemical_substance_status ses ON (((ses.sys_id = swb_yearly_status.sys_id) AND (ses.opt_id = 4519))))
          WHERE ((ses.eumg_id = 3) AND (hydro_object.wkrv_id = 13))
  ORDER BY 1, 2, 3 DESC
        ), oordeel_qe_2015 AS (
         SELECT swb.swb_id,
            wfd_qe_swtype.opt_id,
            ((swb.swb_id)::text || (wfd_qe_swtype.opt_id)::text) AS "qualityElementID",
            hydro_object.inspire_id_local_id AS "euSurfaceWaterBodyCode",
                CASE wfd_qe_swtype.opt_id
                    WHEN 579 THEN 'QE3-1-4 - Salinity conditions'::text
                    WHEN 619 THEN 'QE3-1-6-1 - Nitrogen conditions'::text
                    WHEN 2948 THEN 'QE3-1-6-1 - Nitrogen conditions'::text
                    WHEN 3685 THEN 'QE3-1-5 - Acidification status'::text
                    WHEN 4212 THEN 'QE3-1-3 - Oxygenation conditions'::text
                    WHEN 3841 THEN 'QE3-1-1 - Transparency conditions'::text
                    WHEN 3773 THEN 'QE3-1-2 - Thermal conditions'::text
                    WHEN 4519 THEN 'QE3-3 - River Basin Specific Pollutants'::text
                    WHEN 4507 THEN 'QE1-2-4 - Phytobenthos'::text
                    WHEN 4515 THEN 'QE1-2 - Other aquatic flora'::text
                    WHEN 4521 THEN 'QE1-4 - Fish'::text
                    WHEN 4482 THEN 'QE1-1 - Phytoplankton'::text
                    WHEN 632 THEN 'QE3-1-6-2 - Phosphorus Conditions'::text
                    ELSE NULL::text
                END AS "qeCode",
                CASE
                    WHEN (wfd_qe_swtype.is_applicable IS TRUE) THEN (
                    CASE
                        WHEN ((classification_type.code)::integer = ANY (ARRAY[1, 2, 3, 4, 5])) THEN
                        CASE
                            WHEN (wfd_qe_swtype.opt_id = ANY (ARRAY[579, 3685, 4212, 3841, 3773, 4519, 619, 2948, 632])) THEN
                            CASE
                                WHEN ((classification_type.code)::integer > 3) THEN ((3)::text)::character varying
                                ELSE classification_type.code
                            END
                            ELSE classification_type.code
                        END
                        ELSE '0'::character varying
                    END)::text
                    ELSE '6'::text
                END AS cls_code
           FROM ((((public.surface_water_body swb
             LEFT JOIN public.hydro_object ON ((hydro_object.hdo_id = swb.swb_id)))
             LEFT JOIN public.wfd_qe_swtype ON (((swb.sw_target_typology_id = wfd_qe_swtype.swt_id) AND (wfd_qe_swtype.opt_id <> ALL (ARRAY[4477, 4520, 4480, 4476, 4479, 5892, 5893, 5891, 4514])))))
             LEFT JOIN oordeel_2015 ON (((oordeel_2015.swb_id = swb.swb_id) AND (oordeel_2015.opt_id = wfd_qe_swtype.opt_id))))
             LEFT JOIN public.classification_type ON ((classification_type.cls_id = oordeel_2015.cls_id)))
          WHERE (hydro_object.wkrv_id = 13)
        ), qe_2015 AS (
         SELECT DISTINCT ON (oordeel_qe_2015_1."euSurfaceWaterBodyCode", oordeel_qe_2015_1."qeCode") oordeel_qe_2015_1.swb_id,
            oordeel_qe_2015_1.opt_id,
            oordeel_qe_2015_1.opt_id AS "qualityElementID",
            oordeel_qe_2015_1."euSurfaceWaterBodyCode",
            oordeel_qe_2015_1."qeCode",
            oordeel_qe_2015_1.cls_code
           FROM oordeel_qe_2015 oordeel_qe_2015_1
          ORDER BY oordeel_qe_2015_1."euSurfaceWaterBodyCode", oordeel_qe_2015_1."qeCode", oordeel_qe_2015_1.cls_code
        ), oordeel_2009 AS (
         SELECT DISTINCT ON (swb.swb_id, ses.opt_id) swb.swb_id,
            ses.opt_id,
            ses.wbpm_id,
            hydro_object.inspire_id_local_id,
            ses.swes_id AS cls_id,
            swb.sw_target_typology_id
           FROM (((public.surface_water_body swb
             LEFT JOIN public.hydro_object ON ((hydro_object.hdo_id = swb.swb_id)))
             LEFT JOIN public.swb_yearly_status ON (((swb.swb_id = swb_yearly_status.swb_id) AND (swb_yearly_status.year_of_status = 2009))))
             LEFT JOIN public.sw_ecological_status ses ON (((ses.sys_id = swb_yearly_status.sys_id) AND (ses.opt_id = ANY (ARRAY[579, 3685, 4212, 3841, 3773, 619, 2948, 4507, 4515, 4521, 4482, 632])))))
          WHERE ((ses.eumg_id = 3) AND (hydro_object.wkrv_id = 2))
        UNION ALL
         SELECT DISTINCT ON (swb.swb_id, ses.opt_id) swb.swb_id,
            ses.opt_id,
            ses.wbpm_id,
            hydro_object.inspire_id_local_id,
            ses.swcs_id AS cls_id,
            swb.sw_target_typology_id
           FROM (((public.surface_water_body swb
             LEFT JOIN public.hydro_object ON ((hydro_object.hdo_id = swb.swb_id)))
             LEFT JOIN public.swb_yearly_status ON (((swb.swb_id = swb_yearly_status.swb_id) AND (swb_yearly_status.year_of_status = 2009))))
             LEFT JOIN public.sw_chemical_substance_status ses ON (((ses.sys_id = swb_yearly_status.sys_id) AND (ses.opt_id = 4519))))
          WHERE ((ses.eumg_id = 3) AND (hydro_object.wkrv_id = 2))
  ORDER BY 1, 2, 3 DESC
        ), oordeel_qe_2009 AS (
         SELECT swb.swb_id,
            wfd_qe_swtype.opt_id,
            ((swb.swb_id)::text || (wfd_qe_swtype.opt_id)::text) AS "qualityElementID",
            hydro_object.inspire_id_local_id AS "euSurfaceWaterBodyCode",
                CASE wfd_qe_swtype.opt_id
                    WHEN 579 THEN 'QE3-1-4 - Salinity conditions'::text
                    WHEN 619 THEN 'QE3-1-6-1 - Nitrogen conditions'::text
                    WHEN 2948 THEN 'QE3-1-6-1 - Nitrogen conditions'::text
                    WHEN 3685 THEN 'QE3-1-5 - Acidification status'::text
                    WHEN 4212 THEN 'QE3-1-3 - Oxygenation conditions'::text
                    WHEN 3841 THEN 'QE3-1-1 - Transparency conditions'::text
                    WHEN 3773 THEN 'QE3-1-2 - Thermal conditions'::text
                    WHEN 4519 THEN 'QE3-3 - River Basin Specific Pollutants'::text
                    WHEN 4507 THEN 'QE1-3 – Benthic invertebrates'::text
                    WHEN 4515 THEN 'QE1-2 - Other aquatic flora'::text
                    WHEN 4521 THEN 'QE1-4 - Fish'::text
                    WHEN 4482 THEN 'QE1-1 - Phytoplankton'::text
                    WHEN 632 THEN 'QE3-1-6-2 - Phosphorus Conditions'::text
                    ELSE NULL::text
                END AS "qeCode",
                CASE
                    WHEN (wfd_qe_swtype.is_applicable IS TRUE) THEN (
                    CASE
                        WHEN ((classification_type.code)::integer = ANY (ARRAY[1, 2, 3, 4, 5])) THEN
                        CASE
                            WHEN (wfd_qe_swtype.opt_id = ANY (ARRAY[579, 3685, 4212, 3841, 3773, 4519, 619, 2948, 632])) THEN
                            CASE
                                WHEN ((classification_type.code)::integer > 3) THEN ((3)::text)::character varying
                                ELSE classification_type.code
                            END
                            ELSE classification_type.code
                        END
                        ELSE 'Unknown'::character varying
                    END)::text
                    ELSE 'Not applicable'::text
                END AS "qeStatusOrPotentialValue",
                CASE
                    WHEN (wfd_qe_swtype.is_applicable IS TRUE) THEN
                    CASE
                        WHEN (oordeel_2009.wbpm_id = 1) THEN 'Monitoring'::text
                        ELSE 'Expert judgement'::text
                    END
                    ELSE NULL::text
                END AS "qeMonitoringResults",
                CASE
                    WHEN (wfd_qe_swtype.is_applicable IS TRUE) THEN
                    CASE
                        WHEN (oordeel_2009.wbpm_id = 1) THEN '2009-2014'::text
                        ELSE NULL::text
                    END
                    ELSE NULL::text
                END AS "qeMonitoringPeriod",
                CASE
                    WHEN (wfd_qe_swtype.is_applicable IS TRUE) THEN (
                    CASE
                        WHEN ((classification_type.code)::integer = ANY (ARRAY[1, 2, 3, 4, 5])) THEN
                        CASE
                            WHEN (wfd_qe_swtype.opt_id = ANY (ARRAY[579, 3685, 4212, 3841, 3773, 4519, 619, 2948, 632])) THEN
                            CASE
                                WHEN ((classification_type.code)::integer > 3) THEN ((3)::text)::character varying
                                ELSE classification_type.code
                            END
                            ELSE classification_type.code
                        END
                        ELSE '0'::character varying
                    END)::text
                    ELSE '6'::text
                END AS cls_code
           FROM ((((public.surface_water_body swb
             LEFT JOIN public.hydro_object ON ((hydro_object.hdo_id = swb.swb_id)))
             LEFT JOIN public.wfd_qe_swtype ON (((swb.sw_target_typology_id = wfd_qe_swtype.swt_id) AND (wfd_qe_swtype.opt_id <> ALL (ARRAY[4477, 4520, 4480, 4476, 4479, 5892, 5893, 5891, 4514])))))
             LEFT JOIN oordeel_2009 ON (((oordeel_2009.swb_id = swb.swb_id) AND (oordeel_2009.opt_id = wfd_qe_swtype.opt_id))))
             LEFT JOIN public.classification_type ON ((classification_type.cls_id = oordeel_2009.cls_id)))
          WHERE (hydro_object.wkrv_id = 2)
        ), qe_2009 AS (
         SELECT DISTINCT ON (oordeel_qe_2009_1."euSurfaceWaterBodyCode", oordeel_qe_2009_1."qeCode") oordeel_qe_2009_1.swb_id,
            oordeel_qe_2009_1.opt_id,
            oordeel_qe_2009_1."qualityElementID",
            oordeel_qe_2009_1."euSurfaceWaterBodyCode",
            oordeel_qe_2009_1."qeCode",
            oordeel_qe_2009_1."qeStatusOrPotentialValue",
            oordeel_qe_2009_1."qeMonitoringResults",
            oordeel_qe_2009_1."qeMonitoringPeriod",
            oordeel_qe_2009_1.cls_code
           FROM oordeel_qe_2009 oordeel_qe_2009_1
          ORDER BY oordeel_qe_2009_1."euSurfaceWaterBodyCode", oordeel_qe_2009_1."qeCode", oordeel_qe_2009_1.cls_code
        )
 SELECT DISTINCT ON (oordeel_qe_2015.swb_id, oordeel_qe_2015.opt_id, gwce.obex_id) oordeel_qe_2015."qualityElementID",
        CASE
            WHEN (objectives_exemption_type.description IS NULL) THEN 'No exemption'::text
            ELSE objectives_exemption_type.description
        END AS "qeEcologicalExemptionType"
   FROM (((((oordeel_qe_2015
     LEFT JOIN public.related_hydro_object rho ON (((rho.from_hdo = oordeel_qe_2015.swb_id) AND (rho.rrt_id = 9))))
     LEFT JOIN public.swb_exemption gwce ON ((gwce.swb_id = oordeel_qe_2015.swb_id)))
     LEFT JOIN public.swb_ecol_exemp_qe gce ON (((gce.swce_id = gwce.swce_id) AND ((oordeel_qe_2015.opt_id = gce.opt_id) OR (gce.opt_id = ANY (ARRAY[4479, 4480, 4476, 4514]))))))
     LEFT JOIN public.objectives_exemption_type ON ((objectives_exemption_type.obex_id = gwce.obex_id)))
     LEFT JOIN oordeel_qe_2009 ON (((oordeel_qe_2009.swb_id = rho.to_hdo) AND (oordeel_qe_2009.opt_id = oordeel_qe_2015.opt_id))))
  WHERE ((oordeel_qe_2015.cls_code)::integer <> ALL (ARRAY[0, 1, 6]))
  ORDER BY oordeel_qe_2015.swb_id, oordeel_qe_2015.opt_id, gwce.obex_id;


--
-- Name: vw_rbd; Type: VIEW; Schema: wfd_reporting; Owner: -
--

CREATE VIEW vw_rbd AS
 WITH ktypen AS (
         SELECT surface_water_body.area_value,
            water_body.rbd_id,
            "left"((hydro_object.inspire_id_local_id)::text, 4) AS rbd,
            sw_typology_type.code
           FROM public.water_body,
            public.surface_water_body,
            public.sw_typology_type,
            public.hydro_object
          WHERE ((water_body.wbd_id = surface_water_body.swb_id) AND (sw_typology_type.styp_id = surface_water_body.sw_typology_id) AND (hydro_object.hdo_id = water_body.rbd_id) AND ((sw_typology_type.code)::text ~~ 'K%'::text) AND (hydro_object.wkrv_id = 13))
        ), ktypen_opp AS (
         SELECT ktypen.rbd,
            ((10)::double precision * floor((sum(ktypen.area_value) / (10)::double precision))) AS opp
           FROM ktypen
          GROUP BY ktypen.rbd
        )
 SELECT hdo.inspire_id_local_id AS "euRBDCode",
    hdo.hdo_id AS "rBDSUCAID",
        CASE hdo_names.name
            WHEN 'Eems'::text THEN 'Dutch Ems'::text
            WHEN 'Maas'::text THEN 'Dutch Meuse'::text
            WHEN 'Rijn'::text THEN 'Dutch Rhine'::text
            WHEN 'Schelde'::text THEN 'Dutch Scheldt'::text
            ELSE 'oeps'::text
        END AS "rbdName",
    rbd.area_value AS "rbdArea",
        CASE
            WHEN (ktypen_opp.opp IS NULL) THEN rbd.area_value
            ELSE (rbd.area_value - ktypen_opp.opp)
        END AS "rbdAreaExclCW",
    'Yes'::text AS "internationalRBD",
        CASE hdo_names.name
            WHEN 'Eems'::text THEN 'Ems'::text
            WHEN 'Maas'::text THEN 'Meuse'::text
            WHEN 'Rijn'::text THEN 'Rhine'::text
            WHEN 'Schelde'::text THEN 'Scheldt'::text
            ELSE 'oeps'::text
        END AS "internationalRBDName",
    'No'::text AS "subUnitsDefined",
    'NL_MINIM'::text AS "primeCompetentAuthority"
   FROM (((public.hydro_object hdo
     LEFT JOIN public.hdo_names ON ((hdo_names.hdo_id = hdo.hdo_id)))
     LEFT JOIN public.river_basin_disrict rbd ON ((hdo.hdo_id = rbd.rbd_id)))
     LEFT JOIN ktypen_opp ON ((ktypen_opp.rbd = (hdo.inspire_id_local_id)::text)))
  WHERE ((hdo.wkrv_id = 13) AND (length((hdo.inspire_id_local_id)::text) = 4) AND ((hdo.hydro_object_type)::text = 'RiverBasinDistrict'::text));


--
-- Name: vw_rbd_othercompetentauthority; Type: VIEW; Schema: wfd_reporting; Owner: -
--

CREATE VIEW vw_rbd_othercompetentauthority AS
 SELECT DISTINCT ON (("left"((rbd.inspire_id_local_id)::text, 4)), organisatorische_eenheid.organisatie_identificatie) "left"((rbd.inspire_id_local_id)::text, 4) AS "euRBDCode",
    organisatorische_eenheid.organisatie_identificatie AS "otherCompetentAuthority"
   FROM public.hydro_object,
    public.organisatorische_eenheid,
    public.competent_authority,
    public.competentauthority_namespacetype,
    public.namespace_type,
    public.water_body,
    public.hydro_object rbd
  WHERE ((competent_authority.ore_id = organisatorische_eenheid.ore_id) AND (competentauthority_namespacetype.ore_id = competent_authority.ore_id) AND (competentauthority_namespacetype.ns_id = namespace_type.ns_id) AND (namespace_type.ns_id = hydro_object.inspire_id_namespace) AND (water_body.wbd_id = hydro_object.hdo_id) AND (rbd.hdo_id = water_body.rbd_id) AND (hydro_object.wkrv_id = 13) AND ((organisatorische_eenheid.organisatie_identificatie)::text <> 'NL_MINIM'::text))
  ORDER BY ("left"((rbd.inspire_id_local_id)::text, 4)), organisatorische_eenheid.organisatie_identificatie;


--
-- Name: vw_surfacewaterbody; Type: VIEW; Schema: wfd_reporting; Owner: -
--

CREATE VIEW vw_surfacewaterbody AS
 WITH mpn AS (
         SELECT DISTINCT ON (mpn.repr_owm, mpn.ligt_in_owm) mpn.repr_owm,
            mpn.ligt_in_owm
           FROM eu_state_of_environment.monprog_2015 mpn
          WHERE (((mpn.montype)::text = 'ow'::text) AND ((mpn.parameter)::text <> ALL (ARRAY[('STIJGHTE'::character varying)::text, ('Ntot'::character varying)::text, ('Ptot'::character varying)::text, ('Nanorg'::character varying)::text, ('O'::character varying)::text, ('Cl'::character varying)::text, ('FYTOBEN'::character varying)::text, ('FYTOPL'::character varying)::text, ('VIS'::character varying)::text, ('OVWFLORA'::character varying)::text, ('STOFOV'::character varying)::text, ('MAFAUNA'::character varying)::text, ('ZICHT'::character varying)::text, ('pH'::character varying)::text, ('SALNTT'::character varying)::text, ('STORPR'::character varying)::text, ('CHEMT'::character varying)::text, ('NO2'::character varying)::text, ('NO3'::character varying)::text, ('NH4'::character varying)::text, ('NKj'::character varying)::text])) AND ((mpn.parameter)::text !~~ 'HMF%'::text) AND ((mpn.ligt_in_owm)::text <> (mpn.repr_owm)::text))
          ORDER BY mpn.repr_owm
        ), mpn2 AS (
         SELECT mpn.repr_owm,
                CASE
                    WHEN (hdo_f.inspire_id_local_id IS NULL) THEN mpn.ligt_in_owm
                    ELSE hdo_f.inspire_id_local_id
                END AS ligt_in
           FROM ((mpn
             JOIN public.hydro_object hdo_r ON ((((mpn.repr_owm)::text = (hdo_r.inspire_id_local_id)::text) AND (hdo_r.wkrv_id = 13) AND ((hdo_r.hydro_object_type)::text = ANY (ARRAY[('SurfaceWaterBody'::character varying)::text, ('GroundWaterBody'::character varying)::text])))))
             LEFT JOIN (public.hydro_object hdo_t
             JOIN (public.related_hydro_object rho
             JOIN public.hydro_object hdo_f ON (((hdo_f.hdo_id = rho.from_hdo) AND ((hdo_f.hydro_object_type)::text = ANY (ARRAY[('SurfaceWaterBody'::character varying)::text, ('GroundWaterBody'::character varying)::text]))))) ON (((rho.to_hdo = hdo_t.hdo_id) AND (rho.rrt_id = 2) AND (hdo_f.wkrv_id = 13)))) ON ((((hdo_t.inspire_id_local_id)::text = (mpn.ligt_in_owm)::text) AND (hdo_t.wkrv_id = 2) AND ((hdo_t.hydro_object_type)::text = ANY (ARRAY[('SurfaceWaterBody'::character varying)::text, ('GroundWaterBody'::character varying)::text])))))
          WHERE (((hdo_f.inspire_id_local_id)::text <> (mpn.repr_owm)::text) AND (hdo_f.inspire_id_local_id IS NOT NULL))
        ), "grouping" AS (
         SELECT DISTINCT ON (mpn2.repr_owm) mpn2.repr_owm,
            mpn2.ligt_in
           FROM mpn2
          ORDER BY mpn2.repr_owm
        ), swb_prot AS (
         SELECT DISTINCT ON (wpi.wbd_id) wpi.wbd_id
           FROM public.waterbody_protected_area_intersection wpi,
            public.wfd_protected_area,
            public.hydro_object hydro_object_1
          WHERE ((wfd_protected_area.wpa_id = wpi.wpa_id) AND (wfd_protected_area.protected_area_type_id = ANY (ARRAY[1, 4])) AND (hydro_object_1.hdo_id = wpi.wbd_id) AND (hydro_object_1.wkrv_id = 13) AND ((hydro_object_1.hydro_object_type)::text = 'SurfaceWaterBody'::text))
          ORDER BY wpi.wbd_id
        ), swb_oordeel AS (
         SELECT DISTINCT ON (hdo_swb.hdo_id, swb_yearly_status.year_of_status, sw_chemical_substance_status.opt_id) hdo_swb.hdo_id AS swb_id,
            swb_yearly_status.year_of_status AS jaar,
            sw_chemical_substance_status.opt_id,
            classification_type.description AS oordeel,
            waarde_bepalings_methode_type.code AS wbpm
           FROM (((((public.swb_yearly_status
             LEFT JOIN public.hydro_object hdo_swb ON ((hdo_swb.hdo_id = swb_yearly_status.swb_id)))
             JOIN public.sw_chemical_substance_status ON ((sw_chemical_substance_status.sys_id = swb_yearly_status.sys_id)))
             LEFT JOIN public.classification_type ON ((sw_chemical_substance_status.swcs_id = classification_type.cls_id)))
             LEFT JOIN public.vw_waargenomen_eigenschap ON ((vw_waargenomen_eigenschap."DB_ID" = sw_chemical_substance_status.opt_id)))
             LEFT JOIN public.waarde_bepalings_methode_type ON ((waarde_bepalings_methode_type.wbpm_id = sw_chemical_substance_status.wbpm_id)))
          WHERE ((hdo_swb.wkrv_id = 13) AND (swb_yearly_status.year_of_status = 2015) AND (sw_chemical_substance_status.opt_id = 4477))
        UNION ALL
         SELECT DISTINCT ON (hdo_swb.hdo_id, swb_yearly_status.year_of_status, sw_ecological_status.opt_id) hdo_swb.hdo_id AS swb_id,
            swb_yearly_status.year_of_status AS jaar,
            sw_ecological_status.opt_id,
            classification_type.description AS oordeel,
            waarde_bepalings_methode_type.code AS wbpm
           FROM (((((public.swb_yearly_status
             LEFT JOIN public.hydro_object hdo_swb ON ((hdo_swb.hdo_id = swb_yearly_status.swb_id)))
             JOIN public.sw_ecological_status ON ((sw_ecological_status.sys_id = swb_yearly_status.sys_id)))
             LEFT JOIN public.classification_type ON ((sw_ecological_status.swes_id = classification_type.cls_id)))
             LEFT JOIN public.vw_waargenomen_eigenschap ON ((vw_waargenomen_eigenschap."DB_ID" = sw_ecological_status.opt_id)))
             LEFT JOIN public.waarde_bepalings_methode_type ON ((waarde_bepalings_methode_type.wbpm_id = sw_ecological_status.wbpm_id)))
          WHERE ((hdo_swb.wkrv_id = 13) AND (swb_yearly_status.year_of_status = 2015) AND (sw_ecological_status.opt_id = 4479))
  ORDER BY 1, 2, 3, 5 DESC
        ), pressure AS (
         SELECT DISTINCT ON (hydro_object_1.hdo_id, spe.eu_xsd) hydro_object_1.hdo_id AS db_id,
            hydro_object_1.inspire_id_local_id AS "euSurfaceWaterBodyCode",
                CASE
                    WHEN (spe.eu_xsd IS NULL) THEN 'No significant pressure'::text
                    ELSE spe.eu_xsd
                END AS pressure_type
           FROM ((public.hydro_object hydro_object_1
             LEFT JOIN public.swb_pressure ON ((hydro_object_1.hdo_id = swb_pressure.swb_id)))
             LEFT JOIN significant_pressure_enum spe ON (((spe.sw_p_id = swb_pressure.sprs_id) AND (spe.eu_xsd ~~ '7 - %'::text))))
          WHERE ((swb_pressure.is_significant = true) AND (hydro_object_1.wkrv_id = 13))
          ORDER BY hydro_object_1.hdo_id, spe.eu_xsd
        ), swb_oordeel_i AS (
         SELECT DISTINCT ON (swb_oordeel.swb_id) swb_oordeel.swb_id,
            swb_oordeel.jaar,
            swb_oordeel.oordeel,
            swb_oordeel.wbpm
           FROM swb_oordeel
          ORDER BY swb_oordeel.swb_id, swb_oordeel.oordeel DESC
        ), impact AS (
         SELECT DISTINCT ON (hydro_object_1.hdo_id, ipe.eu_xsd) hydro_object_1.hdo_id AS db_id,
                CASE
                    WHEN (ipe.eu_xsd IS NULL) THEN
                    CASE
                        WHEN (((swb_oordeel_i.oordeel)::text = 'voldoet'::text) OR ((swb_oordeel_i.oordeel)::text = 'goed'::text) OR ((swb_oordeel_i.oordeel)::text = 'zeer goed'::text)) THEN 'NOSI - No significant impact'::text
                        ELSE 'UNKN - Unknown impact type'::text
                    END
                    ELSE ipe.eu_xsd
                END AS impact_type
           FROM ((((public.hydro_object hydro_object_1
             LEFT JOIN public.swb_pressure ON (((hydro_object_1.hdo_id = swb_pressure.swb_id) AND (swb_pressure.is_significant = true))))
             LEFT JOIN public.swb_pressure_impact ON ((swb_pressure.swbp_id = swb_pressure_impact.swbp_id)))
             LEFT JOIN significant_impact_enum ipe ON (((ipe.i_id = swb_pressure_impact.impact_id) AND (ipe.eu_xsd ~~ 'OTHE%'::text))))
             LEFT JOIN swb_oordeel_i ON ((swb_oordeel_i.swb_id = hydro_object_1.hdo_id)))
          WHERE ((hydro_object_1.wkrv_id = 13) AND ((hydro_object_1.hydro_object_type)::text = 'SurfaceWaterBody'::text))
          ORDER BY hydro_object_1.hdo_id, ipe.eu_xsd
        )
 SELECT hydro_object.hdo_id AS db_id,
    hydro_object.inspire_id_local_id AS "euSurfaceWaterBodyCode",
    "left"((hdo_rbd.inspire_id_local_id)::text, 4) AS "euRBDCode",
    NULL::text AS "euSubUnitCode",
    hdo_names.name AS "surfacewaterBodyName",
        CASE "left"((stt.code)::text, 1)
            WHEN 'K'::text THEN 'CW'::text
            WHEN 'O'::text THEN 'TW'::text
            WHEN 'M'::text THEN 'LW'::text
            WHEN 'R'::text THEN 'RW'::text
            ELSE 'oeps'::text
        END AS "surfaceWaterBodyTypeCategory",
        CASE
            WHEN (surface_water_body.is_artificial = true) THEN 'Artificial'::text
            WHEN (surface_water_body.is_heaviliy_modified = true) THEN 'Heavily Modified'::text
            ELSE 'Natural'::text
        END AS "naturalAWBHMWB",
        CASE
            WHEN (surface_water_body.is_heaviliy_modified = true) THEN 'No'::text
            ELSE NULL::text
        END AS reservoir,
    stt.code AS "surfaceWaterBodyTypeCode",
    icalt.eu_xsd AS "surfaceWaterBodyIntercalibrationType",
    'No'::text AS "surfaceWaterBodyTransboundary",
        CASE
            WHEN (gpb.wbd_id IS NULL) THEN 'False'::text
            ELSE 'True'::text
        END AS "swAssociatedProtectedArea",
        CASE
            WHEN (pressure.pressure_type ~~ '7 - %'::text) THEN surface_water_body.other_pressure_description
            ELSE NULL::character varying
        END AS "swSignificantPressureOther",
        CASE
            WHEN (impact.impact_type ~~ 'OTHE%'::text) THEN 'No further details available'::text
            ELSE NULL::text
        END AS "swSignificantImpactOther",
        CASE goq.oordeel
            WHEN 'goed'::text THEN 2
            WHEN 'matig'::text THEN 3
            WHEN 'ontoereikend'::text THEN 4
            ELSE 5
        END AS "swEcologicalStatusOrPotentialValue",
    '2009-2014'::text AS "swEcologicalAssessmentYear",
        CASE goq.wbpm
            WHEN 'AQUOKIT'::text THEN 3
            ELSE 2
        END AS "swEcologicalAssessmentConfidence",
        CASE
            WHEN ((goq.oordeel)::text = 'goed'::text) THEN 'Yes'::text
            ELSE 'No'::text
        END AS "swEcologicalStatusExpectedGoodIn2015",
        CASE
            WHEN ((goq.oordeel)::text = 'goed'::text) THEN NULL::text
            ELSE
            CASE
                WHEN (spe2021.cls_id = 4) THEN '2016-2021'::text
                ELSE
                CASE
                    WHEN ((spe2027.cls_id = 4) OR (spe2027.cls_id IS NULL)) THEN '2022-2027'::text
                    ELSE 'Beyond 2027'::text
                END
            END
        END AS "swEcologicalStatusExpectedAchievementDate",
        CASE
            WHEN (ups.local_id IS NULL) THEN
            CASE
                WHEN ((goc.oordeel)::text = 'voldoet'::text) THEN 2
                ELSE 3
            END
            ELSE 1
        END AS "swChemicalStatusValue",
    '2009-2014'::text AS "swChemicalAssessmentYear",
        CASE
            WHEN (ups.local_id IS NULL) THEN
            CASE goq.wbpm
                WHEN 'AQUOKIT'::text THEN 3
                ELSE 2
            END
            ELSE NULL::integer
        END AS "swChemicalAssessmentConfidence",
        CASE
            WHEN ((goq.wbpm)::text = 'DESK'::text) THEN 'Expert judgement'::text
            ELSE
            CASE
                WHEN ("grouping".repr_owm IS NULL) THEN 'Monitoring'::text
                ELSE 'Grouping'::text
            END
        END AS swchemicalmonitoringresults,
        CASE
            WHEN ((goc.oordeel)::text = 'voldoet'::text) THEN 'Yes'::text
            ELSE 'No'::text
        END AS "swChemicalStatusExpectedGoodIn2015",
        CASE
            WHEN ((goc.oordeel)::text = 'voldoet'::text) THEN NULL::text
            ELSE
            CASE
                WHEN (spc2021.cls_id = 1) THEN '2016-2021'::text
                ELSE
                CASE
                    WHEN ((spc2027.cls_id = 1) OR (spc2027.cls_id IS NULL)) THEN '2022-2027'::text
                    ELSE 'Beyond 2027'::text
                END
            END
        END AS "swChemicalStatusExpectedAchievementDate",
    'No'::text AS "swMixingZones",
    NULL::integer AS "swMixingZonesProportion"
   FROM ((((((((((((((((((public.hydro_object
     LEFT JOIN public.hdo_names ON ((hdo_names.hdo_id = hydro_object.hdo_id)))
     JOIN public.water_body ON ((water_body.wbd_id = hydro_object.hdo_id)))
     JOIN public.surface_water_body ON ((surface_water_body.swb_id = hydro_object.hdo_id)))
     JOIN public.sw_typology_type stt ON ((stt.styp_id = surface_water_body.sw_typology_id)))
     JOIN public.river_basin_disrict rbd ON ((rbd.rbd_id = water_body.rbd_id)))
     JOIN public.hydro_object hdo_rbd ON ((rbd.rbd_id = hdo_rbd.hdo_id)))
     LEFT JOIN swb_prot gpb ON ((gpb.wbd_id = hydro_object.hdo_id)))
     LEFT JOIN public.wb_prognosis spe2021 ON (((spe2021.swb_id = hydro_object.hdo_id) AND (spe2021.opt_id = 4479) AND (spe2021.year = 2021))))
     LEFT JOIN public.wb_prognosis spe2027 ON (((spe2027.swb_id = hydro_object.hdo_id) AND (spe2027.opt_id = 4479) AND (spe2027.year = 2027))))
     LEFT JOIN public.wb_prognosis spc2021 ON (((spc2021.swb_id = hydro_object.hdo_id) AND (spc2021.opt_id = 4477) AND (spc2021.year = 2021))))
     LEFT JOIN public.wb_prognosis spc2027 ON (((spc2027.swb_id = hydro_object.hdo_id) AND (spc2027.opt_id = 4477) AND (spc2027.year = 2027))))
     LEFT JOIN swb_oordeel goc ON (((goc.swb_id = hydro_object.hdo_id) AND (goc.opt_id = 4477))))
     LEFT JOIN swb_oordeel goq ON (((goq.swb_id = hydro_object.hdo_id) AND (goq.opt_id = 4479))))
     LEFT JOIN pressure ON (((pressure.db_id = hydro_object.hdo_id) AND (pressure.pressure_type ~~ '7 - %'::text))))
     LEFT JOIN impact ON (((impact.db_id = hydro_object.hdo_id) AND (impact.impact_type ~~ 'OTHE%'::text))))
     LEFT JOIN public.eu_intercalibration_type icalt ON ((icalt.icalt = stt.icalt_id)))
     LEFT JOIN swb_unknown_ps ups ON (((hydro_object.inspire_id_local_id)::text = (ups.local_id)::text)))
     LEFT JOIN "grouping" ON ((("grouping".repr_owm)::text = (hydro_object.inspire_id_local_id)::text)))
  WHERE (((hydro_object.hydro_object_type)::text = 'SurfaceWaterBody'::text) AND (hydro_object.wkrv_id = 13))
  ORDER BY hydro_object.inspire_id_local_id;


--
-- Name: vw_surfacewaterbody_hmwbphysicalalteration; Type: VIEW; Schema: wfd_reporting; Owner: -
--

CREATE VIEW vw_surfacewaterbody_hmwbphysicalalteration AS
 SELECT hydro_object.inspire_id_local_id AS "euSurfaceWaterBodyCode",
    physical_alteration_type.remark AS "hmwbPhysicalAlteration"
   FROM public.hydro_object,
    public.swb_physical_alteration,
    public.physical_alteration_type
  WHERE ((swb_physical_alteration.swb_id = hydro_object.hdo_id) AND (physical_alteration_type.pat_id = swb_physical_alteration.pat_id) AND (hydro_object.wkrv_id = 13))
  ORDER BY hydro_object.inspire_id_local_id;


--
-- Name: vw_surfacewaterbody_hmwbwateruse; Type: VIEW; Schema: wfd_reporting; Owner: -
--

CREATE VIEW vw_surfacewaterbody_hmwbwateruse AS
 SELECT hydro_object.inspire_id_local_id AS "euSurfaceWaterBodyCode",
        CASE eu_function_43a_type.fu43_id
            WHEN 1 THEN 'Wider environment - nature protection and other ecological uses'::text
            WHEN 2 THEN 'Transport - navigation / ports'::text
            WHEN 3 THEN 'Other'::text
            WHEN 4 THEN 'Flood protection'::text
            WHEN 5 THEN 'Other'::text
            ELSE 'oeps'::text
        END AS "hmwbWaterUse"
   FROM public.swb_measures_43a,
    public.hydro_object,
    public.eu_function_43a_type
  WHERE ((hydro_object.hdo_id = swb_measures_43a.swb_id) AND (eu_function_43a_type.fu43_id = swb_measures_43a.fu43_id) AND (hydro_object.wkrv_id = 13));


--
-- Name: vw_surfacewaterbody_swchemicalstatusgrouping; Type: VIEW; Schema: wfd_reporting; Owner: -
--

CREATE VIEW vw_surfacewaterbody_swchemicalstatusgrouping AS
 WITH mpn AS (
         SELECT DISTINCT ON (mpn.repr_owm, mpn.ligt_in_owm) mpn.repr_owm,
            mpn.ligt_in_owm
           FROM eu_state_of_environment.monprog_2015 mpn
          WHERE (((mpn.montype)::text = 'ow'::text) AND ((mpn.parameter)::text <> ALL (ARRAY[('STIJGHTE'::character varying)::text, ('Ntot'::character varying)::text, ('Ptot'::character varying)::text, ('Nanorg'::character varying)::text, ('O'::character varying)::text, ('Cl'::character varying)::text, ('FYTOBEN'::character varying)::text, ('FYTOPL'::character varying)::text, ('VIS'::character varying)::text, ('OVWFLORA'::character varying)::text, ('STOFOV'::character varying)::text, ('MAFAUNA'::character varying)::text, ('ZICHT'::character varying)::text, ('pH'::character varying)::text, ('SALNTT'::character varying)::text, ('STORPR'::character varying)::text, ('CHEMT'::character varying)::text, ('NO2'::character varying)::text, ('NO3'::character varying)::text, ('NH4'::character varying)::text, ('NKj'::character varying)::text])) AND ((mpn.parameter)::text !~~ 'HMF%'::text) AND ((mpn.ligt_in_owm)::text <> (mpn.repr_owm)::text))
          ORDER BY mpn.repr_owm
        ), mpn2 AS (
         SELECT mpn.repr_owm,
                CASE
                    WHEN (hdo_f.inspire_id_local_id IS NULL) THEN mpn.ligt_in_owm
                    ELSE hdo_f.inspire_id_local_id
                END AS ligt_in
           FROM ((mpn
             JOIN public.hydro_object hdo_r ON ((((mpn.repr_owm)::text = (hdo_r.inspire_id_local_id)::text) AND (hdo_r.wkrv_id = 13) AND ((hdo_r.hydro_object_type)::text = ANY (ARRAY[('SurfaceWaterBody'::character varying)::text, ('GroundWaterBody'::character varying)::text])))))
             LEFT JOIN (public.hydro_object hdo_t
             JOIN (public.related_hydro_object rho
             JOIN public.hydro_object hdo_f ON (((hdo_f.hdo_id = rho.from_hdo) AND ((hdo_f.hydro_object_type)::text = ANY (ARRAY[('SurfaceWaterBody'::character varying)::text, ('GroundWaterBody'::character varying)::text]))))) ON (((rho.to_hdo = hdo_t.hdo_id) AND (rho.rrt_id = 2) AND (hdo_f.wkrv_id = 13)))) ON ((((hdo_t.inspire_id_local_id)::text = (mpn.ligt_in_owm)::text) AND (hdo_t.wkrv_id = 2) AND ((hdo_t.hydro_object_type)::text = ANY (ARRAY[('SurfaceWaterBody'::character varying)::text, ('GroundWaterBody'::character varying)::text])))))
          WHERE (((hdo_f.inspire_id_local_id)::text <> (mpn.repr_owm)::text) AND (hdo_f.inspire_id_local_id IS NOT NULL))
        )
 SELECT DISTINCT ON (mpn2.repr_owm, mpn2.ligt_in) mpn2.repr_owm AS "euSurfaceWaterBodyCode",
    mpn2.ligt_in AS "swChemicalStatusGrouping"
   FROM mpn2
  ORDER BY mpn2.repr_owm;


--
-- Name: vw_surfacewaterbody_swsignificantimpacttype; Type: VIEW; Schema: wfd_reporting; Owner: -
--

CREATE VIEW vw_surfacewaterbody_swsignificantimpacttype AS
 WITH swb_oordeel_all AS (
         SELECT DISTINCT ON (hdo_swb.hdo_id, swb_yearly_status.year_of_status, sw_chemical_substance_status.opt_id) hdo_swb.hdo_id AS swb_id,
            swb_yearly_status.year_of_status AS jaar,
            sw_chemical_substance_status.opt_id,
                CASE classification_type.description
                    WHEN 'voldoet'::text THEN 'goed'::text
                    WHEN 'voldoet niet'::text THEN 'slecht'::text
                    ELSE NULL::text
                END AS oordeel,
            waarde_bepalings_methode_type.code AS wbpm,
            hdo_swb.inspire_id_local_id
           FROM (((((public.swb_yearly_status
             LEFT JOIN public.hydro_object hdo_swb ON ((hdo_swb.hdo_id = swb_yearly_status.swb_id)))
             JOIN public.sw_chemical_substance_status ON ((sw_chemical_substance_status.sys_id = swb_yearly_status.sys_id)))
             LEFT JOIN public.classification_type ON ((sw_chemical_substance_status.swcs_id = classification_type.cls_id)))
             LEFT JOIN public.vw_waargenomen_eigenschap ON ((vw_waargenomen_eigenschap."DB_ID" = sw_chemical_substance_status.opt_id)))
             LEFT JOIN public.waarde_bepalings_methode_type ON ((waarde_bepalings_methode_type.wbpm_id = sw_chemical_substance_status.wbpm_id)))
          WHERE ((hdo_swb.wkrv_id = 13) AND (swb_yearly_status.year_of_status = 2015) AND (sw_chemical_substance_status.opt_id = 4477))
        UNION ALL
         SELECT DISTINCT ON (hdo_swb.hdo_id, swb_yearly_status.year_of_status, sw_ecological_status.opt_id) hdo_swb.hdo_id AS swb_id,
            swb_yearly_status.year_of_status AS jaar,
            sw_ecological_status.opt_id,
            classification_type.description AS oordeel,
            waarde_bepalings_methode_type.code AS wbpm,
            hdo_swb.inspire_id_local_id
           FROM (((((public.swb_yearly_status
             LEFT JOIN public.hydro_object hdo_swb ON ((hdo_swb.hdo_id = swb_yearly_status.swb_id)))
             JOIN public.sw_ecological_status ON ((sw_ecological_status.sys_id = swb_yearly_status.sys_id)))
             LEFT JOIN public.classification_type ON ((sw_ecological_status.swes_id = classification_type.cls_id)))
             LEFT JOIN public.vw_waargenomen_eigenschap ON ((vw_waargenomen_eigenschap."DB_ID" = sw_ecological_status.opt_id)))
             LEFT JOIN public.waarde_bepalings_methode_type ON ((waarde_bepalings_methode_type.wbpm_id = sw_ecological_status.wbpm_id)))
          WHERE ((hdo_swb.wkrv_id = 13) AND (swb_yearly_status.year_of_status = 2015) AND (sw_ecological_status.opt_id = 4479))
  ORDER BY 1, 2, 3, 5 DESC
        ), swb_oordeel AS (
         SELECT DISTINCT ON (swb_oordeel_all.swb_id) swb_oordeel_all.swb_id,
            swb_oordeel_all.inspire_id_local_id,
            swb_oordeel_all.jaar,
            swb_oordeel_all.oordeel,
            swb_oordeel_all.wbpm
           FROM swb_oordeel_all
          ORDER BY swb_oordeel_all.swb_id, swb_oordeel_all.oordeel
        ), impact_ruw AS (
         SELECT hydro_object.hdo_id AS db_id,
            hydro_object.inspire_id_local_id AS "euSurfaceWaterBodyCode",
                CASE
                    WHEN (ipe.eu_xsd IS NULL) THEN
                    CASE
                        WHEN (swb_oordeel.oordeel = 'goed'::text) THEN 'NOSI - No significant impact'::text
                        ELSE 'UNKN - Unknown impact type'::text
                    END
                    ELSE ipe.eu_xsd
                END AS "swSignificantImpactType"
           FROM ((((public.hydro_object
             LEFT JOIN public.swb_pressure ON (((hydro_object.hdo_id = swb_pressure.swb_id) AND (swb_pressure.is_significant = true))))
             LEFT JOIN public.swb_pressure_impact ON ((swb_pressure.swbp_id = swb_pressure_impact.swbp_id)))
             LEFT JOIN significant_impact_enum ipe ON ((ipe.i_id = swb_pressure_impact.impact_id)))
             LEFT JOIN swb_oordeel ON ((swb_oordeel.swb_id = hydro_object.hdo_id)))
          WHERE ((hydro_object.wkrv_id = 13) AND ((hydro_object.hydro_object_type)::text = 'SurfaceWaterBody'::text))
        )
 SELECT DISTINCT ON (impact_ruw."euSurfaceWaterBodyCode", impact_ruw."swSignificantImpactType") impact_ruw."euSurfaceWaterBodyCode",
    impact_ruw."swSignificantImpactType"
   FROM impact_ruw
  ORDER BY impact_ruw."euSurfaceWaterBodyCode", impact_ruw."swSignificantImpactType";


--
-- Name: vw_surfacewaterbody_swsignificantpressuretype; Type: VIEW; Schema: wfd_reporting; Owner: -
--

CREATE VIEW vw_surfacewaterbody_swsignificantpressuretype AS
 WITH bel_aant AS (
         SELECT hydro_object_1.hdo_id AS db_id,
            count(spe_1.eu_xsd) AS aant
           FROM ((public.hydro_object hydro_object_1
             LEFT JOIN public.swb_pressure swb_pressure_1 ON ((hydro_object_1.hdo_id = swb_pressure_1.swb_id)))
             LEFT JOIN significant_pressure_enum spe_1 ON (((spe_1.sw_p_id = swb_pressure_1.sprs_id) AND (swb_pressure_1.is_significant = true))))
          GROUP BY hydro_object_1.hdo_id, hydro_object_1.wkrv_id, hydro_object_1.hydro_object_type
         HAVING ((hydro_object_1.wkrv_id = 13) AND ((hydro_object_1.hydro_object_type)::text = 'SurfaceWaterBody'::text))
        )
 SELECT DISTINCT ON (hydro_object.inspire_id_local_id, spe.eu_xsd) hydro_object.hdo_id AS db_id,
    hydro_object.inspire_id_local_id AS "euSurfaceWaterBodyCode",
        CASE
            WHEN (spe.eu_xsd IS NULL) THEN 'No significant pressure'::text
            ELSE spe.eu_xsd
        END AS "swSignificantPressureType"
   FROM (((public.hydro_object
     LEFT JOIN public.swb_pressure ON ((hydro_object.hdo_id = swb_pressure.swb_id)))
     LEFT JOIN significant_pressure_enum spe ON (((spe.sw_p_id = swb_pressure.sprs_id) AND (swb_pressure.is_significant = true))))
     LEFT JOIN bel_aant ON ((bel_aant.db_id = hydro_object.hdo_id)))
  WHERE ((hydro_object.wkrv_id = 13) AND ((hydro_object.hydro_object_type)::text = 'SurfaceWaterBody'::text) AND (((bel_aant.aant = 0) AND (spe.eu_xsd IS NULL)) OR ((bel_aant.aant > 0) AND (spe.eu_xsd IS NOT NULL))))
  ORDER BY hydro_object.inspire_id_local_id, spe.eu_xsd;


--
-- Name: vw_swassociatedprotectedarea; Type: VIEW; Schema: wfd_reporting; Owner: -
--

CREATE VIEW vw_swassociatedprotectedarea AS
 SELECT swb.hdo_id,
    wpa.inspire_id_local_id AS "euProtectedAreaCode",
    swb.inspire_id_local_id AS "euSurfaceWaterBodyCode",
        CASE protected_area_type.code
            WHEN 'HA'::text THEN 'Habitats'::text
            WHEN 'BI'::text THEN 'Birds'::text
            WHEN 'BW'::text THEN 'Bathing'::text
            WHEN 'SH'::text THEN 'Shellfish'::text
            WHEN 'FI'::text THEN 'Fish'::text
            ELSE 'oeps'::text
        END AS "protectedAreaType",
    'Overlapping / partly within Protected Area'::text AS "protectedAreaAssociationType",
        CASE protected_area_type.code
            WHEN 'HA'::text THEN 'Yes, some specific water objectives have been set to protect dependent habitats and species but work is still on-going to determine needs.'::text
            WHEN 'BI'::text THEN 'Yes, some specific water objectives have been set to protect dependent habitats and species but work is still on-going to determine needs.'::text
            WHEN 'BW'::text THEN NULL::text
            WHEN 'SH'::text THEN NULL::text
            WHEN 'FI'::text THEN NULL::text
            ELSE 'oeps'::text
        END AS "protectedAreaHabitatsBirdsObjectivesSet",
        CASE protected_area_type.code
            WHEN 'HA'::text THEN 'No information'::text
            WHEN 'BI'::text THEN 'No information'::text
            WHEN 'BW'::text THEN NULL::text
            WHEN 'SH'::text THEN NULL::text
            WHEN 'FI'::text THEN NULL::text
            ELSE 'oeps'::text
        END AS "protectedAreaHabitatsBirdsObjectivesMet",
    NULL::text AS "protectedAreaDrinkinswaterObjectivesSet",
    NULL::text AS "protectedAreaDrinkinswaterObjectivesMet",
        CASE protected_area_type.code
            WHEN 'HA'::text THEN NULL::text
            WHEN 'BI'::text THEN NULL::text
            WHEN 'BW'::text THEN NULL::text
            WHEN 'SH'::text THEN 'Yes'::text
            WHEN 'FI'::text THEN NULL::text
            ELSE 'oeps'::text
        END AS "protectedAreaShellfishObjectivesSet",
        CASE protected_area_type.code
            WHEN 'HA'::text THEN NULL::text
            WHEN 'BI'::text THEN NULL::text
            WHEN 'BW'::text THEN NULL::text
            WHEN 'SH'::text THEN 'Yes'::text
            WHEN 'FI'::text THEN NULL::text
            ELSE 'oeps'::text
        END AS "protectedAreaShellfishObjectivesMet",
    NULL::text AS "protectedAreaComment",
    wpa.hdo_id AS protectedid
   FROM ((((public.waterbody_protected_area_intersection
     JOIN public.wfd_protected_area ON ((waterbody_protected_area_intersection.wpa_id = wfd_protected_area.wpa_id)))
     JOIN public.hydro_object wpa ON ((wpa.hdo_id = wfd_protected_area.wpa_id)))
     JOIN public.hydro_object swb ON ((waterbody_protected_area_intersection.wbd_id = swb.hdo_id)))
     JOIN public.protected_area_type ON ((protected_area_type.pat_id = wfd_protected_area.protected_area_type_id)))
  WHERE ((swb.wkrv_id = 13) AND ((swb.hydro_object_type)::text = 'SurfaceWaterBody'::text) AND (protected_area_type.sw_type = true))
UNION ALL
 SELECT swb.hdo_id,
    swb.inspire_id_local_id AS "euProtectedAreaCode",
    swb.inspire_id_local_id AS "euSurfaceWaterBodyCode",
    'Article 7 Abstraction for drinking water'::text AS "protectedAreaType",
    'Within Protected Area'::text AS "protectedAreaAssociationType",
    NULL::text AS "protectedAreaHabitatsBirdsObjectivesSet",
    NULL::text AS "protectedAreaHabitatsBirdsObjectivesMet",
    'Yes'::text AS "protectedAreaDrinkinswaterObjectivesSet",
        CASE
            WHEN (swb_yearly_status.exceeds_drinkingwater IS TRUE) THEN 'No'::text
            ELSE 'Yes'::text
        END AS "protectedAreaDrinkinswaterObjectivesMet",
    NULL::text AS "protectedAreaShellfishObjectivesSet",
    NULL::text AS "protectedAreaShellfishObjectivesMet",
    NULL::text AS "protectedAreaComment",
    swb.hdo_id AS protectedid
   FROM ((public.water_body
     JOIN public.hydro_object swb ON ((swb.hdo_id = water_body.wbd_id)))
     JOIN public.swb_yearly_status ON (((swb.hdo_id = swb_yearly_status.swb_id) AND (swb_yearly_status.year_of_status = 2015))))
  WHERE ((water_body.wbd_id = swb.hdo_id) AND (water_body.is_article_7 = true) AND (swb.wkrv_id = 13) AND ((swb.hydro_object_type)::text = 'SurfaceWaterBody'::text))
  ORDER BY 3;


--
-- Name: vw_swassociatedprotectedarea_protectedareaexemption; Type: VIEW; Schema: wfd_reporting; Owner: -
--

CREATE VIEW vw_swassociatedprotectedarea_protectedareaexemption AS
 WITH exemption AS (
         SELECT objectives_exemption_type.name,
            objectives_exemption_type.description,
            objectives_exemption_type.article_nr,
            hydro_object.hdo_id,
            hydro_object.inspire_id_local_id,
            swb_chem_exemp_pollutant.chs_id
           FROM public.objectives_exemption_type,
            public.swb_exemption,
            public.hydro_object,
            public.swb_chem_exemp_pollutant
          WHERE ((swb_exemption.obex_id = objectives_exemption_type.obex_id) AND (hydro_object.hdo_id = swb_exemption.swb_id) AND (swb_chem_exemp_pollutant.swce_id = swb_exemption.swce_id))
        ), exemptions AS (
         SELECT swb.hdo_id,
            wpa.inspire_id_local_id AS "euProtectedAreaCode",
            swb.inspire_id_local_id AS "euSurfaceWaterBodyCode",
            'No exemption'::text AS "protectedAreaExemption"
           FROM (((((public.waterbody_protected_area_intersection
             LEFT JOIN public.wfd_protected_area ON ((waterbody_protected_area_intersection.wpa_id = wfd_protected_area.wpa_id)))
             LEFT JOIN public.hydro_object wpa ON ((wpa.hdo_id = wfd_protected_area.wpa_id)))
             LEFT JOIN public.hydro_object swb ON ((waterbody_protected_area_intersection.wbd_id = swb.hdo_id)))
             LEFT JOIN exemption ON ((exemption.hdo_id = swb.hdo_id)))
             LEFT JOIN public.protected_area_type ON ((protected_area_type.pat_id = wfd_protected_area.protected_area_type_id)))
          WHERE ((swb.wkrv_id = 13) AND ((swb.hydro_object_type)::text = 'SurfaceWaterBody'::text) AND (protected_area_type.sw_type = true))
        UNION ALL
         SELECT DISTINCT ON (swb.hdo_id, exemption.description) swb.hdo_id,
            swb.inspire_id_local_id AS "euProtectedAreaCode",
            swb.inspire_id_local_id AS "euSurfaceWaterBodyCode",
                CASE
                    WHEN (exemption.description IS NULL) THEN 'No exemption'::text
                    ELSE exemption.description
                END AS "protectedAreaExemption"
           FROM ((public.water_body
             LEFT JOIN public.hydro_object swb ON ((swb.hdo_id = water_body.wbd_id)))
             LEFT JOIN exemption ON ((exemption.hdo_id = swb.hdo_id)))
          WHERE ((water_body.wbd_id = swb.hdo_id) AND (water_body.is_article_7 = true) AND (swb.wkrv_id = 13) AND ((swb.hydro_object_type)::text = 'SurfaceWaterBody'::text))
  ORDER BY 1, 3
        )
 SELECT DISTINCT ON (exemptions."euProtectedAreaCode", exemptions."euSurfaceWaterBodyCode", exemptions."protectedAreaExemption") exemptions.hdo_id,
    exemptions."euProtectedAreaCode",
    exemptions."euSurfaceWaterBodyCode",
    exemptions."protectedAreaExemption"
   FROM exemptions;


--
-- Name: vw_swb_swprioritysubstance; Type: VIEW; Schema: wfd_reporting; Owner: -
--

CREATE VIEW vw_swb_swprioritysubstance AS
 WITH oordeel AS (
         SELECT DISTINCT ON (sys.sys_id, swcs.opt_id) sys.sys_id,
            sys.swb_id,
            hydro_object.inspire_id_local_id,
            swcs.opt_id,
            swcs.swcs_id,
            sge.chs_id
           FROM ((((public.swb_yearly_status sys
             JOIN public.sw_chemical_substance_status swcs ON ((swcs.sys_id = sys.sys_id)))
             JOIN public.observed_property_type ON ((observed_property_type.opt_id = swcs.opt_id)))
             JOIN public.substance_group_element sge ON ((sge.ssge_id = observed_property_type.substance_group_id)))
             JOIN public.hydro_object ON ((hydro_object.hdo_id = sys.swb_id)))
          WHERE ((sge.chs_id IS NOT NULL) AND (swcs.eumg_id = 3) AND (sys.year_of_status = 2015) AND (hydro_object.wkrv_id = 13))
          ORDER BY sys.sys_id, swcs.opt_id, swcs.wbpm_id DESC
        ), oordeel2009 AS (
         SELECT DISTINCT ON (sys.sys_id, swcs.opt_id) sys.sys_id,
            sys.swb_id,
            hydro_object.inspire_id_local_id,
            swcs.opt_id,
            swcs.swcs_id,
            sge.chs_id
           FROM ((((public.swb_yearly_status sys
             JOIN public.sw_chemical_substance_status swcs ON ((swcs.sys_id = sys.sys_id)))
             JOIN public.observed_property_type ON ((observed_property_type.opt_id = swcs.opt_id)))
             JOIN public.substance_group_element sge ON ((sge.ssge_id = observed_property_type.substance_group_id)))
             JOIN public.hydro_object ON ((hydro_object.hdo_id = sys.swb_id)))
          WHERE ((sge.chs_id IS NOT NULL) AND (sys.year_of_status = 2009) AND (hydro_object.wkrv_id = 2))
          ORDER BY sys.sys_id, swcs.opt_id, swcs.wbpm_id DESC, swcs.eumg_id DESC
        ), kental AS (
         SELECT observation.observed_property_type AS opt_id,
            sys.sys_id,
            sys.swb_id,
            observation.value_processing_method_id
           FROM (((((public.swb_yearly_status sys
             JOIN public.sw_testing_conclusion tc ON ((tc.sys_id = sys.sys_id)))
             JOIN public.observation ON ((tc.stcc_id = observation.obs_id)))
             JOIN public.hydro_object ON ((hydro_object.hdo_id = sys.swb_id)))
             JOIN public.observed_property_type ON ((observed_property_type.opt_id = observation.observed_property_type)))
             JOIN public.substance_group_element sge ON ((sge.ssge_id = observed_property_type.substance_group_id)))
          WHERE ((sge.chs_id IS NOT NULL) AND (tc.eumg_id = 3) AND (hydro_object.wkrv_id = 13) AND (sys.year_of_status = 2015))
        ), stofgroep AS (
         SELECT substance_group_element.chs_id,
            substance_group_element.ssge_id,
                CASE substance_group_element.ssge_id
                    WHEN 3155 THEN 'STOFOV'::text
                    WHEN 3149 THEN 'STOFPR_UBQN'::text
                    WHEN 3150 THEN 'STOFPR_UBQJ'::text
                    WHEN 2907 THEN 'CHEMT'::text
                    WHEN 3148 THEN 'STOFPR_34-45'::text
                    ELSE NULL::text
                END AS categorie
           FROM public.substance_group_element
          WHERE (substance_group_element.ssge_id = ANY (ARRAY[3155, 3150, 3149, 3148, 2907]))
        ), eu_stoffenlijst AS (
         SELECT chemische_stof_type.chs_id,
            chemische_stof_type.cas_nr,
            chemische_stof_type.naam,
            chemische_stof_type.code,
            chemische_stof_type.d_begin,
            chemische_stof_type.d_eind,
            chemische_stof_type.last_changed_date,
            chemische_stof_type.d_status,
            chemische_stof_type.id,
            eu_stoffenlijst_1.domeinnaam,
            eu_stoffenlijst_1.value,
            eu_stoffenlijst_1.grootheidcode,
            eu_stoffenlijst_1.parametercode,
            eu_stoffenlijst_1."swFailingRBSPOther"
           FROM public.chemische_stof_type,
            wfd_reporting.eu_stoffenlijst eu_stoffenlijst_1
          WHERE (((eu_stoffenlijst_1.parametercode)::text = (chemische_stof_type.code)::text) AND ((eu_stoffenlijst_1.domeinnaam)::text = 'PS_Enum'::text))
        )
 SELECT ((oordeel.swb_id)::text || (chs.chs_id)::text) AS "sWPrioritySubstanceID",
    oordeel.inspire_id_local_id AS "euSurfaceWaterBodyCode",
    eu_stoffenlijst.value AS "swFailingRBSP",
        CASE
            WHEN (oordeel.swcs_id = 2) THEN true
            ELSE false
        END AS "swPrioritySubstanceCausingFailure",
        CASE
            WHEN (kental.value_processing_method_id = 26563) THEN 'MAC EQS'::text
            ELSE 'AA EQS'::text
        END AS "swPrioritySubstanceExceedanceType",
        CASE
            WHEN ((oordeel.swcs_id = 1) AND (oordeel2009.swcs_id = 2)) THEN true
            ELSE false
        END AS "swPrioritySubstanceImprovingChemicalStatus",
        CASE
            WHEN ((wsc.scm_id = 4) AND (oordeel.swcs_id = 2) AND (oordeel.chs_id = ANY (ARRAY[516, 2609, 1015, 1411, 1230, 1242, 556, 557, 575, 265, 1101]))) THEN true
            ELSE false
        END AS "swPrioritySubstanceEffectStatusNewThresholds",
    NULL::text AS "swPrioritySubstanceExceedanceMixingZone"
   FROM ((((((((((oordeel
     LEFT JOIN stofgroep ON ((stofgroep.chs_id = oordeel.chs_id)))
     LEFT JOIN public.chemische_stof_type chs ON ((chs.chs_id = oordeel.chs_id)))
     LEFT JOIN public.water_body ON ((oordeel.swb_id = water_body.wbd_id)))
     LEFT JOIN public.hydro_object rb ON ((rb.hdo_id = water_body.rbd_id)))
     LEFT JOIN public.related_hydro_object rho ON (((rho.from_hdo = oordeel.swb_id) AND (rho.rrt_id = 9))))
     LEFT JOIN public.wb_status_change_motivation wsc ON (((wsc.wbd_id = oordeel.swb_id) AND (wsc.opt_id = oordeel.opt_id) AND (wsc.year_status = 2015) AND (wsc.year_initial = 2009))))
     LEFT JOIN public.hydro_object hdo2009 ON ((rho.to_hdo = hdo2009.hdo_id)))
     LEFT JOIN oordeel2009 ON (((oordeel2009.swb_id = hdo2009.hdo_id) AND (oordeel2009.opt_id = oordeel.opt_id) AND (oordeel2009.chs_id = oordeel.chs_id))))
     LEFT JOIN kental ON (((oordeel.swb_id = kental.swb_id) AND (oordeel.opt_id = kental.opt_id))))
     LEFT JOIN eu_stoffenlijst ON (((chs.code)::text = (eu_stoffenlijst.parametercode)::text)))
  WHERE ((stofgroep.categorie = 'CHEMT'::text) AND ((oordeel.swcs_id = 2) OR ((oordeel2009.swcs_id = 2) AND (oordeel.swcs_id = 1))) AND (eu_stoffenlijst.value IS NOT NULL))
  ORDER BY rb.inspire_id_local_id, oordeel.inspire_id_local_id, eu_stoffenlijst.value;


--
-- Name: vw_swb_swprioritysubstance2; Type: VIEW; Schema: wfd_reporting; Owner: -
--

CREATE VIEW vw_swb_swprioritysubstance2 AS
 WITH oordeel AS (
         SELECT DISTINCT ON (sys.sys_id, swcs.opt_id) sys.sys_id,
            sys.swb_id,
            hydro_object.inspire_id_local_id,
            swcs.opt_id,
            swcs.swcs_id,
            sge.chs_id
           FROM ((((public.swb_yearly_status sys
             JOIN public.sw_chemical_substance_status swcs ON ((swcs.sys_id = sys.sys_id)))
             JOIN public.observed_property_type ON ((observed_property_type.opt_id = swcs.opt_id)))
             JOIN public.substance_group_element sge ON ((sge.ssge_id = observed_property_type.substance_group_id)))
             JOIN public.hydro_object ON ((hydro_object.hdo_id = sys.swb_id)))
          WHERE ((sge.chs_id IS NOT NULL) AND (swcs.eumg_id = 3) AND (sys.year_of_status = 2015) AND (hydro_object.wkrv_id = 13))
          ORDER BY sys.sys_id, swcs.opt_id, swcs.wbpm_id DESC
        ), oordeel2009 AS (
         SELECT DISTINCT ON (sys.sys_id, swcs.opt_id) sys.sys_id,
            sys.swb_id,
            hydro_object.inspire_id_local_id,
            swcs.opt_id,
            swcs.swcs_id,
            sge.chs_id
           FROM ((((public.swb_yearly_status sys
             JOIN public.sw_chemical_substance_status swcs ON ((swcs.sys_id = sys.sys_id)))
             JOIN public.observed_property_type ON ((observed_property_type.opt_id = swcs.opt_id)))
             JOIN public.substance_group_element sge ON ((sge.ssge_id = observed_property_type.substance_group_id)))
             JOIN public.hydro_object ON ((hydro_object.hdo_id = sys.swb_id)))
          WHERE ((sge.chs_id IS NOT NULL) AND (sys.year_of_status = 2009) AND (hydro_object.wkrv_id = 2))
          ORDER BY sys.sys_id, swcs.opt_id, swcs.wbpm_id DESC, swcs.eumg_id DESC
        ), kental AS (
         SELECT observation.observed_property_type AS opt_id,
            sys.sys_id,
            sys.swb_id,
            observation.value_processing_method_id
           FROM (((((public.swb_yearly_status sys
             JOIN public.sw_testing_conclusion tc ON ((tc.sys_id = sys.sys_id)))
             JOIN public.observation ON ((tc.stcc_id = observation.obs_id)))
             JOIN public.hydro_object ON ((hydro_object.hdo_id = sys.swb_id)))
             JOIN public.observed_property_type ON ((observed_property_type.opt_id = observation.observed_property_type)))
             JOIN public.substance_group_element sge ON ((sge.ssge_id = observed_property_type.substance_group_id)))
          WHERE ((sge.chs_id IS NOT NULL) AND (tc.eumg_id = 3) AND (hydro_object.wkrv_id = 13) AND (sys.year_of_status = 2015))
        ), stofgroep AS (
         SELECT substance_group_element.chs_id,
            substance_group_element.ssge_id,
                CASE substance_group_element.ssge_id
                    WHEN 3155 THEN 'STOFOV'::text
                    WHEN 3149 THEN 'STOFPR_UBQN'::text
                    WHEN 3150 THEN 'STOFPR_UBQJ'::text
                    WHEN 2907 THEN 'CHEMT'::text
                    WHEN 3148 THEN 'STOFPR_34-45'::text
                    ELSE NULL::text
                END AS categorie
           FROM public.substance_group_element
          WHERE (substance_group_element.ssge_id = ANY (ARRAY[3155, 3150, 3149, 3148, 2907]))
        )
 SELECT ((oordeel.swb_id)::text || (chs.chs_id)::text) AS "sWPrioritySubstanceID",
    oordeel.inspire_id_local_id AS "euSurfaceWaterBodyCode",
    chs.cas_nr AS "swFailingRBSP_Casnr",
    chs.code AS "swFailingRBSP_code",
    chs.naam AS "swFailingRBSP_naam",
        CASE
            WHEN (oordeel.swcs_id = 2) THEN true
            ELSE false
        END AS "swPrioritySubstanceCausingFailure",
        CASE
            WHEN (kental.value_processing_method_id = 26563) THEN 'MAC EQS'::text
            ELSE 'AA EQS'::text
        END AS "swPrioritySubstanceExceedanceType",
        CASE
            WHEN ((oordeel.swcs_id = 1) AND (oordeel2009.swcs_id = 2)) THEN true
            ELSE false
        END AS "swPrioritySubstanceImprovingChemicalStatus",
        CASE
            WHEN ((wsc.scm_id = 4) AND (oordeel.swcs_id = 2) AND (oordeel.chs_id = ANY (ARRAY[516, 2609, 1015, 1411, 1230, 1242, 556, 557, 575, 265, 1101]))) THEN true
            ELSE false
        END AS "swPrioritySubstanceEffectStatusNewThresholds",
    NULL::text AS "swPrioritySubstanceExceedanceMixingZone"
   FROM (((((((((oordeel
     LEFT JOIN stofgroep ON ((stofgroep.chs_id = oordeel.chs_id)))
     LEFT JOIN public.chemische_stof_type chs ON ((chs.chs_id = oordeel.chs_id)))
     LEFT JOIN public.water_body ON ((oordeel.swb_id = water_body.wbd_id)))
     LEFT JOIN public.hydro_object rb ON ((rb.hdo_id = water_body.rbd_id)))
     LEFT JOIN public.related_hydro_object rho ON (((rho.from_hdo = oordeel.swb_id) AND (rho.rrt_id = 9))))
     LEFT JOIN public.wb_status_change_motivation wsc ON (((wsc.wbd_id = oordeel.swb_id) AND (wsc.opt_id = oordeel.opt_id) AND (wsc.year_status = 2015) AND (wsc.year_initial = 2009))))
     LEFT JOIN public.hydro_object hdo2009 ON ((rho.to_hdo = hdo2009.hdo_id)))
     LEFT JOIN oordeel2009 ON (((oordeel2009.swb_id = hdo2009.hdo_id) AND (oordeel2009.opt_id = oordeel.opt_id) AND (oordeel2009.chs_id = oordeel.chs_id))))
     LEFT JOIN kental ON (((oordeel.swb_id = kental.swb_id) AND (oordeel.opt_id = kental.opt_id))))
  WHERE ((stofgroep.categorie = 'CHEMT'::text) AND ((oordeel.swcs_id = 2) OR ((oordeel2009.swcs_id = 2) AND (oordeel.swcs_id = 1))))
  ORDER BY rb.inspire_id_local_id, oordeel.inspire_id_local_id, chs.code;


--
-- Name: vw_swchemicalexemptionpressure; Type: VIEW; Schema: wfd_reporting; Owner: -
--

CREATE VIEW vw_swchemicalexemptionpressure AS
 WITH oordeel AS (
         SELECT DISTINCT ON (sys.sys_id, swcs.opt_id) sys.sys_id,
            sys.swb_id,
            hydro_object.inspire_id_local_id,
            swcs.opt_id,
            swcs.swcs_id,
            sge.chs_id,
            hydro_object.wkrv_id,
            hydro_object.hydro_object_type
           FROM ((((public.swb_yearly_status sys
             JOIN public.sw_chemical_substance_status swcs ON ((swcs.sys_id = sys.sys_id)))
             JOIN public.observed_property_type ON ((observed_property_type.opt_id = swcs.opt_id)))
             JOIN public.substance_group_element sge ON ((sge.ssge_id = observed_property_type.substance_group_id)))
             JOIN public.hydro_object ON ((hydro_object.hdo_id = sys.swb_id)))
          WHERE ((sge.chs_id IS NOT NULL) AND (swcs.eumg_id = 3) AND (sys.year_of_status = 2015) AND (hydro_object.wkrv_id = 13))
          ORDER BY sys.sys_id, swcs.opt_id, swcs.wbpm_id DESC
        ), stofgroep AS (
         SELECT substance_group_element.chs_id,
            substance_group_element.ssge_id,
                CASE substance_group_element.ssge_id
                    WHEN 3155 THEN 'STOFOV'::text
                    WHEN 3149 THEN 'STOFPR_UBQN'::text
                    WHEN 3150 THEN 'STOFPR_UBQJ'::text
                    WHEN 2907 THEN 'CHEMT'::text
                    WHEN 3148 THEN 'STOFPR_34-45'::text
                    ELSE NULL::text
                END AS categorie
           FROM public.substance_group_element
          WHERE (substance_group_element.ssge_id = ANY (ARRAY[3155, 3150, 3149, 3148, 2907]))
        ), exemption AS (
         SELECT DISTINCT ON (hydro_object.hdo_id, objectives_exemption_type.obex_id, swb_chem_exemp_pollutant.chs_id) objectives_exemption_type.name,
            objectives_exemption_type.description,
            objectives_exemption_type.article_nr,
            hydro_object.hdo_id,
            hydro_object.inspire_id_local_id,
            swb_chem_exemp_pollutant.chs_id,
            objectives_exemption_type.obex_id
           FROM (((public.swb_exemption
             JOIN public.hydro_object ON ((hydro_object.hdo_id = swb_exemption.swb_id)))
             JOIN public.objectives_exemption_type ON ((swb_exemption.obex_id = objectives_exemption_type.obex_id)))
             JOIN public.swb_chem_exemp_pollutant ON ((swb_chem_exemp_pollutant.swce_id = swb_exemption.swce_id)))
          ORDER BY hydro_object.hdo_id, objectives_exemption_type.obex_id, swb_chem_exemp_pollutant.chs_id
        ), pressures AS (
         SELECT DISTINCT ON (hydro_object.hdo_id, spe.eu_xsd) hydro_object.hdo_id AS db_id,
            hydro_object.inspire_id_local_id AS "euSurfaceWaterBodyCode",
                CASE
                    WHEN (spe.eu_xsd IS NULL) THEN 'No significant pressure'::text
                    ELSE spe.eu_xsd
                END AS "swSignificantPressureType"
           FROM ((public.hydro_object
             LEFT JOIN public.swb_pressure ON ((hydro_object.hdo_id = swb_pressure.swb_id)))
             LEFT JOIN significant_pressure_enum spe ON ((spe.sw_p_id = swb_pressure.sprs_id)))
          WHERE ((swb_pressure.is_significant = true) AND (hydro_object.wkrv_id = 13))
          ORDER BY hydro_object.hdo_id, spe.eu_xsd
        ), bel_aant AS (
         SELECT hydro_object.hdo_id AS db_id,
            count(spe.eu_xsd) AS aant
           FROM ((public.hydro_object
             LEFT JOIN public.swb_pressure ON ((hydro_object.hdo_id = swb_pressure.swb_id)))
             LEFT JOIN significant_pressure_enum spe ON (((spe.sw_p_id = swb_pressure.sprs_id) AND (swb_pressure.is_significant = true))))
          GROUP BY hydro_object.hdo_id, hydro_object.wkrv_id, hydro_object.hydro_object_type
         HAVING ((hydro_object.wkrv_id = 13) AND ((hydro_object.hydro_object_type)::text = 'SurfaceWaterBody'::text))
        )
 SELECT DISTINCT ON (oordeel.swb_id, exemption.obex_id, chs.chs_id, pressures."swSignificantPressureType")
        CASE
            WHEN (exemption.obex_id IS NULL) THEN (((oordeel.swb_id)::text || (chs.chs_id)::text) || '0'::text)
            ELSE (((oordeel.swb_id)::text || (chs.chs_id)::text) || exemption.obex_id)
        END AS "sWChemicalExemptionTypeID",
    pressures."swSignificantPressureType" AS "swChemicalExemptionPressure"
   FROM ((((((public.water_body
     JOIN oordeel ON ((water_body.wbd_id = oordeel.swb_id)))
     JOIN stofgroep ON ((stofgroep.chs_id = oordeel.chs_id)))
     JOIN public.chemische_stof_type chs ON ((chs.chs_id = oordeel.chs_id)))
     LEFT JOIN exemption ON (((exemption.hdo_id = oordeel.swb_id) AND (exemption.chs_id = oordeel.chs_id))))
     LEFT JOIN pressures ON ((oordeel.swb_id = pressures.db_id)))
     LEFT JOIN bel_aant ON ((bel_aant.db_id = oordeel.swb_id)))
  WHERE ((stofgroep.categorie = 'CHEMT'::text) AND (oordeel.swcs_id = 2) AND (water_body.wbd_id = oordeel.swb_id) AND (oordeel.wkrv_id = 13) AND ((oordeel.hydro_object_type)::text = 'SurfaceWaterBody'::text) AND (exemption.description IS NOT NULL) AND (((bel_aant.aant = 0) AND (pressures."swSignificantPressureType" = 'No significant pressure'::text)) OR ((bel_aant.aant > 0) AND (pressures."swSignificantPressureType" <> 'No significant pressure'::text))))
  ORDER BY oordeel.swb_id, exemption.obex_id, chs.chs_id, pressures."swSignificantPressureType";


--
-- Name: vw_swchemicalexemptiontype; Type: VIEW; Schema: wfd_reporting; Owner: -
--

CREATE VIEW vw_swchemicalexemptiontype AS
 WITH oordeel AS (
         SELECT DISTINCT ON (sys.sys_id, swcs.opt_id) sys.sys_id,
            sys.swb_id,
            hydro_object.inspire_id_local_id,
            swcs.opt_id,
            swcs.swcs_id,
            sge.chs_id,
            hydro_object.wkrv_id,
            hydro_object.hydro_object_type
           FROM ((((public.swb_yearly_status sys
             JOIN public.sw_chemical_substance_status swcs ON ((swcs.sys_id = sys.sys_id)))
             JOIN public.observed_property_type ON ((observed_property_type.opt_id = swcs.opt_id)))
             JOIN public.substance_group_element sge ON ((sge.ssge_id = observed_property_type.substance_group_id)))
             JOIN public.hydro_object ON ((hydro_object.hdo_id = sys.swb_id)))
          WHERE ((sge.chs_id IS NOT NULL) AND (swcs.eumg_id = 3) AND (sys.year_of_status = 2015) AND (hydro_object.wkrv_id = 13) AND (swcs.swcs_id = 2))
          ORDER BY sys.sys_id, swcs.opt_id, swcs.wbpm_id DESC
        ), stofgroep AS (
         SELECT substance_group_element.chs_id,
            substance_group_element.ssge_id,
                CASE substance_group_element.ssge_id
                    WHEN 3155 THEN 'STOFOV'::text
                    WHEN 3149 THEN 'STOFPR_UBQN'::text
                    WHEN 3150 THEN 'STOFPR_UBQJ'::text
                    WHEN 2907 THEN 'CHEMT'::text
                    WHEN 3148 THEN 'STOFPR_34-45'::text
                    ELSE NULL::text
                END AS categorie
           FROM public.substance_group_element
          WHERE (substance_group_element.ssge_id = ANY (ARRAY[3155, 3150, 3149, 3148, 2907]))
        ), exemption AS (
         SELECT objectives_exemption_type.name,
            hydro_object.inspire_id_local_id,
            objectives_exemption_type.description,
            objectives_exemption_type.article_nr,
            hydro_object.hdo_id,
            hydro_object.inspire_id_local_id,
            NULL::integer AS chs_id,
            swb_ecol_exemp_qe.opt_id,
            objectives_exemption_type.obex_id
           FROM (((public.swb_exemption
             JOIN public.hydro_object ON ((hydro_object.hdo_id = swb_exemption.swb_id)))
             JOIN public.objectives_exemption_type ON ((swb_exemption.obex_id = objectives_exemption_type.obex_id)))
             JOIN public.swb_ecol_exemp_qe ON ((swb_ecol_exemp_qe.swce_id = swb_exemption.swce_id)))
          WHERE ((hydro_object.wkrv_id = 13) AND (swb_ecol_exemp_qe.opt_id = ANY (ARRAY[4520, 4477, 5892, 5893, 5891])))
          ORDER BY objectives_exemption_type.name, swb_ecol_exemp_qe.opt_id
        ), exemption_s AS (
         SELECT objectives_exemption_type.name,
            hydro_object.inspire_id_local_id,
            objectives_exemption_type.description,
            objectives_exemption_type.article_nr,
            hydro_object.hdo_id,
            hydro_object.inspire_id_local_id,
            swb_chem_exemp_pollutant.chs_id,
            objectives_exemption_type.obex_id
           FROM (((public.swb_exemption
             JOIN public.hydro_object ON ((hydro_object.hdo_id = swb_exemption.swb_id)))
             JOIN public.objectives_exemption_type ON ((swb_exemption.obex_id = objectives_exemption_type.obex_id)))
             JOIN public.swb_chem_exemp_pollutant ON ((swb_chem_exemp_pollutant.swce_id = swb_exemption.swce_id)))
          WHERE (hydro_object.wkrv_id = 13)
          ORDER BY objectives_exemption_type.name, objectives_exemption_type.obex_id
        ), exemption_totaal AS (
         SELECT oordeel_1.swb_id,
            oordeel_1.chs_id,
            exemption.obex_id,
            oordeel_1.inspire_id_local_id,
            exemption.description
           FROM ((oordeel oordeel_1
             JOIN stofgroep stofgroep_1 ON ((stofgroep_1.chs_id = oordeel_1.chs_id)))
             JOIN exemption exemption(name, inspire_id_local_id, description, article_nr, hdo_id, inspire_id_local_id_1, chs_id, opt_id, obex_id) ON ((oordeel_1.swb_id = exemption.hdo_id)))
          WHERE (stofgroep_1.categorie = 'CHEMT'::text)
        UNION
         SELECT oordeel_1.swb_id,
            oordeel_1.chs_id,
            exemption_s.obex_id,
            oordeel_1.inspire_id_local_id,
            exemption_s.description
           FROM ((oordeel oordeel_1
             JOIN stofgroep stofgroep_1 ON ((stofgroep_1.chs_id = oordeel_1.chs_id)))
             JOIN exemption_s exemption_s(name, inspire_id_local_id, description, article_nr, hdo_id, inspire_id_local_id_1, chs_id, obex_id) ON (((oordeel_1.swb_id = exemption_s.hdo_id) AND (exemption_s.chs_id = oordeel_1.chs_id))))
          WHERE (stofgroep_1.categorie = 'CHEMT'::text)
  ORDER BY 4, 2, 3
        )
 SELECT ((oordeel.swb_id)::text || (oordeel.chs_id)::text) AS "sWPrioritySubstanceID",
        CASE
            WHEN (ext.obex_id IS NULL) THEN (((oordeel.swb_id)::text || (oordeel.chs_id)::text) || '0'::text)
            ELSE (((oordeel.swb_id)::text || (oordeel.chs_id)::text) || ext.obex_id)
        END AS "sWChemicalExemptionTypeID",
    oordeel.inspire_id_local_id AS "euSurfaceWaterBodyCode",
        CASE
            WHEN (ext.description IS NULL) THEN 'No exemption'::text
            ELSE ext.description
        END AS "swChemicalExemptionType"
   FROM ((oordeel
     JOIN stofgroep ON ((stofgroep.chs_id = oordeel.chs_id)))
     LEFT JOIN exemption_totaal ext ON (((oordeel.swb_id = ext.swb_id) AND (ext.chs_id = oordeel.chs_id))))
  WHERE (stofgroep.categorie = 'CHEMT'::text)
  ORDER BY oordeel.inspire_id_local_id, ((oordeel.swb_id)::text || (oordeel.chs_id)::text);


--
-- Name: vw_swecologicalexemptiontype; Type: VIEW; Schema: wfd_reporting; Owner: -
--

CREATE VIEW vw_swecologicalexemptiontype AS
 WITH swb_oordeel AS (
         SELECT DISTINCT ON (hdo_swb.hdo_id, sw_ecological_status.opt_id) hdo_swb.hdo_id AS swb_id,
            hdo_swb.inspire_id_local_id,
            swb_yearly_status.year_of_status AS jaar,
            sw_ecological_status.opt_id,
            classification_type.description AS oordeel,
            waarde_bepalings_methode_type.code AS wbpm
           FROM ((((public.swb_yearly_status
             LEFT JOIN public.hydro_object hdo_swb ON ((hdo_swb.hdo_id = swb_yearly_status.swb_id)))
             JOIN public.sw_ecological_status ON ((sw_ecological_status.sys_id = swb_yearly_status.sys_id)))
             LEFT JOIN public.classification_type ON ((sw_ecological_status.swes_id = classification_type.cls_id)))
             LEFT JOIN public.waarde_bepalings_methode_type ON ((waarde_bepalings_methode_type.wbpm_id = sw_ecological_status.wbpm_id)))
          WHERE ((hdo_swb.wkrv_id = 13) AND (swb_yearly_status.year_of_status = 2015) AND ((classification_type.description)::text <> 'goed'::text) AND (sw_ecological_status.opt_id = 4479))
          ORDER BY hdo_swb.hdo_id, sw_ecological_status.opt_id, waarde_bepalings_methode_type.code DESC
        )
 SELECT DISTINCT ON (swb_oordeel.swb_id, gwce.obex_id)
        CASE
            WHEN (gwce.obex_id IS NULL) THEN ((swb_oordeel.swb_id)::text || '0'::text)
            ELSE ((swb_oordeel.swb_id)::text || (gwce.obex_id)::text)
        END AS "sWEcologicalExemptionTypeID",
    swb_oordeel.inspire_id_local_id AS "euSurfaceWaterBodyCode",
        CASE
            WHEN (objectives_exemption_type.description IS NULL) THEN 'No exemption'::text
            ELSE objectives_exemption_type.description
        END AS "swEcologicalExemptionType"
   FROM ((swb_oordeel
     LEFT JOIN public.swb_exemption gwce ON ((gwce.swb_id = swb_oordeel.swb_id)))
     LEFT JOIN public.objectives_exemption_type ON ((objectives_exemption_type.obex_id = gwce.obex_id)))
  ORDER BY swb_oordeel.swb_id, gwce.obex_id;


--
-- Name: vw_swecologicalexemptiontype_swecologicalexemptionpressure; Type: VIEW; Schema: wfd_reporting; Owner: -
--

CREATE VIEW vw_swecologicalexemptiontype_swecologicalexemptionpressure AS
 WITH swb_oordeel AS (
         SELECT DISTINCT ON (hdo_swb.hdo_id, sw_ecological_status.opt_id) hdo_swb.hdo_id AS swb_id,
            hdo_swb.inspire_id_local_id,
            swb_yearly_status.year_of_status AS jaar,
            sw_ecological_status.opt_id,
            classification_type.description AS oordeel,
            waarde_bepalings_methode_type.code AS wbpm
           FROM ((((public.swb_yearly_status
             LEFT JOIN public.hydro_object hdo_swb ON ((hdo_swb.hdo_id = swb_yearly_status.swb_id)))
             JOIN public.sw_ecological_status ON ((sw_ecological_status.sys_id = swb_yearly_status.sys_id)))
             LEFT JOIN public.classification_type ON ((sw_ecological_status.swes_id = classification_type.cls_id)))
             LEFT JOIN public.waarde_bepalings_methode_type ON ((waarde_bepalings_methode_type.wbpm_id = sw_ecological_status.wbpm_id)))
          WHERE ((hdo_swb.wkrv_id = 13) AND (swb_yearly_status.year_of_status = 2015) AND (sw_ecological_status.opt_id = 4479))
          ORDER BY hdo_swb.hdo_id, sw_ecological_status.opt_id, waarde_bepalings_methode_type.code DESC
        ), pressures AS (
         SELECT DISTINCT ON (hydro_object.hdo_id, spe.eu_xsd) hydro_object.hdo_id AS db_id,
            swb_pressure.sprs_id,
            hydro_object.inspire_id_local_id AS "euSurfaceWaterBodyCode",
                CASE
                    WHEN (spe.eu_xsd IS NULL) THEN 'No significant pressure'::text
                    ELSE spe.eu_xsd
                END AS "swSignificantPressureType"
           FROM ((public.hydro_object
             LEFT JOIN public.swb_pressure ON ((hydro_object.hdo_id = swb_pressure.swb_id)))
             LEFT JOIN significant_pressure_enum spe ON ((spe.sw_p_id = swb_pressure.sprs_id)))
          WHERE ((swb_pressure.is_significant = true) AND (hydro_object.wkrv_id = 13))
          ORDER BY hydro_object.hdo_id, spe.eu_xsd
        )
 SELECT DISTINCT ON (swb_oordeel.swb_id, pressures.sprs_id, gwce.obex_id)
        CASE
            WHEN (gwce.obex_id IS NULL) THEN ((swb_oordeel.swb_id)::text || '0'::text)
            ELSE ((swb_oordeel.swb_id)::text || (gwce.obex_id)::text)
        END AS "sWEcologicalExemptionTypeID",
    pressures."euSurfaceWaterBodyCode",
    pressures."swSignificantPressureType" AS "swEcologicalExemptionPressure"
   FROM (((swb_oordeel
     LEFT JOIN public.swb_exemption gwce ON ((gwce.swb_id = swb_oordeel.swb_id)))
     LEFT JOIN pressures ON (((swb_oordeel.swb_id = pressures.db_id) AND ((swb_oordeel.oordeel)::text <> 'goed'::text) AND (pressures."swSignificantPressureType" <> 'No significant pressure'::text))))
     LEFT JOIN public.objectives_exemption_type ON ((objectives_exemption_type.obex_id = gwce.obex_id)))
  ORDER BY swb_oordeel.swb_id, pressures.sprs_id, gwce.obex_id;


--
-- Name: vw_swecologicalmonitoring; Type: VIEW; Schema: wfd_reporting; Owner: -
--

CREATE VIEW vw_swecologicalmonitoring AS
 SELECT DISTINCT ON (mpn.mpnident, mpn.parameter) eu_stoffenlijst.value AS "qeCode",
    (eu_stoffenlijst."swFailingRBSPOther")::text AS "qeDescription",
    'Water'::text AS "chemicalMatrix",
        CASE
            WHEN ((mpn.mpntype)::text = 'gw'::text) THEN 'Both'::text
            ELSE 'Status'::text
        END AS "chemicalPurpose",
    mpn.monfreq AS "qeFrequency",
    mpn.moncyclus AS "qeCycle",
    mpn.tot AS "qeLastMonitored",
        CASE
            WHEN ("substring"((mpn.mpnident)::text, 1, 2) <> 'NL'::text) THEN ('NL_'::text || (mpn.mpnident)::text)
            ELSE (mpn.mpnident)::text
        END AS "euMonitoringSiteCode",
    "left"((mpn.sgb)::text, 4) AS sgb
   FROM (eu_state_of_environment.monprog_2015 mpn
     JOIN eu_stoffenlijst ON ((((mpn.parameter)::text = (eu_stoffenlijst.parametercode)::text) AND ((eu_stoffenlijst.domeinnaam)::text = ANY (ARRAY[('SupportingQE_Enum'::character varying)::text, ('BQE_Enum'::character varying)::text, ('PhysChemQE_Enum'::character varying)::text])))))
  WHERE ((mpn.purpose)::text = 'ecologie'::text)
  ORDER BY mpn.mpnident, mpn.parameter, mpn.purpose, mpn.monsoort DESC;


--
-- Name: vw_swexemptions; Type: VIEW; Schema: wfd_reporting; Owner: -
--

CREATE VIEW vw_swexemptions AS
 SELECT DISTINCT ON (("left"((hdo_rbd2.inspire_id_local_id)::text, 4)))
        CASE
            WHEN (rbd.international_rbd IS NULL) THEN hdo_rbd.hdo_id
            ELSE rbd.international_rbd
        END AS "sWExemptionsID",
    "left"((hdo_rbd2.inspire_id_local_id)::text, 4) AS "euRBDCode",
        CASE
            WHEN (gwce.obex_id = 2) THEN 'Yes'::text
            ELSE 'No'::text
        END AS "swDisproportionateCost",
    'No'::text AS "swDisproportionateCostOtherEULegislation",
    'No'::text AS "swExemptionsTransboundary"
   FROM (((((public.hydro_object hdo_rbd2
     JOIN public.objectives_exemption_type ON ((1 = 1)))
     LEFT JOIN public.swb_exemption gwce ON ((objectives_exemption_type.obex_id = gwce.obex_id)))
     LEFT JOIN public.water_body ON ((water_body.wbd_id = gwce.swb_id)))
     LEFT JOIN public.river_basin_disrict rbd ON ((rbd.rbd_id = water_body.rbd_id)))
     LEFT JOIN public.hydro_object hdo_rbd ON ((rbd.rbd_id = hdo_rbd.hdo_id)))
  WHERE ((hdo_rbd2.wkrv_id = 13) AND ((hdo_rbd2.hydro_object_type)::text = 'RiverBasinDistrict'::text) AND ((hdo_rbd2.inspire_id_local_id)::text ~~ 'NL%'::text) AND (((substr(objectives_exemption_type.description, 8, 4) = '4(4)'::text) AND (gwce.obex_id = 2)) OR (substr(objectives_exemption_type.description, 8, 4) = ANY (ARRAY['4(5)'::text, '4(6)'::text, '4(7)'::text]))))
  ORDER BY ("left"((hdo_rbd2.inspire_id_local_id)::text, 4));


--
-- Name: vw_swexemptions_swexemption44driver; Type: VIEW; Schema: wfd_reporting; Owner: -
--

CREATE VIEW vw_swexemptions_swexemption44driver AS
 WITH swb_oordeel AS (
         SELECT DISTINCT ON (hdo_swb.hdo_id, sw_ecological_status.opt_id) hdo_swb.hdo_id AS swb_id,
            swb_yearly_status.year_of_status AS jaar,
            sw_ecological_status.opt_id,
            classification_type.description AS oordeel,
            waarde_bepalings_methode_type.code AS wbpm
           FROM ((((public.swb_yearly_status
             LEFT JOIN public.hydro_object hdo_swb ON ((hdo_swb.hdo_id = swb_yearly_status.swb_id)))
             JOIN public.sw_ecological_status ON ((sw_ecological_status.sys_id = swb_yearly_status.sys_id)))
             LEFT JOIN public.classification_type ON ((sw_ecological_status.swes_id = classification_type.cls_id)))
             LEFT JOIN public.waarde_bepalings_methode_type ON ((waarde_bepalings_methode_type.wbpm_id = sw_ecological_status.wbpm_id)))
          WHERE ((hdo_swb.wkrv_id = 13) AND (swb_yearly_status.year_of_status = 2015) AND ((classification_type.description)::text <> 'goed'::text))
        UNION ALL
         SELECT DISTINCT ON (hdo_swb.hdo_id, sw_chemical_substance_status.opt_id) hdo_swb.hdo_id AS swb_id,
            swb_yearly_status.year_of_status AS jaar,
            sw_chemical_substance_status.opt_id,
            classification_type.description AS oordeel,
            waarde_bepalings_methode_type.code AS wbpm
           FROM ((((public.swb_yearly_status
             LEFT JOIN public.hydro_object hdo_swb ON ((hdo_swb.hdo_id = swb_yearly_status.swb_id)))
             JOIN public.sw_chemical_substance_status ON ((sw_chemical_substance_status.sys_id = swb_yearly_status.sys_id)))
             LEFT JOIN public.classification_type ON ((sw_chemical_substance_status.swcs_id = classification_type.cls_id)))
             LEFT JOIN public.waarde_bepalings_methode_type ON ((waarde_bepalings_methode_type.wbpm_id = sw_chemical_substance_status.wbpm_id)))
          WHERE ((hdo_swb.wkrv_id = 13) AND (swb_yearly_status.year_of_status = 2015) AND ((classification_type.description)::text = 'voldoet niet'::text))
  ORDER BY 1, 3, 4 DESC
        ), swb_oordeel_i AS (
         SELECT DISTINCT ON (swb_oordeel_1.swb_id) swb_oordeel_1.swb_id,
            swb_oordeel_1.opt_id,
            swb_oordeel_1.jaar,
            swb_oordeel_1.oordeel,
            swb_oordeel_1.wbpm
           FROM swb_oordeel swb_oordeel_1
          ORDER BY swb_oordeel_1.swb_id, swb_oordeel_1.oordeel DESC
        ), driver AS (
         SELECT hydro_object.hdo_id AS db_id,
            drivers.naam
           FROM (((public.hydro_object
             LEFT JOIN public.swb_pressure ON (((hydro_object.hdo_id = swb_pressure.swb_id) AND (swb_pressure.is_significant = true))))
             LEFT JOIN public.sw_pressure_type_driver ON ((swb_pressure.sprs_id = sw_pressure_type_driver.sprs_id)))
             LEFT JOIN domains.drivers ON ((drivers.driver_id = sw_pressure_type_driver.driver_id)))
          WHERE ((hydro_object.wkrv_id = 13) AND ((hydro_object.hydro_object_type)::text = 'SurfaceWaterBody'::text))
          ORDER BY hydro_object.hdo_id
        ), driver_aant_ruw AS (
         SELECT "left"((hdo_rbd2_1.inspire_id_local_id)::text, 4) AS rbd,
            substr(objectives_exemption_type_1.description, 8, 4) AS art,
            count(driver_1.naam) AS aant
           FROM (((((((public.hydro_object hdo_rbd2_1
             LEFT JOIN public.objectives_exemption_type objectives_exemption_type_1 ON ((1 = 1)))
             LEFT JOIN public.swb_exemption swce_1 ON ((objectives_exemption_type_1.obex_id = swce_1.obex_id)))
             LEFT JOIN swb_oordeel swb_oordeel_1 ON ((swce_1.swb_id = swb_oordeel_1.swb_id)))
             LEFT JOIN public.water_body water_body_1 ON ((water_body_1.wbd_id = swb_oordeel_1.swb_id)))
             LEFT JOIN public.river_basin_disrict rbd_1 ON ((rbd_1.rbd_id = water_body_1.rbd_id)))
             LEFT JOIN public.hydro_object hdo_rbd_1 ON ((rbd_1.rbd_id = hdo_rbd_1.hdo_id)))
             LEFT JOIN driver driver_1 ON ((swb_oordeel_1.swb_id = driver_1.db_id)))
          GROUP BY ("left"((hdo_rbd2_1.inspire_id_local_id)::text, 4)), (substr(objectives_exemption_type_1.description, 8, 4)), driver_1.naam, hdo_rbd2_1.wkrv_id, hdo_rbd2_1.hydro_object_type, hdo_rbd2_1.inspire_id_local_id
         HAVING ((hdo_rbd2_1.wkrv_id = 13) AND ((hdo_rbd2_1.hydro_object_type)::text = 'RiverBasinDistrict'::text) AND ((hdo_rbd2_1.inspire_id_local_id)::text ~~ 'NL%'::text))
          ORDER BY ("left"((hdo_rbd2_1.inspire_id_local_id)::text, 4)), (substr(objectives_exemption_type_1.description, 8, 4))
        ), driver_aant AS (
         SELECT DISTINCT ON (driver_aant_ruw.rbd, driver_aant_ruw.art) driver_aant_ruw.rbd,
            driver_aant_ruw.art,
            driver_aant_ruw.aant
           FROM driver_aant_ruw
          ORDER BY driver_aant_ruw.rbd, driver_aant_ruw.art, driver_aant_ruw.aant DESC
        )
 SELECT DISTINCT ON (("left"((hdo_rbd2.inspire_id_local_id)::text, 4)), driver.naam) (hdo_rbd2.hdo_id)::text AS "sWExemptionsID",
        CASE
            WHEN (driver_aant.aant = 0) THEN 'Exemption not applied'::text
            ELSE
            CASE driver.naam
                WHEN 'Landbouw'::text THEN 'Agriculture'::text
                WHEN 'Klimaatverandering'::text THEN 'Climate change'::text
                WHEN 'Energie (hydropower)'::text THEN 'Energy - hydropower'::text
                WHEN 'Energie (geen hydropower)'::text THEN 'Energy - non-hydropower'::text
                WHEN 'Visserij & Aquacultuur'::text THEN 'Fisheries and aquaculture'::text
                WHEN 'Hoogwaterbescherming'::text THEN 'Flood protection'::text
                WHEN 'Bosbouw'::text THEN 'Forestry'::text
                WHEN 'Industrie'::text THEN 'Industry'::text
                WHEN 'Toerisme en Recreatie'::text THEN 'Tourism and recreation'::text
                WHEN 'Transport'::text THEN 'Transport'::text
                WHEN 'Stedelijke ontwikkeling'::text THEN 'Urban development'::text
                WHEN 'Recreatie'::text THEN 'Tourism and recreation'::text
                WHEN 'Niet bekend of verouderd'::text THEN 'Unknown - other'::text
                WHEN 'Eén of meerdere'::text THEN 'Unknown - other'::text
                WHEN 'Anders'::text THEN 'Unknown - other'::text
                WHEN 'null'::text THEN 'Unknown - other'::text
                ELSE 'oeps'::text
            END
        END AS "swExemption44Driver"
   FROM ((((((((public.hydro_object hdo_rbd2
     LEFT JOIN public.objectives_exemption_type ON ((1 = 1)))
     LEFT JOIN public.swb_exemption swce ON ((objectives_exemption_type.obex_id = swce.obex_id)))
     LEFT JOIN swb_oordeel ON ((swce.swb_id = swb_oordeel.swb_id)))
     LEFT JOIN public.water_body ON ((water_body.wbd_id = swb_oordeel.swb_id)))
     LEFT JOIN public.river_basin_disrict rbd ON ((rbd.rbd_id = water_body.rbd_id)))
     LEFT JOIN public.hydro_object hdo_rbd ON ((rbd.rbd_id = hdo_rbd.hdo_id)))
     LEFT JOIN driver_aant ON ((("left"((hdo_rbd2.inspire_id_local_id)::text, 4) = driver_aant.rbd) AND (driver_aant.art = substr(objectives_exemption_type.description, 8, 4)))))
     LEFT JOIN driver ON ((swb_oordeel.swb_id = driver.db_id)))
  WHERE ((hdo_rbd2.wkrv_id = 13) AND ((hdo_rbd2.hydro_object_type)::text = 'RiverBasinDistrict'::text) AND ((hdo_rbd2.inspire_id_local_id)::text ~~ 'NL%'::text) AND (((driver.naam IS NOT NULL) AND (driver_aant.aant > 0)) OR ((driver.naam IS NULL) AND (driver_aant.aant = 0))) AND (substr(objectives_exemption_type.description, 8, 4) = '4(4)'::text) AND (rbd.international_rbd IS NOT NULL) AND (length((hdo_rbd2.inspire_id_local_id)::text) = 4))
  ORDER BY ("left"((hdo_rbd2.inspire_id_local_id)::text, 4)), driver.naam;


--
-- Name: vw_swexemptions_swexemption44impact; Type: VIEW; Schema: wfd_reporting; Owner: -
--

CREATE VIEW vw_swexemptions_swexemption44impact AS
 WITH swb_oordeel AS (
         SELECT DISTINCT ON (hdo_swb.hdo_id, sw_ecological_status.opt_id) hdo_swb.hdo_id AS swb_id,
            swb_yearly_status.year_of_status AS jaar,
            sw_ecological_status.opt_id,
            classification_type.description AS oordeel,
            waarde_bepalings_methode_type.code AS wbpm
           FROM ((((public.swb_yearly_status
             LEFT JOIN public.hydro_object hdo_swb ON ((hdo_swb.hdo_id = swb_yearly_status.swb_id)))
             JOIN public.sw_ecological_status ON ((sw_ecological_status.sys_id = swb_yearly_status.sys_id)))
             LEFT JOIN public.classification_type ON ((sw_ecological_status.swes_id = classification_type.cls_id)))
             LEFT JOIN public.waarde_bepalings_methode_type ON ((waarde_bepalings_methode_type.wbpm_id = sw_ecological_status.wbpm_id)))
          WHERE ((hdo_swb.wkrv_id = 13) AND (swb_yearly_status.year_of_status = 2015) AND ((classification_type.description)::text <> 'goed'::text))
        UNION ALL
         SELECT DISTINCT ON (hdo_swb.hdo_id, sw_chemical_substance_status.opt_id) hdo_swb.hdo_id AS swb_id,
            swb_yearly_status.year_of_status AS jaar,
            sw_chemical_substance_status.opt_id,
            classification_type.description AS oordeel,
            waarde_bepalings_methode_type.code AS wbpm
           FROM ((((public.swb_yearly_status
             LEFT JOIN public.hydro_object hdo_swb ON ((hdo_swb.hdo_id = swb_yearly_status.swb_id)))
             JOIN public.sw_chemical_substance_status ON ((sw_chemical_substance_status.sys_id = swb_yearly_status.sys_id)))
             LEFT JOIN public.classification_type ON ((sw_chemical_substance_status.swcs_id = classification_type.cls_id)))
             LEFT JOIN public.waarde_bepalings_methode_type ON ((waarde_bepalings_methode_type.wbpm_id = sw_chemical_substance_status.wbpm_id)))
          WHERE ((hdo_swb.wkrv_id = 13) AND (swb_yearly_status.year_of_status = 2015) AND ((classification_type.description)::text = 'voldoet niet'::text))
  ORDER BY 1, 3, 4 DESC
        ), swb_oordeel_i AS (
         SELECT DISTINCT ON (swb_oordeel_1.swb_id) swb_oordeel_1.swb_id,
            swb_oordeel_1.opt_id,
            swb_oordeel_1.jaar,
            swb_oordeel_1.oordeel,
            swb_oordeel_1.wbpm
           FROM swb_oordeel swb_oordeel_1
          ORDER BY swb_oordeel_1.swb_id, swb_oordeel_1.oordeel DESC
        ), impact AS (
         SELECT hydro_object.hdo_id AS db_id,
                CASE
                    WHEN (ipe.eu_xsd IS NULL) THEN
                    CASE
                        WHEN (((swb_oordeel_i.oordeel)::text = 'voldoet'::text) OR ((swb_oordeel_i.oordeel)::text = 'goed'::text)) THEN 'NOSI - No significant impact'::text
                        ELSE 'UNKN - Unknown impact type'::text
                    END
                    ELSE ipe.eu_xsd
                END AS impact_type
           FROM ((((public.hydro_object
             LEFT JOIN public.swb_pressure ON (((hydro_object.hdo_id = swb_pressure.swb_id) AND (swb_pressure.is_significant = true))))
             LEFT JOIN public.swb_pressure_impact ON ((swb_pressure.swbp_id = swb_pressure_impact.swbp_id)))
             LEFT JOIN significant_impact_enum ipe ON ((ipe.i_id = swb_pressure_impact.impact_id)))
             LEFT JOIN swb_oordeel_i ON ((swb_oordeel_i.swb_id = hydro_object.hdo_id)))
          WHERE ((hydro_object.wkrv_id = 13) AND ((hydro_object.hydro_object_type)::text = 'SurfaceWaterBody'::text))
          ORDER BY hydro_object.hdo_id, ipe.eu_xsd
        ), impact_aant_ruw AS (
         SELECT "left"((hdo_rbd2_1.inspire_id_local_id)::text, 4) AS rbd,
            substr(objectives_exemption_type_1.description, 8, 4) AS art,
            count(impact_1.impact_type) AS aant
           FROM (((((((public.hydro_object hdo_rbd2_1
             LEFT JOIN public.objectives_exemption_type objectives_exemption_type_1 ON ((1 = 1)))
             LEFT JOIN public.swb_exemption swce_1 ON ((objectives_exemption_type_1.obex_id = swce_1.obex_id)))
             LEFT JOIN swb_oordeel swb_oordeel_1 ON ((swce_1.swb_id = swb_oordeel_1.swb_id)))
             LEFT JOIN public.water_body water_body_1 ON ((water_body_1.wbd_id = swb_oordeel_1.swb_id)))
             LEFT JOIN public.river_basin_disrict rbd_1 ON ((rbd_1.rbd_id = water_body_1.rbd_id)))
             LEFT JOIN public.hydro_object hdo_rbd_1 ON ((rbd_1.rbd_id = hdo_rbd_1.hdo_id)))
             LEFT JOIN impact impact_1 ON ((swb_oordeel_1.swb_id = impact_1.db_id)))
          GROUP BY ("left"((hdo_rbd2_1.inspire_id_local_id)::text, 4)), (substr(objectives_exemption_type_1.description, 8, 4)), impact_1.impact_type, hdo_rbd2_1.wkrv_id, hdo_rbd2_1.hydro_object_type, hdo_rbd2_1.inspire_id_local_id
         HAVING ((hdo_rbd2_1.wkrv_id = 13) AND ((hdo_rbd2_1.hydro_object_type)::text = 'RiverBasinDistrict'::text) AND ((hdo_rbd2_1.inspire_id_local_id)::text ~~ 'NL%'::text))
          ORDER BY ("left"((hdo_rbd2_1.inspire_id_local_id)::text, 4)), (substr(objectives_exemption_type_1.description, 8, 4))
        ), impact_aant AS (
         SELECT DISTINCT ON (impact_aant_ruw.rbd, impact_aant_ruw.art) impact_aant_ruw.rbd,
            impact_aant_ruw.art,
            impact_aant_ruw.aant
           FROM impact_aant_ruw
          ORDER BY impact_aant_ruw.rbd, impact_aant_ruw.art, impact_aant_ruw.aant DESC
        )
 SELECT DISTINCT ON (("left"((hdo_rbd2.inspire_id_local_id)::text, 4)), impact.impact_type) (hdo_rbd2.hdo_id)::text AS "sWExemptionsID",
        CASE
            WHEN (impact_aant.aant = 0) THEN 'Not applicable'::text
            ELSE impact.impact_type
        END AS "swExemption44Impact"
   FROM ((((((((public.hydro_object hdo_rbd2
     LEFT JOIN public.objectives_exemption_type ON ((1 = 1)))
     LEFT JOIN public.swb_exemption swce ON ((objectives_exemption_type.obex_id = swce.obex_id)))
     LEFT JOIN swb_oordeel ON ((swce.swb_id = swb_oordeel.swb_id)))
     LEFT JOIN public.water_body ON ((water_body.wbd_id = swb_oordeel.swb_id)))
     LEFT JOIN public.river_basin_disrict rbd ON ((rbd.rbd_id = water_body.rbd_id)))
     LEFT JOIN public.hydro_object hdo_rbd ON ((rbd.rbd_id = hdo_rbd.hdo_id)))
     LEFT JOIN impact_aant ON ((("left"((hdo_rbd2.inspire_id_local_id)::text, 4) = impact_aant.rbd) AND (impact_aant.art = substr(objectives_exemption_type.description, 8, 4)))))
     LEFT JOIN impact ON ((swb_oordeel.swb_id = impact.db_id)))
  WHERE ((hdo_rbd2.wkrv_id = 13) AND ((hdo_rbd2.hydro_object_type)::text = 'RiverBasinDistrict'::text) AND ((hdo_rbd2.inspire_id_local_id)::text ~~ 'NL%'::text) AND (((impact.impact_type IS NOT NULL) AND (impact_aant.aant > 0)) OR ((impact.impact_type IS NULL) AND (impact_aant.aant = 0))) AND (substr(objectives_exemption_type.description, 8, 4) = '4(4)'::text) AND (rbd.international_rbd IS NOT NULL) AND (length((hdo_rbd2.inspire_id_local_id)::text) = 4))
  ORDER BY ("left"((hdo_rbd2.inspire_id_local_id)::text, 4)), impact.impact_type;


--
-- Name: vw_swexemptions_swexemption45driver; Type: VIEW; Schema: wfd_reporting; Owner: -
--

CREATE VIEW vw_swexemptions_swexemption45driver AS
 SELECT DISTINCT ON (hdo_rbd2.hdo_id) ((hdo_rbd2.hdo_id)::text || '5'::text) AS "sWExemptionsID",
    'Exemption not applied'::text AS "swExemption45Driver"
   FROM (((((public.hydro_object hdo_rbd2
     LEFT JOIN public.objectives_exemption_type ON ((1 = 1)))
     LEFT JOIN public.gwb_chemical_exemption gwce ON ((objectives_exemption_type.obex_id = gwce.obex_id)))
     LEFT JOIN public.water_body ON ((water_body.wbd_id = gwce.gwb_id)))
     LEFT JOIN public.river_basin_disrict rbd ON ((rbd.rbd_id = water_body.rbd_id)))
     LEFT JOIN public.hydro_object hdo_rbd ON ((rbd.rbd_id = hdo_rbd.hdo_id)))
  WHERE ((hdo_rbd2.wkrv_id = 13) AND ((hdo_rbd2.hydro_object_type)::text = 'RiverBasinDistrict'::text) AND ((hdo_rbd2.inspire_id_local_id)::text ~~ 'NL%'::text) AND (rbd.international_rbd IS NOT NULL) AND (length((hdo_rbd2.inspire_id_local_id)::text) = 4))
  ORDER BY hdo_rbd2.hdo_id;


--
-- Name: vw_swexemptions_swexemption45impact; Type: VIEW; Schema: wfd_reporting; Owner: -
--

CREATE VIEW vw_swexemptions_swexemption45impact AS
 SELECT DISTINCT ON (hdo_rbd2.hdo_id) ((hdo_rbd2.hdo_id)::text || '5'::text) AS "sWExemptionsID",
    'Not applicable'::text AS "swExemption45Impact",
    hdo_rbd2.inspire_id_local_id
   FROM (((((public.hydro_object hdo_rbd2
     LEFT JOIN public.objectives_exemption_type ON ((1 = 1)))
     LEFT JOIN public.gwb_chemical_exemption gwce ON ((objectives_exemption_type.obex_id = gwce.obex_id)))
     LEFT JOIN public.water_body ON ((water_body.wbd_id = gwce.gwb_id)))
     LEFT JOIN public.river_basin_disrict rbd ON ((rbd.rbd_id = water_body.rbd_id)))
     LEFT JOIN public.hydro_object hdo_rbd ON ((rbd.rbd_id = hdo_rbd.hdo_id)))
  WHERE ((hdo_rbd2.wkrv_id = 13) AND ((hdo_rbd2.hydro_object_type)::text = 'RiverBasinDistrict'::text) AND ((hdo_rbd2.inspire_id_local_id)::text ~~ 'NL%'::text) AND (rbd.international_rbd IS NOT NULL) AND (length((hdo_rbd2.inspire_id_local_id)::text) = 4))
  ORDER BY hdo_rbd2.hdo_id;


--
-- Name: vw_swexemptions_swexemption46; Type: VIEW; Schema: wfd_reporting; Owner: -
--

CREATE VIEW vw_swexemptions_swexemption46 AS
 WITH e46_1 AS (
         SELECT DISTINCT ON (("left"((hdo_rbd2.inspire_id_local_id)::text, 4)), (substr(objectives_exemption_type.description, 8, 4)), gwce.obex_id) ((hdo_rbd2.hdo_id)::text || substr(objectives_exemption_type.description, 10, 1)) AS "sWExemptionsID",
                CASE
                    WHEN (gwce.obex_id = ANY (ARRAY[4, 5, 6])) THEN 'Yes (prolonged droughts)'::text
                    ELSE 'Article 4(6) has not been applied'::text
                END AS "swExemption46"
           FROM (((((public.hydro_object hdo_rbd2
             LEFT JOIN public.objectives_exemption_type ON ((1 = 1)))
             LEFT JOIN public.swb_exemption gwce ON ((objectives_exemption_type.obex_id = gwce.obex_id)))
             LEFT JOIN public.water_body ON ((water_body.wbd_id = gwce.swb_id)))
             LEFT JOIN public.river_basin_disrict rbd ON ((rbd.rbd_id = water_body.rbd_id)))
             LEFT JOIN public.hydro_object hdo_rbd ON ((rbd.rbd_id = hdo_rbd.hdo_id)))
          WHERE ((hdo_rbd2.wkrv_id = 13) AND ((hdo_rbd2.hydro_object_type)::text = 'RiverBasinDistrict'::text) AND ((hdo_rbd2.inspire_id_local_id)::text ~~ 'NL%'::text) AND (substr(objectives_exemption_type.description, 8, 4) = '4(6)'::text))
          ORDER BY ("left"((hdo_rbd2.inspire_id_local_id)::text, 4)), (substr(objectives_exemption_type.description, 8, 4)), gwce.obex_id
        ), e46_2 AS (
         SELECT DISTINCT ON (("left"((hdo_rbd2.inspire_id_local_id)::text, 4)), (substr(objectives_exemption_type.description, 8, 4)), gwce.obex_id) ((hdo_rbd2.hdo_id)::text || substr(objectives_exemption_type.description, 10, 1)) AS "sWExemptionsID",
                CASE
                    WHEN (gwce.obex_id = ANY (ARRAY[4, 5, 6])) THEN 'Yes (extreme floods)'::text
                    ELSE 'Article 4(6) has not been applied'::text
                END AS "swExemption46"
           FROM (((((public.hydro_object hdo_rbd2
             LEFT JOIN public.objectives_exemption_type ON ((1 = 1)))
             LEFT JOIN public.swb_exemption gwce ON ((objectives_exemption_type.obex_id = gwce.obex_id)))
             LEFT JOIN public.water_body ON ((water_body.wbd_id = gwce.swb_id)))
             LEFT JOIN public.river_basin_disrict rbd ON ((rbd.rbd_id = water_body.rbd_id)))
             LEFT JOIN public.hydro_object hdo_rbd ON ((rbd.rbd_id = hdo_rbd.hdo_id)))
          WHERE ((hdo_rbd2.wkrv_id = 13) AND ((hdo_rbd2.hydro_object_type)::text = 'RiverBasinDistrict'::text) AND ((hdo_rbd2.inspire_id_local_id)::text ~~ 'NL%'::text) AND (substr(objectives_exemption_type.description, 8, 4) = '4(6)'::text))
          ORDER BY ("left"((hdo_rbd2.inspire_id_local_id)::text, 4)), (substr(objectives_exemption_type.description, 8, 4)), gwce.obex_id
        ), e46_3 AS (
         SELECT DISTINCT ON (("left"((hdo_rbd2.inspire_id_local_id)::text, 4)), (substr(objectives_exemption_type.description, 8, 4)), gwce.obex_id) ((hdo_rbd2.hdo_id)::text || substr(objectives_exemption_type.description, 10, 1)) AS "sWExemptionsID",
                CASE
                    WHEN (gwce.obex_id = ANY (ARRAY[4, 5, 6])) THEN 'Yes (accidents)'::text
                    ELSE 'Article 4(6) has not been applied'::text
                END AS "swExemption46"
           FROM (((((public.hydro_object hdo_rbd2
             LEFT JOIN public.objectives_exemption_type ON ((1 = 1)))
             LEFT JOIN public.swb_exemption gwce ON ((objectives_exemption_type.obex_id = gwce.obex_id)))
             LEFT JOIN public.water_body ON ((water_body.wbd_id = gwce.swb_id)))
             LEFT JOIN public.river_basin_disrict rbd ON ((rbd.rbd_id = water_body.rbd_id)))
             LEFT JOIN public.hydro_object hdo_rbd ON ((rbd.rbd_id = hdo_rbd.hdo_id)))
          WHERE ((hdo_rbd2.wkrv_id = 13) AND ((hdo_rbd2.hydro_object_type)::text = 'RiverBasinDistrict'::text) AND ((hdo_rbd2.inspire_id_local_id)::text ~~ 'NL%'::text) AND (substr(objectives_exemption_type.description, 8, 4) = '4(6)'::text))
          ORDER BY ("left"((hdo_rbd2.inspire_id_local_id)::text, 4)), (substr(objectives_exemption_type.description, 8, 4)), gwce.obex_id
        ), e46 AS (
         SELECT e46_1."sWExemptionsID",
            e46_1."swExemption46"
           FROM e46_1
        UNION ALL
         SELECT e46_2."sWExemptionsID",
            e46_2."swExemption46"
           FROM e46_2
        UNION ALL
         SELECT e46_3."sWExemptionsID",
            e46_3."swExemption46"
           FROM e46_3
        )
 SELECT DISTINCT ON (e46."sWExemptionsID", e46."swExemption46") e46."sWExemptionsID",
    e46."swExemption46"
   FROM e46
  ORDER BY e46."sWExemptionsID", e46."swExemption46";


--
-- Name: vw_swexemptions_swexemption47; Type: VIEW; Schema: wfd_reporting; Owner: -
--

CREATE VIEW vw_swexemptions_swexemption47 AS
 WITH e47 AS (
         SELECT DISTINCT ON (("left"((hdo_rbd2.inspire_id_local_id)::text, 4)), gwce.obex_id) (hdo_rbd2.hdo_id)::text AS "sWExemptionsID",
                CASE
                    WHEN (gwce.obex_id = ANY (ARRAY[7, 8])) THEN 'Other'::text
                    ELSE 'Article 4(7) has not been applied'::text
                END AS "swExemption47"
           FROM (((((public.hydro_object hdo_rbd2
             LEFT JOIN public.objectives_exemption_type ON ((1 = 1)))
             LEFT JOIN public.swb_exemption gwce ON ((objectives_exemption_type.obex_id = gwce.obex_id)))
             LEFT JOIN public.water_body ON ((water_body.wbd_id = gwce.swb_id)))
             LEFT JOIN public.river_basin_disrict rbd ON ((rbd.rbd_id = water_body.rbd_id)))
             LEFT JOIN public.hydro_object hdo_rbd ON ((rbd.rbd_id = hdo_rbd.hdo_id)))
          WHERE ((hdo_rbd2.wkrv_id = 13) AND ((hdo_rbd2.hydro_object_type)::text = 'RiverBasinDistrict'::text) AND ((hdo_rbd2.inspire_id_local_id)::text ~~ 'NL%'::text) AND (substr(objectives_exemption_type.description, 8, 4) = '4(6)'::text))
          ORDER BY ("left"((hdo_rbd2.inspire_id_local_id)::text, 4)), gwce.obex_id
        )
 SELECT DISTINCT ON (e47."sWExemptionsID", e47."swExemption47") e47."sWExemptionsID",
    e47."swExemption47"
   FROM e47
  ORDER BY e47."sWExemptionsID", e47."swExemption47";


--
-- Name: vw_swphysicochemicalqe; Type: VIEW; Schema: wfd_reporting; Owner: -
--

CREATE VIEW vw_swphysicochemicalqe AS
 WITH doelen AS (
         SELECT DISTINCT ON (norm_value.nrmv_id, vw_waargenomen_eigenschap_db_id."DB_ID", classification_type.description) vw_waterlichamen.omschrijving AS "Waterlichaam_Naam",
            "left"((vw_oppervlaktewaterlichamen.stroomgebieddistrict)::text, 4) AS sgb,
            vw_oppervlaktewaterlichamen.type AS watertype,
            vw_oppervlaktewaterlichamen.referentietype AS doeltype,
            vw_oppervlaktewaterlichamen.waterlichaam_status AS status,
                CASE
                    WHEN ((vw_waargenomen_eigenschap_db_id."Grootheid_Omschrijving")::text = '(massa)Concentratie'::text) THEN concat(vw_waargenomen_eigenschap_db_id."Typering_Omschrijving", vw_waargenomen_eigenschap_db_id."ChemischeStof_Omschrijving")
                    ELSE concat(vw_waargenomen_eigenschap_db_id."Typering_Omschrijving", vw_waargenomen_eigenschap_db_id."Grootheid_Omschrijving")
                END AS parameter,
            waarde_bewerkings_methode_type.code AS wbwm,
            eenheid_type.code AS eenheid,
            classification_type.description AS klasse,
            (bepaling_grens_type.code)::text AS klasse_onder_bep,
            (norm_value.lowerbound_value)::text AS klasse_onder,
            (bgt.code)::text AS klasse_boven_bep,
            (norm_value.upperbound_value)::text AS klasse_boven,
            norm.wkrv_id AS versie,
            norm.observed_property AS opt_id,
                CASE
                    WHEN (krw_kwal."Is_van_toepassing" IS TRUE) THEN true
                    ELSE false
                END AS kwal_element,
            date_part('year'::text, norm_value.begin_lifespan_version) AS jaar,
            vw_waterlichamen.identificatie AS owmident,
            vw_waterlichamen.omschrijving AS owmnaam
           FROM ((((((((((((((((((public.norm_value
             LEFT JOIN public.norm ON ((norm_value.nrm_id = norm.nrm_id)))
             LEFT JOIN public.norm_feature ON ((norm_feature.nrm_id = norm.nrm_id)))
             LEFT JOIN public.vw_waargenomen_eigenschap_db_id ON ((vw_waargenomen_eigenschap_db_id."DB_ID" = norm.observed_property)))
             LEFT JOIN public.vw_waterlichamen ON ((vw_waterlichamen.db_id = norm_feature.hdo_id)))
             LEFT JOIN public.vw_oppervlaktewaterlichamen ON ((vw_oppervlaktewaterlichamen.db_id = norm_feature.hdo_id)))
             LEFT JOIN public.level_of_area_type ON ((level_of_area_type.loa_id = norm.defined_at_level_id)))
             LEFT JOIN public.norm_groep_type ON ((norm_groep_type.nmgp_id = norm.norm_groep_id)))
             LEFT JOIN public.waarde_bewerkings_methode_type ON ((waarde_bewerkings_methode_type.wbm_id = norm_value.value_processing_method)))
             LEFT JOIN public.eenheid_type ON ((eenheid_type.eenh_id = norm_value.lowerbound_uom_id)))
             LEFT JOIN public.compartiment_type ON ((compartiment_type.cptm_id = norm_value.cptm_id)))
             LEFT JOIN public.classification_type ON ((classification_type.cls_id = norm_value.norm_klasse_id)))
             LEFT JOIN public.bepaling_grens_type ON ((bepaling_grens_type.bpg_id = norm_value.lowerbound_limit_symbol_id)))
             LEFT JOIN public.bepaling_grens_type bgt ON ((bgt.bpg_id = norm_value.upperbound_limit_symbol_id)))
             LEFT JOIN public.namespace_type ON ((namespace_type.ns_id = vw_waterlichamen.waterbeheerder_code)))
             JOIN public.competentauthority_namespacetype ON ((competentauthority_namespacetype.ns_id = vw_waterlichamen.waterbeheerder_code)))
             JOIN public.vw_competent_authority ON ((vw_competent_authority."DB_ID" = competentauthority_namespacetype.ore_id)))
             LEFT JOIN ( SELECT substance_group_element.chs_id,
                    substance_group_element.ssge_id
                   FROM public.substance_group_element
                  WHERE (substance_group_element.ssge_id = 3125)) ssg_3125 ON ((ssg_3125.chs_id = vw_waargenomen_eigenschap_db_id."ChemischeStof_DB_ID")))
             LEFT JOIN public.vw_krw_kwaliteitselement krw_kwal ON ((((krw_kwal."Watertype_Code")::text = (vw_oppervlaktewaterlichamen.referentietype)::text) AND (krw_kwal."Waargenomen_Eigenschap_DB_ID" = vw_waargenomen_eigenschap_db_id."DB_ID"))))
          WHERE ((level_of_area_type.loa_id = 5) AND (norm_groep_type.nmgp_id = 7) AND ((norm_value.end_lifespan_version IS NULL) OR (norm_value.end_lifespan_version >= now())) AND (norm.wkrv_id = 13) AND ((classification_type.description)::text = 'goed'::text) AND (norm.observed_property = ANY (ARRAY[619, 4212, 3685, 632, 3773, 2948, 579, 3841])))
          ORDER BY norm_value.nrmv_id, vw_waargenomen_eigenschap_db_id."DB_ID", classification_type.description, norm.last_change_time DESC, norm.wkrv_id DESC
        )
 SELECT
        CASE doelen.opt_id
            WHEN 619 THEN 'QE3-1-6-1-5 - Total Nitrogen'::text
            WHEN 4212 THEN 'QE3-1-3-1 - Oxygen saturation (%)'::text
            WHEN 3685 THEN 'QE3-1-5-2 - pH'::text
            WHEN 632 THEN 'QE3-1-6-2-2 - Total Phosphorous'::text
            WHEN 3773 THEN 'QE3-1-2-1 - Water temperature (Celsius)'::text
            WHEN 2948 THEN 'QE3-1-6-4 - Other determinand for nutrient conditions'::text
            WHEN 3841 THEN 'QE3-1-1-1 - Secchi disk depth'::text
            WHEN 579 THEN 'QE3-1-4-2 - Other determinand for salinity'::text
            ELSE 'oeps'::text
        END AS "physChemQECode",
        CASE doelen.opt_id
            WHEN 2948 THEN 'DIN - Dissolved Inorganic Nitrogen'::text
            WHEN 579 THEN 'Chloride'::text
            ELSE NULL::text
        END AS "physChemQEOther",
        CASE
            WHEN ((doelen.doeltype)::text ~~ 'R%'::text) THEN 'Yes'::text
            ELSE 'No'::text
        END AS "physChemCategoryRW",
        CASE
            WHEN ((doelen.doeltype)::text ~~ 'M%'::text) THEN 'Yes'::text
            ELSE 'No'::text
        END AS "physChemCategoryLW",
        CASE
            WHEN ((doelen.doeltype)::text ~~ 'O%'::text) THEN 'Yes'::text
            ELSE 'No'::text
        END AS "physChemCategoryTW",
        CASE
            WHEN ((doelen.doeltype)::text ~~ 'K%'::text) THEN 'Yes'::text
            ELSE 'No'::text
        END AS "physChemCategoryCW",
    (((doelen.doeltype)::text || '|'::text) || (doelen.owmident)::text) AS "physChemTypeCode",
        CASE
            WHEN (doelen.klasse_onder IS NOT NULL) THEN
            CASE
                WHEN (doelen.klasse_boven IS NOT NULL) THEN concat(doelen.klasse_onder_bep, ' ', doelen.klasse_onder, ' | ', doelen.klasse_boven_bep, ' ', doelen.klasse_boven)
                ELSE concat(doelen.klasse_onder_bep, ' ', doelen.klasse_onder)
            END
            ELSE concat(doelen.klasse_boven_bep, ' ', doelen.klasse_boven)
        END AS "physChemValue",
        CASE doelen.opt_id
            WHEN 619 THEN 'mg{N}/L'::text
            WHEN 4212 THEN '%{saturation}'::text
            WHEN 632 THEN 'mg{P}/L'::text
            WHEN 2948 THEN 'mg{N}/L'::text
            WHEN 3841 THEN 'm'::text
            WHEN 579 THEN 'mg/L'::text
            WHEN 3773 THEN 'CEL'::text
            WHEN 3685 THEN 'pH'::text
            ELSE 'oeps'::text
        END AS "physChemQEUnit",
    NULL::text AS "physChemQEUnitOther",
        CASE doelen.opt_id
            WHEN 619 THEN 'AA-EQS'::text
            WHEN 4212 THEN 'AA-EQS'::text
            WHEN 3685 THEN 'MAC-EQS'::text
            WHEN 632 THEN 'AA-EQS'::text
            WHEN 3773 THEN 'MAC-EQS'::text
            WHEN 2948 THEN 'AA-EQS'::text
            WHEN 3841 THEN 'AA-EQS'::text
            WHEN 579 THEN 'AA-EQS'::text
            ELSE 'oeps'::text
        END AS "physChemStandardType",
    NULL::text AS "physChemStandardOther",
    'Yes'::text AS "physChemGMBoundary",
    doelen.sgb
   FROM doelen
  ORDER BY doelen.owmident, doelen.parameter;


--
-- Name: vw_swsupportingqe; Type: VIEW; Schema: wfd_reporting; Owner: -
--

CREATE VIEW vw_swsupportingqe AS
 WITH stt AS (
         SELECT DISTINCT ON (("left"((stt.code)::text, 1)), wfd_qe_swtype.opt_id) wfd_qe_swtype.opt_id,
            "left"((stt.code)::text, 1) AS code,
            wfd_qe_swtype.is_applicable,
            stt.swc_id
           FROM (public.sw_typology_type stt
             LEFT JOIN public.wfd_qe_swtype ON ((stt.styp_id = wfd_qe_swtype.swt_id)))
          ORDER BY ("left"((stt.code)::text, 1)), wfd_qe_swtype.opt_id, wfd_qe_swtype.is_applicable DESC
        ), qe_rel AS (
         SELECT
                CASE opt.opt_id
                    WHEN 579 THEN 'QE3-1-4 - Salinity conditions'::text
                    WHEN 619 THEN 'QE3-1-6 - Nutrient conditions'::text
                    WHEN 632 THEN 'QE3-1-6 - Nutrient conditions'::text
                    WHEN 2948 THEN 'QE3-1-6 - Nutrient conditions'::text
                    WHEN 3685 THEN 'QE3-1-5 - Acidification status'::text
                    WHEN 4212 THEN 'QE3-1-3 - Oxygenation conditions'::text
                    WHEN 3841 THEN 'QE3-1-1 - Transparency conditions'::text
                    WHEN 3773 THEN 'QE3-1-2 - Thermal conditions'::text
                    ELSE NULL::text
                END AS "supportingQECode",
                CASE
                    WHEN (stt_rw.is_applicable = true) THEN 'Yes'::text
                    ELSE 'No'::text
                END AS "supportingQECategoryRW",
                CASE
                    WHEN (stt_lw.is_applicable = true) THEN 'Yes'::text
                    ELSE 'No'::text
                END AS "supportingQECategoryLW",
                CASE
                    WHEN (stt_tw.is_applicable = true) THEN 'Yes'::text
                    ELSE 'No'::text
                END AS "supportingQECategoryTW",
                CASE
                    WHEN (stt_cw.is_applicable = true) THEN 'Yes'::text
                    ELSE 'No'::text
                END AS "supportingQECategoryCW",
            NULL::unknown AS "supportingQESensitivityBQE"
           FROM ((((public.observed_property_type opt
             LEFT JOIN stt stt_cw ON (((stt_cw.code = 'K'::text) AND (stt_cw.opt_id = opt.opt_id))))
             LEFT JOIN stt stt_lw ON (((stt_lw.code = 'M'::text) AND (stt_lw.opt_id = opt.opt_id))))
             LEFT JOIN stt stt_rw ON (((stt_rw.code = 'R'::text) AND (stt_rw.opt_id = opt.opt_id))))
             LEFT JOIN stt stt_tw ON (((stt_tw.code = 'O'::text) AND (stt_tw.opt_id = opt.opt_id))))
          WHERE (opt.opt_id = ANY (ARRAY[579, 619, 632, 3685, 4212, 3841, 3773, 2948]))
        )
 SELECT DISTINCT ON (qe_rel."supportingQECode") qe_rel."supportingQECode",
    qe_rel."supportingQECategoryRW",
    qe_rel."supportingQECategoryLW",
        CASE
            WHEN (qe_rel."supportingQECode" = 'QE3-1-6 - Nutrient conditions'::text) THEN 'Yes'::text
            ELSE qe_rel."supportingQECategoryTW"
        END AS "supportingQECategoryTW",
        CASE
            WHEN (qe_rel."supportingQECode" = 'QE3-1-6 - Nutrient conditions'::text) THEN 'Yes'::text
            ELSE qe_rel."supportingQECategoryCW"
        END AS "supportingQECategoryCW"
   FROM qe_rel
  ORDER BY qe_rel."supportingQECode", qe_rel."supportingQECategoryLW" DESC, qe_rel."supportingQECategoryRW" DESC,
        CASE
            WHEN (qe_rel."supportingQECode" = 'QE3-1-6 - Nutrient conditions'::text) THEN 'Yes'::text
            ELSE qe_rel."supportingQECategoryTW"
        END DESC,
        CASE
            WHEN (qe_rel."supportingQECode" = 'QE3-1-6 - Nutrient conditions'::text) THEN 'Yes'::text
            ELSE qe_rel."supportingQECategoryCW"
        END DESC;


--
-- Name: vw_swtype; Type: VIEW; Schema: wfd_reporting; Owner: -
--

CREATE VIEW vw_swtype AS
 SELECT sw_typology_type.code AS "swTypeCode",
    sw_typology_type.description AS "swTypeDescription",
        CASE
            WHEN (eu_intercalibration_type.eu_xsd IS NULL) THEN 'Not applicable'::character varying
            ELSE eu_intercalibration_type.eu_xsd
        END AS "swIntercalibrationType",
        CASE "left"((sw_typology_type.code)::text, 1)
            WHEN 'K'::text THEN 'CW'::text
            WHEN 'O'::text THEN 'TW'::text
            WHEN 'M'::text THEN 'LW'::text
            WHEN 'R'::text THEN 'RW'::text
            ELSE 'oeps'::text
        END AS "swTypeCategory",
    NULL::text AS "swTypeSpecificReferenceConditionsForBQEs",
    NULL::text AS "swTypeSpecificReferenceConditionsForHyMoQEs",
    NULL::text AS "swTypeSpecificReferenceConditionsForPhysChemQEs"
   FROM public.sw_typology_type,
    public.eu_intercalibration_type
  WHERE (eu_intercalibration_type.icalt = sw_typology_type.icalt_id);


SET search_path = beheer, pg_catalog;

--
-- Name: suth_id; Type: DEFAULT; Schema: beheer; Owner: -
--

ALTER TABLE ONLY stat_user_tables_hist ALTER COLUMN suth_id SET DEFAULT nextval('stat_user_tables_hist_suth_id_seq'::regclass);


SET search_path = domains, pg_catalog;

--
-- Name: bmm_id; Type: DEFAULT; Schema: domains; Owner: -
--

ALTER TABLE ONLY bemonsteringsmethode ALTER COLUMN bmm_id SET DEFAULT nextval('bemonsteringsmethode_bmm_id_seq'::regclass);


--
-- Name: ctf_id; Type: DEFAULT; Schema: domains; Owner: -
--

ALTER TABLE ONLY certificeringscode ALTER COLUMN ctf_id SET DEFAULT nextval('certificeringscode_ctf_id_seq'::regclass);


--
-- Name: clt_id; Type: DEFAULT; Schema: domains; Owner: -
--

ALTER TABLE ONLY confidence_level_type ALTER COLUMN clt_id SET DEFAULT nextval('confidence_level_type_clt_id_seq'::regclass);


--
-- Name: driver_id; Type: DEFAULT; Schema: domains; Owner: -
--

ALTER TABLE ONLY drivers ALTER COLUMN driver_id SET DEFAULT nextval('drivers_driver_id_seq'::regclass);


--
-- Name: impact_id; Type: DEFAULT; Schema: domains; Owner: -
--

ALTER TABLE ONLY impacts ALTER COLUMN impact_id SET DEFAULT nextval('impacts_impact_id_seq'::regclass);


--
-- Name: idd_id; Type: DEFAULT; Schema: domains; Owner: -
--

ALTER TABLE ONLY indicator_descriptor ALTER COLUMN idd_id SET DEFAULT nextval('indicator_descriptor_idd_id_seq'::regclass);


--
-- Name: ltwb_id; Type: DEFAULT; Schema: domains; Owner: -
--

ALTER TABLE ONLY locatietype_waardebepaling ALTER COLUMN ltwb_id SET DEFAULT nextval('locatietype_waardebepaling_ltwb_id_seq'::regclass);


--
-- Name: mar_id; Type: DEFAULT; Schema: domains; Owner: -
--

ALTER TABLE ONLY meetapparaat ALTER COLUMN mar_id SET DEFAULT nextval('meetapparaat_mar_id_seq'::regclass);


--
-- Name: mbm_id; Type: DEFAULT; Schema: domains; Owner: -
--

ALTER TABLE ONLY monsterbewerkingsmethode ALTER COLUMN mbm_id SET DEFAULT nextval('monsterbewerkingsmethode_mbm_id_seq'::regclass);


--
-- Name: mvb_id; Type: DEFAULT; Schema: domains; Owner: -
--

ALTER TABLE ONLY monstervoorbehandeling ALTER COLUMN mvb_id SET DEFAULT nextval('monstervoorbehandeling_mvb_id_seq'::regclass);


--
-- Name: org_id; Type: DEFAULT; Schema: domains; Owner: -
--

ALTER TABLE ONLY orgaan ALTER COLUMN org_id SET DEFAULT nextval('orgaan_org_id_seq'::regclass);


--
-- Name: scm_id; Type: DEFAULT; Schema: domains; Owner: -
--

ALTER TABLE ONLY status_change_motivation_type ALTER COLUMN scm_id SET DEFAULT nextval('status_change_motivation_type_scm_id_seq'::regclass);


--
-- Name: var_id; Type: DEFAULT; Schema: domains; Owner: -
--

ALTER TABLE ONLY veldapparaat ALTER COLUMN var_id SET DEFAULT nextval('veldapparaat_var_id_seq'::regclass);


--
-- Name: wbpt_id; Type: DEFAULT; Schema: domains; Owner: -
--

ALTER TABLE ONLY waardebepalingstechniek ALTER COLUMN wbpt_id SET DEFAULT nextval('waardebepalingstechniek_wbpt_id_seq'::regclass);


SET search_path = krm, pg_catalog;

--
-- Name: cym_id; Type: DEFAULT; Schema: krm; Owner: -
--

ALTER TABLE ONLY cycle_description ALTER COLUMN cym_id SET DEFAULT nextval('cycle_description_cym_id_seq'::regclass);


SET search_path = monprog, pg_catalog;

--
-- Name: pot_id; Type: DEFAULT; Schema: monprog; Owner: -
--

ALTER TABLE ONLY planned_observation_time ALTER COLUMN pot_id SET DEFAULT nextval('planned_observation_time_pot_id_seq'::regclass);


SET search_path = public, pg_catalog;

--
-- Name: id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY "Actie" ALTER COLUMN id SET DEFAULT nextval('"Actie_id_seq"'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY "VerwerkingsVerslag" ALTER COLUMN id SET DEFAULT nextval('"VerwerkingsVerslag_id_seq"'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY "VerwerkingsVerslagParameter" ALTER COLUMN id SET DEFAULT nextval('"VerwerkingsVerslagParameter_id_seq"'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY "VerwerkingsVerslagRegel" ALTER COLUMN id SET DEFAULT nextval('"VerwerkingsVerslagRegel_id_seq"'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY "VerwerkingsVerslagRegelSoort" ALTER COLUMN id SET DEFAULT nextval('"VerwerkingsVerslagRegelSoort_id_seq"'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY "VerwerkingsVerslagStatus" ALTER COLUMN id SET DEFAULT nextval('"VerwerkingsVerslagStatus_id_seq"'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY _hab_ds ALTER COLUMN id SET DEFAULT nextval('_hab_ds_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY _vog_ds ALTER COLUMN id SET DEFAULT nextval('_vog_ds_id_seq'::regclass);


--
-- Name: atl_id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY any_thematic_link ALTER COLUMN atl_id SET DEFAULT nextval('any_thematic_link_atl_id_seq'::regclass);


--
-- Name: applicationid; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY application ALTER COLUMN applicationid SET DEFAULT nextval('application_applicationid_seq'::regclass);


--
-- Name: bma_id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY basic_measure113a_type ALTER COLUMN bma_id SET DEFAULT nextval('basic_measure113a_type_bma_id_seq'::regclass);


--
-- Name: bpg_id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY bepaling_grens_type ALTER COLUMN bpg_id SET DEFAULT nextval('bepaling_grens_type_bpg_id_seq'::regclass);


--
-- Name: bronnen_id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY bronnen ALTER COLUMN bronnen_id SET DEFAULT nextval('bronnen_bronnen_id_seq'::regclass);


--
-- Name: crc_id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY ca_role_code ALTER COLUMN crc_id SET DEFAULT nextval('ca_role_code_crc_id_seq'::regclass);


--
-- Name: chs_id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY chemische_stof_type ALTER COLUMN chs_id SET DEFAULT nextval('chemische_stof_type_chs_id_seq'::regclass);


--
-- Name: clsg_id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY classification_group_type ALTER COLUMN clsg_id SET DEFAULT nextval('classification_group_type_clsg_id_seq'::regclass);


--
-- Name: cls_id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY classification_type ALTER COLUMN cls_id SET DEFAULT nextval('classification_type_cls_id_seq'::regclass);


--
-- Name: cptm_id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY compartiment_type ALTER COLUMN cptm_id SET DEFAULT nextval('compartiment_type_cptm_id_seq'::regclass);


--
-- Name: ca_ns_id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY competentauthority_namespacetype ALTER COLUMN ca_ns_id SET DEFAULT nextval('competentauthority_namespacetype_ca_ns_id_seq'::regclass);


--
-- Name: cog_id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY condition_of_gw_type ALTER COLUMN cog_id SET DEFAULT nextval('condition_of_gw_type_cog_id_seq'::regclass);


--
-- Name: csvtransformationid; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY csvtransformation ALTER COLUMN csvtransformationid SET DEFAULT nextval('csvtransformation_csvtransformationid_seq'::regclass);


--
-- Name: dpr_id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY depth_range_type ALTER COLUMN dpr_id SET DEFAULT nextval('depth_range_type_dpr_id_seq'::regclass);


--
-- Name: domaintable_changes_id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY domaintable_changes ALTER COLUMN domaintable_changes_id SET DEFAULT nextval('domaintable_changes_domaintable_changes_id_seq'::regclass);


--
-- Name: eenh_id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY eenheid_type ALTER COLUMN eenh_id SET DEFAULT nextval('eenheid_type_eenh_id_seq'::regclass);


--
-- Name: emd_id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY environmental_domain_code ALTER COLUMN emd_id SET DEFAULT nextval('environmental_domain_code_emd_id_seq'::regclass);


--
-- Name: a43b_id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY eu_article_43b_type ALTER COLUMN a43b_id SET DEFAULT nextval('eu_article_43b_type_a43b_id_seq'::regclass);


--
-- Name: dlt_id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY eu_depth_level_type ALTER COLUMN dlt_id SET DEFAULT nextval('eu_depth_level_type_dlt_id_seq'::regclass);


--
-- Name: euf_id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY eu_fund_type ALTER COLUMN euf_id SET DEFAULT nextval('eu_fund_type_euf_id_seq'::regclass);


--
-- Name: eumg_id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY eu_monitoring_goal_type ALTER COLUMN eumg_id SET DEFAULT nextval('eu_monitoring_goal_type_eumg_id_seq'::regclass);


--
-- Name: mtt_id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY eu_monitoring_type ALTER COLUMN mtt_id SET DEFAULT nextval('eu_monitoring_type_mtt_id_seq'::regclass);


--
-- Name: exme_id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY excemption_mechanism_type ALTER COLUMN exme_id SET DEFAULT nextval('excemption_mechanism_type_exme_id_seq'::regclass);


--
-- Name: faq_item_id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY faq_item ALTER COLUMN faq_item_id SET DEFAULT nextval('faq_item_faq_item_id_seq'::regclass);


--
-- Name: faq_thema_id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY faq_thema ALTER COLUMN faq_thema_id SET DEFAULT nextval('faq_thema_faq_thema_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY generatedfactsheets ALTER COLUMN id SET DEFAULT nextval('generatedfactsheets_id_seq'::regclass);


--
-- Name: grp_id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY geo_reference_process ALTER COLUMN grp_id SET DEFAULT nextval('geo_reference_process_grp_id_seq'::regclass);


--
-- Name: gfm_id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY geological_formation_type ALTER COLUMN gfm_id SET DEFAULT nextval('geological_formation_type_gfm_id_seq'::regclass);


--
-- Name: grh_id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY grootheid_type ALTER COLUMN grh_id SET DEFAULT nextval('grootheid_type_grh_id_seq'::regclass);


--
-- Name: gwap_id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY gw_aggregated_pressure_type ALTER COLUMN gwap_id SET DEFAULT nextval('gw_aggregated_pressure_type_gwap_id_seq'::regclass);


--
-- Name: gwcs_id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY gw_chemical_status ALTER COLUMN gwcs_id SET DEFAULT nextval('gw_chemical_status_gwcs_id_seq'::regclass);


--
-- Name: gprm_id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY gw_pressure_requiring_supp_add_measures ALTER COLUMN gprm_id SET DEFAULT nextval('gw_pressure_requiring_supp_add_measures_gprm_id_seq'::regclass);


--
-- Name: gprs_id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY gw_pressure_type ALTER COLUMN gprs_id SET DEFAULT nextval('gw_pressure_type_gprs_id_seq'::regclass);


--
-- Name: gpg_id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY gw_pressures_preventing_good_status ALTER COLUMN gpg_id SET DEFAULT nextval('gw_pressures_preventing_good_status_gpg_id_seq'::regclass);


--
-- Name: gwqs_id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY gw_quantity_status ALTER COLUMN gwqs_id SET DEFAULT nextval('gw_quantity_status_gwqs_id_seq'::regclass);


--
-- Name: grcf_id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY gw_reason4chemical_failure ALTER COLUMN grcf_id SET DEFAULT nextval('gw_reason4chemical_failure_grcf_id_seq'::regclass);


--
-- Name: grqf_id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY gw_reason4quantity_failure ALTER COLUMN grqf_id SET DEFAULT nextval('gw_reason4quantity_failure_grqf_id_seq'::regclass);


--
-- Name: gvo_id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY gw_vertical_orientation_type ALTER COLUMN gvo_id SET DEFAULT nextval('gw_vertical_orientation_type_gvo_id_seq'::regclass);


--
-- Name: gwce_id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY gwb_chemical_exemption ALTER COLUMN gwce_id SET DEFAULT nextval('gwb_chemical_exemption_gwce_id_seq'::regclass);


--
-- Name: gcm_id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY gwb_conceptual_model ALTER COLUMN gcm_id SET DEFAULT nextval('gwb_conceptual_model_gcm_id_seq'::regclass);


--
-- Name: gwbp_id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY gwb_pressure ALTER COLUMN gwbp_id SET DEFAULT nextval('gwb_pressure_gwbp_id_seq'::regclass);


--
-- Name: gqe_id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY gwb_quantitative_exemption ALTER COLUMN gqe_id SET DEFAULT nextval('gwb_quantitative_exemption_gqe_id_seq'::regclass);


--
-- Name: gys_id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY gwb_yearly_status ALTER COLUMN gys_id SET DEFAULT nextval('gwb_yearly_status_gys_id_seq'::regclass);


--
-- Name: hdh_id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY hoedanigheid_type ALTER COLUMN hdh_id SET DEFAULT nextval('hoedanigheid_type_hdh_id_seq'::regclass);


--
-- Name: hdo_id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY hydro_object ALTER COLUMN hdo_id SET DEFAULT nextval('hydro_object_hdo_id_seq'::regclass);


--
-- Name: importruleid; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY importrule ALTER COLUMN importruleid SET DEFAULT nextval('importrule_importruleid_seq'::regclass);


--
-- Name: importtypeid; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY importtype ALTER COLUMN importtypeid SET DEFAULT nextval('importtype_importtypeid_seq'::regclass);


--
-- Name: isac_id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY info_stream_activity ALTER COLUMN isac_id SET DEFAULT nextval('info_stream_activity_isac_id_seq'::regclass);


--
-- Name: ims_id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY information_stream ALTER COLUMN ims_id SET DEFAULT nextval('information_stream_ims_id_seq'::regclass);


--
-- Name: ksgbp_id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY kaarten_sgbp ALTER COLUMN ksgbp_id SET DEFAULT nextval('kaarten_sgbp_ksgbp_id_seq'::regclass);


--
-- Name: kwod_id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY kwaliteitsoordeel_type ALTER COLUMN kwod_id SET DEFAULT nextval('kwaliteitsoordeel_type_kwod_id_seq'::regclass);


--
-- Name: lgl_id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY legislation_level_type ALTER COLUMN lgl_id SET DEFAULT nextval('legislation_level_type_lgl_id_seq'::regclass);


--
-- Name: lgr_id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY legislation_reference_type ALTER COLUMN lgr_id SET DEFAULT nextval('legislation_reference_type_lgr_id_seq'::regclass);


--
-- Name: loa_id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY level_of_area_type ALTER COLUMN loa_id SET DEFAULT nextval('level_of_area_type_loa_id_seq'::regclass);


--
-- Name: loggingid; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY logging ALTER COLUMN loggingid SET DEFAULT nextval('logging_loggingid_seq'::regclass);


--
-- Name: mzc_id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY management_regulation_or_restriction_zone_collection ALTER COLUMN mzc_id SET DEFAULT nextval('management_regulation_or_restriction_zone_collection_mzc_id_seq'::regclass);


--
-- Name: measure_progress_completedid; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY measure_progress_completed ALTER COLUMN measure_progress_completedid SET DEFAULT nextval('measure_progress_completed_measure_progress_completedid_seq'::regclass);


--
-- Name: mst_id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY measure_status_type ALTER COLUMN mst_id SET DEFAULT nextval('measure_status_type_mst_id_seq'::regclass);


--
-- Name: mmr_id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY measurement_regime_type ALTER COLUMN mmr_id SET DEFAULT nextval('measurement_regime_type_mmr_id_seq'::regclass);


--
-- Name: membershipid; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY membership ALTER COLUMN membershipid SET DEFAULT nextval('membership_membershipid_seq'::regclass);


--
-- Name: mtm_id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY monitored_measure ALTER COLUMN mtm_id SET DEFAULT nextval('monitored_measure_mtm_id_seq'::regclass);


--
-- Name: mno_id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY monitoring_object ALTER COLUMN mno_id SET DEFAULT nextval('monitoring_object_mno_id_seq'::regclass);


--
-- Name: moi_id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY monitoring_object_other_ids ALTER COLUMN moi_id SET DEFAULT nextval('monitoring_object_other_ids_moi_id_seq'::regclass);


--
-- Name: moqe_id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY monitoring_object_quality_element ALTER COLUMN moqe_id SET DEFAULT nextval('monitoring_object_quality_element_moqe_id_seq'::regclass);


--
-- Name: ns_id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY namespace_type ALTER COLUMN ns_id SET DEFAULT nextval('namespace_type_ns_id_seq'::regclass);


--
-- Name: nbl_id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY natural_background_levels ALTER COLUMN nbl_id SET DEFAULT nextval('natural_background_levels_nbl_id_seq'::regclass);


--
-- Name: nrm_id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY norm ALTER COLUMN nrm_id SET DEFAULT nextval('norm_nrm_id_seq'::regclass);


--
-- Name: nmgp_id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY norm_groep_type ALTER COLUMN nmgp_id SET DEFAULT nextval('norm_groep_type_nmgp_id_seq'::regclass);


--
-- Name: nhm_id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY norm_hulp_mapping ALTER COLUMN nhm_id SET DEFAULT nextval('norm_hulp_mapping_nhm_id_seq'::regclass);


--
-- Name: nmkd_id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY norm_kader_type ALTER COLUMN nmkd_id SET DEFAULT nextval('norm_kader_type_nmkd_id_seq'::regclass);


--
-- Name: nrmv_id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY norm_value ALTER COLUMN nrmv_id SET DEFAULT nextval('norm_value_nrmv_id_seq'::regclass);


--
-- Name: nmpk_id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY normpakket ALTER COLUMN nmpk_id SET DEFAULT nextval('normpakket_nmpk_id_seq'::regclass);


--
-- Name: ojg_id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY object_group ALTER COLUMN ojg_id SET DEFAULT nextval('object_group_ojg_id_seq'::regclass);


--
-- Name: ost_id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY object_state_column_required ALTER COLUMN ost_id SET DEFAULT nextval('object_state_column_required_ost_id_seq'::regclass);


--
-- Name: ost_id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY object_state_type ALTER COLUMN ost_id SET DEFAULT nextval('object_state_type_ost_id_seq'::regclass);


--
-- Name: obj_id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY object_type ALTER COLUMN obj_id SET DEFAULT nextval('object_type_obj_id_seq'::regclass);


--
-- Name: obex_id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY objectives_exemption_type ALTER COLUMN obex_id SET DEFAULT nextval('objectives_exemption_type_obex_id_seq'::regclass);


--
-- Name: ocr_id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY obs_ctx_role_type ALTER COLUMN ocr_id SET DEFAULT nextval('obs_ctx_role_type_ocr_id_seq'::regclass);


--
-- Name: obs_id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY observation ALTER COLUMN obs_id SET DEFAULT nextval('observation_obs_id_seq'::regclass);


--
-- Name: role_id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY observation_context ALTER COLUMN role_id SET DEFAULT nextval('observation_context_role_id_seq'::regclass);


--
-- Name: obp_id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY observation_process_copy_dietmar ALTER COLUMN obp_id SET DEFAULT nextval('observation_process_copy_dietmar_obp_id_seq'::regclass);


--
-- Name: opt_id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY observed_property_type ALTER COLUMN opt_id SET DEFAULT nextval('observed_property_type_opt_id_seq'::regclass);


--
-- Name: osc_id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY observing_capability ALTER COLUMN osc_id SET DEFAULT nextval('observing_capability_osc_id_seq'::regclass);


--
-- Name: ocbs_id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY observing_capability_observation ALTER COLUMN ocbs_id SET DEFAULT nextval('observing_capability_observation_ocbs_id_seq'::regclass);


--
-- Name: ocrp_id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY observing_capability_responsible_party ALTER COLUMN ocrp_id SET DEFAULT nextval('observing_capability_responsible_party_ocrp_id_seq'::regclass);


--
-- Name: ocsa_id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY observing_capability_sample ALTER COLUMN ocsa_id SET DEFAULT nextval('observing_capability_sample_ocsa_id_seq'::regclass);


--
-- Name: ocat_id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY organisation_category_type ALTER COLUMN ocat_id SET DEFAULT nextval('organisation_category_type_ocat_id_seq'::regclass);


--
-- Name: ore_id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY organisatorische_eenheid ALTER COLUMN ore_id SET DEFAULT nextval('organisatorische_eenheid_ore_id_seq'::regclass);


--
-- Name: organisatorische_eenheid_wkpusergroupid; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY organisatorische_eenheid_wkpusergroup ALTER COLUMN organisatorische_eenheid_wkpusergroupid SET DEFAULT nextval('organisatorische_eenheid_wkpu_organisatorische_eenheid_wkpu_seq'::regclass);


--
-- Name: obmb_id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY other_basic_measure113b_type ALTER COLUMN obmb_id SET DEFAULT nextval('other_basic_measure113b_type_obmb_id_seq'::regclass);


--
-- Name: omut_id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY other_monitoring_use_type ALTER COLUMN omut_id SET DEFAULT nextval('other_monitoring_use_type_omut_id_seq'::regclass);


--
-- Name: page_id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY page ALTER COLUMN page_id SET DEFAULT nextval('page_page_id_seq'::regclass);


--
-- Name: pg_id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY page_group ALTER COLUMN pg_id SET DEFAULT nextval('page_group_pg_id_seq'::regclass);


--
-- Name: pagepg_id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY page_pagegroup ALTER COLUMN pagepg_id SET DEFAULT nextval('page_pagegroup_pagepg_id_seq'::regclass);


--
-- Name: prus_id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY parameter_use_type ALTER COLUMN prus_id SET DEFAULT nextval('parameter_use_type_prus_id_seq'::regclass);


--
-- Name: pat_id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY physical_alteration_type ALTER COLUMN pat_id SET DEFAULT nextval('physical_alteration_type_pat_id_seq'::regclass);


--
-- Name: pba_id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY plaatsbepalingsapparaat_type ALTER COLUMN pba_id SET DEFAULT nextval('plaatsbepalingsapparaat_type_pba_id_seq'::regclass);


--
-- Name: pmf_id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY planned_feature_monitoring ALTER COLUMN pmf_id SET DEFAULT nextval('planned_feature_monitoring_pmf_id_seq'::regclass);


--
-- Name: pltr_id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY pollutant_trend ALTER COLUMN pltr_id SET DEFAULT nextval('pollutant_trend_pltr_id_seq'::regclass);


--
-- Name: pbm_id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY pom_base_measure113a ALTER COLUMN pbm_id SET DEFAULT nextval('pom_base_measure113a_pbm_id_seq'::regclass);


--
-- Name: pcat_id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY pressure_category_type ALTER COLUMN pcat_id SET DEFAULT nextval('pressure_category_type_pcat_id_seq'::regclass);


--
-- Name: prr_id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY pressure_relevance_type ALTER COLUMN prr_id SET DEFAULT nextval('pressure_relevance_type_prr_id_seq'::regclass);


--
-- Name: prc_id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY process_type ALTER COLUMN prc_id SET DEFAULT nextval('process_type_prc_id_seq'::regclass);


--
-- Name: profileid; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY profile ALTER COLUMN profileid SET DEFAULT nextval('profile_profileid_seq'::regclass);


--
-- Name: pmfp_id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY projection ALTER COLUMN pmfp_id SET DEFAULT nextval('projection_pmfp_id_seq'::regclass);


--
-- Name: pat_id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY protected_area_type ALTER COLUMN pat_id SET DEFAULT nextval('protected_area_type_pat_id_seq'::regclass);


--
-- Name: qeel_id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY qe_ecological_type ALTER COLUMN qeel_id SET DEFAULT nextval('qe_ecological_type_qeel_id_seq'::regclass);


--
-- Name: qem_id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY quality_element ALTER COLUMN qem_id SET DEFAULT nextval('quality_element_qem_id_seq'::regclass);


--
-- Name: qeo_id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY quality_element_observation ALTER COLUMN qeo_id SET DEFAULT nextval('quality_element_observation_qeo_id_seq'::regclass);


--
-- Name: qes_id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY quality_element_sample ALTER COLUMN qes_id SET DEFAULT nextval('quality_element_sample_qes_id_seq'::regclass);


--
-- Name: rct_id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY reason_change_type ALTER COLUMN rct_id SET DEFAULT nextval('reason_change_type_rct_id_seq'::regclass);


--
-- Name: rsfr_id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY rel_samp_feat_role_type ALTER COLUMN rsfr_id SET DEFAULT nextval('rel_samp_feat_role_type_rsfr_id_seq'::regclass);


--
-- Name: gwsw_id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY relation_gwb_swb ALTER COLUMN gwsw_id SET DEFAULT nextval('relation_gwb_swb_gwsw_id_seq'::regclass);


--
-- Name: ore_wbd_id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY relation_ore_wbd ALTER COLUMN ore_wbd_id SET DEFAULT nextval('relation_ore_wbd_ore_wbd_id_seq'::regclass);


--
-- Name: rlt_id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY relation_type ALTER COLUMN rlt_id SET DEFAULT nextval('relation_type_rlt_id_seq'::regclass);


--
-- Name: rpv_id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY report_version ALTER COLUMN rpv_id SET DEFAULT nextval('report_version_rpv_id_seq'::regclass);


--
-- Name: rpp_id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY reporting_period ALTER COLUMN rpp_id SET DEFAULT nextval('reporting_period_rpp_id_seq'::regclass);


--
-- Name: ras_id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY result_acquisition_source_type ALTER COLUMN ras_id SET DEFAULT nextval('result_acquisition_source_type_ras_id_seq'::regclass);


--
-- Name: rbmp_id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY river_basin_management_plan ALTER COLUMN rbmp_id SET DEFAULT nextval('river_basin_management_plan_rbmp_id_seq'::regclass);


--
-- Name: roleid; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY role ALTER COLUMN roleid SET DEFAULT nextval('role_roleid_seq'::regclass);


--
-- Name: smp_id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY sampling_proces ALTER COLUMN smp_id SET DEFAULT nextval('sampling_proces_smp_id_seq'::regclass);


--
-- Name: semf_id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY specialised_emf_type ALTER COLUMN semf_id SET DEFAULT nextval('specialised_emf_type_semf_id_seq'::regclass);


--
-- Name: slt_id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY station_level_type ALTER COLUMN slt_id SET DEFAULT nextval('station_level_type_slt_id_seq'::regclass);


--
-- Name: stt_id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY station_type_type ALTER COLUMN stt_id SET DEFAULT nextval('station_type_type_stt_id_seq'::regclass);


--
-- Name: sst_id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY subsite_type ALTER COLUMN sst_id SET DEFAULT nextval('subsite_type_sst_id_seq'::regclass);


--
-- Name: ssg_id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY substance_group ALTER COLUMN ssg_id SET DEFAULT nextval('substance_group_ssg_id_seq'::regclass);


--
-- Name: sasp_id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY sw_abstraction_point ALTER COLUMN sasp_id SET DEFAULT nextval('sw_abstracion_point_sasp_id_seq'::regclass);


--
-- Name: swap_id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY sw_aggregated_pressure_type ALTER COLUMN swap_id SET DEFAULT nextval('sw_aggregated_pressure_type_swap_id_seq'::regclass);


--
-- Name: swc_id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY sw_category_type ALTER COLUMN swc_id SET DEFAULT nextval('sw_category_type_swc_id_seq'::regclass);


--
-- Name: css_id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY sw_chemical_substance_status ALTER COLUMN css_id SET DEFAULT nextval('sw_chemical_substance_status_css_id_seq'::regclass);


--
-- Name: ecs_id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY sw_ecological_status ALTER COLUMN ecs_id SET DEFAULT nextval('sw_ecological_status_ecs_id_seq'::regclass);


--
-- Name: sprm_id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY sw_pressure_requiring_supp_add_measures ALTER COLUMN sprm_id SET DEFAULT nextval('sw_pressure_requiring_supp_add_measures_sprm_id_seq'::regclass);


--
-- Name: sprs_id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY sw_pressure_type ALTER COLUMN sprs_id SET DEFAULT nextval('sw_pressure_type_sprs_id_seq'::regclass);


--
-- Name: spg_id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY sw_pressures_preventing_good_status ALTER COLUMN spg_id SET DEFAULT nextval('sw_pressures_preventing_good_status_spg_id_seq'::regclass);


--
-- Name: smeu_id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY sw_supp_measure_eu_type ALTER COLUMN smeu_id SET DEFAULT nextval('sw_supp_measure_eu_type_smeu_id_seq'::regclass);


--
-- Name: styp_id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY sw_typology_type ALTER COLUMN styp_id SET DEFAULT nextval('sw_typology_type_styp_id_seq'::regclass);


--
-- Name: swce_id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY swb_exemption ALTER COLUMN swce_id SET DEFAULT nextval('swb_chemical_exemption_swce_id_seq'::regclass);


--
-- Name: swee_id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY swb_measures_43a ALTER COLUMN swee_id SET DEFAULT nextval('swb_ecological_exemption_swee_id_seq'::regclass);


--
-- Name: sys_id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY swb_yearly_status ALTER COLUMN sys_id SET DEFAULT nextval('swb_yearly_status_sys_id_seq'::regclass);


--
-- Name: sc_id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY system_configuration ALTER COLUMN sc_id SET DEFAULT nextval('system_configuration_sc_id_seq'::regclass);


--
-- Name: txg_id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY taxa_group ALTER COLUMN txg_id SET DEFAULT nextval('taxa_group_txg_id_seq'::regclass);


--
-- Name: txn_id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY taxon_type ALTER COLUMN txn_id SET DEFAULT nextval('taxon_type_txn_id_seq'::regclass);


--
-- Name: taov_id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY thema_actie_organisatorische_eenheid_voortgang ALTER COLUMN taov_id SET DEFAULT nextval('thema_actie_organisatorische_eenheid_voortgang_taov_id_seq'::regclass);


--
-- Name: ta_id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY thema_acties ALTER COLUMN ta_id SET DEFAULT nextval('thema_acties_ta_id_seq'::regclass);


--
-- Name: tog_id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY thema_overzicht_groepen ALTER COLUMN tog_id SET DEFAULT nextval('thema_overzicht_groepen_tog_id_seq'::regclass);


--
-- Name: tos_id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY thema_overzicht_statussen ALTER COLUMN tos_id SET DEFAULT nextval('thema_overzicht_statussen_tos_id_seq'::regclass);


--
-- Name: t_id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY themas ALTER COLUMN t_id SET DEFAULT nextval('themas_t_id_seq'::regclass);


--
-- Name: transformationid; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY transformation ALTER COLUMN transformationid SET DEFAULT nextval('transformation_transformationid_seq'::regclass);


--
-- Name: typ_id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY typering_type ALTER COLUMN typ_id SET DEFAULT nextval('typering_type_typ_id_seq'::regclass);


--
-- Name: validationid; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY validation ALTER COLUMN validationid SET DEFAULT nextval('validation_validationid_seq'::regclass);


--
-- Name: validation_importtypeid; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY validation_importtype ALTER COLUMN validation_importtypeid SET DEFAULT nextval('validation_importtype_validation_importtypeid_seq'::regclass);


--
-- Name: vst_id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY volumestroom_type ALTER COLUMN vst_id SET DEFAULT nextval('volumestroom_type_vst_id_seq'::regclass);


--
-- Name: vtb_id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY volumestroom_type_bronnen ALTER COLUMN vtb_id SET DEFAULT nextval('volumestroom_type_bronnen_vtb_id_seq'::regclass);


--
-- Name: wbpm_id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY waarde_bepalings_methode_type ALTER COLUMN wbpm_id SET DEFAULT nextval('waarde_bepalings_methode_type_wbpm_id_seq'::regclass);


--
-- Name: wbm_id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY waarde_bewerkings_methode_type ALTER COLUMN wbm_id SET DEFAULT nextval('waarde_bewerkings_methode_type_wbm_id_seq'::regclass);


--
-- Name: wbpa_id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY waterbody_protected_area_intersection ALTER COLUMN wbpa_id SET DEFAULT nextval('waterbody_protected_area_intersection_wbpa_id_seq'::regclass);


--
-- Name: wbpr_id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY wb_prognosis ALTER COLUMN wbpr_id SET DEFAULT nextval('swb_prognosis_swpr_id_seq'::regclass);


--
-- Name: wbsc_id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY wb_status_change_motivation ALTER COLUMN wbsc_id SET DEFAULT nextval('wb_status_change_motivation_wbsc_id_seq'::regclass);


--
-- Name: qegw_id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY wfd_qe_gwtype ALTER COLUMN qegw_id SET DEFAULT nextval('wfd_qe_gwtype_qegw_id_seq'::regclass);


--
-- Name: qesw_id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY wfd_qe_swtype ALTER COLUMN qesw_id SET DEFAULT nextval('wfd_qe_swtype_qesw_id_seq'::regclass);


--
-- Name: wsc_id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY wfd_status_code ALTER COLUMN wsc_id SET DEFAULT nextval('wfd_status_code_wsc_id_seq'::regclass);


--
-- Name: wkpuserid; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY wkpuser ALTER COLUMN wkpuserid SET DEFAULT nextval('wkpuser_wkpuserid_seq'::regclass);


--
-- Name: wkpuser_importtypeid; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY wkpuser_importtype ALTER COLUMN wkpuser_importtypeid SET DEFAULT nextval('wkpuser_importtype_wkpuser_importtypeid_seq'::regclass);


--
-- Name: wupg_id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY wkpuser_pagegroup ALTER COLUMN wupg_id SET DEFAULT nextval('wkpuser_pagegroup_wupg_id_seq'::regclass);


--
-- Name: wkpuser_wkpusergroup_id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY wkpuser_wkpusergroup ALTER COLUMN wkpuser_wkpusergroup_id SET DEFAULT nextval('wkpuser_wkpusergroup_wkpuser_wkpusergroup_id_seq'::regclass);


--
-- Name: wkpusergroupid; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY wkpusergroup ALTER COLUMN wkpusergroupid SET DEFAULT nextval('wkpusergroup_wkpusergroupid_seq'::regclass);


--
-- Name: wkpuserinroleid; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY wkpuserinrole ALTER COLUMN wkpuserinroleid SET DEFAULT nextval('wkpuserinrole_wkpuserinroleid_seq'::regclass);


--
-- Name: wkrv_id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY wkr_version ALTER COLUMN wkrv_id SET DEFAULT nextval('wkr_version_wkrv_id_seq'::regclass);


--
-- Name: ynna_id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY yes_no_not_applicable_type ALTER COLUMN ynna_id SET DEFAULT nextval('yes_no_not_applicable_type_ynna_id_seq'::regclass);


--
-- Name: ztc_id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY zone_type_code ALTER COLUMN ztc_id SET DEFAULT nextval('zone_type_code_ztc_id_seq'::regclass);


SET search_path = beheer, pg_catalog;

--
-- Name: stat_user_tables_hist_pkey; Type: CONSTRAINT; Schema: beheer; Owner: -
--

ALTER TABLE ONLY stat_user_tables_hist
    ADD CONSTRAINT stat_user_tables_hist_pkey PRIMARY KEY (suth_id);


SET search_path = domains, pg_catalog;

--
-- Name: UK_idd_name; Type: CONSTRAINT; Schema: domains; Owner: -
--

ALTER TABLE ONLY indicator_descriptor
    ADD CONSTRAINT "UK_idd_name" UNIQUE (name);


--
-- Name: UQ_clt_code; Type: CONSTRAINT; Schema: domains; Owner: -
--

ALTER TABLE ONLY confidence_level_type
    ADD CONSTRAINT "UQ_clt_code" UNIQUE (code);


--
-- Name: UQ_ctf_code; Type: CONSTRAINT; Schema: domains; Owner: -
--

ALTER TABLE ONLY certificeringscode
    ADD CONSTRAINT "UQ_ctf_code" UNIQUE (code);


--
-- Name: UQ_ltwb_code; Type: CONSTRAINT; Schema: domains; Owner: -
--

ALTER TABLE ONLY locatietype_waardebepaling
    ADD CONSTRAINT "UQ_ltwb_code" UNIQUE (code);


--
-- Name: UQ_mar_code; Type: CONSTRAINT; Schema: domains; Owner: -
--

ALTER TABLE ONLY meetapparaat
    ADD CONSTRAINT "UQ_mar_code" UNIQUE (code);


--
-- Name: UQ_mbm_code; Type: CONSTRAINT; Schema: domains; Owner: -
--

ALTER TABLE ONLY monsterbewerkingsmethode
    ADD CONSTRAINT "UQ_mbm_code" UNIQUE (code);


--
-- Name: UQ_mvb_code; Type: CONSTRAINT; Schema: domains; Owner: -
--

ALTER TABLE ONLY monstervoorbehandeling
    ADD CONSTRAINT "UQ_mvb_code" UNIQUE (code);


--
-- Name: UQ_scm_description; Type: CONSTRAINT; Schema: domains; Owner: -
--

ALTER TABLE ONLY status_change_motivation_type
    ADD CONSTRAINT "UQ_scm_description" UNIQUE (description);


--
-- Name: UQ_wbpt_code; Type: CONSTRAINT; Schema: domains; Owner: -
--

ALTER TABLE ONLY waardebepalingstechniek
    ADD CONSTRAINT "UQ_wbpt_code" UNIQUE (code);


--
-- Name: pk_bmm; Type: CONSTRAINT; Schema: domains; Owner: -
--

ALTER TABLE ONLY bemonsteringsmethode
    ADD CONSTRAINT pk_bmm PRIMARY KEY (bmm_id);


--
-- Name: pk_clt; Type: CONSTRAINT; Schema: domains; Owner: -
--

ALTER TABLE ONLY confidence_level_type
    ADD CONSTRAINT pk_clt PRIMARY KEY (clt_id);


--
-- Name: pk_ctf; Type: CONSTRAINT; Schema: domains; Owner: -
--

ALTER TABLE ONLY certificeringscode
    ADD CONSTRAINT pk_ctf PRIMARY KEY (ctf_id);


--
-- Name: pk_driver_id; Type: CONSTRAINT; Schema: domains; Owner: -
--

ALTER TABLE ONLY drivers
    ADD CONSTRAINT pk_driver_id PRIMARY KEY (driver_id);


--
-- Name: pk_idd; Type: CONSTRAINT; Schema: domains; Owner: -
--

ALTER TABLE ONLY indicator_descriptor
    ADD CONSTRAINT pk_idd PRIMARY KEY (idd_id);


--
-- Name: pk_impact_id; Type: CONSTRAINT; Schema: domains; Owner: -
--

ALTER TABLE ONLY impacts
    ADD CONSTRAINT pk_impact_id PRIMARY KEY (impact_id);


--
-- Name: pk_ltwb; Type: CONSTRAINT; Schema: domains; Owner: -
--

ALTER TABLE ONLY locatietype_waardebepaling
    ADD CONSTRAINT pk_ltwb PRIMARY KEY (ltwb_id);


--
-- Name: pk_mar; Type: CONSTRAINT; Schema: domains; Owner: -
--

ALTER TABLE ONLY meetapparaat
    ADD CONSTRAINT pk_mar PRIMARY KEY (mar_id);


--
-- Name: pk_mbm; Type: CONSTRAINT; Schema: domains; Owner: -
--

ALTER TABLE ONLY monsterbewerkingsmethode
    ADD CONSTRAINT pk_mbm PRIMARY KEY (mbm_id);


--
-- Name: pk_mvb; Type: CONSTRAINT; Schema: domains; Owner: -
--

ALTER TABLE ONLY monstervoorbehandeling
    ADD CONSTRAINT pk_mvb PRIMARY KEY (mvb_id);


--
-- Name: pk_orgaan; Type: CONSTRAINT; Schema: domains; Owner: -
--

ALTER TABLE ONLY orgaan
    ADD CONSTRAINT pk_orgaan PRIMARY KEY (org_id);


--
-- Name: pk_scm; Type: CONSTRAINT; Schema: domains; Owner: -
--

ALTER TABLE ONLY status_change_motivation_type
    ADD CONSTRAINT pk_scm PRIMARY KEY (scm_id);


--
-- Name: pk_var; Type: CONSTRAINT; Schema: domains; Owner: -
--

ALTER TABLE ONLY veldapparaat
    ADD CONSTRAINT pk_var PRIMARY KEY (var_id);


--
-- Name: pk_wbpt; Type: CONSTRAINT; Schema: domains; Owner: -
--

ALTER TABLE ONLY waardebepalingstechniek
    ADD CONSTRAINT pk_wbpt PRIMARY KEY (wbpt_id);


--
-- Name: uq_opt_id; Type: CONSTRAINT; Schema: domains; Owner: -
--

ALTER TABLE ONLY indicator_descriptor
    ADD CONSTRAINT uq_opt_id UNIQUE (opt_id, part_of_idd_id);


SET search_path = eu_state_of_environment, pg_catalog;

--
-- Name: pk_monprog; Type: CONSTRAINT; Schema: eu_state_of_environment; Owner: -
--

ALTER TABLE ONLY monprog_2015
    ADD CONSTRAINT pk_monprog PRIMARY KEY (mpnident, parameter, monsoort, repr_owm);


SET search_path = factsheets, pg_catalog;

--
-- Name: rapport_tekst_id_pk; Type: CONSTRAINT; Schema: factsheets; Owner: -
--

ALTER TABLE ONLY rapport_tekst
    ADD CONSTRAINT rapport_tekst_id_pk PRIMARY KEY (rapport_tekst_id);


--
-- Name: uitvoering_type_id_pk; Type: CONSTRAINT; Schema: factsheets; Owner: -
--

ALTER TABLE ONLY uitvoering_type
    ADD CONSTRAINT uitvoering_type_id_pk PRIMARY KEY (uitvoering_type_id);


--
-- Name: veld_id_pk; Type: CONSTRAINT; Schema: factsheets; Owner: -
--

ALTER TABLE ONLY veld
    ADD CONSTRAINT veld_id_pk PRIMARY KEY (veld_id);


--
-- Name: wb_type_id_pk; Type: CONSTRAINT; Schema: factsheets; Owner: -
--

ALTER TABLE ONLY wb_type
    ADD CONSTRAINT wb_type_id_pk PRIMARY KEY (wb_type_id);


SET search_path = krm, pg_catalog;

--
-- Name: pk_idd; Type: CONSTRAINT; Schema: krm; Owner: -
--

ALTER TABLE ONLY cycle_description
    ADD CONSTRAINT pk_idd PRIMARY KEY (cym_id);


SET search_path = monprog, pg_catalog;

--
-- Name: pk_pot; Type: CONSTRAINT; Schema: monprog; Owner: -
--

ALTER TABLE ONLY planned_observation_time
    ADD CONSTRAINT pk_pot PRIMARY KEY (pot_id);


--
-- Name: pk_qem_idd; Type: CONSTRAINT; Schema: monprog; Owner: -
--

ALTER TABLE ONLY quality_element_indicator_descriptor
    ADD CONSTRAINT pk_qem_idd PRIMARY KEY (qem_id, idd_id);


SET search_path = public, pg_catalog;

--
-- Name: PK_Actie; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY "Actie"
    ADD CONSTRAINT "PK_Actie" PRIMARY KEY (id);


--
-- Name: PK_VerwerkingsVerslag; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY "VerwerkingsVerslag"
    ADD CONSTRAINT "PK_VerwerkingsVerslag" PRIMARY KEY (id);


--
-- Name: PK_VerwerkingsVerslagParameter; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY "VerwerkingsVerslagParameter"
    ADD CONSTRAINT "PK_VerwerkingsVerslagParameter" PRIMARY KEY (id);


--
-- Name: PK_VerwerkingsVerslagRegel; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY "VerwerkingsVerslagRegel"
    ADD CONSTRAINT "PK_VerwerkingsVerslagRegel" PRIMARY KEY (id);


--
-- Name: PK_VerwerkingsVerslagRegelSoort; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY "VerwerkingsVerslagRegelSoort"
    ADD CONSTRAINT "PK_VerwerkingsVerslagRegelSoort" PRIMARY KEY (id);


--
-- Name: PK_VerwerkingsVerslagStatus; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY "VerwerkingsVerslagStatus"
    ADD CONSTRAINT "PK_VerwerkingsVerslagStatus" PRIMARY KEY (id);


--
-- Name: UQ_wbsc; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY wb_status_change_motivation
    ADD CONSTRAINT "UQ_wbsc" UNIQUE (wbd_id, scm_id, opt_id, year_initial, year_status);


--
-- Name: _hab_ds_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY _hab_ds
    ADD CONSTRAINT _hab_ds_pkey PRIMARY KEY (id);


--
-- Name: _vog_ds_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY _vog_ds
    ADD CONSTRAINT _vog_ds_pkey PRIMARY KEY (id);


--
-- Name: application_applicationname_key; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY application
    ADD CONSTRAINT application_applicationname_key UNIQUE (applicationname);


--
-- Name: application_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY application
    ADD CONSTRAINT application_pkey PRIMARY KEY (applicationid);


--
-- Name: bronnen_id_vst_id; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY volumestroom_type_bronnen
    ADD CONSTRAINT bronnen_id_vst_id UNIQUE (bronnen_id, vst_id);


--
-- Name: csvtranformation_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY csvtransformation
    ADD CONSTRAINT csvtranformation_pkey PRIMARY KEY (csvtransformationid);


--
-- Name: importrule_name_key; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY importrule
    ADD CONSTRAINT importrule_name_key UNIQUE (name);


--
-- Name: importrule_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY importrule
    ADD CONSTRAINT importrule_pkey PRIMARY KEY (importruleid);


--
-- Name: importtype_name_key; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY importtype
    ADD CONSTRAINT importtype_name_key UNIQUE (name);


--
-- Name: importtype_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY importtype
    ADD CONSTRAINT importtype_pkey PRIMARY KEY (importtypeid);


--
-- Name: logging_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY logging
    ADD CONSTRAINT logging_pkey PRIMARY KEY (loggingid);


--
-- Name: map_ref; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY kaarten_sgbp
    ADD CONSTRAINT map_ref UNIQUE (map_ref);


--
-- Name: membership_application_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY membership
    ADD CONSTRAINT membership_application_pkey PRIMARY KEY (wkpuserid, applicationid);


--
-- Name: moqe_pk; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY monitoring_object_quality_element
    ADD CONSTRAINT moqe_pk PRIMARY KEY (moqe_id);


--
-- Name: ore_id_wbd_id; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY relation_ore_wbd
    ADD CONSTRAINT ore_id_wbd_id UNIQUE (ore_id, wbd_id);


--
-- Name: page_id_pg_id; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY page_pagegroup
    ADD CONSTRAINT page_id_pg_id UNIQUE (pg_id, page_id);


--
-- Name: pg_id_wkpuserid; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY wkpuser_pagegroup
    ADD CONSTRAINT pg_id_wkpuserid UNIQUE (pg_id, wkpuserid);


--
-- Name: pk_abstraction_point; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY abstraction_point
    ADD CONSTRAINT pk_abstraction_point PRIMARY KEY (asp_id);


--
-- Name: pk_activity_organisation_category; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY activity_organisation_category
    ADD CONSTRAINT pk_activity_organisation_category PRIMARY KEY (isac_id, ocat_id);


--
-- Name: pk_akvoi; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY aquo_kit_voor_opt_id
    ADD CONSTRAINT pk_akvoi UNIQUE (grootheid_code, biotaxon_aquo, hoedanigheid_code, taxa_group_name, type_stof);


--
-- Name: pk_any_thematic_link; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY any_thematic_link
    ADD CONSTRAINT pk_any_thematic_link PRIMARY KEY (atl_id);


--
-- Name: pk_art43b_type; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY eu_article_43b_type
    ADD CONSTRAINT pk_art43b_type PRIMARY KEY (a43b_id);


--
-- Name: pk_asp; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY measure_per_abstraction_point
    ADD CONSTRAINT pk_asp PRIMARY KEY (mtm_id, asp_id);


--
-- Name: pk_asps; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY gw_abstraction_point_status
    ADD CONSTRAINT pk_asps PRIMARY KEY (asp_id, gwsy_id);


--
-- Name: pk_bio_observation; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY bio_observation
    ADD CONSTRAINT pk_bio_observation PRIMARY KEY (obs_id);


--
-- Name: pk_bma; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY basic_measure113a_type
    ADD CONSTRAINT pk_bma PRIMARY KEY (bma_id);


--
-- Name: pk_bpg; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY bepaling_grens_type
    ADD CONSTRAINT pk_bpg PRIMARY KEY (bpg_id);


--
-- Name: pk_bronnen; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY bronnen
    ADD CONSTRAINT pk_bronnen PRIMARY KEY (bronnen_id);


--
-- Name: pk_ca_role_code; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY ca_role_code
    ADD CONSTRAINT pk_ca_role_code PRIMARY KEY (crc_id);


--
-- Name: pk_chemical_exceedance; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY chemical_exceedance
    ADD CONSTRAINT pk_chemical_exceedance PRIMARY KEY (sys_id, chs_id);


--
-- Name: pk_chemische_stof_type; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY chemische_stof_type
    ADD CONSTRAINT pk_chemische_stof_type PRIMARY KEY (chs_id);


--
-- Name: pk_classificatie_type; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY classification_type
    ADD CONSTRAINT pk_classificatie_type PRIMARY KEY (cls_id);


--
-- Name: pk_clsg; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY classification_group_type
    ADD CONSTRAINT pk_clsg PRIMARY KEY (clsg_id);


--
-- Name: pk_competent_authority; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY competent_authority
    ADD CONSTRAINT pk_competent_authority PRIMARY KEY (ore_id);


--
-- Name: pk_competent_authority_roles_guid; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY competent_authority_roles
    ADD CONSTRAINT pk_competent_authority_roles_guid PRIMARY KEY (guid);


--
-- Name: pk_competentauthority_namespacetype; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY competentauthority_namespacetype
    ADD CONSTRAINT pk_competentauthority_namespacetype PRIMARY KEY (ns_id, ore_id);


--
-- Name: pk_condition_of_gw_type; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY condition_of_gw_type
    ADD CONSTRAINT pk_condition_of_gw_type PRIMARY KEY (cog_id);


--
-- Name: pk_cptm; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY compartiment_type
    ADD CONSTRAINT pk_cptm PRIMARY KEY (cptm_id);


--
-- Name: pk_depth_range_type; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY depth_range_type
    ADD CONSTRAINT pk_depth_range_type PRIMARY KEY (dpr_id);


--
-- Name: pk_domeintable_changes_id; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY domaintable_changes
    ADD CONSTRAINT pk_domeintable_changes_id PRIMARY KEY (domaintable_changes_id);


--
-- Name: pk_eenheid_type; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY eenheid_type
    ADD CONSTRAINT pk_eenheid_type PRIMARY KEY (eenh_id);


--
-- Name: pk_emf; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY environmental_monitoring_facility
    ADD CONSTRAINT pk_emf PRIMARY KEY (emf_id);


--
-- Name: pk_emn; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY environmental_monitoring_network
    ADD CONSTRAINT pk_emn PRIMARY KEY (emn_id);


--
-- Name: pk_eu_depth_level_type; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY eu_depth_level_type
    ADD CONSTRAINT pk_eu_depth_level_type PRIMARY KEY (dlt_id);


--
-- Name: pk_eu_intercalibration_type; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY eu_intercalibration_type
    ADD CONSTRAINT pk_eu_intercalibration_type PRIMARY KEY (icalt);


--
-- Name: pk_eu_monitoring_goal; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY eu_monitoring_goal_type
    ADD CONSTRAINT pk_eu_monitoring_goal PRIMARY KEY (eumg_id);


--
-- Name: pk_eu_monitoring_type; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY eu_monitoring_type
    ADD CONSTRAINT pk_eu_monitoring_type PRIMARY KEY (mtt_id);


--
-- Name: pk_eu_nl_code_to_sitecode; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY eu_nl_code_to_sitecode
    ADD CONSTRAINT pk_eu_nl_code_to_sitecode PRIMARY KEY (nts_id);


--
-- Name: pk_euf; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY eu_fund_type
    ADD CONSTRAINT pk_euf PRIMARY KEY (euf_id);


--
-- Name: pk_excemption_mechanism; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY swb_excemption_mechanism_44
    ADD CONSTRAINT pk_excemption_mechanism PRIMARY KEY (swce_id, exme_id);


--
-- Name: pk_exme; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY excemption_mechanism_type
    ADD CONSTRAINT pk_exme PRIMARY KEY (exme_id);


--
-- Name: pk_faq_item_id; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY faq_item
    ADD CONSTRAINT pk_faq_item_id PRIMARY KEY (faq_item_id);


--
-- Name: pk_faq_thema_id; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY faq_thema
    ADD CONSTRAINT pk_faq_thema_id PRIMARY KEY (faq_thema_id);


--
-- Name: pk_fim; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY env_mon_facil_in_mngmt_reg_or_restr_zone
    ADD CONSTRAINT pk_fim PRIMARY KEY (emf_id, mrz_id);


--
-- Name: pk_fu43_id; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY eu_function_43a_type
    ADD CONSTRAINT pk_fu43_id PRIMARY KEY (fu43_id);


--
-- Name: pk_generatefactsheet_id; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY generatedfactsheets
    ADD CONSTRAINT pk_generatefactsheet_id PRIMARY KEY (id);


--
-- Name: pk_geo_reference_process; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY obs_process_meetapparaat
    ADD CONSTRAINT pk_geo_reference_process PRIMARY KEY (obp_id, mar_id);


--
-- Name: pk_geological_formation_type; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY geological_formation_type
    ADD CONSTRAINT pk_geological_formation_type PRIMARY KEY (gfm_id);


--
-- Name: pk_gn2kcs; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY gw_n2000_status
    ADD CONSTRAINT pk_gn2kcs PRIMARY KEY (wpa_id, gwsy, opt_id);


--
-- Name: pk_gr; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY legislation_reference_type
    ADD CONSTRAINT pk_gr PRIMARY KEY (lgr_id);


--
-- Name: pk_grcf; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY gw_reason4chemical_failure
    ADD CONSTRAINT pk_grcf PRIMARY KEY (grcf_id);


--
-- Name: pk_grh; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY grootheid_type
    ADD CONSTRAINT pk_grh PRIMARY KEY (grh_id);


--
-- Name: pk_grqf; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY gw_reason4quantity_failure
    ADD CONSTRAINT pk_grqf PRIMARY KEY (grqf_id);


--
-- Name: pk_gtcc_gys_obs; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY gw_testing_conclusion
    ADD CONSTRAINT pk_gtcc_gys_obs PRIMARY KEY (gtcc_id, gys_id, eumg_id);


--
-- Name: pk_gw_abstraction_point; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY gw_abstraction_point
    ADD CONSTRAINT pk_gw_abstraction_point PRIMARY KEY (gasp_id);


--
-- Name: pk_gw_aggregated_pressure_type; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY gw_aggregated_pressure_type
    ADD CONSTRAINT pk_gw_aggregated_pressure_type PRIMARY KEY (gwap_id);


--
-- Name: pk_gw_mon_stat_other_mon_use; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY gw_mon_stat_other_mon_use
    ADD CONSTRAINT pk_gw_mon_stat_other_mon_use PRIMARY KEY (gms_id, omut_id);


--
-- Name: pk_gw_monitoring_station; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY gw_monitoring_station
    ADD CONSTRAINT pk_gw_monitoring_station PRIMARY KEY (gms_id);


--
-- Name: pk_gw_pollutants; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY gw_pollutants
    ADD CONSTRAINT pk_gw_pollutants PRIMARY KEY (gys_id, chs_id);


--
-- Name: pk_gw_pressure_requiring_supp_add_measures; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY gw_pressure_requiring_supp_add_measures
    ADD CONSTRAINT pk_gw_pressure_requiring_supp_add_measures PRIMARY KEY (gprm_id);


--
-- Name: pk_gw_pressure_type; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY gw_pressure_type
    ADD CONSTRAINT pk_gw_pressure_type PRIMARY KEY (gprs_id);


--
-- Name: pk_gw_pressure_type_driver_ids; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY gw_pressure_type_driver
    ADD CONSTRAINT pk_gw_pressure_type_driver_ids PRIMARY KEY (gprs_id, driver_id);


--
-- Name: pk_gw_pressures_preventing_good_status; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY gw_pressures_preventing_good_status
    ADD CONSTRAINT pk_gw_pressures_preventing_good_status PRIMARY KEY (gpg_id);


--
-- Name: pk_gw_required_supp_measure; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY gw_required_supp_measure
    ADD CONSTRAINT pk_gw_required_supp_measure PRIMARY KEY (gprm_id, smnl_id);


--
-- Name: pk_gw_test_value; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY gw_test_value
    ADD CONSTRAINT pk_gw_test_value PRIMARY KEY (gtcc_id, nrmv_id);


--
-- Name: pk_gw_vertical_orientation_type; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY gw_vertical_orientation_type
    ADD CONSTRAINT pk_gw_vertical_orientation_type PRIMARY KEY (gvo_id);


--
-- Name: pk_gwb_chem_exemp_pollutant; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY gwb_chem_exemp_pollutant
    ADD CONSTRAINT pk_gwb_chem_exemp_pollutant PRIMARY KEY (gwce_id, opt_id);


--
-- Name: pk_gwb_chemical_exemption; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY gwb_chemical_exemption
    ADD CONSTRAINT pk_gwb_chemical_exemption PRIMARY KEY (gwce_id);


--
-- Name: pk_gwb_conceptual_model; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY gwb_conceptual_model
    ADD CONSTRAINT pk_gwb_conceptual_model PRIMARY KEY (gcm_id);


--
-- Name: pk_gwb_pressure; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY gwb_pressure
    ADD CONSTRAINT pk_gwb_pressure PRIMARY KEY (gwbp_id);


--
-- Name: pk_gwb_pressure_impact_ids; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY gwb_pressure_impact
    ADD CONSTRAINT pk_gwb_pressure_impact_ids PRIMARY KEY (gwbp_id, impact_id);


--
-- Name: pk_gwb_quantitative_exemption; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY gwb_quantitative_exemption
    ADD CONSTRAINT pk_gwb_quantitative_exemption PRIMARY KEY (gqe_id);


--
-- Name: pk_gwb_yearly_status; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY gwb_yearly_status
    ADD CONSTRAINT pk_gwb_yearly_status PRIMARY KEY (gys_id);


--
-- Name: pk_gwbrcf; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY gwb_reason4chemical_failure
    ADD CONSTRAINT pk_gwbrcf PRIMARY KEY (gys_id, grcf_id);


--
-- Name: pk_gwbrqf; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY gwb_reason4quantity_failure
    ADD CONSTRAINT pk_gwbrqf PRIMARY KEY (gys_id, grqf_id);


--
-- Name: pk_gwcs_id; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY gw_chemical_status
    ADD CONSTRAINT pk_gwcs_id PRIMARY KEY (gys_id, eumg_id, wbpm_id, opt_id);


--
-- Name: pk_gwqs; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY gw_quantity_status
    ADD CONSTRAINT pk_gwqs PRIMARY KEY (gys_id, wbpm_id, eumg_id, opt_id);


--
-- Name: pk_hdh; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY hoedanigheid_type
    ADD CONSTRAINT pk_hdh PRIMARY KEY (hdh_id);


--
-- Name: pk_hdo_identfiers; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY hdo_identfiers
    ADD CONSTRAINT pk_hdo_identfiers PRIMARY KEY (hdo_id, local_id, namespace_id);


--
-- Name: pk_hdo_names; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY hdo_names
    ADD CONSTRAINT pk_hdo_names PRIMARY KEY (hdo_id);


--
-- Name: pk_hydro_object; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY hydro_object
    ADD CONSTRAINT pk_hydro_object PRIMARY KEY (hdo_id);


--
-- Name: pk_iin; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY namespace_type
    ADD CONSTRAINT pk_iin PRIMARY KEY (ns_id);


--
-- Name: pk_info_stream_activity; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY info_stream_activity
    ADD CONSTRAINT pk_info_stream_activity PRIMARY KEY (isac_id);


--
-- Name: pk_information_stream; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY information_stream
    ADD CONSTRAINT pk_information_stream PRIMARY KEY (ims_id);


--
-- Name: pk_islb; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY info_stream_legal_background
    ADD CONSTRAINT pk_islb PRIMARY KEY (ims_id, lgr_id);


--
-- Name: pk_kaarten_sgbp_id_id; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY kaarten_sgbp
    ADD CONSTRAINT pk_kaarten_sgbp_id_id PRIMARY KEY (ksgbp_id);


--
-- Name: pk_kwod; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY kwaliteitsoordeel_type
    ADD CONSTRAINT pk_kwod PRIMARY KEY (kwod_id);


--
-- Name: pk_legislation_level; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY legislation_level_type
    ADD CONSTRAINT pk_legislation_level PRIMARY KEY (lgl_id);


--
-- Name: pk_lom; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY level_of_area_type
    ADD CONSTRAINT pk_lom PRIMARY KEY (loa_id);


--
-- Name: pk_mcpm; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY monitored_compartiment
    ADD CONSTRAINT pk_mcpm PRIMARY KEY (mno_id, cptm_id);


--
-- Name: pk_measure43_function; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY sw_measure43_function
    ADD CONSTRAINT pk_measure43_function PRIMARY KEY (me43_id, smee_id);


--
-- Name: pk_measure_progress_completed; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY measure_progress_completed
    ADD CONSTRAINT pk_measure_progress_completed PRIMARY KEY (measure_progress_completedid);


--
-- Name: pk_measurement_regime_type; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY measurement_regime_type
    ADD CONSTRAINT pk_measurement_regime_type PRIMARY KEY (mmr_id);


--
-- Name: pk_mfp; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY monitoring_feature_positioning_method
    ADD CONSTRAINT pk_mfp PRIMARY KEY (mnf_id, pba_id);


--
-- Name: pk_mfr; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY monitoring_feature_report_to
    ADD CONSTRAINT pk_mfr PRIMARY KEY (mnf_id, lgr_id, report_date);


--
-- Name: pk_mmpa; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY measure_per_man_protected_area
    ADD CONSTRAINT pk_mmpa PRIMARY KEY (mtm_id, wpa_id);


--
-- Name: pk_mmz; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY measure_per_man_reg_or_restr_zone
    ADD CONSTRAINT pk_mmz PRIMARY KEY (mtm_id, mrz_id);


--
-- Name: pk_mnf_parameter; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY mnf_parameter
    ADD CONSTRAINT pk_mnf_parameter PRIMARY KEY (mnf_id, name);


--
-- Name: pk_monitored_measure; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY monitored_measure
    ADD CONSTRAINT pk_monitored_measure PRIMARY KEY (mtm_id);


--
-- Name: pk_monitored_measure_eu_fund; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY monitored_measure_eu_fund
    ADD CONSTRAINT pk_monitored_measure_eu_fund PRIMARY KEY (mtm_id, euf_id);


--
-- Name: pk_monitoring_feature; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY monitoring_feature
    ADD CONSTRAINT pk_monitoring_feature PRIMARY KEY (mnf_id);


--
-- Name: pk_monitoring_object; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY monitoring_object
    ADD CONSTRAINT pk_monitoring_object PRIMARY KEY (mno_id);


--
-- Name: pk_monitoring_object_genealogy; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY monitoring_object_genealogy
    ADD CONSTRAINT pk_monitoring_object_genealogy PRIMARY KEY (mno_id_supersedes, mno_id_superseded_by);


--
-- Name: pk_monitoring_object_hierarchy; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY monitoring_object_hierarchy
    ADD CONSTRAINT pk_monitoring_object_hierarchy PRIMARY KEY (mno_id_narrower, mno_id_broader);


--
-- Name: pk_monitoring_object_other_ids; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY monitoring_object_other_ids
    ADD CONSTRAINT pk_monitoring_object_other_ids PRIMARY KEY (moi_id);


--
-- Name: pk_monitoring_use; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY monitoring_use
    ADD CONSTRAINT pk_monitoring_use PRIMARY KEY (gms_id, mtt_id);


--
-- Name: pk_mrz; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY management_regulation_or_restriction_zone
    ADD CONSTRAINT pk_mrz PRIMARY KEY (mrz_id);


--
-- Name: pk_mrzc; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY management_regulation_or_restriction_zone_collection
    ADD CONSTRAINT pk_mrzc PRIMARY KEY (mzc_id);


--
-- Name: pk_msp; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY measure_progress
    ADD CONSTRAINT pk_msp PRIMARY KEY (mtm_id, mst_id, year);


--
-- Name: pk_mst; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY measure_status_type
    ADD CONSTRAINT pk_mst PRIMARY KEY (mst_id);


--
-- Name: pk_mzc_legal_basis; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY mzc_legal_basis
    ADD CONSTRAINT pk_mzc_legal_basis PRIMARY KEY (mzc_id, lgr_id);


--
-- Name: pk_natural_background_levels; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY natural_background_levels
    ADD CONSTRAINT pk_natural_background_levels PRIMARY KEY (nbl_id);


--
-- Name: pk_nl_measure; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY supp_add_measure_type
    ADD CONSTRAINT pk_nl_measure PRIMARY KEY (smnl_id);


--
-- Name: pk_norm; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY norm
    ADD CONSTRAINT pk_norm PRIMARY KEY (nrm_id);


--
-- Name: pk_norm_feature; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY norm_feature
    ADD CONSTRAINT pk_norm_feature PRIMARY KEY (nrm_id, hdo_id);


--
-- Name: pk_norm_groep_type; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY norm_groep_type
    ADD CONSTRAINT pk_norm_groep_type PRIMARY KEY (nmgp_id);


--
-- Name: pk_norm_hulp_mapping; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY norm_hulp_mapping
    ADD CONSTRAINT pk_norm_hulp_mapping PRIMARY KEY (nhm_id);


--
-- Name: pk_norm_kader_type; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY norm_kader_type
    ADD CONSTRAINT pk_norm_kader_type PRIMARY KEY (nmkd_id);


--
-- Name: pk_normpakket; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY normpakket
    ADD CONSTRAINT pk_normpakket PRIMARY KEY (nmpk_id);


--
-- Name: pk_normwaarde; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY norm_value
    ADD CONSTRAINT pk_normwaarde PRIMARY KEY (nrmv_id);


--
-- Name: pk_nwf; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY network_facility
    ADD CONSTRAINT pk_nwf PRIMARY KEY (emf_id, emn_id, linking_time_begin);


--
-- Name: pk_obex; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY objectives_exemption_type
    ADD CONSTRAINT pk_obex PRIMARY KEY (obex_id);


--
-- Name: pk_object_type; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY object_type
    ADD CONSTRAINT pk_object_type PRIMARY KEY (obj_id);


--
-- Name: pk_obmb; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY other_basic_measure113b_type
    ADD CONSTRAINT pk_obmb PRIMARY KEY (obmb_id);


--
-- Name: pk_obp; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY observation_process
    ADD CONSTRAINT pk_obp PRIMARY KEY (obp_id);


--
-- Name: pk_obp01; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY observation_process_copy_dietmar
    ADD CONSTRAINT pk_obp01 PRIMARY KEY (obp_id);


--
-- Name: pk_observation; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY observation
    ADD CONSTRAINT pk_observation PRIMARY KEY (obs_id);


--
-- Name: pk_observation_context; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY observation_context
    ADD CONSTRAINT pk_observation_context PRIMARY KEY (obs_id_source, obs_id_target);


--
-- Name: pk_observation_parameter; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY observation_parameter
    ADD CONSTRAINT pk_observation_parameter PRIMARY KEY (obs_id, name);


--
-- Name: pk_observed_feature; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY observed_feature
    ADD CONSTRAINT pk_observed_feature PRIMARY KEY (hdo_id, obs_id);


--
-- Name: pk_observed_property_type; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY observed_property_type
    ADD CONSTRAINT pk_observed_property_type PRIMARY KEY (opt_id);


--
-- Name: pk_observing_capability; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY observing_capability
    ADD CONSTRAINT pk_observing_capability PRIMARY KEY (osc_id);


--
-- Name: pk_observing_capability_observation; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY observing_capability_observation
    ADD CONSTRAINT pk_observing_capability_observation PRIMARY KEY (ocbs_id);


--
-- Name: pk_observing_capability_sample; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY observing_capability_sample
    ADD CONSTRAINT pk_observing_capability_sample PRIMARY KEY (ocsa_id);


--
-- Name: pk_ocr; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY object_state_column_required
    ADD CONSTRAINT pk_ocr PRIMARY KEY (ost_id, table_name, column_name);


--
-- Name: pk_ocrp; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY observing_capability_responsible_party
    ADD CONSTRAINT pk_ocrp PRIMARY KEY (ocrp_id);


--
-- Name: pk_ojg; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY object_group
    ADD CONSTRAINT pk_ojg PRIMARY KEY (ojg_id);


--
-- Name: pk_ojge; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY object_group_element
    ADD CONSTRAINT pk_ojge PRIMARY KEY (ojg_id, obj_id);


--
-- Name: pk_operational_activity_period; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY operational_activity_period
    ADD CONSTRAINT pk_operational_activity_period PRIMARY KEY (emf_id, activity_begin);


--
-- Name: pk_opt_class_result_type_type; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY opt_class_result_type_type
    ADD CONSTRAINT pk_opt_class_result_type_type PRIMARY KEY (observed_property_type_class_type, result_type_type);


--
-- Name: pk_organisation_category_type; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY organisation_category_type
    ADD CONSTRAINT pk_organisation_category_type PRIMARY KEY (ocat_id);


--
-- Name: pk_organisatorische_eenheid; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY organisatorische_eenheid
    ADD CONSTRAINT pk_organisatorische_eenheid PRIMARY KEY (ore_id);


--
-- Name: pk_organisatorische_eenheid_wkpusergroup; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY organisatorische_eenheid_wkpusergroup
    ADD CONSTRAINT pk_organisatorische_eenheid_wkpusergroup PRIMARY KEY (organisatorische_eenheid_wkpusergroupid);


--
-- Name: pk_other_monitoring_use_type; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY other_monitoring_use_type
    ADD CONSTRAINT pk_other_monitoring_use_type PRIMARY KEY (omut_id);


--
-- Name: pk_page; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY page
    ADD CONSTRAINT pk_page PRIMARY KEY (page_id);


--
-- Name: pk_page_group; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY page_group
    ADD CONSTRAINT pk_page_group PRIMARY KEY (pg_id);


--
-- Name: pk_page_pagegroup; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY page_pagegroup
    ADD CONSTRAINT pk_page_pagegroup PRIMARY KEY (pagepg_id);


--
-- Name: pk_parameter_aquo_ds_20160105; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY parameter_aquo_ds_20160105
    ADD CONSTRAINT pk_parameter_aquo_ds_20160105 PRIMARY KEY (code);


--
-- Name: pk_parameter_frequency; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY quality_element
    ADD CONSTRAINT pk_parameter_frequency PRIMARY KEY (qem_id);


--
-- Name: pk_parameter_use_type; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY parameter_use_type
    ADD CONSTRAINT pk_parameter_use_type PRIMARY KEY (prus_id);


--
-- Name: pk_pat_id; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY physical_alteration_type
    ADD CONSTRAINT pk_pat_id PRIMARY KEY (pat_id);


--
-- Name: pk_pba; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY plaatsbepalingsapparaat_type
    ADD CONSTRAINT pk_pba PRIMARY KEY (pba_id);


--
-- Name: pk_pmf; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY planned_feature_monitoring
    ADD CONSTRAINT pk_pmf PRIMARY KEY (pmf_id);


--
-- Name: pk_pmfp; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY projection
    ADD CONSTRAINT pk_pmfp PRIMARY KEY (pmfp_id);


--
-- Name: pk_pmo; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY program_monitoring_object
    ADD CONSTRAINT pk_pmo PRIMARY KEY (program_mno_id, object_mno_id);


--
-- Name: pk_pollutant_trend; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY pollutant_trend
    ADD CONSTRAINT pk_pollutant_trend PRIMARY KEY (pltr_id);


--
-- Name: pk_pom_base_measure; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY pom_base_measure113a
    ADD CONSTRAINT pk_pom_base_measure PRIMARY KEY (pbm_id);


--
-- Name: pk_pom_other_basic_measure113b; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY pom_other_basic_measure113b
    ADD CONSTRAINT pk_pom_other_basic_measure113b PRIMARY KEY (pobb_id);


--
-- Name: pk_pressure_category; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY pressure_category_type
    ADD CONSTRAINT pk_pressure_category PRIMARY KEY (pcat_id);


--
-- Name: pk_pressure_measures_checklist; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY sw_pressure_requiring_supp_add_measures
    ADD CONSTRAINT pk_pressure_measures_checklist PRIMARY KEY (sprm_id);


--
-- Name: pk_process_type; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY process_type
    ADD CONSTRAINT pk_process_type PRIMARY KEY (prc_id);


--
-- Name: pk_protected_area_type; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY protected_area_type
    ADD CONSTRAINT pk_protected_area_type PRIMARY KEY (pat_id);


--
-- Name: pk_prr; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY pressure_relevance_type
    ADD CONSTRAINT pk_prr PRIMARY KEY (prr_id);


--
-- Name: pk_qe_ecological_type; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY qe_ecological_type
    ADD CONSTRAINT pk_qe_ecological_type PRIMARY KEY (qeel_id);


--
-- Name: pk_quality_element_observation; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY quality_element_observation
    ADD CONSTRAINT pk_quality_element_observation PRIMARY KEY (qeo_id);


--
-- Name: pk_quality_element_sample; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY quality_element_sample
    ADD CONSTRAINT pk_quality_element_sample PRIMARY KEY (qes_id);


--
-- Name: pk_rbmp; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY river_basin_management_plan
    ADD CONSTRAINT pk_rbmp PRIMARY KEY (rbmp_id);


--
-- Name: pk_rct_id; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY reason_change_type
    ADD CONSTRAINT pk_rct_id PRIMARY KEY (rct_id);


--
-- Name: pk_rel_samp_feat_role_type; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY rel_samp_feat_role_type
    ADD CONSTRAINT pk_rel_samp_feat_role_type PRIMARY KEY (rsfr_id);


--
-- Name: pk_related_hydro_object; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY related_hydro_object
    ADD CONSTRAINT pk_related_hydro_object PRIMARY KEY (from_hdo, to_hdo, rrt_id);


--
-- Name: pk_relation_gwb_swb; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY relation_gwb_swb
    ADD CONSTRAINT pk_relation_gwb_swb PRIMARY KEY (gwb_id, swb_id, gwsw_id);


--
-- Name: pk_relation_ore_wbd; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY relation_ore_wbd
    ADD CONSTRAINT pk_relation_ore_wbd PRIMARY KEY (ore_wbd_id);


--
-- Name: pk_relation_type; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY relation_type
    ADD CONSTRAINT pk_relation_type PRIMARY KEY (rlt_id);


--
-- Name: pk_report_version; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY report_version
    ADD CONSTRAINT pk_report_version PRIMARY KEY (rpv_id);


--
-- Name: pk_result_acquisition_source_type; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY result_acquisition_source_type
    ADD CONSTRAINT pk_result_acquisition_source_type PRIMARY KEY (ras_id);


--
-- Name: pk_rewab_type; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY rewab_type
    ADD CONSTRAINT pk_rewab_type PRIMARY KEY (rwb_id);


--
-- Name: pk_rhr; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY rel_hdo_role_type
    ADD CONSTRAINT pk_rhr PRIMARY KEY (rhr_id);


--
-- Name: pk_river_basin_disrict; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY river_basin_disrict
    ADD CONSTRAINT pk_river_basin_disrict PRIMARY KEY (rbd_id);


--
-- Name: pk_role_type; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY obs_ctx_role_type
    ADD CONSTRAINT pk_role_type PRIMARY KEY (ocr_id);


--
-- Name: pk_rpp; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY reporting_period
    ADD CONSTRAINT pk_rpp PRIMARY KEY (rpp_id);


--
-- Name: pk_rrt; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY rel_role_type
    ADD CONSTRAINT pk_rrt PRIMARY KEY (rrt_id);


--
-- Name: pk_rrt_from_to; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY related_monitoring_object
    ADD CONSTRAINT pk_rrt_from_to PRIMARY KEY (from_mno, to_mno, rrt_id);


--
-- Name: pk_rsf; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY related_sampling_feature
    ADD CONSTRAINT pk_rsf PRIMARY KEY (mnf_id_source, mnf_id_target);


--
-- Name: pk_sampled_feature; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY sampled_feature
    ADD CONSTRAINT pk_sampled_feature PRIMARY KEY (hdo_id, mnf_id);


--
-- Name: pk_sampling_proces; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY sampling_proces
    ADD CONSTRAINT pk_sampling_proces PRIMARY KEY (smp_id);


--
-- Name: pk_sc_id; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY system_configuration
    ADD CONSTRAINT pk_sc_id PRIMARY KEY (sc_id);


--
-- Name: pk_scss; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY sw_chemical_substance_status
    ADD CONSTRAINT pk_scss PRIMARY KEY (sys_id, opt_id, eumg_id, wbpm_id);


--
-- Name: pk_ses; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY sw_ecological_status
    ADD CONSTRAINT pk_ses PRIMARY KEY (sys_id, opt_id, eumg_id, wbpm_id);


--
-- Name: pk_smeu; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY sw_supp_measure_eu_type
    ADD CONSTRAINT pk_smeu PRIMARY KEY (smeu_id);


--
-- Name: pk_specialised_emf_type; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY specialised_emf_type
    ADD CONSTRAINT pk_specialised_emf_type PRIMARY KEY (semf_id);


--
-- Name: pk_ssg; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY substance_group
    ADD CONSTRAINT pk_ssg PRIMARY KEY (ssg_id);


--
-- Name: pk_ssge; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY substance_group_element
    ADD CONSTRAINT pk_ssge PRIMARY KEY (ssge_id, chs_id);


--
-- Name: pk_station_level_type; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY station_level_type
    ADD CONSTRAINT pk_station_level_type PRIMARY KEY (slt_id);


--
-- Name: pk_station_type_type; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY station_type_type
    ADD CONSTRAINT pk_station_type_type PRIMARY KEY (stt_id);


--
-- Name: pk_stcc_eumg_sys; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY sw_testing_conclusion
    ADD CONSTRAINT pk_stcc_eumg_sys PRIMARY KEY (stcc_id, sys_id, eumg_id);


--
-- Name: pk_subsite_type; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY subsite_type
    ADD CONSTRAINT pk_subsite_type PRIMARY KEY (sst_id);


--
-- Name: pk_substrate_type; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY substrate_type
    ADD CONSTRAINT pk_substrate_type PRIMARY KEY (sub_id);


--
-- Name: pk_sw_pressure_type; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY sw_pressure_type
    ADD CONSTRAINT pk_sw_pressure_type PRIMARY KEY (sprs_id);


--
-- Name: pk_sw_pressure_type_driver_ids; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY sw_pressure_type_driver
    ADD CONSTRAINT pk_sw_pressure_type_driver_ids PRIMARY KEY (sprs_id, driver_id);


--
-- Name: pk_sw_pressure_type_type_category; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY sw_pressure_type_type_category
    ADD CONSTRAINT pk_sw_pressure_type_type_category PRIMARY KEY (sprs_id, swc_id);


--
-- Name: pk_sw_pressures_preventing_good_status; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY sw_pressures_preventing_good_status
    ADD CONSTRAINT pk_sw_pressures_preventing_good_status PRIMARY KEY (spg_id);


--
-- Name: pk_sw_required_supp_measure; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY sw_required_supp_measure
    ADD CONSTRAINT pk_sw_required_supp_measure PRIMARY KEY (sprm_id, smnl_id);


--
-- Name: pk_sw_test_value; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY sw_test_value
    ADD CONSTRAINT pk_sw_test_value PRIMARY KEY (stcc_id, nrmv_id);


--
-- Name: pk_sw_typology_type; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY sw_typology_type
    ADD CONSTRAINT pk_sw_typology_type PRIMARY KEY (styp_id);


--
-- Name: pk_swap; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY sw_abstraction_point
    ADD CONSTRAINT pk_swap PRIMARY KEY (sasp_id);


--
-- Name: pk_swat; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY sw_abstraction_type
    ADD CONSTRAINT pk_swat PRIMARY KEY (swat_id);


--
-- Name: pk_swb_art43b_excemption; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY swb_art43b_excemption
    ADD CONSTRAINT pk_swb_art43b_excemption PRIMARY KEY (swb_id, a43b_id);


--
-- Name: pk_swb_chem_exemp_pollutant; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY swb_chem_exemp_pollutant
    ADD CONSTRAINT pk_swb_chem_exemp_pollutant PRIMARY KEY (swce_id, chs_id);


--
-- Name: pk_swb_chemical_exemption; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY swb_exemption
    ADD CONSTRAINT pk_swb_chemical_exemption PRIMARY KEY (swce_id);


--
-- Name: pk_swb_ecol_exemp_qe; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY swb_ecol_exemp_qe
    ADD CONSTRAINT pk_swb_ecol_exemp_qe PRIMARY KEY (swce_id, opt_id);


--
-- Name: pk_swb_measure_43a; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY swb_measures_43a
    ADD CONSTRAINT pk_swb_measure_43a PRIMARY KEY (swb_id, fu43_id);


--
-- Name: pk_swb_physical_alteration_ids; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY swb_physical_alteration
    ADD CONSTRAINT pk_swb_physical_alteration_ids PRIMARY KEY (swb_id, pat_id);


--
-- Name: pk_swb_pressure; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY swb_pressure
    ADD CONSTRAINT pk_swb_pressure PRIMARY KEY (swbp_id);


--
-- Name: pk_swb_pressure_impact_ids; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY swb_pressure_impact
    ADD CONSTRAINT pk_swb_pressure_impact_ids PRIMARY KEY (swbp_id, impact_id);


--
-- Name: pk_swb_status; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY gw_swb_status
    ADD CONSTRAINT pk_swb_status PRIMARY KEY (swb_id, gwsy, opt_id);


--
-- Name: pk_swb_yearly_status; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY swb_yearly_status
    ADD CONSTRAINT pk_swb_yearly_status PRIMARY KEY (sys_id);


--
-- Name: pk_swc; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY sw_category_type
    ADD CONSTRAINT pk_swc PRIMARY KEY (swc_id);


--
-- Name: pk_swp; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY sw_aggregated_pressure_type
    ADD CONSTRAINT pk_swp PRIMARY KEY (swap_id);


--
-- Name: pk_swpr_id; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY wb_prognosis
    ADD CONSTRAINT pk_swpr_id PRIMARY KEY (wbpr_id);


--
-- Name: pk_taxon_type; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY taxon_type
    ADD CONSTRAINT pk_taxon_type PRIMARY KEY (txn_id);


--
-- Name: pk_tge; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY taxa_group_element
    ADD CONSTRAINT pk_tge PRIMARY KEY (txg_id, txn_id);


--
-- Name: pk_thema_actie_organisatorische_eenheid_voortgang; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY thema_actie_organisatorische_eenheid_voortgang
    ADD CONSTRAINT pk_thema_actie_organisatorische_eenheid_voortgang PRIMARY KEY (taov_id);


--
-- Name: pk_thema_acties; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY thema_acties
    ADD CONSTRAINT pk_thema_acties PRIMARY KEY (ta_id);


--
-- Name: pk_thema_overzicht_groep_organisatorische_eenheden; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY thema_overzicht_groep_organisatorische_eenheden
    ADD CONSTRAINT pk_thema_overzicht_groep_organisatorische_eenheden PRIMARY KEY (tog_id, ore_id);


--
-- Name: pk_thema_overzicht_groep_river_basin_disrict; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY thema_overzicht_groep_river_basin_disrict
    ADD CONSTRAINT pk_thema_overzicht_groep_river_basin_disrict PRIMARY KEY (tog_id, rbd_id);


--
-- Name: pk_thema_overzicht_groep_wkpusers; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY thema_overzicht_groep_wkpusers
    ADD CONSTRAINT pk_thema_overzicht_groep_wkpusers PRIMARY KEY (tog_id, wkpuserid);


--
-- Name: pk_thema_overzicht_groepen; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY thema_overzicht_groepen
    ADD CONSTRAINT pk_thema_overzicht_groepen PRIMARY KEY (tog_id);


--
-- Name: pk_thema_overzicht_statussen; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY thema_overzicht_statussen
    ADD CONSTRAINT pk_thema_overzicht_statussen PRIMARY KEY (tos_id);


--
-- Name: pk_themas; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY themas
    ADD CONSTRAINT pk_themas PRIMARY KEY (t_id);


--
-- Name: pk_txg; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY taxa_group
    ADD CONSTRAINT pk_txg PRIMARY KEY (txg_id);


--
-- Name: pk_type_environmental_domain; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY environmental_domain_code
    ADD CONSTRAINT pk_type_environmental_domain PRIMARY KEY (emd_id);


--
-- Name: pk_type_object_state; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY object_state_type
    ADD CONSTRAINT pk_type_object_state PRIMARY KEY (ost_id);


--
-- Name: pk_typering_type; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY typering_type
    ADD CONSTRAINT pk_typering_type PRIMARY KEY (typ_id);


--
-- Name: pk_valid_column_uom; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY valid_column_uom
    ADD CONSTRAINT pk_valid_column_uom PRIMARY KEY (vcu_id);


--
-- Name: pk_volumestroom_type; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY volumestroom_type
    ADD CONSTRAINT pk_volumestroom_type PRIMARY KEY (vst_id);


--
-- Name: pk_volumestroom_type_bronnen; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY volumestroom_type_bronnen
    ADD CONSTRAINT pk_volumestroom_type_bronnen PRIMARY KEY (vtb_id);


--
-- Name: pk_waarde_bepalings_methode; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY waarde_bepalings_methode_type
    ADD CONSTRAINT pk_waarde_bepalings_methode PRIMARY KEY (wbpm_id);


--
-- Name: pk_watercourse; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY watercourse
    ADD CONSTRAINT pk_watercourse PRIMARY KEY (wtc_id);


--
-- Name: pk_wbd_pwa_overlap; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY waterbody_protected_area_intersection
    ADD CONSTRAINT pk_wbd_pwa_overlap PRIMARY KEY (wbpa_id);


--
-- Name: pk_wbm; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY waarde_bewerkings_methode_type
    ADD CONSTRAINT pk_wbm PRIMARY KEY (wbm_id);


--
-- Name: pk_wbsc; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY wb_status_change_motivation
    ADD CONSTRAINT pk_wbsc PRIMARY KEY (wbsc_id);


--
-- Name: pk_wfd_groundwaterbody; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY ground_water_body
    ADD CONSTRAINT pk_wfd_groundwaterbody PRIMARY KEY (gwb_id);


--
-- Name: pk_wfd_monitoring_station; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY monitoring_station
    ADD CONSTRAINT pk_wfd_monitoring_station PRIMARY KEY (mts_id);


--
-- Name: pk_wfd_protected_area; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY wfd_protected_area
    ADD CONSTRAINT pk_wfd_protected_area PRIMARY KEY (wpa_id);


--
-- Name: pk_wfd_qe_gw; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY wfd_qe_gwtype
    ADD CONSTRAINT pk_wfd_qe_gw PRIMARY KEY (opt_id);


--
-- Name: pk_wfd_qe_swtype; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY wfd_qe_swtype
    ADD CONSTRAINT pk_wfd_qe_swtype PRIMARY KEY (opt_id, swt_id);


--
-- Name: pk_wfd_status_code; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY wfd_status_code
    ADD CONSTRAINT pk_wfd_status_code PRIMARY KEY (wsc_id);


--
-- Name: pk_wfd_surface_water_body; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY surface_water_body
    ADD CONSTRAINT pk_wfd_surface_water_body PRIMARY KEY (swb_id);


--
-- Name: pk_wfd_water_body; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY water_body
    ADD CONSTRAINT pk_wfd_water_body PRIMARY KEY (wbd_id);


--
-- Name: pk_wkpuser_pagegroup; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY wkpuser_pagegroup
    ADD CONSTRAINT pk_wkpuser_pagegroup PRIMARY KEY (wupg_id);


--
-- Name: pk_wkpusergroupid; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY wkpusergroup
    ADD CONSTRAINT pk_wkpusergroupid PRIMARY KEY (wkpusergroupid);


--
-- Name: pk_wkpuserid; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY wkpuser_settings
    ADD CONSTRAINT pk_wkpuserid PRIMARY KEY (wkpuserid);


--
-- Name: pk_wkr_version; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY wkr_version
    ADD CONSTRAINT pk_wkr_version PRIMARY KEY (wkrv_id);


--
-- Name: pk_wtclt; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY watercourse_local_type
    ADD CONSTRAINT pk_wtclt PRIMARY KEY (wtc_id, value, locale);


--
-- Name: pk_yes_no_not_applicable_type; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY yes_no_not_applicable_type
    ADD CONSTRAINT pk_yes_no_not_applicable_type PRIMARY KEY (ynna_id);


--
-- Name: pk_zone_type_code; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY zone_type_code
    ADD CONSTRAINT pk_zone_type_code PRIMARY KEY (ztc_id);


--
-- Name: pl_me43_id; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY sw_measure43_nl_type
    ADD CONSTRAINT pl_me43_id PRIMARY KEY (me43_id);


--
-- Name: pl_mft; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY measure_finance
    ADD CONSTRAINT pl_mft PRIMARY KEY (mtm_id, mft_id);


--
-- Name: pl_mft_id; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY measure_finance_type
    ADD CONSTRAINT pl_mft_id PRIMARY KEY (mtf_id);


--
-- Name: profile_wkpuser_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY profile
    ADD CONSTRAINT profile_wkpuser_pkey PRIMARY KEY (wkpuserid);


--
-- Name: role_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY role
    ADD CONSTRAINT role_pkey PRIMARY KEY (roleid);


--
-- Name: role_rolename_key; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY role
    ADD CONSTRAINT role_rolename_key UNIQUE (rolename);


--
-- Name: sample_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY sample
    ADD CONSTRAINT sample_pkey PRIMARY KEY (smpl_id);


--
-- Name: transformation_name_key; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY transformation
    ADD CONSTRAINT transformation_name_key UNIQUE (name);


--
-- Name: transformation_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY transformation
    ADD CONSTRAINT transformation_pkey PRIMARY KEY (transformationid);


--
-- Name: uk_bio_observation; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY bio_observation
    ADD CONSTRAINT uk_bio_observation UNIQUE (obs_id, levensstadium_id, lengte_klasse_id, geslacht_id, verschijningsvorm_id, levensvorm_id, gedrag_id);


--
-- Name: uk_hydro_objects; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY hydro_object
    ADD CONSTRAINT uk_hydro_objects UNIQUE (inspire_id_local_id, inspire_id_namespace, wkrv_id, hydro_object_type);


--
-- Name: uk_measure_ids; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY supp_add_measure_type
    ADD CONSTRAINT uk_measure_ids UNIQUE (rbmp_id, namespace_id, local_id);


--
-- Name: uk_observed_property_type_six_columns; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY observed_property_type
    ADD CONSTRAINT uk_observed_property_type_six_columns UNIQUE (hoedanigheid_id, object_group_id, quantity_id, taxa_group_id, substance_group_id, indicator_id);


--
-- Name: uk_omschrijving; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY pressure_relevance_type
    ADD CONSTRAINT uk_omschrijving UNIQUE (omschrijving);


--
-- Name: uk_prognosis; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY wb_prognosis
    ADD CONSTRAINT uk_prognosis UNIQUE (year, opt_id, swb_id);


--
-- Name: uk_qegw_id; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY wfd_qe_gwtype
    ADD CONSTRAINT uk_qegw_id UNIQUE (qegw_id);


--
-- Name: uk_swee_measure; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY swb_measures_43a
    ADD CONSTRAINT uk_swee_measure UNIQUE (swee_id);


--
-- Name: uq_code; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY waarde_bepalings_methode_type
    ADD CONSTRAINT uq_code UNIQUE (code);


--
-- Name: uq_hdo_names; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY hdo_names
    ADD CONSTRAINT uq_hdo_names UNIQUE (hdo_id, name, language);


--
-- Name: uq_norm_hulp_mapping_ln; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY norm_hulp_mapping
    ADD CONSTRAINT uq_norm_hulp_mapping_ln UNIQUE (lokale_naam);


--
-- Name: uq_norm_hulp_mapping_ptc; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY norm_hulp_mapping
    ADD CONSTRAINT uq_norm_hulp_mapping_ptc UNIQUE (parameter_typering_code);


--
-- Name: validation_importtype_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY validation_importtype
    ADD CONSTRAINT validation_importtype_pkey PRIMARY KEY (validationid, importtypeid);


--
-- Name: validation_name_key; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY validation
    ADD CONSTRAINT validation_name_key UNIQUE (name);


--
-- Name: validation_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY validation
    ADD CONSTRAINT validation_pkey PRIMARY KEY (validationid);


--
-- Name: wkpuser_importtype_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY wkpuser_importtype
    ADD CONSTRAINT wkpuser_importtype_pkey PRIMARY KEY (wkpuserid, importtypeid);


--
-- Name: wkpuser_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY wkpuser
    ADD CONSTRAINT wkpuser_pkey PRIMARY KEY (wkpuserid);


--
-- Name: wkpuser_role_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY wkpuserinrole
    ADD CONSTRAINT wkpuser_role_pkey PRIMARY KEY (wkpuserid, roleid);


--
-- Name: wkpuser_username_key; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY wkpuser
    ADD CONSTRAINT wkpuser_username_key UNIQUE (username);


--
-- Name: wkpuser_wkpusergroup_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY wkpuser_wkpusergroup
    ADD CONSTRAINT wkpuser_wkpusergroup_pkey PRIMARY KEY (wkpuserid, wkpusergroupid);


SET search_path = wfd_reporting, pg_catalog;

--
-- Name: pk_id; Type: CONSTRAINT; Schema: wfd_reporting; Owner: -
--

ALTER TABLE ONLY geological_formation_enum
    ADD CONSTRAINT pk_id PRIMARY KEY (nl_id);


SET search_path = public, pg_catalog;

--
-- Name: FKI_VerwerkingsVerslagRegel_VerwerkingsVerslag; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX "FKI_VerwerkingsVerslagRegel_VerwerkingsVerslag" ON "VerwerkingsVerslagRegel" USING btree ("verwerkingsVerslagId");


--
-- Name: FKI_VerwerkingsVerslagRegel_VerwerkingsVerslagRegeloort; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX "FKI_VerwerkingsVerslagRegel_VerwerkingsVerslagRegeloort" ON "VerwerkingsVerslagRegel" USING btree ("verwerkingsVerslagRegelSoortId");


--
-- Name: FKI_VerwerkingsVerslag_VerwerkingsVerslagStatus; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX "FKI_VerwerkingsVerslag_VerwerkingsVerslagStatus" ON "VerwerkingsVerslag" USING btree ("actieId");


--
-- Name: eumg_id_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX eumg_id_idx ON sw_chemical_substance_status USING btree (eumg_id DESC NULLS LAST);


--
-- Name: idx_hdo_wkrv; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_hdo_wkrv ON hydro_object USING btree (hdo_id, wkrv_id DESC NULLS LAST);


--
-- Name: idx_hydro_object_inspire_id_local_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_hydro_object_inspire_id_local_id ON hydro_object USING btree (inspire_id_local_id);


--
-- Name: idx_hydro_object_related_hdo_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_hydro_object_related_hdo_id ON hydro_object USING btree (related_hdo_id);


--
-- Name: idx_measure_per_man_reg_or_restr_zone_mrz_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_measure_per_man_reg_or_restr_zone_mrz_id ON measure_per_man_reg_or_restr_zone USING btree (mrz_id);


--
-- Name: idx_measure_per_man_reg_or_restr_zone_mtm_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_measure_per_man_reg_or_restr_zone_mtm_id ON measure_per_man_reg_or_restr_zone USING btree (mtm_id);


--
-- Name: idx_mvoc_swb_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_mvoc_swb_id ON mv_oordeel_chemie_owm USING btree (swb_id);


--
-- Name: idx_mvoe_swb_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_mvoe_swb_id ON mv_oordeel_ecologie_owm USING btree (swb_id);


--
-- Name: idx_network_facility_emf_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_network_facility_emf_id ON network_facility USING btree (emf_id);


--
-- Name: idx_network_facility_emn_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_network_facility_emn_id ON network_facility USING btree (emn_id);


--
-- Name: idx_observation_obs_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_observation_obs_id ON observation USING btree (obs_id);


--
-- Name: idx_observation_observed_property_type; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_observation_observed_property_type ON observation USING btree (observed_property_type);


--
-- Name: idx_observed_property_type_opt_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_observed_property_type_opt_id ON observed_property_type USING btree (opt_id);


--
-- Name: idx_observing_capability_observation_obs_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_observing_capability_observation_obs_id ON observing_capability_observation USING btree (obs_id);


--
-- Name: INDEX idx_observing_capability_observation_obs_id; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON INDEX idx_observing_capability_observation_obs_id IS 'Added by SF 2016-04-23';


--
-- Name: idx_supp_add_measure_type_local_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_supp_add_measure_type_local_id ON supp_add_measure_type USING btree (local_id);


--
-- Name: idx_surface_water_body_sw_typology_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_surface_water_body_sw_typology_id ON surface_water_body USING btree (sw_typology_id);


--
-- Name: idx_sw_testing_conclusion_stcc_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_sw_testing_conclusion_stcc_id ON sw_testing_conclusion USING btree (stcc_id);


--
-- Name: INDEX idx_sw_testing_conclusion_stcc_id; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON INDEX idx_sw_testing_conclusion_stcc_id IS 'Added by SF on 2016-04-13';


--
-- Name: idx_water_body_rbd_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_water_body_rbd_id ON water_body USING btree (rbd_id);


--
-- Name: idx_wfd_protected_area_protected_area_type_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_wfd_protected_area_protected_area_type_id ON wfd_protected_area USING btree (protected_area_type_id);


--
-- Name: ix_applicationid_membership; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX ix_applicationid_membership ON membership USING btree (applicationid);


--
-- Name: ix_applicationid_role; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX ix_applicationid_role ON role USING btree (applicationid);


--
-- Name: ix_applicationid_wkpuser; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX ix_applicationid_wkpuser ON wkpuser USING btree (applicationid);


--
-- Name: ix_importtypeid_validation_importtype; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX ix_importtypeid_validation_importtype ON validation_importtype USING btree (importtypeid);


--
-- Name: ix_importtypeid_wkpuser_importtype; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX ix_importtypeid_wkpuser_importtype ON wkpuser_importtype USING btree (importtypeid);


--
-- Name: ix_profile_wkpuser; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX ix_profile_wkpuser ON wkpuser USING btree (wkpuserid);


--
-- Name: ix_roleid_wkpuserinrole; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX ix_roleid_wkpuserinrole ON wkpuserinrole USING btree (roleid);


--
-- Name: ix_validationid_validation_importtype; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX ix_validationid_validation_importtype ON validation_importtype USING btree (validationid);


--
-- Name: ix_wkpuserid_membership; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX ix_wkpuserid_membership ON membership USING btree (wkpuserid);


--
-- Name: ix_wkpuserid_wkpuser_importtype; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX ix_wkpuserid_wkpuser_importtype ON wkpuser_importtype USING btree (wkpuserid);


--
-- Name: ix_wkpuserid_wkpuserinrole; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX ix_wkpuserid_wkpuserinrole ON wkpuserinrole USING btree (wkpuserid);


--
-- Name: ix_wkpusername_wkpuser; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX ix_wkpusername_wkpuser ON wkpuser USING btree (username);


--
-- Name: observation_idx_result_nature_id01; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX observation_idx_result_nature_id01 ON observation USING btree (result_nature_id);


--
-- Name: observation_mno_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX observation_mno_id ON observation USING btree (mno_id);


--
-- Name: observation_obs_parm_parent_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX observation_obs_parm_parent_id ON observation USING btree (obs_parm_parent_id);


--
-- Name: observed_feature_obs_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX observed_feature_obs_id ON observed_feature USING btree (obs_id);


--
-- Name: opt_id_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX opt_id_idx ON sw_chemical_substance_status USING btree (opt_id);


--
-- Name: quality_element_observation_obs_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX quality_element_observation_obs_id ON quality_element_observation USING btree (obs_id);


--
-- Name: INDEX quality_element_observation_obs_id; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON INDEX quality_element_observation_obs_id IS 'Added by SF on 2016-07-28';


--
-- Name: sidx_abstraction_point_geometry; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX sidx_abstraction_point_geometry ON abstraction_point USING gist (geometry);


--
-- Name: sidx_environmental_monitoring_facility_representative_point; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX sidx_environmental_monitoring_facility_representative_point ON environmental_monitoring_facility USING gist (representative_point);


--
-- Name: sidx_ground_water_body_centroid; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX sidx_ground_water_body_centroid ON ground_water_body USING gist (centroid);


--
-- Name: sidx_management_regulation_or_restriction_zone_geometry; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX sidx_management_regulation_or_restriction_zone_geometry ON management_regulation_or_restriction_zone USING gist (geometry);

ALTER TABLE management_regulation_or_restriction_zone CLUSTER ON sidx_management_regulation_or_restriction_zone_geometry;


--
-- Name: sidx_management_regulation_or_restriction_zone_geometry_etrs89; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX sidx_management_regulation_or_restriction_zone_geometry_etrs89 ON management_regulation_or_restriction_zone USING gist (geometry_etrs89);


--
-- Name: sidx_monitoring_object_geometry; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX sidx_monitoring_object_geometry ON monitoring_object USING gist (geometry);


--
-- Name: sidx_monitoring_object_geometry_etrs89; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX sidx_monitoring_object_geometry_etrs89 ON monitoring_object USING gist (geometry_etrs89);


--
-- Name: sidx_surface_water_body_representative_point; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX sidx_surface_water_body_representative_point ON surface_water_body USING gist (representative_point);


--
-- Name: sidx_waterbody_protected_area_intersection_geometry; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX sidx_waterbody_protected_area_intersection_geometry ON waterbody_protected_area_intersection USING gist (geometry);


--
-- Name: sidx_watercourse_geometryLine; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX "sidx_watercourse_geometryLine" ON watercourse USING gist ("geometryLine");


--
-- Name: sidx_watercourse_geometrySurface; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX "sidx_watercourse_geometrySurface" ON watercourse USING gist ("geometrySurface");


--
-- Name: sidx_wfd_protected_area_geometry; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX sidx_wfd_protected_area_geometry ON wfd_protected_area USING gist (geometry);


--
-- Name: swb_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX swb_idx ON swb_yearly_status USING btree (swb_id);


--
-- Name: sys_id_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX sys_id_idx ON sw_chemical_substance_status USING btree (sys_id);


--
-- Name: wbpm_id_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX wbpm_id_idx ON sw_chemical_substance_status USING btree (wbpm_id DESC NULLS LAST);


--
-- Name: yos_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX yos_idx ON swb_yearly_status USING btree (year_of_status DESC NULLS LAST);


SET search_path = domains, pg_catalog;

--
-- Name: fk_idd_idd; Type: FK CONSTRAINT; Schema: domains; Owner: -
--

ALTER TABLE ONLY indicator_descriptor
    ADD CONSTRAINT fk_idd_idd FOREIGN KEY (part_of_idd_id) REFERENCES indicator_descriptor(idd_id);


--
-- Name: fk_idd_opt; Type: FK CONSTRAINT; Schema: domains; Owner: -
--

ALTER TABLE ONLY indicator_descriptor
    ADD CONSTRAINT fk_idd_opt FOREIGN KEY (opt_id) REFERENCES public.observed_property_type(opt_id);


SET search_path = factsheets, pg_catalog;

--
-- Name: uitvoering_tpe_id_fk; Type: FK CONSTRAINT; Schema: factsheets; Owner: -
--

ALTER TABLE ONLY rapport_tekst
    ADD CONSTRAINT uitvoering_tpe_id_fk FOREIGN KEY (uitvoering_tpe_id) REFERENCES uitvoering_type(uitvoering_type_id);


--
-- Name: veld_id_fk; Type: FK CONSTRAINT; Schema: factsheets; Owner: -
--

ALTER TABLE ONLY rapport_tekst
    ADD CONSTRAINT veld_id_fk FOREIGN KEY (veld_id) REFERENCES veld(veld_id);


--
-- Name: wb_type_id_fk; Type: FK CONSTRAINT; Schema: factsheets; Owner: -
--

ALTER TABLE ONLY rapport_tekst
    ADD CONSTRAINT wb_type_id_fk FOREIGN KEY (wb_type_id) REFERENCES wb_type(wb_type_id);


SET search_path = monprog, pg_catalog;

--
-- Name: fk_pot_bpg; Type: FK CONSTRAINT; Schema: monprog; Owner: -
--

ALTER TABLE ONLY planned_observation_time
    ADD CONSTRAINT fk_pot_bpg FOREIGN KEY (samples_bepalingsgrens_id) REFERENCES public.bepaling_grens_type(bpg_id);


--
-- Name: fk_pot_qem; Type: FK CONSTRAINT; Schema: monprog; Owner: -
--

ALTER TABLE ONLY planned_observation_time
    ADD CONSTRAINT fk_pot_qem FOREIGN KEY (qem_id) REFERENCES public.quality_element(qem_id);


--
-- Name: fk_qeid_idd; Type: FK CONSTRAINT; Schema: monprog; Owner: -
--

ALTER TABLE ONLY quality_element_indicator_descriptor
    ADD CONSTRAINT fk_qeid_idd FOREIGN KEY (idd_id) REFERENCES domains.indicator_descriptor(idd_id);


--
-- Name: CONSTRAINT fk_qeid_idd ON quality_element_indicator_descriptor; Type: COMMENT; Schema: monprog; Owner: -
--

COMMENT ON CONSTRAINT fk_qeid_idd ON quality_element_indicator_descriptor IS 'Added by SF 2016-08-27.';


--
-- Name: fk_qeid_qem; Type: FK CONSTRAINT; Schema: monprog; Owner: -
--

ALTER TABLE ONLY quality_element_indicator_descriptor
    ADD CONSTRAINT fk_qeid_qem FOREIGN KEY (qem_id) REFERENCES public.quality_element(qem_id);


SET search_path = public, pg_catalog;

--
-- Name: FK_VerwerkingsVerslagParameter_VerwerkingsVerslag; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY "VerwerkingsVerslagParameter"
    ADD CONSTRAINT "FK_VerwerkingsVerslagParameter_VerwerkingsVerslag" FOREIGN KEY ("verwerkingsVerslagId") REFERENCES "VerwerkingsVerslag"(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: FK_VerwerkingsVerslagRegel_VerwerkingsVerslag; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY "VerwerkingsVerslagRegel"
    ADD CONSTRAINT "FK_VerwerkingsVerslagRegel_VerwerkingsVerslag" FOREIGN KEY ("verwerkingsVerslagId") REFERENCES "VerwerkingsVerslag"(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: FK_VerwerkingsVerslagRegel_VerwerkingsVerslagRegeloort; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY "VerwerkingsVerslagRegel"
    ADD CONSTRAINT "FK_VerwerkingsVerslagRegel_VerwerkingsVerslagRegeloort" FOREIGN KEY ("verwerkingsVerslagRegelSoortId") REFERENCES "VerwerkingsVerslagRegelSoort"(id);


--
-- Name: FK_VerwerkingsVerslag_Actie; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY "VerwerkingsVerslag"
    ADD CONSTRAINT "FK_VerwerkingsVerslag_Actie" FOREIGN KEY ("actieId") REFERENCES "Actie"(id);


--
-- Name: FK_VerwerkingsVerslag_VerwerkingsVerslagStatus; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY "VerwerkingsVerslag"
    ADD CONSTRAINT "FK_VerwerkingsVerslag_VerwerkingsVerslagStatus" FOREIGN KEY ("verwerkingsVerslagStatusId") REFERENCES "VerwerkingsVerslagStatus"(id);


--
-- Name: bronnen_chemische_stof_type_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY bronnen
    ADD CONSTRAINT bronnen_chemische_stof_type_fkey FOREIGN KEY (chs_id) REFERENCES chemische_stof_type(chs_id);


--
-- Name: bronnen_hydroobject_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY bronnen
    ADD CONSTRAINT bronnen_hydroobject_fkey FOREIGN KEY (hdo_id) REFERENCES hydro_object(hdo_id);


--
-- Name: bronnen_waarde_bepalings_methode_type_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY bronnen
    ADD CONSTRAINT bronnen_waarde_bepalings_methode_type_fkey FOREIGN KEY (wbpm_id) REFERENCES waarde_bepalings_methode_type(wbpm_id);


--
-- Name: bronnen_waarde_eenheid_type_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY bronnen
    ADD CONSTRAINT bronnen_waarde_eenheid_type_fkey FOREIGN KEY (eenh_id) REFERENCES eenheid_type(eenh_id);


--
-- Name: fk_43a_measures; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY sw_measure43_function
    ADD CONSTRAINT fk_43a_measures FOREIGN KEY (smee_id) REFERENCES swb_measures_43a(swee_id);


--
-- Name: fk_abstraction_point_hydro_object; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY gw_abstraction_point
    ADD CONSTRAINT fk_abstraction_point_hydro_object FOREIGN KEY (gasp_id) REFERENCES abstraction_point(asp_id);


--
-- Name: fk_abstraction_point_hydro_object; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY abstraction_point
    ADD CONSTRAINT fk_abstraction_point_hydro_object FOREIGN KEY (asp_id) REFERENCES hydro_object(hdo_id);


--
-- Name: fk_abstraction_point_rewab_type; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY gw_abstraction_point
    ADD CONSTRAINT fk_abstraction_point_rewab_type FOREIGN KEY (rewab_id) REFERENCES rewab_type(rwb_id);


--
-- Name: fk_abstraction_point_wbd; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY abstraction_point
    ADD CONSTRAINT fk_abstraction_point_wbd FOREIGN KEY (wbd_id) REFERENCES water_body(wbd_id);


--
-- Name: fk_acoc_info_stream_activity; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY activity_organisation_category
    ADD CONSTRAINT fk_acoc_info_stream_activity FOREIGN KEY (isac_id) REFERENCES info_stream_activity(isac_id);


--
-- Name: fk_acoc_organisation_category_type; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY activity_organisation_category
    ADD CONSTRAINT fk_acoc_organisation_category_type FOREIGN KEY (ocat_id) REFERENCES organisation_category_type(ocat_id);


--
-- Name: fk_art43b_art43b_type; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY swb_art43b_excemption
    ADD CONSTRAINT fk_art43b_art43b_type FOREIGN KEY (a43b_id) REFERENCES eu_article_43b_type(a43b_id);


--
-- Name: fk_art43b_swb; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY swb_art43b_excemption
    ADD CONSTRAINT fk_art43b_swb FOREIGN KEY (swb_id) REFERENCES surface_water_body(swb_id);


--
-- Name: fk_asp; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY gw_abstraction_point_status
    ADD CONSTRAINT fk_asp FOREIGN KEY (asp_id) REFERENCES abstraction_point(asp_id);


--
-- Name: fk_bio_observation_gedrag; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY bio_observation
    ADD CONSTRAINT fk_bio_observation_gedrag FOREIGN KEY (gedrag_id) REFERENCES BiologischKenmerk(id);


--
-- Name: fk_bio_observation_geslacht; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY bio_observation
    ADD CONSTRAINT fk_bio_observation_geslacht FOREIGN KEY (geslacht_id) REFERENCES BiologischKenmerk(id);


--
-- Name: fk_bio_observation_lengte_klasse; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY bio_observation
    ADD CONSTRAINT fk_bio_observation_lengte_klasse FOREIGN KEY (lengte_klasse_id) REFERENCES BiologischKenmerk(id);


--
-- Name: fk_bio_observation_levensstadium; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY bio_observation
    ADD CONSTRAINT fk_bio_observation_levensstadium FOREIGN KEY (levensstadium_id) REFERENCES BiologischKenmerk(id);


--
-- Name: fk_bio_observation_levensvorm; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY bio_observation
    ADD CONSTRAINT fk_bio_observation_levensvorm FOREIGN KEY (levensvorm_id) REFERENCES BiologischKenmerk(id);


--
-- Name: fk_bio_observation_observation; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY bio_observation
    ADD CONSTRAINT fk_bio_observation_observation FOREIGN KEY (obs_id) REFERENCES observation(obs_id);


--
-- Name: fk_bio_observation_verschijningsvorm; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY bio_observation
    ADD CONSTRAINT fk_bio_observation_verschijningsvorm FOREIGN KEY (verschijningsvorm_id) REFERENCES BiologischKenmerk(id);


--
-- Name: fk_ca_role_code; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY competent_authority_roles
    ADD CONSTRAINT fk_ca_role_code FOREIGN KEY (crc_id) REFERENCES ca_role_code(crc_id);


--
-- Name: fk_ca_role_code_lgr; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY ca_role_code
    ADD CONSTRAINT fk_ca_role_code_lgr FOREIGN KEY (lgr_id) REFERENCES legislation_reference_type(lgr_id);


--
-- Name: fk_chemische_stof_substance_element; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY substance_group_element
    ADD CONSTRAINT fk_chemische_stof_substance_element FOREIGN KEY (chs_id) REFERENCES chemische_stof_type(chs_id);


--
-- Name: fk_chemische_stof_type; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY chemical_exceedance
    ADD CONSTRAINT fk_chemische_stof_type FOREIGN KEY (chs_id) REFERENCES chemische_stof_type(chs_id);


--
-- Name: fk_chs; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY gw_pollutants
    ADD CONSTRAINT fk_chs FOREIGN KEY (chs_id) REFERENCES chemische_stof_type(chs_id);


--
-- Name: fk_cls_clsg; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY classification_type
    ADD CONSTRAINT fk_cls_clsg FOREIGN KEY (clsg_id) REFERENCES classification_group_type(clsg_id);


--
-- Name: fk_cls_id; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY gw_chemical_status
    ADD CONSTRAINT fk_cls_id FOREIGN KEY (clst_id) REFERENCES classification_type(cls_id);


--
-- Name: fk_cls_id; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY gw_swb_status
    ADD CONSTRAINT fk_cls_id FOREIGN KEY (cls_id) REFERENCES classification_type(cls_id);


--
-- Name: fk_clsg_id; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY wfd_qe_swtype
    ADD CONSTRAINT fk_clsg_id FOREIGN KEY (clsg_id) REFERENCES classification_group_type(clsg_id);


--
-- Name: fk_clsg_id; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY wfd_qe_gwtype
    ADD CONSTRAINT fk_clsg_id FOREIGN KEY (clsg_id) REFERENCES classification_group_type(clsg_id);


--
-- Name: fk_compartiment_type; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY monitored_compartiment
    ADD CONSTRAINT fk_compartiment_type FOREIGN KEY (cptm_id) REFERENCES compartiment_type(cptm_id);


--
-- Name: fk_competent_authority; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY competent_authority_roles
    ADD CONSTRAINT fk_competent_authority FOREIGN KEY (ore_id) REFERENCES competent_authority(ore_id);


--
-- Name: fk_competent_authority_namespace_type; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY competent_authority
    ADD CONSTRAINT fk_competent_authority_namespace_type FOREIGN KEY (namespace_id) REFERENCES namespace_type(ns_id);


--
-- Name: fk_competent_authority_organisatorische_eenheid; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY competent_authority
    ADD CONSTRAINT fk_competent_authority_organisatorische_eenheid FOREIGN KEY (ore_id) REFERENCES organisatorische_eenheid(ore_id);


--
-- Name: fk_confidence_level_type; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY gw_quantity_status
    ADD CONSTRAINT fk_confidence_level_type FOREIGN KEY (clt_id) REFERENCES domains.confidence_level_type(clt_id);


--
-- Name: fk_dlt; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY gw_monitoring_station
    ADD CONSTRAINT fk_dlt FOREIGN KEY (depth_sampled_id) REFERENCES eu_depth_level_type(dlt_id);


--
-- Name: fk_ecological_classification; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY sw_ecological_status
    ADD CONSTRAINT fk_ecological_classification FOREIGN KEY (swes_id) REFERENCES classification_type(cls_id);


--
-- Name: fk_emf; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY operational_activity_period
    ADD CONSTRAINT fk_emf FOREIGN KEY (emf_id) REFERENCES environmental_monitoring_facility(emf_id);


--
-- Name: fk_emf; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY monitoring_station
    ADD CONSTRAINT fk_emf FOREIGN KEY (mts_id) REFERENCES environmental_monitoring_facility(emf_id);


--
-- Name: fk_emf_measurement_regime_type; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY environmental_monitoring_facility
    ADD CONSTRAINT fk_emf_measurement_regime_type FOREIGN KEY (measurement_regime_id) REFERENCES measurement_regime_type(mmr_id);


--
-- Name: fk_emf_mnf; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY environmental_monitoring_facility
    ADD CONSTRAINT fk_emf_mnf FOREIGN KEY (emf_id) REFERENCES monitoring_feature(mnf_id);


--
-- Name: fk_emf_result_acquisition_source_type; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY environmental_monitoring_facility
    ADD CONSTRAINT fk_emf_result_acquisition_source_type FOREIGN KEY (result_acquisition_source_id) REFERENCES result_acquisition_source_type(ras_id);


--
-- Name: fk_emf_source; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY any_thematic_link
    ADD CONSTRAINT fk_emf_source FOREIGN KEY (emf_id) REFERENCES environmental_monitoring_facility(emf_id);


--
-- Name: fk_emf_specialised_emf_type; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY environmental_monitoring_facility
    ADD CONSTRAINT fk_emf_specialised_emf_type FOREIGN KEY (speciallised_emf_type_id) REFERENCES specialised_emf_type(semf_id);


--
-- Name: fk_emf_target; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY any_thematic_link
    ADD CONSTRAINT fk_emf_target FOREIGN KEY (related_emf_id) REFERENCES environmental_monitoring_facility(emf_id);


--
-- Name: fk_emn_lgl; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY environmental_monitoring_network
    ADD CONSTRAINT fk_emn_lgl FOREIGN KEY (organization_level_id) REFERENCES legislation_level_type(lgl_id);


--
-- Name: fk_emn_mnf; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY environmental_monitoring_network
    ADD CONSTRAINT fk_emn_mnf FOREIGN KEY (emn_id) REFERENCES monitoring_feature(mnf_id);


--
-- Name: fk_eu_monitoring_goal_type; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY sw_chemical_substance_status
    ADD CONSTRAINT fk_eu_monitoring_goal_type FOREIGN KEY (eumg_id) REFERENCES eu_monitoring_goal_type(eumg_id);


--
-- Name: fk_eu_monitoring_goal_type; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY sw_ecological_status
    ADD CONSTRAINT fk_eu_monitoring_goal_type FOREIGN KEY (eumg_id) REFERENCES eu_monitoring_goal_type(eumg_id);


--
-- Name: fk_eu_monitoring_goal_type; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY gw_chemical_status
    ADD CONSTRAINT fk_eu_monitoring_goal_type FOREIGN KEY (eumg_id) REFERENCES eu_monitoring_goal_type(eumg_id);


--
-- Name: fk_eumg_id; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY gw_quantity_status
    ADD CONSTRAINT fk_eumg_id FOREIGN KEY (eumg_id) REFERENCES eu_monitoring_goal_type(eumg_id);


--
-- Name: fk_excemption_mechanism; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY swb_excemption_mechanism_44
    ADD CONSTRAINT fk_excemption_mechanism FOREIGN KEY (exme_id) REFERENCES excemption_mechanism_type(exme_id);


--
-- Name: fk_faq_thema_id; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY faq_item
    ADD CONSTRAINT fk_faq_thema_id FOREIGN KEY (faq_thema_id) REFERENCES faq_thema(faq_thema_id);


--
-- Name: fk_fim_emf; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY env_mon_facil_in_mngmt_reg_or_restr_zone
    ADD CONSTRAINT fk_fim_emf FOREIGN KEY (emf_id) REFERENCES environmental_monitoring_facility(emf_id);


--
-- Name: fk_fim_mrz; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY env_mon_facil_in_mngmt_reg_or_restr_zone
    ADD CONSTRAINT fk_fim_mrz FOREIGN KEY (mrz_id) REFERENCES management_regulation_or_restriction_zone(mrz_id);


--
-- Name: fk_finance_type; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY measure_finance
    ADD CONSTRAINT fk_finance_type FOREIGN KEY (mft_id) REFERENCES measure_finance_type(mtf_id);


--
-- Name: fk_freq_uom; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY quality_element
    ADD CONSTRAINT fk_freq_uom FOREIGN KEY (frequency_uom_id) REFERENCES eenheid_type(eenh_id);


--
-- Name: fk_from_hdo; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY related_hydro_object
    ADD CONSTRAINT fk_from_hdo FOREIGN KEY (from_hdo) REFERENCES hydro_object(hdo_id);


--
-- Name: fk_from_mno; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY related_monitoring_object
    ADD CONSTRAINT fk_from_mno FOREIGN KEY (from_mno) REFERENCES monitoring_object(mno_id);


--
-- Name: fk_gcep_gwb_chemical_exemption; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY gwb_chem_exemp_pollutant
    ADD CONSTRAINT fk_gcep_gwb_chemical_exemption FOREIGN KEY (gwce_id) REFERENCES gwb_chemical_exemption(gwce_id);


--
-- Name: fk_gcep_gwb_opt_id; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY gwb_chem_exemp_pollutant
    ADD CONSTRAINT fk_gcep_gwb_opt_id FOREIGN KEY (opt_id) REFERENCES observed_property_type(opt_id);


--
-- Name: fk_geo_reference_process_monitoring_object; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY geo_reference_process
    ADD CONSTRAINT fk_geo_reference_process_monitoring_object FOREIGN KEY (mno_id) REFERENCES monitoring_object(mno_id);


--
-- Name: fk_geo_reference_process_plaatsbepalingsapparaat_type; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY geo_reference_process
    ADD CONSTRAINT fk_geo_reference_process_plaatsbepalingsapparaat_type FOREIGN KEY (plaatsbep_app_id) REFERENCES plaatsbepalingsapparaat_type(pba_id);


--
-- Name: fk_gms; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY monitoring_use
    ADD CONSTRAINT fk_gms FOREIGN KEY (gms_id) REFERENCES monitoring_station(mts_id);


--
-- Name: fk_gn2kcs_cls; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY gw_n2000_status
    ADD CONSTRAINT fk_gn2kcs_cls FOREIGN KEY (cls_id) REFERENCES classification_type(cls_id);


--
-- Name: fk_gn2kcs_gwsy; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY gw_n2000_status
    ADD CONSTRAINT fk_gn2kcs_gwsy FOREIGN KEY (gwsy) REFERENCES gwb_yearly_status(gys_id);


--
-- Name: fk_gn2kcs_opt; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY gw_n2000_status
    ADD CONSTRAINT fk_gn2kcs_opt FOREIGN KEY (opt_id) REFERENCES observed_property_type(opt_id);


--
-- Name: fk_gn2kcs_wpa; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY gw_n2000_status
    ADD CONSTRAINT fk_gn2kcs_wpa FOREIGN KEY (wpa_id) REFERENCES wfd_protected_area(wpa_id);


--
-- Name: fk_gomu_gw_monitoring_station; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY gw_mon_stat_other_mon_use
    ADD CONSTRAINT fk_gomu_gw_monitoring_station FOREIGN KEY (gms_id) REFERENCES gw_monitoring_station(gms_id);


--
-- Name: fk_gomu_other_monitoring_use_type; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY gw_mon_stat_other_mon_use
    ADD CONSTRAINT fk_gomu_other_monitoring_use_type FOREIGN KEY (omut_id) REFERENCES other_monitoring_use_type(omut_id);


--
-- Name: fk_gpg_eenheid_type; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY gw_pressures_preventing_good_status
    ADD CONSTRAINT fk_gpg_eenheid_type FOREIGN KEY (percentage_failure_uom_id) REFERENCES eenheid_type(eenh_id);


--
-- Name: fk_gpg_gw_aggregated_pressure_type; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY gw_pressures_preventing_good_status
    ADD CONSTRAINT fk_gpg_gw_aggregated_pressure_type FOREIGN KEY (gwap_id) REFERENCES gw_aggregated_pressure_type(gwap_id);


--
-- Name: fk_gpg_river_basin_management_plan; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY gw_pressures_preventing_good_status
    ADD CONSTRAINT fk_gpg_river_basin_management_plan FOREIGN KEY (rbmp_id) REFERENCES river_basin_management_plan(rbmp_id);


--
-- Name: fk_gprm_basic_measure113a_type; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY gw_pressure_requiring_supp_add_measures
    ADD CONSTRAINT fk_gprm_basic_measure113a_type FOREIGN KEY (bma_id) REFERENCES basic_measure113a_type(bma_id);


--
-- Name: fk_gprm_gw_pressure_type; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY gw_pressure_requiring_supp_add_measures
    ADD CONSTRAINT fk_gprm_gw_pressure_type FOREIGN KEY (gprs_id) REFERENCES gw_pressure_type(gprs_id);


--
-- Name: fk_gprm_gw_pressures_preventing_good_status; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY gw_pressure_requiring_supp_add_measures
    ADD CONSTRAINT fk_gprm_gw_pressures_preventing_good_status FOREIGN KEY (gpg_id) REFERENCES gw_pressures_preventing_good_status(gpg_id);


--
-- Name: fk_gprm_other_basic_measure113b_type; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY gw_pressure_requiring_supp_add_measures
    ADD CONSTRAINT fk_gprm_other_basic_measure113b_type FOREIGN KEY (obmb_id) REFERENCES other_basic_measure113b_type(obmb_id);


--
-- Name: fk_gqe_ground_water_body; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY gwb_quantitative_exemption
    ADD CONSTRAINT fk_gqe_ground_water_body FOREIGN KEY (gwb_id) REFERENCES ground_water_body(gwb_id);


--
-- Name: fk_gqe_objectives_exemption_type; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY gwb_quantitative_exemption
    ADD CONSTRAINT fk_gqe_objectives_exemption_type FOREIGN KEY (obex_id) REFERENCES objectives_exemption_type(obex_id);


--
-- Name: fk_grcf; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY gwb_reason4chemical_failure
    ADD CONSTRAINT fk_grcf FOREIGN KEY (grcf_id) REFERENCES gw_reason4chemical_failure(grcf_id);


--
-- Name: fk_ground_water_body_depth_range_type; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY ground_water_body
    ADD CONSTRAINT fk_ground_water_body_depth_range_type FOREIGN KEY (depth_range_id) REFERENCES depth_range_type(dpr_id);


--
-- Name: fk_ground_water_body_geological_formation_type; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY ground_water_body
    ADD CONSTRAINT fk_ground_water_body_geological_formation_type FOREIGN KEY (geological_formation_id) REFERENCES geological_formation_type(gfm_id);


--
-- Name: fk_ground_water_body_gw_vertical_orientation_type; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY ground_water_body
    ADD CONSTRAINT fk_ground_water_body_gw_vertical_orientation_type FOREIGN KEY (vertical_orientation_id) REFERENCES gw_vertical_orientation_type(gvo_id);


--
-- Name: fk_ground_water_body_reason_change_type; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY ground_water_body
    ADD CONSTRAINT fk_ground_water_body_reason_change_type FOREIGN KEY (rct_id) REFERENCES reason_change_type(rct_id);


--
-- Name: fk_ground_water_body_substrate_type; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY ground_water_body
    ADD CONSTRAINT fk_ground_water_body_substrate_type FOREIGN KEY (substrate_id) REFERENCES substrate_type(sub_id);


--
-- Name: fk_group_substance_element; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY substance_group_element
    ADD CONSTRAINT fk_group_substance_element FOREIGN KEY (ssge_id) REFERENCES substance_group(ssg_id);


--
-- Name: fk_grqf; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY gwb_reason4quantity_failure
    ADD CONSTRAINT fk_grqf FOREIGN KEY (grqf_id) REFERENCES gw_reason4quantity_failure(grqf_id);


--
-- Name: fk_grsm_gw_pressure_requiring_supp_add_measures; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY gw_required_supp_measure
    ADD CONSTRAINT fk_grsm_gw_pressure_requiring_supp_add_measures FOREIGN KEY (gprm_id) REFERENCES gw_pressure_requiring_supp_add_measures(gprm_id);


--
-- Name: fk_grsm_supp_add_measure_nl_type; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY gw_required_supp_measure
    ADD CONSTRAINT fk_grsm_supp_add_measure_nl_type FOREIGN KEY (smnl_id) REFERENCES supp_add_measure_type(smnl_id);


--
-- Name: fk_gw_chemical_status_gwb_yearly_status; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY gw_chemical_status
    ADD CONSTRAINT fk_gw_chemical_status_gwb_yearly_status FOREIGN KEY (gys_id) REFERENCES gwb_yearly_status(gys_id);


--
-- Name: fk_gw_pressure_type_driver; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY gw_pressure_type_driver
    ADD CONSTRAINT fk_gw_pressure_type_driver FOREIGN KEY (driver_id) REFERENCES domains.drivers(driver_id);


--
-- Name: fk_gw_pressure_type_sprs; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY gw_pressure_type_driver
    ADD CONSTRAINT fk_gw_pressure_type_sprs FOREIGN KEY (gprs_id) REFERENCES gw_pressure_type(gprs_id);


--
-- Name: fk_gw_status_type; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY gw_abstraction_point_status
    ADD CONSTRAINT fk_gw_status_type FOREIGN KEY (gwst_id) REFERENCES classification_type(cls_id);


--
-- Name: fk_gw_test_value_norm_value; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY gw_test_value
    ADD CONSTRAINT fk_gw_test_value_norm_value FOREIGN KEY (nrmv_id) REFERENCES norm_value(nrmv_id);


--
-- Name: fk_gw_testing_conclusion_eumg; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY gw_testing_conclusion
    ADD CONSTRAINT fk_gw_testing_conclusion_eumg FOREIGN KEY (eumg_id) REFERENCES eu_monitoring_goal_type(eumg_id);


--
-- Name: fk_gw_testing_conclusion_gwb_yearly_status; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY gw_testing_conclusion
    ADD CONSTRAINT fk_gw_testing_conclusion_gwb_yearly_status FOREIGN KEY (gys_id) REFERENCES gwb_yearly_status(gys_id);


--
-- Name: fk_gw_testing_conclusion_observation; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY gw_testing_conclusion
    ADD CONSTRAINT fk_gw_testing_conclusion_observation FOREIGN KEY (gtcc_id) REFERENCES observation(obs_id);


--
-- Name: fk_gwb_avg_depth_uom; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY ground_water_body
    ADD CONSTRAINT fk_gwb_avg_depth_uom FOREIGN KEY (average_depth_uom_id) REFERENCES eenheid_type(eenh_id);


--
-- Name: fk_gwb_avg_thickness_uom; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY ground_water_body
    ADD CONSTRAINT fk_gwb_avg_thickness_uom FOREIGN KEY (average_thickness_uom_id) REFERENCES eenheid_type(eenh_id);


--
-- Name: fk_gwb_capacity_uom; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY ground_water_body
    ADD CONSTRAINT fk_gwb_capacity_uom FOREIGN KEY (capacity_uom_id) REFERENCES eenheid_type(eenh_id);


--
-- Name: fk_gwb_pressure_gwbp; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY gwb_pressure_impact
    ADD CONSTRAINT fk_gwb_pressure_gwbp FOREIGN KEY (gwbp_id) REFERENCES gwb_pressure(gwbp_id);


--
-- Name: fk_gwb_pressure_impact; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY gwb_pressure_impact
    ADD CONSTRAINT fk_gwb_pressure_impact FOREIGN KEY (impact_id) REFERENCES domains.impacts(impact_id);


--
-- Name: fk_gwb_yearly_status; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY gw_quantity_status
    ADD CONSTRAINT fk_gwb_yearly_status FOREIGN KEY (gys_id) REFERENCES gwb_yearly_status(gys_id);


--
-- Name: fk_gwb_yearly_status_ground_water_body; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY gwb_yearly_status
    ADD CONSTRAINT fk_gwb_yearly_status_ground_water_body FOREIGN KEY (gwb_id) REFERENCES ground_water_body(gwb_id);


--
-- Name: fk_gwce_ground_water_body; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY gwb_chemical_exemption
    ADD CONSTRAINT fk_gwce_ground_water_body FOREIGN KEY (gwb_id) REFERENCES ground_water_body(gwb_id);


--
-- Name: fk_gwce_objectives_exemption_type; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY gwb_chemical_exemption
    ADD CONSTRAINT fk_gwce_objectives_exemption_type FOREIGN KEY (obex_id) REFERENCES objectives_exemption_type(obex_id);


--
-- Name: fk_gwcs_confidence_level_type; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY gw_chemical_status
    ADD CONSTRAINT fk_gwcs_confidence_level_type FOREIGN KEY (clt_id) REFERENCES domains.confidence_level_type(clt_id);


--
-- Name: fk_gwpr_ground_water_body; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY gwb_pressure
    ADD CONSTRAINT fk_gwpr_ground_water_body FOREIGN KEY (gwb_id) REFERENCES ground_water_body(gwb_id);


--
-- Name: fk_gwpr_gw_pressure_type; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY gwb_pressure
    ADD CONSTRAINT fk_gwpr_gw_pressure_type FOREIGN KEY (gprs_id) REFERENCES gw_pressure_type(gprs_id);


--
-- Name: fk_gwpr_relevance; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY gwb_pressure
    ADD CONSTRAINT fk_gwpr_relevance FOREIGN KEY (prr_id) REFERENCES pressure_relevance_type(prr_id);


--
-- Name: fk_gwpt_pressure_category_type; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY gw_pressure_type
    ADD CONSTRAINT fk_gwpt_pressure_category_type FOREIGN KEY (pressure_category_id) REFERENCES pressure_category_type(pcat_id);


--
-- Name: fk_gwsy; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY gw_abstraction_point_status
    ADD CONSTRAINT fk_gwsy FOREIGN KEY (gwsy_id) REFERENCES gwb_yearly_status(gys_id);


--
-- Name: fk_gwsy_id; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY gw_swb_status
    ADD CONSTRAINT fk_gwsy_id FOREIGN KEY (gwsy) REFERENCES gwb_yearly_status(gys_id);


--
-- Name: fk_gys; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY gw_pollutants
    ADD CONSTRAINT fk_gys FOREIGN KEY (gys_id) REFERENCES gwb_yearly_status(gys_id);


--
-- Name: fk_gys; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY gwb_reason4chemical_failure
    ADD CONSTRAINT fk_gys FOREIGN KEY (gys_id) REFERENCES gwb_yearly_status(gys_id);


--
-- Name: fk_gys; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY gwb_reason4quantity_failure
    ADD CONSTRAINT fk_gys FOREIGN KEY (gys_id) REFERENCES gwb_yearly_status(gys_id);


--
-- Name: fk_hdo; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY planned_feature_monitoring
    ADD CONSTRAINT fk_hdo FOREIGN KEY (hdo_id) REFERENCES hydro_object(hdo_id);


--
-- Name: fk_hdo_identfiers_hydro_object; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY hdo_identfiers
    ADD CONSTRAINT fk_hdo_identfiers_hydro_object FOREIGN KEY (hdo_id) REFERENCES hydro_object(hdo_id);


--
-- Name: fk_hdo_identfiers_namespace_type; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY hdo_identfiers
    ADD CONSTRAINT fk_hdo_identfiers_namespace_type FOREIGN KEY (namespace_id) REFERENCES namespace_type(ns_id);


--
-- Name: fk_hdo_names_hydro_object; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY hdo_names
    ADD CONSTRAINT fk_hdo_names_hydro_object FOREIGN KEY (hdo_id) REFERENCES hydro_object(hdo_id);


--
-- Name: fk_hydro_object_inspire_id_namespace_type; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY hydro_object
    ADD CONSTRAINT fk_hydro_object_inspire_id_namespace_type FOREIGN KEY (inspire_id_namespace) REFERENCES namespace_type(ns_id);


--
-- Name: fk_hydro_object_wkr_version; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY hydro_object
    ADD CONSTRAINT fk_hydro_object_wkr_version FOREIGN KEY (wkrv_id) REFERENCES wkr_version(wkrv_id);


--
-- Name: fk_initiative_org_cat_id; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY supp_add_measure_type
    ADD CONSTRAINT fk_initiative_org_cat_id FOREIGN KEY (initiative_party_ocat_id) REFERENCES organisation_category_type(ocat_id);


--
-- Name: fk_int_rbd; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY river_basin_disrict
    ADD CONSTRAINT fk_int_rbd FOREIGN KEY (international_rbd) REFERENCES river_basin_disrict(rbd_id);


--
-- Name: fk_isac_information_stream; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY info_stream_activity
    ADD CONSTRAINT fk_isac_information_stream FOREIGN KEY (ims_id) REFERENCES information_stream(ims_id);


--
-- Name: fk_islb_information_stream; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY info_stream_legal_background
    ADD CONSTRAINT fk_islb_information_stream FOREIGN KEY (ims_id) REFERENCES information_stream(ims_id);


--
-- Name: fk_lgr; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY mzc_legal_basis
    ADD CONSTRAINT fk_lgr FOREIGN KEY (lgr_id) REFERENCES legislation_reference_type(lgr_id);


--
-- Name: fk_lgr_legislation_level_type; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY legislation_reference_type
    ADD CONSTRAINT fk_lgr_legislation_level_type FOREIGN KEY (legislation_level_id) REFERENCES legislation_level_type(lgl_id);


--
-- Name: fk_ligt_in_mrz; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY environmental_monitoring_facility
    ADD CONSTRAINT fk_ligt_in_mrz FOREIGN KEY (ligt_in_mrz_id) REFERENCES management_regulation_or_restriction_zone(mrz_id);


--
-- Name: fk_low_eenh; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY sample
    ADD CONSTRAINT fk_low_eenh FOREIGN KEY (lower_depth_uom_id) REFERENCES eenheid_type(eenh_id);


--
-- Name: fk_lowerbound_limiet; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY norm_value
    ADD CONSTRAINT fk_lowerbound_limiet FOREIGN KEY (lowerbound_limit_symbol_id) REFERENCES bepaling_grens_type(bpg_id);


--
-- Name: fk_measure43; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY sw_measure43_function
    ADD CONSTRAINT fk_measure43 FOREIGN KEY (me43_id) REFERENCES sw_measure43_nl_type(me43_id);


--
-- Name: fk_mfp_mnf; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY monitoring_feature_positioning_method
    ADD CONSTRAINT fk_mfp_mnf FOREIGN KEY (mnf_id) REFERENCES monitoring_feature(mnf_id);


--
-- Name: fk_mfp_pba; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY monitoring_feature_positioning_method
    ADD CONSTRAINT fk_mfp_pba FOREIGN KEY (pba_id) REFERENCES plaatsbepalingsapparaat_type(pba_id);


--
-- Name: fk_mfr_mnf; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY monitoring_feature_report_to
    ADD CONSTRAINT fk_mfr_mnf FOREIGN KEY (mnf_id) REFERENCES monitoring_feature(mnf_id);


--
-- Name: fk_mmef_eu_fund_type; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY monitored_measure_eu_fund
    ADD CONSTRAINT fk_mmef_eu_fund_type FOREIGN KEY (euf_id) REFERENCES eu_fund_type(euf_id);


--
-- Name: fk_mmef_monitored_measure; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY monitored_measure_eu_fund
    ADD CONSTRAINT fk_mmef_monitored_measure FOREIGN KEY (mtm_id) REFERENCES monitored_measure(mtm_id);


--
-- Name: fk_mmpa_mtm; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY measure_per_man_protected_area
    ADD CONSTRAINT fk_mmpa_mtm FOREIGN KEY (mtm_id) REFERENCES monitored_measure(mtm_id);


--
-- Name: fk_mmpa_wpa; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY measure_per_man_protected_area
    ADD CONSTRAINT fk_mmpa_wpa FOREIGN KEY (wpa_id) REFERENCES wfd_protected_area(wpa_id);


--
-- Name: fk_mmpap_apt; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY measure_per_abstraction_point
    ADD CONSTRAINT fk_mmpap_apt FOREIGN KEY (asp_id) REFERENCES abstraction_point(asp_id);


--
-- Name: fk_mmpap_mtm; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY measure_per_abstraction_point
    ADD CONSTRAINT fk_mmpap_mtm FOREIGN KEY (mtm_id) REFERENCES monitored_measure(mtm_id);


--
-- Name: fk_mmz_mrz; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY measure_per_man_reg_or_restr_zone
    ADD CONSTRAINT fk_mmz_mrz FOREIGN KEY (mrz_id) REFERENCES management_regulation_or_restriction_zone(mrz_id);


--
-- Name: fk_mmz_mtm; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY measure_per_man_reg_or_restr_zone
    ADD CONSTRAINT fk_mmz_mtm FOREIGN KEY (mtm_id) REFERENCES monitored_measure(mtm_id);


--
-- Name: fk_mnf; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY mnf_parameter
    ADD CONSTRAINT fk_mnf FOREIGN KEY (mnf_id) REFERENCES monitoring_feature(mnf_id);


--
-- Name: fk_mnf_mno; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY monitoring_feature
    ADD CONSTRAINT fk_mnf_mno FOREIGN KEY (mnf_id) REFERENCES monitoring_object(mno_id);


--
-- Name: fk_mnf_source; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY related_sampling_feature
    ADD CONSTRAINT fk_mnf_source FOREIGN KEY (mnf_id_source) REFERENCES monitoring_feature(mnf_id);


--
-- Name: fk_mnf_target; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY related_sampling_feature
    ADD CONSTRAINT fk_mnf_target FOREIGN KEY (mnf_id_target) REFERENCES monitoring_feature(mnf_id);


--
-- Name: fk_mnfp_value_uom; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY mnf_parameter
    ADD CONSTRAINT fk_mnfp_value_uom FOREIGN KEY (value_uom_id) REFERENCES eenheid_type(eenh_id);


--
-- Name: fk_mno_narrower; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY monitoring_object_hierarchy
    ADD CONSTRAINT fk_mno_narrower FOREIGN KEY (mno_id_narrower) REFERENCES monitoring_object(mno_id);


--
-- Name: fk_mno_supersedes; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY monitoring_object_genealogy
    ADD CONSTRAINT fk_mno_supersedes FOREIGN KEY (mno_id_supersedes) REFERENCES monitoring_object(mno_id);


--
-- Name: fk_moi_monitoring_object; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY monitoring_object_other_ids
    ADD CONSTRAINT fk_moi_monitoring_object FOREIGN KEY (mno_id) REFERENCES monitoring_object(mno_id);


--
-- Name: fk_moi_ore; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY monitoring_object_other_ids
    ADD CONSTRAINT fk_moi_ore FOREIGN KEY (hydro_id_ore_id) REFERENCES organisatorische_eenheid(ore_id);


--
-- Name: fk_monitored_measure_mtmid; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY measure_progress_completed
    ADD CONSTRAINT fk_monitored_measure_mtmid FOREIGN KEY (mtm_id) REFERENCES monitored_measure(mtm_id);


--
-- Name: fk_monitored_measure_report_version; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY monitored_measure
    ADD CONSTRAINT fk_monitored_measure_report_version FOREIGN KEY (rpv_id) REFERENCES report_version(rpv_id);


--
-- Name: fk_monitoring_object; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY monitored_compartiment
    ADD CONSTRAINT fk_monitoring_object FOREIGN KEY (mno_id) REFERENCES monitoring_object(mno_id);


--
-- Name: fk_monitoring_object; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY program_monitoring_object
    ADD CONSTRAINT fk_monitoring_object FOREIGN KEY (object_mno_id) REFERENCES monitoring_object(mno_id);


--
-- Name: fk_monitoring_object_hoedanigheid; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY monitoring_object
    ADD CONSTRAINT fk_monitoring_object_hoedanigheid FOREIGN KEY (primary_geodetic_reference_id) REFERENCES hoedanigheid_type(hdh_id);


--
-- Name: fk_monitoring_object_smpl_id; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY sample
    ADD CONSTRAINT fk_monitoring_object_smpl_id FOREIGN KEY (smpl_id) REFERENCES monitoring_object(mno_id);


--
-- Name: fk_monitoring_object_wkr_version; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY monitoring_object
    ADD CONSTRAINT fk_monitoring_object_wkr_version FOREIGN KEY (wkrv_id) REFERENCES wkr_version(wkrv_id);


--
-- Name: fk_moqe_monitoring_object; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY monitoring_object_quality_element
    ADD CONSTRAINT fk_moqe_monitoring_object FOREIGN KEY (mno_id) REFERENCES monitoring_object(mno_id);


--
-- Name: fk_moqe_quality_element; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY monitoring_object_quality_element
    ADD CONSTRAINT fk_moqe_quality_element FOREIGN KEY (qem_id) REFERENCES quality_element(qem_id);


--
-- Name: fk_mrz_environmental_domain_code; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY management_regulation_or_restriction_zone
    ADD CONSTRAINT fk_mrz_environmental_domain_code FOREIGN KEY (environmental_domain_id) REFERENCES environmental_domain_code(emd_id);


--
-- Name: fk_mrz_hydro_object; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY management_regulation_or_restriction_zone
    ADD CONSTRAINT fk_mrz_hydro_object FOREIGN KEY (mrz_id) REFERENCES hydro_object(hdo_id);


--
-- Name: fk_mrz_mzc; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY management_regulation_or_restriction_zone
    ADD CONSTRAINT fk_mrz_mzc FOREIGN KEY (mrz_collection_id) REFERENCES management_regulation_or_restriction_zone_collection(mzc_id);


--
-- Name: fk_mrz_zone_type_code; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY management_regulation_or_restriction_zone
    ADD CONSTRAINT fk_mrz_zone_type_code FOREIGN KEY (specialised_zone_type_id) REFERENCES zone_type_code(ztc_id);


--
-- Name: fk_mrzc_namespace_type; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY management_regulation_or_restriction_zone_collection
    ADD CONSTRAINT fk_mrzc_namespace_type FOREIGN KEY (inspire_id_namespace_id) REFERENCES namespace_type(ns_id);


--
-- Name: fk_mrzc_wkr_version; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY management_regulation_or_restriction_zone_collection
    ADD CONSTRAINT fk_mrzc_wkr_version FOREIGN KEY (wkrv_id) REFERENCES wkr_version(wkrv_id);


--
-- Name: fk_msf_mtm; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY measure_finance
    ADD CONSTRAINT fk_msf_mtm FOREIGN KEY (mtm_id) REFERENCES monitored_measure(mtm_id);


--
-- Name: fk_msp_mst; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY measure_progress
    ADD CONSTRAINT fk_msp_mst FOREIGN KEY (mst_id) REFERENCES measure_status_type(mst_id);


--
-- Name: fk_msp_mtm; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY measure_progress
    ADD CONSTRAINT fk_msp_mtm FOREIGN KEY (mtm_id) REFERENCES monitored_measure(mtm_id);


--
-- Name: fk_mtm_competent_authority; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY monitored_measure
    ADD CONSTRAINT fk_mtm_competent_authority FOREIGN KEY (prime_competent_authority_id) REFERENCES competent_authority(ore_id);


--
-- Name: fk_mtm_level_of_measure_type; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY monitored_measure
    ADD CONSTRAINT fk_mtm_level_of_measure_type FOREIGN KEY (level_of_measure_id) REFERENCES level_of_area_type(loa_id);


--
-- Name: fk_mtm_monitored_measure; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY monitored_measure
    ADD CONSTRAINT fk_mtm_monitored_measure FOREIGN KEY (derived_from_measure_id) REFERENCES monitored_measure(mtm_id);


--
-- Name: fk_mts; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY gw_monitoring_station
    ADD CONSTRAINT fk_mts FOREIGN KEY (gms_id) REFERENCES monitoring_station(mts_id);


--
-- Name: fk_mtt; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY monitoring_use
    ADD CONSTRAINT fk_mtt FOREIGN KEY (mtt_id) REFERENCES eu_monitoring_type(mtt_id);


--
-- Name: fk_mzc; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY mzc_legal_basis
    ADD CONSTRAINT fk_mzc FOREIGN KEY (mzc_id) REFERENCES management_regulation_or_restriction_zone_collection(mzc_id);


--
-- Name: fk_nbl_concentration_uom; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY natural_background_levels
    ADD CONSTRAINT fk_nbl_concentration_uom FOREIGN KEY (concentration_uom_id) REFERENCES eenheid_type(eenh_id);


--
-- Name: fk_nbl_ground_water_body; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY natural_background_levels
    ADD CONSTRAINT fk_nbl_ground_water_body FOREIGN KEY (gwb_id) REFERENCES ground_water_body(gwb_id);


--
-- Name: fk_nbl_observed_property_type; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY natural_background_levels
    ADD CONSTRAINT fk_nbl_observed_property_type FOREIGN KEY (opt_id) REFERENCES observed_property_type(opt_id);


--
-- Name: fk_norm_feature_hydro_object; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY norm_feature
    ADD CONSTRAINT fk_norm_feature_hydro_object FOREIGN KEY (hdo_id) REFERENCES hydro_object(hdo_id);


--
-- Name: fk_norm_feature_norm; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY norm_feature
    ADD CONSTRAINT fk_norm_feature_norm FOREIGN KEY (nrm_id) REFERENCES norm(nrm_id);


--
-- Name: fk_norm_groep_type_norm_kader_type; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY norm_groep_type
    ADD CONSTRAINT fk_norm_groep_type_norm_kader_type FOREIGN KEY (nmkd_id) REFERENCES norm_kader_type(nmkd_id);


--
-- Name: fk_norm_hulp_mapping_chs; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY norm_hulp_mapping
    ADD CONSTRAINT fk_norm_hulp_mapping_chs FOREIGN KEY (chs_id) REFERENCES chemische_stof_type(chs_id);


--
-- Name: fk_norm_hulp_mapping_cptm; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY norm_hulp_mapping
    ADD CONSTRAINT fk_norm_hulp_mapping_cptm FOREIGN KEY (cptm_id) REFERENCES compartiment_type(cptm_id);


--
-- Name: fk_norm_hulp_mapping_eenh; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY norm_hulp_mapping
    ADD CONSTRAINT fk_norm_hulp_mapping_eenh FOREIGN KEY (eenh_id) REFERENCES eenheid_type(eenh_id);


--
-- Name: fk_norm_hulp_mapping_grh; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY norm_hulp_mapping
    ADD CONSTRAINT fk_norm_hulp_mapping_grh FOREIGN KEY (grh_id) REFERENCES grootheid_type(grh_id);


--
-- Name: fk_norm_hulp_mapping_hdh; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY norm_hulp_mapping
    ADD CONSTRAINT fk_norm_hulp_mapping_hdh FOREIGN KEY (hdh_id) REFERENCES hoedanigheid_type(hdh_id);


--
-- Name: fk_norm_hulp_mapping_opt; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY norm_hulp_mapping
    ADD CONSTRAINT fk_norm_hulp_mapping_opt FOREIGN KEY (opt_id) REFERENCES observed_property_type(opt_id);


--
-- Name: fk_norm_hulp_mapping_typ; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY norm_hulp_mapping
    ADD CONSTRAINT fk_norm_hulp_mapping_typ FOREIGN KEY (typ_id) REFERENCES typering_type(typ_id);


--
-- Name: fk_norm_hulp_mapping_wbm; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY norm_hulp_mapping
    ADD CONSTRAINT fk_norm_hulp_mapping_wbm FOREIGN KEY (wbm_id) REFERENCES waarde_bewerkings_methode_type(wbm_id);


--
-- Name: fk_norm_level_of_area_type; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY norm
    ADD CONSTRAINT fk_norm_level_of_area_type FOREIGN KEY (defined_at_level_id) REFERENCES level_of_area_type(loa_id);


--
-- Name: fk_norm_norm_groep_type; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY norm
    ADD CONSTRAINT fk_norm_norm_groep_type FOREIGN KEY (norm_groep_id) REFERENCES norm_groep_type(nmgp_id);


--
-- Name: fk_norm_observed_property_type; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY norm
    ADD CONSTRAINT fk_norm_observed_property_type FOREIGN KEY (observed_property) REFERENCES observed_property_type(opt_id);


--
-- Name: fk_norm_wkr_version; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY norm
    ADD CONSTRAINT fk_norm_wkr_version FOREIGN KEY (wkrv_id) REFERENCES wkr_version(wkrv_id);


--
-- Name: fk_normpakket_norm_groep_type; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY normpakket
    ADD CONSTRAINT fk_normpakket_norm_groep_type FOREIGN KEY (norm_groep_id) REFERENCES norm_groep_type(nmgp_id);


--
-- Name: fk_normpakket_norm_kader_type; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY normpakket
    ADD CONSTRAINT fk_normpakket_norm_kader_type FOREIGN KEY (norm_kader_id) REFERENCES norm_kader_type(nmkd_id);


--
-- Name: fk_normwaarde_compartiment_type; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY norm_value
    ADD CONSTRAINT fk_normwaarde_compartiment_type FOREIGN KEY (cptm_id) REFERENCES compartiment_type(cptm_id);


--
-- Name: fk_normwaarde_eenheid_type; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY norm_value
    ADD CONSTRAINT fk_normwaarde_eenheid_type FOREIGN KEY (lowerbound_uom_id) REFERENCES eenheid_type(eenh_id);


--
-- Name: fk_normwaarde_norm; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY norm_value
    ADD CONSTRAINT fk_normwaarde_norm FOREIGN KEY (nrm_id) REFERENCES norm(nrm_id);


--
-- Name: fk_normwaarde_norm_klasse; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY norm_value
    ADD CONSTRAINT fk_normwaarde_norm_klasse FOREIGN KEY (norm_klasse_id) REFERENCES classification_type(cls_id);


--
-- Name: fk_ns_id_namespace_type; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY competentauthority_namespacetype
    ADD CONSTRAINT fk_ns_id_namespace_type FOREIGN KEY (ns_id) REFERENCES namespace_type(ns_id);


--
-- Name: fk_nwf_emf; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY network_facility
    ADD CONSTRAINT fk_nwf_emf FOREIGN KEY (emf_id) REFERENCES environmental_monitoring_facility(emf_id);


--
-- Name: fk_nwf_emn; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY network_facility
    ADD CONSTRAINT fk_nwf_emn FOREIGN KEY (emn_id) REFERENCES environmental_monitoring_network(emn_id);


--
-- Name: fk_object_group; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY object_group_element
    ADD CONSTRAINT fk_object_group FOREIGN KEY (ojg_id) REFERENCES object_group(ojg_id);


--
-- Name: fk_object_type; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY object_group_element
    ADD CONSTRAINT fk_object_type FOREIGN KEY (obj_id) REFERENCES object_type(obj_id);


--
-- Name: fk_obp_accreditation_org; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY observation_process
    ADD CONSTRAINT fk_obp_accreditation_org FOREIGN KEY (accreditation_org_id) REFERENCES organisatorische_eenheid(ore_id);


--
-- Name: fk_obp_accreditation_org; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY observation_process_copy_dietmar
    ADD CONSTRAINT fk_obp_accreditation_org FOREIGN KEY (accreditation_org_id) REFERENCES organisatorische_eenheid(ore_id);


--
-- Name: fk_obp_analytical_technique; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY observation_process
    ADD CONSTRAINT fk_obp_analytical_technique FOREIGN KEY (analytical_technique_id) REFERENCES domains.waardebepalingstechniek(wbpt_id);


--
-- Name: fk_obp_analytical_technique; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY observation_process_copy_dietmar
    ADD CONSTRAINT fk_obp_analytical_technique FOREIGN KEY (analytical_technique_id) REFERENCES domains.waardebepalingstechniek(wbpt_id);


--
-- Name: fk_obp_certification; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY observation_process
    ADD CONSTRAINT fk_obp_certification FOREIGN KEY (certification_id) REFERENCES domains.certificeringscode(ctf_id);


--
-- Name: fk_obp_certification; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY observation_process_copy_dietmar
    ADD CONSTRAINT fk_obp_certification FOREIGN KEY (certification_id) REFERENCES domains.certificeringscode(ctf_id);


--
-- Name: fk_obp_sample_destruction_method; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY observation_process
    ADD CONSTRAINT fk_obp_sample_destruction_method FOREIGN KEY (sample_destruction_method_id) REFERENCES domains.monsterbewerkingsmethode(mbm_id);


--
-- Name: fk_obp_sample_destruction_method; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY observation_process_copy_dietmar
    ADD CONSTRAINT fk_obp_sample_destruction_method FOREIGN KEY (sample_destruction_method_id) REFERENCES domains.monsterbewerkingsmethode(mbm_id);


--
-- Name: fk_obp_sample_pre_treatment_method; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY observation_process
    ADD CONSTRAINT fk_obp_sample_pre_treatment_method FOREIGN KEY (sample_pre_treatment_method_id) REFERENCES domains.monstervoorbehandeling(mvb_id);


--
-- Name: fk_obp_sample_pre_treatment_method; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY observation_process_copy_dietmar
    ADD CONSTRAINT fk_obp_sample_pre_treatment_method FOREIGN KEY (sample_pre_treatment_method_id) REFERENCES domains.monstervoorbehandeling(mvb_id);


--
-- Name: fk_obp_sensing_location_type; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY observation_process
    ADD CONSTRAINT fk_obp_sensing_location_type FOREIGN KEY (sensing_location_type_id) REFERENCES domains.locatietype_waardebepaling(ltwb_id);


--
-- Name: fk_obp_sensing_location_type; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY observation_process_copy_dietmar
    ADD CONSTRAINT fk_obp_sensing_location_type FOREIGN KEY (sensing_location_type_id) REFERENCES domains.locatietype_waardebepaling(ltwb_id);


--
-- Name: fk_obs; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY observation_parameter
    ADD CONSTRAINT fk_obs FOREIGN KEY (obs_id) REFERENCES observation(obs_id);


--
-- Name: fk_obs_num_val_uom; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY observation
    ADD CONSTRAINT fk_obs_num_val_uom FOREIGN KEY (numeric_value_uom_id) REFERENCES eenheid_type(eenh_id);


--
-- Name: fk_obs_source; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY observation_context
    ADD CONSTRAINT fk_obs_source FOREIGN KEY (obs_id_source) REFERENCES observation(obs_id);


--
-- Name: fk_obs_target; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY observation_context
    ADD CONSTRAINT fk_obs_target FOREIGN KEY (obs_id_target) REFERENCES observation(obs_id);


--
-- Name: fk_observation_bepaling_grens_type; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY observation
    ADD CONSTRAINT fk_observation_bepaling_grens_type FOREIGN KEY (limit_symbol_id) REFERENCES bepaling_grens_type(bpg_id);


--
-- Name: fk_observation_classification_type; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY observation
    ADD CONSTRAINT fk_observation_classification_type FOREIGN KEY (classified_result_id) REFERENCES classification_type(cls_id);


--
-- Name: fk_observation_context_role_type; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY observation_context
    ADD CONSTRAINT fk_observation_context_role_type FOREIGN KEY (role_id) REFERENCES obs_ctx_role_type(ocr_id);


--
-- Name: fk_observation_kwaliteitsoordeel_type; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY observation
    ADD CONSTRAINT fk_observation_kwaliteitsoordeel_type FOREIGN KEY (quality_indicator_id) REFERENCES kwaliteitsoordeel_type(kwod_id);


--
-- Name: fk_observation_monitoring_object; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY observation
    ADD CONSTRAINT fk_observation_monitoring_object FOREIGN KEY (mno_id) REFERENCES monitoring_object(mno_id);


--
-- Name: fk_observation_observation; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY observation
    ADD CONSTRAINT fk_observation_observation FOREIGN KEY (obs_parm_parent_id) REFERENCES observation(obs_id);


--
-- Name: fk_observation_proces_namespace; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY observation_process
    ADD CONSTRAINT fk_observation_proces_namespace FOREIGN KEY (nen3610_id_namespace_id) REFERENCES namespace_type(ns_id);


--
-- Name: fk_observation_proces_namespace; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY observation_process_copy_dietmar
    ADD CONSTRAINT fk_observation_proces_namespace FOREIGN KEY (nen3610_id_namespace_id) REFERENCES namespace_type(ns_id);


--
-- Name: fk_observation_process; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY observation
    ADD CONSTRAINT fk_observation_process FOREIGN KEY (result_nature_id) REFERENCES observation_process(obp_id);


--
-- Name: fk_observation_process_waarde_bepalings_methode_type; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY observation_process
    ADD CONSTRAINT fk_observation_process_waarde_bepalings_methode_type FOREIGN KEY (wbpm_id) REFERENCES waarde_bepalings_methode_type(wbpm_id);


--
-- Name: fk_observation_process_waarde_bepalings_methode_type; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY observation_process_copy_dietmar
    ADD CONSTRAINT fk_observation_process_waarde_bepalings_methode_type FOREIGN KEY (wbpm_id) REFERENCES waarde_bepalings_methode_type(wbpm_id);


--
-- Name: fk_observation_waarde_bewerkings_methode_type; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY observation
    ADD CONSTRAINT fk_observation_waarde_bewerkings_methode_type FOREIGN KEY (value_processing_method_id) REFERENCES waarde_bewerkings_methode_type(wbm_id);


--
-- Name: fk_observed_feature_hydro_object; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY observed_feature
    ADD CONSTRAINT fk_observed_feature_hydro_object FOREIGN KEY (hdo_id) REFERENCES hydro_object(hdo_id);


--
-- Name: fk_observed_feature_observation; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY observed_feature
    ADD CONSTRAINT fk_observed_feature_observation FOREIGN KEY (obs_id) REFERENCES observation(obs_id);


--
-- Name: fk_observed_property_type; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY sw_ecological_status
    ADD CONSTRAINT fk_observed_property_type FOREIGN KEY (opt_id) REFERENCES observed_property_type(opt_id);


--
-- Name: fk_observed_property_type_classification_group_type; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY observed_property_type
    ADD CONSTRAINT fk_observed_property_type_classification_group_type FOREIGN KEY (classification_group_id) REFERENCES classification_group_type(clsg_id);


--
-- Name: fk_observed_property_type_grootheid_type; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY observed_property_type
    ADD CONSTRAINT fk_observed_property_type_grootheid_type FOREIGN KEY (quantity_id) REFERENCES grootheid_type(grh_id);


--
-- Name: fk_observed_property_type_hoedanigheid_type; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY observed_property_type
    ADD CONSTRAINT fk_observed_property_type_hoedanigheid_type FOREIGN KEY (hoedanigheid_id) REFERENCES hoedanigheid_type(hdh_id);


--
-- Name: fk_observed_property_type_object_group; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY observed_property_type
    ADD CONSTRAINT fk_observed_property_type_object_group FOREIGN KEY (object_group_id) REFERENCES object_group(ojg_id);


--
-- Name: fk_observed_property_type_opt_class_result_type_type; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY observed_property_type
    ADD CONSTRAINT fk_observed_property_type_opt_class_result_type_type FOREIGN KEY (observed_property_type_class, result_type) REFERENCES opt_class_result_type_type(observed_property_type_class_type, result_type_type);


--
-- Name: fk_observed_property_type_substance_group; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY observed_property_type
    ADD CONSTRAINT fk_observed_property_type_substance_group FOREIGN KEY (substance_group_id) REFERENCES substance_group(ssg_id);


--
-- Name: fk_observed_property_type_swb_ecol_exemp_qe; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY swb_ecol_exemp_qe
    ADD CONSTRAINT fk_observed_property_type_swb_ecol_exemp_qe FOREIGN KEY (opt_id) REFERENCES observed_property_type(opt_id);


--
-- Name: fk_observed_property_type_taxa_group; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY observed_property_type
    ADD CONSTRAINT fk_observed_property_type_taxa_group FOREIGN KEY (taxa_group_id) REFERENCES taxa_group(txg_id);


--
-- Name: fk_observed_property_type_typering_type; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY observed_property_type
    ADD CONSTRAINT fk_observed_property_type_typering_type FOREIGN KEY (indicator_id) REFERENCES typering_type(typ_id);


--
-- Name: fk_observing_capability_process_type; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY observing_capability
    ADD CONSTRAINT fk_observing_capability_process_type FOREIGN KEY (process_type_id) REFERENCES process_type(prc_id);


--
-- Name: fk_observing_capability_wkr_version; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY observing_capability
    ADD CONSTRAINT fk_observing_capability_wkr_version FOREIGN KEY (wkrv_id) REFERENCES wkr_version(wkrv_id);


--
-- Name: fk_ocbs_obs; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY observing_capability_observation
    ADD CONSTRAINT fk_ocbs_obs FOREIGN KEY (obs_id) REFERENCES observation(obs_id);


--
-- Name: fk_ocbs_osc; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY observing_capability_observation
    ADD CONSTRAINT fk_ocbs_osc FOREIGN KEY (osc_id) REFERENCES observing_capability(osc_id);


--
-- Name: fk_ocr_type_object_state; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY object_state_column_required
    ADD CONSTRAINT fk_ocr_type_object_state FOREIGN KEY (ost_id) REFERENCES object_state_type(ost_id);


--
-- Name: fk_ocrp_ore; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY observing_capability_responsible_party
    ADD CONSTRAINT fk_ocrp_ore FOREIGN KEY (ore_id) REFERENCES organisatorische_eenheid(ore_id);


--
-- Name: fk_ocrp_osc; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY observing_capability_responsible_party
    ADD CONSTRAINT fk_ocrp_osc FOREIGN KEY (osc_id) REFERENCES observing_capability(osc_id);


--
-- Name: fk_ocs_mno; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY observing_capability_sample
    ADD CONSTRAINT fk_ocs_mno FOREIGN KEY (smpl_id) REFERENCES sample(smpl_id);


--
-- Name: fk_ocs_osc; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY observing_capability_sample
    ADD CONSTRAINT fk_ocs_osc FOREIGN KEY (osc_id) REFERENCES observing_capability(osc_id);


--
-- Name: fk_opm_meetapparaat; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY obs_process_meetapparaat
    ADD CONSTRAINT fk_opm_meetapparaat FOREIGN KEY (mar_id) REFERENCES domains.meetapparaat(mar_id);


--
-- Name: fk_opm_observation_process; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY obs_process_meetapparaat
    ADD CONSTRAINT fk_opm_observation_process FOREIGN KEY (obp_id) REFERENCES observation_process(obp_id);


--
-- Name: fk_opt; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY observation
    ADD CONSTRAINT fk_opt FOREIGN KEY (observed_property_type) REFERENCES observed_property_type(opt_id);


--
-- Name: fk_opt_id; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY gw_chemical_status
    ADD CONSTRAINT fk_opt_id FOREIGN KEY (opt_id) REFERENCES observed_property_type(opt_id);


--
-- Name: fk_opt_id; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY gw_quantity_status
    ADD CONSTRAINT fk_opt_id FOREIGN KEY (opt_id) REFERENCES observed_property_type(opt_id);


--
-- Name: fk_opt_id; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY gw_swb_status
    ADD CONSTRAINT fk_opt_id FOREIGN KEY (opt_id) REFERENCES observed_property_type(opt_id);


--
-- Name: fk_opt_qe; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY wfd_qe_swtype
    ADD CONSTRAINT fk_opt_qe FOREIGN KEY (opt_id) REFERENCES observed_property_type(opt_id);


--
-- Name: fk_opt_qe; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY wfd_qe_gwtype
    ADD CONSTRAINT fk_opt_qe FOREIGN KEY (opt_id) REFERENCES observed_property_type(opt_id);


--
-- Name: fk_opt_ref; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY wfd_qe_swtype
    ADD CONSTRAINT fk_opt_ref FOREIGN KEY (part_of_opt_id) REFERENCES observed_property_type(opt_id);


--
-- Name: fk_opt_ref_eu; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY wfd_qe_gwtype
    ADD CONSTRAINT fk_opt_ref_eu FOREIGN KEY (opt_id) REFERENCES observed_property_type(opt_id);


--
-- Name: fk_opt_ref_nl; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY wfd_qe_gwtype
    ADD CONSTRAINT fk_opt_ref_nl FOREIGN KEY (opt_id) REFERENCES observed_property_type(opt_id);


--
-- Name: fk_ore_id_competentauthority_namespacetype; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY competentauthority_namespacetype
    ADD CONSTRAINT fk_ore_id_competentauthority_namespacetype FOREIGN KEY (ore_id) REFERENCES competent_authority(ore_id);


--
-- Name: fk_ore_organisation_category_type; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY organisatorische_eenheid
    ADD CONSTRAINT fk_ore_organisation_category_type FOREIGN KEY (organisation_category_id) REFERENCES organisation_category_type(ocat_id);


--
-- Name: fk_org_wkupusergroup; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY organisatorische_eenheid_wkpusergroup
    ADD CONSTRAINT fk_org_wkupusergroup FOREIGN KEY (ore_id) REFERENCES organisatorische_eenheid(ore_id);


--
-- Name: fk_organisatorische_eenheid; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY observation_process
    ADD CONSTRAINT fk_organisatorische_eenheid FOREIGN KEY (ore_id) REFERENCES organisatorische_eenheid(ore_id);


--
-- Name: fk_organisatorische_eenheid; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY observation_process_copy_dietmar
    ADD CONSTRAINT fk_organisatorische_eenheid FOREIGN KEY (ore_id) REFERENCES organisatorische_eenheid(ore_id);


--
-- Name: fk_pltr_yearly_status; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY pollutant_trend
    ADD CONSTRAINT fk_pltr_yearly_status FOREIGN KEY (gwys_id) REFERENCES gwb_yearly_status(gys_id);


--
-- Name: fk_pmfp_eumg; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY projection
    ADD CONSTRAINT fk_pmfp_eumg FOREIGN KEY (monitoring_goal_id) REFERENCES eu_monitoring_goal_type(eumg_id);


--
-- Name: fk_pmfp_pmf; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY projection
    ADD CONSTRAINT fk_pmfp_pmf FOREIGN KEY (pmf_id) REFERENCES planned_feature_monitoring(pmf_id);


--
-- Name: fk_pobb_monitored_measure; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY pom_other_basic_measure113b
    ADD CONSTRAINT fk_pobb_monitored_measure FOREIGN KEY (pobb_id) REFERENCES monitored_measure(mtm_id);


--
-- Name: fk_pobb_other_basic_measure113b_type; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY pom_other_basic_measure113b
    ADD CONSTRAINT fk_pobb_other_basic_measure113b_type FOREIGN KEY (obmb_id) REFERENCES other_basic_measure113b_type(obmb_id);


--
-- Name: fk_pobb_river_basin_management_plan; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY pom_other_basic_measure113b
    ADD CONSTRAINT fk_pobb_river_basin_management_plan FOREIGN KEY (rbmp_id) REFERENCES river_basin_management_plan(rbmp_id);


--
-- Name: fk_pom_base_measure113a_basic_measure113a_type; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY pom_base_measure113a
    ADD CONSTRAINT fk_pom_base_measure113a_basic_measure113a_type FOREIGN KEY (bma_id) REFERENCES basic_measure113a_type(bma_id);


--
-- Name: fk_pom_base_measure113a_river_basin_management_plan; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY pom_base_measure113a
    ADD CONSTRAINT fk_pom_base_measure113a_river_basin_management_plan FOREIGN KEY (rbmp_id) REFERENCES river_basin_management_plan(rbmp_id);


--
-- Name: fk_pom_base_measure113a_yes_no_not_applicable_type; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY pom_base_measure113a
    ADD CONSTRAINT fk_pom_base_measure113a_yes_no_not_applicable_type FOREIGN KEY (implemented_id) REFERENCES yes_no_not_applicable_type(ynna_id);


--
-- Name: fk_pos_acc_hor_uom; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY monitoring_feature
    ADD CONSTRAINT fk_pos_acc_hor_uom FOREIGN KEY (pos_accuracy_horizontal_uom_id) REFERENCES eenheid_type(eenh_id);


--
-- Name: fk_pos_acc_vert_uom; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY monitoring_feature
    ADD CONSTRAINT fk_pos_acc_vert_uom FOREIGN KEY (pos_accuracy_vertical_uom_id) REFERENCES eenheid_type(eenh_id);


--
-- Name: fk_qem; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY planned_feature_monitoring
    ADD CONSTRAINT fk_qem FOREIGN KEY (qem_id) REFERENCES quality_element(qem_id);


--
-- Name: fk_qem_qeo; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY quality_element_observation
    ADD CONSTRAINT fk_qem_qeo FOREIGN KEY (qem_id) REFERENCES quality_element(qem_id);


--
-- Name: fk_qeo_obs; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY quality_element_observation
    ADD CONSTRAINT fk_qeo_obs FOREIGN KEY (obs_id) REFERENCES observation(obs_id);


--
-- Name: fk_qes_mno; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY quality_element_sample
    ADD CONSTRAINT fk_qes_mno FOREIGN KEY (smpl_id) REFERENCES sample(smpl_id);


--
-- Name: fk_qes_osc; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY quality_element_sample
    ADD CONSTRAINT fk_qes_osc FOREIGN KEY (qem_id) REFERENCES quality_element(qem_id);


--
-- Name: fk_quality_element_bemonsteringsmethode; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY quality_element
    ADD CONSTRAINT fk_quality_element_bemonsteringsmethode FOREIGN KEY (sampling_method_id) REFERENCES domains.bemonsteringsmethode(bmm_id);


--
-- Name: fk_quality_element_cycle_eenheid; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY quality_element
    ADD CONSTRAINT fk_quality_element_cycle_eenheid FOREIGN KEY (cycle_uom_id) REFERENCES eenheid_type(eenh_id);


--
-- Name: fk_quality_element_observed_property_type; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY quality_element
    ADD CONSTRAINT fk_quality_element_observed_property_type FOREIGN KEY (opt_id) REFERENCES observed_property_type(opt_id);


--
-- Name: fk_quality_element_observing_capability; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY quality_element
    ADD CONSTRAINT fk_quality_element_observing_capability FOREIGN KEY (osc_id) REFERENCES observing_capability(osc_id);


--
-- Name: fk_quality_element_opt_eenheid; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY quality_element
    ADD CONSTRAINT fk_quality_element_opt_eenheid FOREIGN KEY (opt_uom_id) REFERENCES eenheid_type(eenh_id);


--
-- Name: fk_quality_element_parameter_use_type; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY quality_element
    ADD CONSTRAINT fk_quality_element_parameter_use_type FOREIGN KEY (parameter_use_id) REFERENCES parameter_use_type(prus_id);


--
-- Name: fk_quality_element_veldapparaat; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY quality_element
    ADD CONSTRAINT fk_quality_element_veldapparaat FOREIGN KEY (sampling_device_id) REFERENCES domains.veldapparaat(var_id);


--
-- Name: fk_quality_element_waarde_bewerkings_methode; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY quality_element
    ADD CONSTRAINT fk_quality_element_waarde_bewerkings_methode FOREIGN KEY (wbm_id) REFERENCES waarde_bewerkings_methode_type(wbm_id);


--
-- Name: fk_rbd_area_uom; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY river_basin_disrict
    ADD CONSTRAINT fk_rbd_area_uom FOREIGN KEY (area_uom_id) REFERENCES eenheid_type(eenh_id);


--
-- Name: fk_rbd_rbd; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY river_basin_disrict
    ADD CONSTRAINT fk_rbd_rbd FOREIGN KEY (part_of_district) REFERENCES river_basin_disrict(rbd_id);


--
-- Name: fk_rbmp_rbd; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY river_basin_management_plan
    ADD CONSTRAINT fk_rbmp_rbd FOREIGN KEY (rbd_id) REFERENCES river_basin_disrict(rbd_id);


--
-- Name: fk_rel_role_type; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY related_monitoring_object
    ADD CONSTRAINT fk_rel_role_type FOREIGN KEY (rrt_id) REFERENCES rel_role_type(rrt_id);


--
-- Name: fk_report_version_reprting_period; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY report_version
    ADD CONSTRAINT fk_report_version_reprting_period FOREIGN KEY (rpp_id) REFERENCES reporting_period(rpp_id);


--
-- Name: fk_report_version_wkr_version; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY report_version
    ADD CONSTRAINT fk_report_version_wkr_version FOREIGN KEY (wkrv_id) REFERENCES wkr_version(wkrv_id);


--
-- Name: fk_rewab_id; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY sw_abstraction_point
    ADD CONSTRAINT fk_rewab_id FOREIGN KEY (rewab_id) REFERENCES rewab_type(rwb_id);


--
-- Name: fk_rgs_relation_type; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY relation_gwb_swb
    ADD CONSTRAINT fk_rgs_relation_type FOREIGN KEY (relation_type_id) REFERENCES relation_type(rlt_id);


--
-- Name: fk_rgs_wfd_ground_water_body; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY relation_gwb_swb
    ADD CONSTRAINT fk_rgs_wfd_ground_water_body FOREIGN KEY (gwb_id) REFERENCES ground_water_body(gwb_id);


--
-- Name: fk_rgs_wfd_surface_water_body; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY relation_gwb_swb
    ADD CONSTRAINT fk_rgs_wfd_surface_water_body FOREIGN KEY (swb_id) REFERENCES surface_water_body(swb_id);


--
-- Name: fk_river_basin_management_plan_wkr_version; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY river_basin_management_plan
    ADD CONSTRAINT fk_river_basin_management_plan_wkr_version FOREIGN KEY (wkrv_id) REFERENCES wkr_version(wkrv_id);


--
-- Name: fk_rpp_legislation_reference; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY reporting_period
    ADD CONSTRAINT fk_rpp_legislation_reference FOREIGN KEY (leg_ref_id) REFERENCES legislation_reference_type(lgr_id);


--
-- Name: fk_rpv_object_state_type; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY report_version
    ADD CONSTRAINT fk_rpv_object_state_type FOREIGN KEY (ost_id) REFERENCES object_state_type(ost_id);


--
-- Name: fk_rrt_id; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY related_hydro_object
    ADD CONSTRAINT fk_rrt_id FOREIGN KEY (rrt_id) REFERENCES rel_role_type(rrt_id);


--
-- Name: fk_rsf_rel_samp_feat_role_type; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY related_sampling_feature
    ADD CONSTRAINT fk_rsf_rel_samp_feat_role_type FOREIGN KEY (role_id) REFERENCES rel_samp_feat_role_type(rsfr_id);


--
-- Name: fk_sample_biota_crit; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY sample
    ADD CONSTRAINT fk_sample_biota_crit FOREIGN KEY (biota_criterium_id) REFERENCES hoedanigheid_type(hdh_id);


--
-- Name: fk_sample_compartiment_type; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY sample
    ADD CONSTRAINT fk_sample_compartiment_type FOREIGN KEY (material_class_id) REFERENCES compartiment_type(cptm_id);


--
-- Name: fk_sample_fraction_criterium; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY sample
    ADD CONSTRAINT fk_sample_fraction_criterium FOREIGN KEY (fraction_criterium_id) REFERENCES hoedanigheid_type(hdh_id);


--
-- Name: fk_sample_orgaan; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY sample
    ADD CONSTRAINT fk_sample_orgaan FOREIGN KEY (organ_id) REFERENCES domains.orgaan(org_id);


--
-- Name: fk_sample_sampling_proces; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY sample
    ADD CONSTRAINT fk_sample_sampling_proces FOREIGN KEY (smp_id) REFERENCES sampling_proces(smp_id);


--
-- Name: fk_sample_size_uom; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY sample
    ADD CONSTRAINT fk_sample_size_uom FOREIGN KEY (size_uom_id) REFERENCES eenheid_type(eenh_id);


--
-- Name: fk_sample_taxon_type; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY sample
    ADD CONSTRAINT fk_sample_taxon_type FOREIGN KEY (txn_id) REFERENCES taxon_type(txn_id);


--
-- Name: fk_sample_upper_depth_uom; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY sample
    ADD CONSTRAINT fk_sample_upper_depth_uom FOREIGN KEY (upper_depth_uom_id) REFERENCES eenheid_type(eenh_id);


--
-- Name: fk_sampled_feature_monitoring_feature; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY sampled_feature
    ADD CONSTRAINT fk_sampled_feature_monitoring_feature FOREIGN KEY (mnf_id) REFERENCES monitoring_feature(mnf_id);


--
-- Name: fk_sampling_proces_bemonsteringsmethode; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY sampling_proces
    ADD CONSTRAINT fk_sampling_proces_bemonsteringsmethode FOREIGN KEY (sampling_method_id) REFERENCES domains.bemonsteringsmethode(bmm_id);


--
-- Name: fk_sampling_proces_monsterbewerkingsmethode; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY sampling_proces
    ADD CONSTRAINT fk_sampling_proces_monsterbewerkingsmethode FOREIGN KEY (sampling_processing_method_id) REFERENCES domains.monsterbewerkingsmethode(mbm_id);


--
-- Name: fk_sampling_proces_namespace_type; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY sampling_proces
    ADD CONSTRAINT fk_sampling_proces_namespace_type FOREIGN KEY (nen3610_id_namespace_id) REFERENCES namespace_type(ns_id);


--
-- Name: fk_sampling_proces_operator; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY sampling_proces
    ADD CONSTRAINT fk_sampling_proces_operator FOREIGN KEY (process_operator_id) REFERENCES organisatorische_eenheid(ore_id);


--
-- Name: fk_sampling_proces_organisatorische_eenheid; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY sampling_proces
    ADD CONSTRAINT fk_sampling_proces_organisatorische_eenheid FOREIGN KEY (sampling_operator_id) REFERENCES organisatorische_eenheid(ore_id);


--
-- Name: fk_sampling_proces_veldapparaat; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY sampling_proces
    ADD CONSTRAINT fk_sampling_proces_veldapparaat FOREIGN KEY (var_id) REFERENCES domains.veldapparaat(var_id);


--
-- Name: fk_scep_chemische_stof_type; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY swb_chem_exemp_pollutant
    ADD CONSTRAINT fk_scep_chemische_stof_type FOREIGN KEY (chs_id) REFERENCES chemische_stof_type(chs_id);


--
-- Name: fk_scep_swb_chemical_exemption; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY swb_chem_exemp_pollutant
    ADD CONSTRAINT fk_scep_swb_chemical_exemption FOREIGN KEY (swce_id) REFERENCES swb_exemption(swce_id);


--
-- Name: fk_slt; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY gw_monitoring_station
    ADD CONSTRAINT fk_slt FOREIGN KEY (station_level_id) REFERENCES station_level_type(slt_id);


--
-- Name: fk_smeu_eenheid_type; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY sw_supp_measure_eu_type
    ADD CONSTRAINT fk_smeu_eenheid_type FOREIGN KEY (eenh_id) REFERENCES eenheid_type(eenh_id);


--
-- Name: fk_smnl_legislation_reference_type; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY supp_add_measure_type
    ADD CONSTRAINT fk_smnl_legislation_reference_type FOREIGN KEY (legislation_ref_id) REFERENCES legislation_reference_type(lgr_id);


--
-- Name: fk_smnl_namespace_type; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY supp_add_measure_type
    ADD CONSTRAINT fk_smnl_namespace_type FOREIGN KEY (namespace_id) REFERENCES namespace_type(ns_id);


--
-- Name: fk_smnl_river_basin_management_plan; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY supp_add_measure_type
    ADD CONSTRAINT fk_smnl_river_basin_management_plan FOREIGN KEY (rbmp_id) REFERENCES river_basin_management_plan(rbmp_id);


--
-- Name: fk_smpl_low_hdh; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY sample
    ADD CONSTRAINT fk_smpl_low_hdh FOREIGN KEY (lower_depth_condition_id) REFERENCES hoedanigheid_type(hdh_id);


--
-- Name: fk_smpl_upp_hdh; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY sample
    ADD CONSTRAINT fk_smpl_upp_hdh FOREIGN KEY (upper_depth_condition_id) REFERENCES hoedanigheid_type(hdh_id);


--
-- Name: fk_spg_cw_uom; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY sw_pressures_preventing_good_status
    ADD CONSTRAINT fk_spg_cw_uom FOREIGN KEY (percentage_failure_cw_uom_id) REFERENCES eenheid_type(eenh_id);


--
-- Name: fk_spg_lw_uom; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY sw_pressures_preventing_good_status
    ADD CONSTRAINT fk_spg_lw_uom FOREIGN KEY (percentage_failure_lw_uom_id) REFERENCES eenheid_type(eenh_id);


--
-- Name: fk_spg_rbmp; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY sw_pressures_preventing_good_status
    ADD CONSTRAINT fk_spg_rbmp FOREIGN KEY (rbmp_id) REFERENCES river_basin_management_plan(rbmp_id);


--
-- Name: fk_spg_rw_uom; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY sw_pressures_preventing_good_status
    ADD CONSTRAINT fk_spg_rw_uom FOREIGN KEY (percentage_failure_rw_uom_id) REFERENCES eenheid_type(eenh_id);


--
-- Name: fk_spg_swp; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY sw_pressures_preventing_good_status
    ADD CONSTRAINT fk_spg_swp FOREIGN KEY (swap_id) REFERENCES sw_aggregated_pressure_type(swap_id);


--
-- Name: fk_spg_tw_uom; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY sw_pressures_preventing_good_status
    ADD CONSTRAINT fk_spg_tw_uom FOREIGN KEY (percentage_failure_tw_uom_id) REFERENCES eenheid_type(eenh_id);


--
-- Name: fk_sprm_basic_measure113a_type; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY sw_pressure_requiring_supp_add_measures
    ADD CONSTRAINT fk_sprm_basic_measure113a_type FOREIGN KEY (bma_id) REFERENCES basic_measure113a_type(bma_id);


--
-- Name: fk_sprm_other_basic_measure113b_type; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY sw_pressure_requiring_supp_add_measures
    ADD CONSTRAINT fk_sprm_other_basic_measure113b_type FOREIGN KEY (obmb_id) REFERENCES other_basic_measure113b_type(obmb_id);


--
-- Name: fk_sprm_sw_pressure_type; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY sw_pressure_requiring_supp_add_measures
    ADD CONSTRAINT fk_sprm_sw_pressure_type FOREIGN KEY (sprs_id) REFERENCES sw_pressure_type(sprs_id);


--
-- Name: fk_sprm_sw_pressures_preventing_good_status; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY sw_pressure_requiring_supp_add_measures
    ADD CONSTRAINT fk_sprm_sw_pressures_preventing_good_status FOREIGN KEY (spg_id) REFERENCES sw_pressures_preventing_good_status(spg_id);


--
-- Name: fk_sprs_pressure_category_type; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY sw_pressure_type
    ADD CONSTRAINT fk_sprs_pressure_category_type FOREIGN KEY (pressure_category_id) REFERENCES pressure_category_type(pcat_id);


--
-- Name: fk_sptcat_sw_category_type; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY sw_pressure_type_type_category
    ADD CONSTRAINT fk_sptcat_sw_category_type FOREIGN KEY (swc_id) REFERENCES sw_category_type(swc_id);


--
-- Name: fk_sptcat_sw_pressure_type; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY sw_pressure_type_type_category
    ADD CONSTRAINT fk_sptcat_sw_pressure_type FOREIGN KEY (sprs_id) REFERENCES sw_pressure_type(sprs_id);


--
-- Name: fk_srsm_sprm; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY sw_required_supp_measure
    ADD CONSTRAINT fk_srsm_sprm FOREIGN KEY (sprm_id) REFERENCES sw_pressure_requiring_supp_add_measures(sprm_id);


--
-- Name: fk_srsm_supp_add_measure_nl_type; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY sw_required_supp_measure
    ADD CONSTRAINT fk_srsm_supp_add_measure_nl_type FOREIGN KEY (smnl_id) REFERENCES supp_add_measure_type(smnl_id);


--
-- Name: fk_sst; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY monitoring_station
    ADD CONSTRAINT fk_sst FOREIGN KEY (subsite_type_id) REFERENCES subsite_type(sst_id);


--
-- Name: fk_stcc_eumg_id; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY sw_testing_conclusion
    ADD CONSTRAINT fk_stcc_eumg_id FOREIGN KEY (eumg_id) REFERENCES eu_monitoring_goal_type(eumg_id);


--
-- Name: fk_stcc_observation; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY sw_testing_conclusion
    ADD CONSTRAINT fk_stcc_observation FOREIGN KEY (stcc_id) REFERENCES observation(obs_id);


--
-- Name: fk_stcc_swb_yearly_status; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY sw_testing_conclusion
    ADD CONSTRAINT fk_stcc_swb_yearly_status FOREIGN KEY (sys_id) REFERENCES swb_yearly_status(sys_id);


--
-- Name: fk_stt; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY gw_monitoring_station
    ADD CONSTRAINT fk_stt FOREIGN KEY (station_type_id) REFERENCES station_type_type(stt_id);


--
-- Name: fk_styp_sw_category_type; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY sw_typology_type
    ADD CONSTRAINT fk_styp_sw_category_type FOREIGN KEY (swc_id) REFERENCES sw_category_type(swc_id);


--
-- Name: fk_supp_add_measure_type_monitored_measure; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY supp_add_measure_type
    ADD CONSTRAINT fk_supp_add_measure_type_monitored_measure FOREIGN KEY (smnl_id) REFERENCES monitored_measure(mtm_id);


--
-- Name: fk_supp_add_measure_type_sw_supp_measure_eu_type; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY supp_add_measure_type
    ADD CONSTRAINT fk_supp_add_measure_type_sw_supp_measure_eu_type FOREIGN KEY (smeu_id) REFERENCES sw_supp_measure_eu_type(smeu_id);


--
-- Name: fk_surface_water_body_reason_change_type; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY surface_water_body
    ADD CONSTRAINT fk_surface_water_body_reason_change_type FOREIGN KEY (rct_id) REFERENCES reason_change_type(rct_id);


--
-- Name: fk_surface_water_body_sw_target_typology_type; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY surface_water_body
    ADD CONSTRAINT fk_surface_water_body_sw_target_typology_type FOREIGN KEY (sw_target_typology_id) REFERENCES sw_typology_type(styp_id);


--
-- Name: fk_surface_water_body_sw_typology_type; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY surface_water_body
    ADD CONSTRAINT fk_surface_water_body_sw_typology_type FOREIGN KEY (sw_typology_id) REFERENCES sw_typology_type(styp_id);


--
-- Name: fk_sw_chemical_status; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY sw_chemical_substance_status
    ADD CONSTRAINT fk_sw_chemical_status FOREIGN KEY (swcs_id) REFERENCES classification_type(cls_id);


--
-- Name: fk_sw_chemical_substance_status_swb_yearly_status; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY sw_chemical_substance_status
    ADD CONSTRAINT fk_sw_chemical_substance_status_swb_yearly_status FOREIGN KEY (sys_id) REFERENCES swb_yearly_status(sys_id);


--
-- Name: fk_sw_ecological_status_swb_yearly_status; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY sw_ecological_status
    ADD CONSTRAINT fk_sw_ecological_status_swb_yearly_status FOREIGN KEY (sys_id) REFERENCES swb_yearly_status(sys_id);


--
-- Name: fk_sw_intercalibration_type; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY sw_typology_type
    ADD CONSTRAINT fk_sw_intercalibration_type FOREIGN KEY (icalt_id) REFERENCES eu_intercalibration_type(icalt);


--
-- Name: fk_sw_pressure_type_driver; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY sw_pressure_type_driver
    ADD CONSTRAINT fk_sw_pressure_type_driver FOREIGN KEY (driver_id) REFERENCES domains.drivers(driver_id);


--
-- Name: fk_sw_pressure_type_sprs; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY sw_pressure_type_driver
    ADD CONSTRAINT fk_sw_pressure_type_sprs FOREIGN KEY (sprs_id) REFERENCES sw_pressure_type(sprs_id);


--
-- Name: fk_sw_test_value_norm_value; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY sw_test_value
    ADD CONSTRAINT fk_sw_test_value_norm_value FOREIGN KEY (nrmv_id) REFERENCES norm_value(nrmv_id);


--
-- Name: fk_swap_id; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY sw_abstraction_point
    ADD CONSTRAINT fk_swap_id FOREIGN KEY (sasp_id) REFERENCES abstraction_point(asp_id);


--
-- Name: fk_swat_id; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY sw_abstraction_point
    ADD CONSTRAINT fk_swat_id FOREIGN KEY (swat_id) REFERENCES sw_abstraction_type(swat_id);


--
-- Name: fk_swb_area_eenheid_type; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY surface_water_body
    ADD CONSTRAINT fk_swb_area_eenheid_type FOREIGN KEY (area_uom_id) REFERENCES eenheid_type(eenh_id);


--
-- Name: fk_swb_excemption; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY swb_excemption_mechanism_44
    ADD CONSTRAINT fk_swb_excemption FOREIGN KEY (swce_id) REFERENCES swb_exemption(swce_id);


--
-- Name: fk_swb_exemption_swb_ecol_exemp_qe; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY swb_ecol_exemp_qe
    ADD CONSTRAINT fk_swb_exemption_swb_ecol_exemp_qe FOREIGN KEY (swce_id) REFERENCES swb_exemption(swce_id);


--
-- Name: fk_swb_id; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY gw_swb_status
    ADD CONSTRAINT fk_swb_id FOREIGN KEY (swb_id) REFERENCES surface_water_body(swb_id);


--
-- Name: fk_swb_length_eenheid_type; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY surface_water_body
    ADD CONSTRAINT fk_swb_length_eenheid_type FOREIGN KEY (length_uom_id) REFERENCES eenheid_type(eenh_id);


--
-- Name: fk_swb_physical_alteration_pat; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY swb_physical_alteration
    ADD CONSTRAINT fk_swb_physical_alteration_pat FOREIGN KEY (pat_id) REFERENCES physical_alteration_type(pat_id);


--
-- Name: fk_swb_physical_alteration_swb; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY swb_physical_alteration
    ADD CONSTRAINT fk_swb_physical_alteration_swb FOREIGN KEY (swb_id) REFERENCES surface_water_body(swb_id);


--
-- Name: fk_swb_pressure_impact; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY swb_pressure_impact
    ADD CONSTRAINT fk_swb_pressure_impact FOREIGN KEY (impact_id) REFERENCES domains.impacts(impact_id);


--
-- Name: fk_swb_pressure_swbp; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY swb_pressure_impact
    ADD CONSTRAINT fk_swb_pressure_swbp FOREIGN KEY (swbp_id) REFERENCES swb_pressure(swbp_id);


--
-- Name: fk_swb_prognosis_cls; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY wb_prognosis
    ADD CONSTRAINT fk_swb_prognosis_cls FOREIGN KEY (cls_id) REFERENCES classification_type(cls_id);


--
-- Name: fk_swb_prognosis_opt; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY wb_prognosis
    ADD CONSTRAINT fk_swb_prognosis_opt FOREIGN KEY (opt_id) REFERENCES observed_property_type(opt_id);


--
-- Name: fk_swb_prognosis_wb; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY wb_prognosis
    ADD CONSTRAINT fk_swb_prognosis_wb FOREIGN KEY (swb_id) REFERENCES water_body(wbd_id);


--
-- Name: fk_swb_yearly_status; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY chemical_exceedance
    ADD CONSTRAINT fk_swb_yearly_status FOREIGN KEY (sys_id) REFERENCES swb_yearly_status(sys_id);


--
-- Name: fk_swb_yearly_status_surface_water_body; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY swb_yearly_status
    ADD CONSTRAINT fk_swb_yearly_status_surface_water_body FOREIGN KEY (swb_id) REFERENCES surface_water_body(swb_id);


--
-- Name: fk_swbtype_qe; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY wfd_qe_swtype
    ADD CONSTRAINT fk_swbtype_qe FOREIGN KEY (swt_id) REFERENCES sw_typology_type(styp_id);


--
-- Name: fk_swce_objectives_exemption_type; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY swb_exemption
    ADD CONSTRAINT fk_swce_objectives_exemption_type FOREIGN KEY (obex_id) REFERENCES objectives_exemption_type(obex_id);


--
-- Name: fk_swce_surface_water_body; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY swb_exemption
    ADD CONSTRAINT fk_swce_surface_water_body FOREIGN KEY (swb_id) REFERENCES surface_water_body(swb_id);


--
-- Name: fk_swcs_confidence_level_type; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY sw_chemical_substance_status
    ADD CONSTRAINT fk_swcs_confidence_level_type FOREIGN KEY (clt_id) REFERENCES domains.confidence_level_type(clt_id);


--
-- Name: fk_swee_function; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY swb_measures_43a
    ADD CONSTRAINT fk_swee_function FOREIGN KEY (fu43_id) REFERENCES eu_function_43a_type(fu43_id);


--
-- Name: fk_swee_surface_water_body; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY swb_measures_43a
    ADD CONSTRAINT fk_swee_surface_water_body FOREIGN KEY (swb_id) REFERENCES surface_water_body(swb_id);


--
-- Name: fk_swes_confidence_level_type; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY sw_ecological_status
    ADD CONSTRAINT fk_swes_confidence_level_type FOREIGN KEY (clt_id) REFERENCES domains.confidence_level_type(clt_id);


--
-- Name: fk_swpr_ground_water_body; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY swb_pressure
    ADD CONSTRAINT fk_swpr_ground_water_body FOREIGN KEY (swb_id) REFERENCES surface_water_body(swb_id);


--
-- Name: fk_swpr_sw_pressure_type; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY swb_pressure
    ADD CONSTRAINT fk_swpr_sw_pressure_type FOREIGN KEY (sprs_id) REFERENCES sw_pressure_type(sprs_id);


--
-- Name: fk_taxa_group; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY taxa_group_element
    ADD CONSTRAINT fk_taxa_group FOREIGN KEY (txg_id) REFERENCES taxa_group(txg_id);


--
-- Name: fk_taxon_type; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY taxa_group_element
    ADD CONSTRAINT fk_taxon_type FOREIGN KEY (txn_id) REFERENCES taxon_type(txn_id);


--
-- Name: fk_thema_actie_organisatorische_eenheid_voortgang_actie; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY thema_actie_organisatorische_eenheid_voortgang
    ADD CONSTRAINT fk_thema_actie_organisatorische_eenheid_voortgang_actie FOREIGN KEY (ta_id) REFERENCES thema_acties(ta_id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: fk_thema_actie_organisatorische_eenheid_voortgang_organisatoris; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY thema_actie_organisatorische_eenheid_voortgang
    ADD CONSTRAINT fk_thema_actie_organisatorische_eenheid_voortgang_organisatoris FOREIGN KEY (ore_id) REFERENCES organisatorische_eenheid(ore_id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: fk_thema_acties_thema; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY thema_acties
    ADD CONSTRAINT fk_thema_acties_thema FOREIGN KEY (t_id) REFERENCES themas(t_id);


--
-- Name: fk_thema_overzicht_groep_organisatorische_eenheden_organisatori; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY thema_overzicht_groep_organisatorische_eenheden
    ADD CONSTRAINT fk_thema_overzicht_groep_organisatorische_eenheden_organisatori FOREIGN KEY (ore_id) REFERENCES organisatorische_eenheid(ore_id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: fk_thema_overzicht_groep_organisatorische_eenheden_thema_overzi; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY thema_overzicht_groep_organisatorische_eenheden
    ADD CONSTRAINT fk_thema_overzicht_groep_organisatorische_eenheden_thema_overzi FOREIGN KEY (tog_id) REFERENCES thema_overzicht_groepen(tog_id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: fk_thema_overzicht_groep_river_basin_disrict_rbd; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY thema_overzicht_groep_river_basin_disrict
    ADD CONSTRAINT fk_thema_overzicht_groep_river_basin_disrict_rbd FOREIGN KEY (rbd_id) REFERENCES river_basin_disrict(rbd_id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: fk_thema_overzicht_groep_river_basin_disrict_tog; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY thema_overzicht_groep_river_basin_disrict
    ADD CONSTRAINT fk_thema_overzicht_groep_river_basin_disrict_tog FOREIGN KEY (tog_id) REFERENCES thema_overzicht_groepen(tog_id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: fk_thema_overzicht_groep_wkpusers_thema_overzicht_groep; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY thema_overzicht_groep_wkpusers
    ADD CONSTRAINT fk_thema_overzicht_groep_wkpusers_thema_overzicht_groep FOREIGN KEY (tog_id) REFERENCES thema_overzicht_groepen(tog_id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: fk_thema_overzicht_statussen_thema; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY thema_overzicht_statussen
    ADD CONSTRAINT fk_thema_overzicht_statussen_thema FOREIGN KEY (t_id) REFERENCES themas(t_id);


--
-- Name: fk_to_hdo; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY related_hydro_object
    ADD CONSTRAINT fk_to_hdo FOREIGN KEY (to_hdo) REFERENCES hydro_object(hdo_id);


--
-- Name: fk_to_mno; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY related_monitoring_object
    ADD CONSTRAINT fk_to_mno FOREIGN KEY (to_mno) REFERENCES monitoring_object(mno_id);


--
-- Name: fk_trendtype_cls_id; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY pollutant_trend
    ADD CONSTRAINT fk_trendtype_cls_id FOREIGN KEY (cls_id) REFERENCES classification_type(cls_id);


--
-- Name: fk_true_styp_sw_category_type; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY sw_typology_type
    ADD CONSTRAINT fk_true_styp_sw_category_type FOREIGN KEY (true_swc_id) REFERENCES sw_category_type(swc_id);


--
-- Name: fk_upperbound_eenheid; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY norm_value
    ADD CONSTRAINT fk_upperbound_eenheid FOREIGN KEY (upperbound_uom_id) REFERENCES eenheid_type(eenh_id);


--
-- Name: fk_upperbound_limiet; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY norm_value
    ADD CONSTRAINT fk_upperbound_limiet FOREIGN KEY (upperbound_limit_symbol_id) REFERENCES bepaling_grens_type(bpg_id);


--
-- Name: fk_valid_column_uom_eenheid_type; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY valid_column_uom
    ADD CONSTRAINT fk_valid_column_uom_eenheid_type FOREIGN KEY (uom_id) REFERENCES eenheid_type(eenh_id);


--
-- Name: fk_waarde_bepalings_methode_type; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY observation_process
    ADD CONSTRAINT fk_waarde_bepalings_methode_type FOREIGN KEY (wbpm_id) REFERENCES waarde_bepalings_methode_type(wbpm_id);


--
-- Name: fk_waarde_bepalings_methode_type; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY sw_chemical_substance_status
    ADD CONSTRAINT fk_waarde_bepalings_methode_type FOREIGN KEY (wbpm_id) REFERENCES waarde_bepalings_methode_type(wbpm_id);


--
-- Name: fk_waarde_bepalings_methode_type; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY sw_ecological_status
    ADD CONSTRAINT fk_waarde_bepalings_methode_type FOREIGN KEY (wbpm_id) REFERENCES waarde_bepalings_methode_type(wbpm_id);


--
-- Name: fk_waarde_bepalings_methode_type; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY gw_chemical_status
    ADD CONSTRAINT fk_waarde_bepalings_methode_type FOREIGN KEY (wbpm_id) REFERENCES waarde_bepalings_methode_type(wbpm_id);


--
-- Name: fk_waarde_bepalings_methode_type; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY observation_process_copy_dietmar
    ADD CONSTRAINT fk_waarde_bepalings_methode_type FOREIGN KEY (wbpm_id) REFERENCES waarde_bepalings_methode_type(wbpm_id);


--
-- Name: fk_watercourse_hydro_object; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY watercourse
    ADD CONSTRAINT fk_watercourse_hydro_object FOREIGN KEY (wtc_id) REFERENCES hydro_object(hdo_id);


--
-- Name: fk_wbd_mrz; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY water_body
    ADD CONSTRAINT fk_wbd_mrz FOREIGN KEY (wbd_id) REFERENCES management_regulation_or_restriction_zone(mrz_id);


--
-- Name: fk_wbd_rbd; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY water_body
    ADD CONSTRAINT fk_wbd_rbd FOREIGN KEY (rbd_id) REFERENCES river_basin_disrict(rbd_id);


--
-- Name: fk_wbp_relation_type; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY waterbody_protected_area_intersection
    ADD CONSTRAINT fk_wbp_relation_type FOREIGN KEY (relation_type) REFERENCES relation_type(rlt_id);


--
-- Name: fk_wbp_wbd; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY waterbody_protected_area_intersection
    ADD CONSTRAINT fk_wbp_wbd FOREIGN KEY (wbd_id) REFERENCES water_body(wbd_id);


--
-- Name: fk_wbp_wpa; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY waterbody_protected_area_intersection
    ADD CONSTRAINT fk_wbp_wpa FOREIGN KEY (wpa_id) REFERENCES wfd_protected_area(wpa_id);


--
-- Name: fk_wbpm_id; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY gw_quantity_status
    ADD CONSTRAINT fk_wbpm_id FOREIGN KEY (wbpm_id) REFERENCES waarde_bepalings_methode_type(wbpm_id);


--
-- Name: fk_wbsc_observed_property; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY wb_status_change_motivation
    ADD CONSTRAINT fk_wbsc_observed_property FOREIGN KEY (opt_id) REFERENCES observed_property_type(opt_id);


--
-- Name: fk_wbsc_status_change_motivation; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY wb_status_change_motivation
    ADD CONSTRAINT fk_wbsc_status_change_motivation FOREIGN KEY (scm_id) REFERENCES domains.status_change_motivation_type(scm_id);


--
-- Name: fk_wbsc_water_body; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY wb_status_change_motivation
    ADD CONSTRAINT fk_wbsc_water_body FOREIGN KEY (wbd_id) REFERENCES water_body(wbd_id);


--
-- Name: fk_wfd_ground_water_body_wfd_water_body; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY ground_water_body
    ADD CONSTRAINT fk_wfd_ground_water_body_wfd_water_body FOREIGN KEY (gwb_id) REFERENCES water_body(wbd_id);


--
-- Name: fk_wfd_surface_water_body_wfd_water_body; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY surface_water_body
    ADD CONSTRAINT fk_wfd_surface_water_body_wfd_water_body FOREIGN KEY (swb_id) REFERENCES water_body(wbd_id);


--
-- Name: fk_wkpuser_settings; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY wkpuser_settings
    ADD CONSTRAINT fk_wkpuser_settings FOREIGN KEY (wkpuserid) REFERENCES wkpuser(wkpuserid);


--
-- Name: fk_wkpusergroupid; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY organisatorische_eenheid_wkpusergroup
    ADD CONSTRAINT fk_wkpusergroupid FOREIGN KEY (wkpusergroupid) REFERENCES wkpusergroup(wkpusergroupid);


--
-- Name: fk_wpa_mrz; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY wfd_protected_area
    ADD CONSTRAINT fk_wpa_mrz FOREIGN KEY (wpa_id) REFERENCES management_regulation_or_restriction_zone(mrz_id);


--
-- Name: fk_wpa_protected_area_type; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY wfd_protected_area
    ADD CONSTRAINT fk_wpa_protected_area_type FOREIGN KEY (protected_area_type_id) REFERENCES protected_area_type(pat_id);


--
-- Name: fk_wpa_wfd_ground_water_body; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY wfd_protected_area
    ADD CONSTRAINT fk_wpa_wfd_ground_water_body FOREIGN KEY (gwb_art7_id) REFERENCES ground_water_body(gwb_id);


--
-- Name: fk_wpa_wfd_status_code; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY wfd_protected_area
    ADD CONSTRAINT fk_wpa_wfd_status_code FOREIGN KEY (protected_area_status_id) REFERENCES wfd_status_code(wsc_id);


--
-- Name: fk_wpa_wfd_surface_water_body; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY wfd_protected_area
    ADD CONSTRAINT fk_wpa_wfd_surface_water_body FOREIGN KEY (swb_art7_id) REFERENCES surface_water_body(swb_id);


--
-- Name: fk_wtclt_watercourse; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY watercourse_local_type
    ADD CONSTRAINT fk_wtclt_watercourse FOREIGN KEY (wtc_id) REFERENCES watercourse(wtc_id) ON DELETE CASCADE;


--
-- Name: gw_status_type; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY gw_quantity_status
    ADD CONSTRAINT gw_status_type FOREIGN KEY (gwst_id) REFERENCES classification_type(cls_id);


--
-- Name: gwb_conceptual_model_ground_water_body_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY gwb_conceptual_model
    ADD CONSTRAINT gwb_conceptual_model_ground_water_body_fkey FOREIGN KEY (gwb_id) REFERENCES ground_water_body(gwb_id);


--
-- Name: importrule_importtype_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY importrule
    ADD CONSTRAINT importrule_importtype_fkey FOREIGN KEY (importtypeid) REFERENCES importtype(importtypeid) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: linkedimportrule_importrule_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY importrule
    ADD CONSTRAINT linkedimportrule_importrule_fkey FOREIGN KEY (linkedimportruleid) REFERENCES importtype(importtypeid) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: lowerbound_limiet; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY norm_value
    ADD CONSTRAINT lowerbound_limiet FOREIGN KEY (lowerbound_limit_symbol_id) REFERENCES bepaling_grens_type(bpg_id);


--
-- Name: membership_application_applicationid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY membership
    ADD CONSTRAINT membership_application_applicationid_fkey FOREIGN KEY (applicationid) REFERENCES application(applicationid) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: membership_application_wkpuserid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY membership
    ADD CONSTRAINT membership_application_wkpuserid_fkey FOREIGN KEY (wkpuserid) REFERENCES wkpuser(wkpuserid) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: page_group_page_pagegroup_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY page_pagegroup
    ADD CONSTRAINT page_group_page_pagegroup_fkey FOREIGN KEY (pg_id) REFERENCES page_group(pg_id);


--
-- Name: page_group_wkpuser_pagegroup_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY wkpuser_pagegroup
    ADD CONSTRAINT page_group_wkpuser_pagegroup_fkey FOREIGN KEY (pg_id) REFERENCES page_group(pg_id);


--
-- Name: page_page_pagegroup_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY page_pagegroup
    ADD CONSTRAINT page_page_pagegroup_fkey FOREIGN KEY (page_id) REFERENCES page(page_id);


--
-- Name: profile_wkpuser_wkpuserid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY profile
    ADD CONSTRAINT profile_wkpuser_wkpuserid_fkey FOREIGN KEY (wkpuserid) REFERENCES wkpuser(wkpuserid) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: related_zone; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY management_regulation_or_restriction_zone
    ADD CONSTRAINT related_zone FOREIGN KEY (related_mrz_id) REFERENCES management_regulation_or_restriction_zone(mrz_id);


--
-- Name: relation_ore_wbd_organisatorische_eenheid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY relation_ore_wbd
    ADD CONSTRAINT relation_ore_wbd_organisatorische_eenheid_fkey FOREIGN KEY (ore_id) REFERENCES organisatorische_eenheid(ore_id);


--
-- Name: relation_ore_wbd_water_body_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY relation_ore_wbd
    ADD CONSTRAINT relation_ore_wbd_water_body_fkey FOREIGN KEY (wbd_id) REFERENCES water_body(wbd_id);


--
-- Name: role_application_applicationid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY role
    ADD CONSTRAINT role_application_applicationid_fkey FOREIGN KEY (applicationid) REFERENCES application(applicationid) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: sw_chemical_substance_status_opt_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY sw_chemical_substance_status
    ADD CONSTRAINT sw_chemical_substance_status_opt_id_fkey FOREIGN KEY (opt_id) REFERENCES observed_property_type(opt_id);


--
-- Name: transformation_importrule_importruleid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY transformation
    ADD CONSTRAINT transformation_importrule_importruleid_fkey FOREIGN KEY (importruleid) REFERENCES importrule(importruleid) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: validation_importtype_importtypeid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY validation_importtype
    ADD CONSTRAINT validation_importtype_importtypeid_fkey FOREIGN KEY (importtypeid) REFERENCES importtype(importtypeid) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: validation_importtype_validationid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY validation_importtype
    ADD CONSTRAINT validation_importtype_validationid_fkey FOREIGN KEY (validationid) REFERENCES validation(validationid) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: volumestroom_type_bronnen_bronnen_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY volumestroom_type_bronnen
    ADD CONSTRAINT volumestroom_type_bronnen_bronnen_fkey FOREIGN KEY (bronnen_id) REFERENCES bronnen(bronnen_id);


--
-- Name: volumestroom_type_bronnen_volumestroom_type_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY volumestroom_type_bronnen
    ADD CONSTRAINT volumestroom_type_bronnen_volumestroom_type_fkey FOREIGN KEY (vst_id) REFERENCES volumestroom_type(vst_id);


--
-- Name: wkpuser_application_applicationid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY wkpuser
    ADD CONSTRAINT wkpuser_application_applicationid_fkey FOREIGN KEY (applicationid) REFERENCES application(applicationid) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: wkpuser_importtype_importtypeid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY wkpuser_importtype
    ADD CONSTRAINT wkpuser_importtype_importtypeid_fkey FOREIGN KEY (importtypeid) REFERENCES importtype(importtypeid) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: wkpuser_importtype_wkpuserid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY wkpuser_importtype
    ADD CONSTRAINT wkpuser_importtype_wkpuserid_fkey FOREIGN KEY (wkpuserid) REFERENCES wkpuser(wkpuserid) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: wkpuser_role_role_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY wkpuserinrole
    ADD CONSTRAINT wkpuser_role_role_id_fkey FOREIGN KEY (roleid) REFERENCES role(roleid) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: wkpuser_role_wkpuser_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY wkpuserinrole
    ADD CONSTRAINT wkpuser_role_wkpuser_id_fkey FOREIGN KEY (wkpuserid) REFERENCES wkpuser(wkpuserid) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: wkpuser_wkpuser_pagegroup_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY wkpuser_pagegroup
    ADD CONSTRAINT wkpuser_wkpuser_pagegroup_fkey FOREIGN KEY (wkpuserid) REFERENCES wkpuser(wkpuserid);


--
-- Name: wkpusergroupid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY wkpuser_wkpusergroup
    ADD CONSTRAINT wkpusergroupid_fkey FOREIGN KEY (wkpusergroupid) REFERENCES wkpusergroup(wkpusergroupid);


--
-- Name: wkpuserid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY wkpuser_wkpusergroup
    ADD CONSTRAINT wkpuserid_fkey FOREIGN KEY (wkpuserid) REFERENCES wkpuser(wkpuserid);


SET search_path = wfd_reporting, pg_catalog;

--
-- Name: fk; Type: FK CONSTRAINT; Schema: wfd_reporting; Owner: -
--

ALTER TABLE ONLY significant_impact_enum
    ADD CONSTRAINT fk FOREIGN KEY (i_id) REFERENCES domains.impacts(impact_id);


--
-- Name: fk_nl; Type: FK CONSTRAINT; Schema: wfd_reporting; Owner: -
--

ALTER TABLE ONLY geological_formation_enum
    ADD CONSTRAINT fk_nl FOREIGN KEY (nl_id) REFERENCES public.geological_formation_type(gfm_id);


--
-- Name: fk_sw; Type: FK CONSTRAINT; Schema: wfd_reporting; Owner: -
--

ALTER TABLE ONLY significant_pressure_enum
    ADD CONSTRAINT fk_sw FOREIGN KEY (sw_p_id) REFERENCES public.sw_pressure_type(sprs_id);


--
-- Name: pk_gw; Type: FK CONSTRAINT; Schema: wfd_reporting; Owner: -
--

ALTER TABLE ONLY significant_pressure_enum
    ADD CONSTRAINT pk_gw FOREIGN KEY (gw_p_id) REFERENCES public.gw_pressure_type(gprs_id);


--
-- Name: smeu; Type: FK CONSTRAINT; Schema: wfd_reporting; Owner: -
--

ALTER TABLE ONLY ktm_enum
    ADD CONSTRAINT smeu FOREIGN KEY (smeu_id) REFERENCES public.sw_supp_measure_eu_type(smeu_id);


--domain table BiologischKenmerk 
CREATE TABLE if not exists "public".BiologischKenmerk
(
  ID BIGINT
, Code VARCHAR(30)
, Omschrijving VARCHAR(60)
, Groep VARCHAR(17)
, D_BEGIN date
, D_EIND date
, D_STATUS VARCHAR(1)
)
;CREATE INDEX if not exists idx_BiologischKenmerk_lookup ON "public".BiologischKenmerk(Code)
;
