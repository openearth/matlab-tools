function [thecompend] = donar_dia_harvest(sourcename,cellstr_fields,timezone)
    
%    sourcename = 'p:\1204561-noordzee\data\svnchkout\donar_dia\dia_ctd\Copy of ctd_2003_-_2009.dia'
%   cellstr_fields = {'longitude','latitude','z','datestring','timestring','variable'}
    
    warning('beta')
    
    numcol = size(cellstr_fields,1);
    fid   = fopen(sourcename);
    theformat = '%s';    
    
    for i=numcol:-1:1,      
        theformat = ['%f',theformat];
    end
    
    
    
    % The dia file that I am dealing with is divided into several batches
    % (stukjes) of data, separated by headers (Hdr). Lets read the file
    % identifying the separate batches.
    res = struct([]);
    iStuk = 1;
    iHdr = 1;
    
    while true
        
        clear data temp
        % Read a data line
        temp = textscan(fid,theformat,'delimiter',';:');

        if isempty(temp{numcol})
            
            % It did not read anything? It is not of type '%f'
            % It doesn't comply to "theformat", it might be a hdr
            result = donar_readHDR(fid);
            
            if ~isstruct(result)
                
                % Nope, It is actually the end of the file
                numhdr = iHdr-1;
                numstuk = iStuk-1;
                clear iHdr iStuck;
                break;
            
            else
                iHdr = iHdr + 1;
            end
            
        else

            
            
            %%%%%%%%%%%%%%%%%%%%%%%%%%%%%
            % Store data in a structure %
            %%%%%%%%%%%%%%%%%%%%%%%%%%%%%
            
            data = cell2mat(temp(:,1:end-1));
            data(:,1) = dms2degrees([mod(fix(data(:,1)/1000000),100), ...
                                     mod(fix(data(:,1)/10000),100), ...
                                     mod(    data(:,1),10000)/100]);
            
            data(:,2) = dms2degrees([mod(fix(data(:,2)/1000000),100), ...
                                     mod(fix(data(:,2)/10000),100), ...
                                     mod(    data(:,2),10000)/100]);
            
            

            %%%%%%%%%%%%%%%%%
            % Flag the data %
            %%%%%%%%%%%%%%%%%
            variableCol = find(ismember(lower(cellstr_fields(:,1)),lower('variable')));
            data(data(:,variableCol)>1E9, :) = [];
            data(:,numcol+1) = iStuk;
            data = donar_flagValues(result.PAR{2},data);
            
            
            
            %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
            % Organize information by time and flag the data %
            %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
            dateCol = find(ismember(lower(cellstr_fields(:,1)),lower('datestring')));
            timeCol = find(ismember(lower(cellstr_fields(:,1)),lower('timestring')));
            data(:,dateCol) = time2datenum(data(:,dateCol),data(:,timeCol)) - datenum('01-Jan-1970');
            data(:,timeCol) = [];
            if variableCol > timeCol, variableCol = variableCol -1; end
            data(:,numcol+3:numcol+5) = [year(data(:,dateCol)),month(data(:,dateCol)),yearweek(data(:,dateCol))];
            data = sortrows(data,dateCol);
            
            
            
            %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
            % Organize the headers, just write one and store the ones %
            % that change from piece to piece.                        %
            %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
            if iStuk == 1 

                % Structure is empty lets initialize it
                make_field(result.PAR{2})
            else

                if isfield(thecompend,result.PAR{2})
                    thefields = fields(result);
                    thefieldname = result.PAR{2};
                    
                    
                    
                    % Check that the headers are all the same
                    for k=1:length(thefields)
                        if (~strcmpi(thefields{k},'tyd') && ~strcmpi(thefields{k},'bgs')) && ~strcmp(cell2mat(thecompend.(result.PAR{2}).hdr.(thefields{k})(1,:)),[result.(thefields{k}){:}])
                            
                            % The headers are not the same!!!! Lets
                            % make a new field and store the data there.
                            thefieldname = [thefieldname,'_',thefields{k},'_',result.(thefields{k}){1}];
                        end
                    end
                    
                    
                    % The name of the new field will contain the hdr
                    % differences: thefieldname.
                    if ~isfield(thecompend,thefieldname)
                        
                        % Let's make the new field...
                        make_field(thefieldname)                        
                    else
                        
                        thecompend.(thefieldname).data = [thecompend.(result.PAR{2}).data; data];
                    end

                else
                    
                    % This field is not yet in the structure, we need to
                    % make it.
                    make_field(result.PAR{2})
                end
            end
        
            iStuk = iStuk + 1;
        end   
    end
    
    if numstuk ~=  numhdr, warning('The number of headers and data batches are disimilar.');  end
    fclose(fid);
    
    
    
    
    
    
    % This little function is here just to make the code a little bit more
    % organized. It needs to have the workspace accesible and the only
    % thing the really changes from call to call is the name of the new
    % field.
    function [] = make_field(name_of_field)
        eval(['thecompend.',name_of_field,'.hdr = struct(result);'])
        eval(['thecompend.',(name_of_field),'.data = data;'])
        thecompend.(name_of_field).dimensions = cellstr_fields(~ismember(cellstr_fields(:,1),'variable') & ~ismember(cellstr_fields(:,1),'timestring'),:);
        thecompend.(name_of_field).dimensions(ismember(thecompend.(name_of_field).dimensions(:,1),'datestring'),:) = {'time',['days since ',datestr(0,'yyyy-mmm-dd HH:MM:SS'),' ',timezone]};
        thecompend.(name_of_field).name = strrep(code2name(thecompend.(name_of_field).hdr.WNS,'donar','wns'),' ','_');
        [thecompend.(name_of_field).standard_name,~,thecompend.(name_of_field).deltares_name] = code2name(thecompend.(name_of_field).name,'standar','name');
        thecompend.(name_of_field).variableCol = variableCol;  
    end

end