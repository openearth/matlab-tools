fclose all; 
clc       ;

% Read paths
pathin      = get(handles.edit1,'String');
pathout     = get(handles.edit2,'String');
if isempty(pathin);
    errordlg('The input directory has not been assigned','Error');
    return;
end
if isempty(pathout);
    errordlg('The output directory has not been assigned','Error');
    return;
end
if exist(pathin,'dir')==0;
    errordlg('The input directory does not exist.','Error');
    return;
end
if exist(pathout,'dir')==0;
    errordlg('The output directory does not exist.','Error');
    return;
end

% Check ext file
extnameread = get(handles.edit3,'String');
if isempty(extnameread);
    errordlg('The ext-file name has not been assigned','Error');
    return;
end
if length(extnameread)>3;
    if strcmp(extnameread(end-3:end),'.ext');
        extname    = extnameread(1:end-4);
    else
        extname    = extnameread;
    end
else
    extname = extnameread;
end

% Check mdf file (block analogue to previous block for ext-files)
mdffileread = get(handles.edit4,'String');
mdffileread(mdffileread==' ') = [];
if isempty(mdffileread);
    errordlg('The mdf-file name has not been assigned','Error');
    return;
end
if length(mdffileread)>3;
    if strcmp(mdffileread(end-3:end),'.mdf');
        mdffile    = mdffileread(1:end-4);
    else
        mdffile    = mdffileread;
    end
else
    mdffile = mdffileread;
end

% Check mdu file (block analogue to previous block for ext-files)
mdufileread = get(handles.edit5,'String');
mdufileread(mdufileread==' ') = [];
if isempty(mdufileread);
    errordlg('The mdf-file name has not been assigned','Error');
    return;
end
if length(mdufileread)>3;
    if strcmp(mdufileread(end-3:end),'.mdu');
        mdufile    = mdufileread(1:end-4);
    else
        mdufile    = mdufileread;
    end
else
    mdufile = mdufileread;
end

% Create full pathnames
mdfshort    = mdffile;
mdushort    = mdufile;
mdffile     = [pathin ,'/',mdffile,'.mdf'];
mdufile     = [pathout,'/',mdufile,'.mdu'];

% Read some data from the mdf-file
fid1        = fopen(mdffile,'r');
I           = 1e8;
for i=1:I;
    tline   = fgetl(fid1);
    if tline<0;
        break;
    else
        if strcmp(tline(1:6),'Itdate');
            [token, remain]     = strtok(tline,'#');
            Itdate              = remain(2:end-1);
            Itdate(Itdate=='-') = [];
        end
        if strcmp(tline(1:5),'Tunit');
            [token, remain]     = strtok(tline,'#');
            Tunit               = remain(2:end-1);
        end
        if strcmp(tline(1:6),'Tstart');
            [token, remain]     = strtok(tline,'=');
            Tstart              = str2num(remain(2:end));
        end
        if strcmp(tline(1:5),'Tstop');
            [token, remain]     = strtok(tline,'=');
            Tstop               = str2num(remain(2:end));
        end
        if strcmp(tline(1:2),'Dt');
            [token, remain]     = strtok(tline,'=');
            Dt                  = str2num(remain(2:end));
        end
        if strcmp(tline(1:5),'Flmap');
            [token, remain]     = strtok(tline,'=');
            Flmaplees           = str2num(remain(2:end));
            Flmap               = Flmaplees(2);
        end
        if strcmp(tline(1:5),'Flhis');
            [token, remain]     = strtok(tline,'=');
            Flhislees           = str2num(remain(2:end));
            Flhis               = Flhislees(2);
        end
        if strcmp(tline(1:5),'Flrst');
            [token, remain]     = strtok(tline,'=');
            Flrst               = str2num(remain(2:end));
        end
    end
end
DtUser      = Dt;
DtMax       = Dt;
fclose(fid1);

% Write the mdu file
fid2        = fopen(mdufile,'w'); 
klok        = clock;
fprintf(fid2,'%s\n'  ,['# Generated by the Matlab program ddd2dfm on ',num2str(      klok(4) ,'%0.2d'),':' ,...
                                                                       num2str(      klok(5) ,'%0.2d'),':' ,...
                                                                       num2str(floor(klok(6)),'%0.2d'),', ',...
                                                                       num2str(      klok(3) ,'%0.2d'),'-' ,...
                                                                       num2str(      klok(2) ,'%0.2d'),'-' ,...
                                                                       num2str(      klok(1) ,'%0.4d')        ]);
fprintf(fid2,'%s\n\n',['# Deltares, Matlab-generated mdu-file for D-Flow FM']);  

fprintf(fid2,'%s\n'  ,'[model]');
fprintf(fid2,'%s\n'  ,'Program              = D-Flow FM');
fprintf(fid2,'%s\n'  ,'Version              = 1.1.54.24534M');
fprintf(fid2,'%s\n\n','AutoStart            = 0                   # Autostart simulation after loading MDU or not (0=no, 1=autostart, 2=autostartstop).');

fprintf(fid2,'%s\n'  ,'[geometry]');
fprintf(fid2,'%s\n'  ,'NetFile              =                     # *_net.nc');
fprintf(fid2,'%s\n'  ,'BathymetryFile       =                     # *.xyb');
fprintf(fid2,'%s\n'  ,'WaterLevIniFile      =                     # Initial water levels sample file *.xyz');
fprintf(fid2,'%s\n'  ,'LandBoundaryFile     =                     # Only for plotting');
fprintf(fid2,'%s\n'  ,'ThinDamFile          =                     # *_thd.pli, Polyline(s) for tracing thin dams.');
fprintf(fid2,'%s\n'  ,'ThindykeFile         =                     # *._tdk.pli, Polyline(s) x,y,z, z = thin dyke top levels');
fprintf(fid2,'%s\n'  ,'ProflocFile          =                     # *_proflocation.xyz)    x,y,z, z = profile refnumber');
fprintf(fid2,'%s\n'  ,'ProfdefFile          =                     # *_profdefinition.def) definition for all profile nrs');
fprintf(fid2,'%s\n'  ,'ManholeFile          =                     # *...');
fprintf(fid2,'%s\n'  ,'WaterLevIni          = 0                   # Initial water level');
fprintf(fid2,'%s\n'  ,'BotLevUni            = -5.                 # Uniform bottom level, (only if Botlevtype>=3, used at missing z values in netfile');
fprintf(fid2,'%s\n'  ,'BotLevType           = 3                   # 1 : Bottom levels at waterlevel cells (=flow nodes), like tiles xz, yz, bl , bob = max(bl left, bl right)');
fprintf(fid2,'%s\n'  ,'                                           # 2 : Bottom levels at velocity points  (=flow links),            xu, yu, blu, bob = blu,    bl = lowest connected link');
fprintf(fid2,'%s\n'  ,'                                           # 3 : Bottom levels at velocity points  (=flow links), using mean network levels xk, yk, zk  bl = lowest connected link');
fprintf(fid2,'%s\n'  ,'                                           # 4 : Bottom levels at velocity points  (=flow links), using min  network levels xk, yk, zk  bl = lowest connected link');
fprintf(fid2,'%s\n'  ,'                                           # 5 : Bottom levels at velocity points  (=flow links), using max  network levels xk, yk, zk  bl = lowest connected link');
fprintf(fid2,'%s\n'  ,'PartitionFile        =                     # *_part.pol, polyline(s) x,y');
fprintf(fid2,'%s\n'  ,'AngLat               = 0.                  # Angle of latitude (deg), 0=no Coriolis');
fprintf(fid2,'%s\n\n','Conveyance2D         = 3                   # -1:R=HU,0:R=H, 1:R=A/P, 2:K=analytic-1D conv, 3:K=analytic-2D conv');

fprintf(fid2,'%s\n'  ,'[numerics]');
fprintf(fid2,'%s\n'  ,'CFLMax               = 0.7                 # Max. Courant nr.');
fprintf(fid2,'%s\n'  ,'CFLWaveFrac          = 0.1                 # Wave velocity fraction, total courant vel = u + cflw*wavevelocity');
fprintf(fid2,'%s\n'  ,'AdvecType            = 3                   # Adv type, 0=no, 1= Wenneker, qu-udzt, 2=1, q(uio-u), 3=Perot q(uio-u), 4=Perot q(ui-u), 5=Perot q(ui-u) without itself');
fprintf(fid2,'%s\n'  ,'Limtypmom            = 4                   # Limiter type for cell center advection velocity, 0=no, 1=minmod,2=vanLeer,3=Kooren,4=Monotone Central');
fprintf(fid2,'%s\n'  ,'Limtypsa             = 4                   # Limiter type for salinity transport,           0=no, 1=minmod,2=vanLeer,3=Kooren,4=Monotone Central');
fprintf(fid2,'%s\n'  ,'Icgsolver            = 1                   # Solver type , 1 = sobekGS_OMP, 2 = sobekGS_OMPthreadsafe, 3 = sobekGS, 4 = sobekGS + Saadilud');
fprintf(fid2,'%s\n\n','Hdam                 = 0.                  # Threshold for minimum bottomlevel step at which to apply energy conservation factor i.c. flow contraction');

fprintf(fid2,'%s\n'  ,'[physics]');
fprintf(fid2,'%s\n'  ,'UnifFrictCoef        = 2.3d-2              # Uniform friction coefficient, 0=no friction');
fprintf(fid2,'%s\n'  ,'UnifFrictType        = 1                   # 0=Chezy, 1=Manning, 2=White Colebrook, 3=z0 etc');
fprintf(fid2,'%s\n'  ,'Vicouv               = 0.                  # Uniform horizontal eddy viscosity');
fprintf(fid2,'%s\n'  ,'Smagorinsky          = 0.                  # Add Smagorinsky horizontal turbulence : vicu = vicu + ( (Smagorinsky*dx)**2)*S, e.g. 0.1');
fprintf(fid2,'%s\n'  ,'Elder                = 0.                  # Add Elder contribution                : vicu = vicu + Elder*kappa*ustar*H/6),   e.g. 1.0');
fprintf(fid2,'%s\n'  ,'irov                 = 0                   # 0=free slip, 1 = partial slip using wall_ks');
fprintf(fid2,'%s\n'  ,'wall_ks              = 0.                  # Nikuradse roughness for side walls, wall_z0=wall_ks/30');
fprintf(fid2,'%s\n'  ,'Vicoww               = 0.                  # Uniform vertical eddy viscosity');
fprintf(fid2,'%s\n'  ,'TidalForcing         = 1                   # Tidal forcing (0=no, 1=yes) (only for jsferic == 1)');
fprintf(fid2,'%s\n\n','Salinity             = 0                   # Include salinity, (0=no, 1=yes)');

fprintf(fid2,'%s\n'  ,'[wind]');
fprintf(fid2,'%s\n'  ,'ICdtyp               = 2                   # ( ), Cd = const, 2=S&B 2 breakpoints, 3= S&B 3 breakpoints');
fprintf(fid2,'%s\n'  ,'Cdbreakpoints        = 6.3d-4 7.23d-3      # ( ),   e.g. 0.00063  0.00723');
fprintf(fid2,'%s\n\n','Windspeedbreakpoints = 0. 100.             # (m/s), e.g. 0.0      100.0');

fprintf(fid2,'%s\n'  , '[time]');
fprintf(fid2,'%s\n'  ,['RefDate              = ',Itdate                     ,'            # Reference date (yyyymmdd)']);
fprintf(fid2,'%s\n'  ,['Tunit                = ',Tunit               ,'                   # Time units in MDU (H, M or S)']);
fprintf(fid2,'%s\n'  ,['DtUser               = ',num2str(DtUser,'%5.7f'),'                # User timestep in seconds (interval for external forcing update & his/map output)']);
fprintf(fid2,'%s\n'  ,['DtMax                = ',num2str(DtMax ,'%5.7f'),'                # Max timestep in seconds']);
fprintf(fid2,'%s\n'  ,['DtInit               = 1.                  # Initial timestep in seconds']);
fprintf(fid2,'%s\n'  ,['AutoTimestep         = 1                   # Use CFL timestep limit or not (1/0)']);
fprintf(fid2,'%s\n'  ,['TStart               = ',num2str(Tstart,'%1.7e'),'       # Start time w.r.t. RefDate (in TUnit)']);
fprintf(fid2,'%s\n\n',['TStop                = ',num2str(Tstop ,'%1.7e'),'       # Stop  time w.r.t. RefDate (in TUnit)']);

fprintf(fid2,'%s\n'  ,['[restart]']);
fprintf(fid2,'%s\n'  ,['RestartFile          =                     # Restart file, only map, hence: *_map.nc']);
fprintf(fid2,'%s\n\n',['RestartDateTime      = ',Itdate,'000000','      # Restart time (yyyymmddhhmmss)']);

fprintf(fid2,'%s\n'  ,['[external forcing]']);
fprintf(fid2,'%s\n\n',['ExtForceFile         = ',extname,'.ext','          # *.ext']);

fprintf(fid2,'%s\n'  ,['[output]']);
fprintf(fid2,'%s\n'  ,['ObsFile              =                     # *.xyn Coords+name of observation stations.']);
fprintf(fid2,'%s\n'  ,['CrsFile              =                     # *_crs.pli Polyline(s) definining cross section(s).']);
fprintf(fid2,'%s\n'  ,['HisFile              = ',mdushort,'_his.nc','       # *_his.nc History file in NetCDF format.']);
fprintf(fid2,'%s\n'  ,['HisInterval          = ',num2str(Flhis,'%5.7f'),'                # Interval (s) between history outputs']);
fprintf(fid2,'%s\n'  ,['XLSInterval          = 0.                  # Interval (s) between XLS history']);
fprintf(fid2,'%s\n'  ,['FlowGeomFile         =                     # *_flowgeom.nc Flow geometry file in NetCDF format.']);
fprintf(fid2,'%s\n'  ,['MapFile              = ',mdushort,'_map.nc','       # *_map.nc Map file in NetCDF format.']);
fprintf(fid2,'%s\n'  ,['MapInterval          = ',num2str(Flmap,'%5.7f'),'                # Interval (s) between map file outputs']);
fprintf(fid2,'%s\n'  ,['RstInterval          = ',num2str(Flrst,'%5.7f'),'                # Interval (s) between map file outputs']);
fprintf(fid2,'%s\n'  ,['WaqFileBase          =                     # Basename (without extension) for all Delwaq files to be written.']);
fprintf(fid2,'%s\n'  ,['WaqInterval          = 0.                  # Interval (in s) between Delwaq file outputs']);
fprintf(fid2,'%s\n'  ,['StatsInterval        = 0.                  # Interval (in s) between simulation statistics output.']);
fprintf(fid2,'%s\n'  ,['SnapshotDir          =                     # Directory where snapshots/screendumps are saved.']);

fclose(fid2);

% Message
msgbox('The mdu file has been written.','Message');