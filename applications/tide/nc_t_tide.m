function varargout = nc_t_tide(varargin)
%NC_T_TIDE    t_tide with netCDF output
%
%   <D> = nc_t_tide(t,var,<keyword,value>)
%
% performs a t_tide tidal analysis and saves result as netCDF file.
%
%   <D> = nc_t_tide(filename,<keyword,value>)
%
% saves ascii 'output' file as generated by t_tide as netCDF file.
%
% Optionally struct D with al data is returned, it is empty when
% an error is encounted, e.g. non-equidistant time-spacing.
%
% For list of <keyword,value> call nc_t_tide()
%
%See also: T_TIDE, NC_T_TIDE_COMPARE

% TO DO: start using native matlab ncwritschema

%   --------------------------------------------------------------------
%   Copyright (C) 2010 Deltares
%       Gerben J. de Boer
%
%       gerben.deboer@deltares.nl	
%
%       Deltares
%       P.O. Box 177
%       2600 MH Delft
%       The Netherlands
%
%   This library is free software: you can redistribute it and/or
%   modify it under the terms of the GNU Lesser General Public
%   License as published by the Free Software Foundation, either
%   version 2.1 of the License, or (at your option) any later version.
%
%   This library is distributed in the hope that it will be useful,
%   but WITHOUT ANY WARRANTY; without even the implied warranty of
%   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
%   Lesser General Public License for more details.
%
%   You should have received a copy of the GNU Lesser General Public
%   License along with this library. If not, see <http://www.gnu.org/licenses/>.
%   --------------------------------------------------------------------

% This tool is part of <a href="http://OpenEarth.nl">OpenEarthTools</a>.
% OpenEarthTools is an online collaboration to share and manage data and 
% programming tools in an open source, version controlled environment.
% Sign up to recieve regular updates of this function, and to contribute 
% your own tools.

%% Version <http://svnbook.red-bean.com/en/1.5/svn.advanced.props.special.keywords.html>
% Created: 17 Aug 2010
% Created with Matlab version: 7.7.0.471 (R2008b)

% $Id$
% $Date$
% $Author$
% $Revision$
% $HeadURL$
% $Keywords: $

%% Input

   OPT.station_id   = ' ';
   OPT.station_name = ' ';
   OPT.period       = [];
   OPT.lat          = NaN;
   OPT.lon          = NaN;
   OPT.units        = '?';
   OPT.ascfile      = '';
   OPT.ncfile       = '';
   OPT.ddatenumeps  = 1e-8;
   OPT.synth        = 2;
   
   OPT.title        = ' ';
   OPT.institution  = ' ';
   OPT.source       = ' ';
   OPT.history      = ' ';
   OPT.email        = ' ';

   if nargin==0
      varargout = {OPT};
      return
   end

%% Tidal analysis incl. temporal equidistance check

if odd(nargin)

      fname = varargin{1};
      
      if isempty(OPT.ncfile)
      OPT.ncfile = [filenameext(fname),'.nc'];
      end

      
      OPT       = setProperty(OPT,varargin{2:end});
      D         = t_tide_read(fname);
      OPT.synth = '{unknown, probably 2 (t_tide default)}'; % unknown, not in output

else

      t   = varargin{1};
      var = varargin{2};
   
      OPT = setProperty(OPT,varargin{3:end});
   
      dt = diff(t);
   
      if length(unique([dt])) > 1
         if (max(dt) - min(dt)) > OPT.ddatenumeps
            fprintf(2,'%s\n',['No equidistant time intervals: range: ',num2str(min(dt)),' - ',num2str(max(dt))])
            varargout = {[]};
            return
         end
      end
      mkdir(fileparts(OPT.ascfile));
      [tidestruc,pout]=t_tide(var,...
                 'latitude'  ,OPT.lat,... % required for nodal corrections
                 'start'     ,t(1),...
                 'interval'  ,dt(1)*24,... % in hours
                 'output'    ,[OPT.ascfile],...
                 'synth'     ,OPT.synth);

   %% Collect relevant data in struct, as if returned by D = nc2struct()                 

      D.component_name  = tidestruc.name;
      D.frequency       = tidestruc.freq;
      D.amplitude       = tidestruc.tidecon(:,1);
      D.amplitude_error = tidestruc.tidecon(:,2);
      D.phase           = tidestruc.tidecon(:,3);
      D.phase_error     = tidestruc.tidecon(:,4);
      D.snr             = (D.amplitude./D.amplitude_error).^2;  % signal to noise ratio (t_tide line 523)
      D.significance    = D.snr > OPT.synth;

end

      D.station_id     = OPT.station_id  ;  
      D.station_name   = OPT.station_name;
      D.longitude      = OPT.lon;
      D.latitude       = OPT.lat;
      D.time           = OPT.period(1) - datenum(1970,1,1);
      D.period         = OPT.period' - datenum(1970,1,1);

%% Save struct to netCDF file
      
   nc_create_empty(OPT.ncfile);
   
   nc_attput(OPT.ncfile, nc_global, 'title'         , OPT.title);
   nc_attput(OPT.ncfile, nc_global, 'institution'   , OPT.institution);
   nc_attput(OPT.ncfile, nc_global, 'source'        , OPT.source);
   nc_attput(OPT.ncfile, nc_global, 'history'       , OPT.history);
   nc_attput(OPT.ncfile, nc_global, 'references'    , 'Pawlowicz, R., B. Beardsley, and S. Lentz, "Classical Tidal Harmonic Analysis Including Error Estimates in MATLAB using T_TIDE", Computers and Geosciences, 2002.');
   nc_attput(OPT.ncfile, nc_global, 'email'         , OPT.email);
   
   nc_attput(OPT.ncfile, nc_global, 'version'       , '$Id$');
   nc_attput(OPT.ncfile, nc_global, 'Conventions'   , 'CF-1.4');
   nc_attput(OPT.ncfile, nc_global, 'disclaimer'    , 'This data is made available in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.');
   
   % TO DO: add other meta-info from t_tide such as history and stuff from t_tide ASCII file
   
   nc_adddim      (OPT.ncfile,'frequency',length(D.frequency));
   nc_adddim      (OPT.ncfile,'strlen0'  ,1);
   nc_adddim      (OPT.ncfile,'strlen1'  ,size(char(D.component_name),2));
   nc_adddim      (OPT.ncfile,'strlen2'  ,length(D.station_id));
   nc_adddim      (OPT.ncfile,'strlen3'  ,length(D.station_name));
   nc_adddim      (OPT.ncfile,'time'     ,1);
   nc_adddim      (OPT.ncfile,'bounds'   ,2);

   nc.Name = 'station_id';
   nc.Datatype     = 'char';
   nc.Dimension    = {'strlen0','strlen2'}; % 2D, otherwise matlab does not load it correctly
   nc.Attribute(1) = struct('Name', 'long_name'      ,'Value', 'Rijkswaterstaat DONAR code of station');
   nc.Attribute(2) = struct('Name', 'standard_name'  ,'Value', 'station_id');
   nc_addvar         (OPT.ncfile,nc);
   nc_varput         (OPT.ncfile,nc.Name,D.station_id(:)');clear nc

   nc.Name = 'station_name';
   nc.Datatype     = 'char';
   nc.Dimension    = {'strlen0','strlen3'}; % 2D, otherwise matlab does not load it correctly
   nc.Attribute(1) = struct('Name', 'long_name'      ,'Value', 'name of station');
   nc.Attribute(2) = struct('Name', 'standard_name'  ,'Value', 'station_name');
   nc_addvar         (OPT.ncfile,nc);
   nc_varput         (OPT.ncfile,nc.Name,D.station_name(:)');clear nc

   nc.Name = 'longitude';
   nc.Datatype     = 'double';
   nc.Dimension    = {};
   nc.Attribute(1) = struct('Name', 'long_name'      ,'Value', 'longitude');
   nc.Attribute(2) = struct('Name', 'standard_name'  ,'Value', 'longitude');
   nc.Attribute(3) = struct('Name', 'units'          ,'Value', 'degrees_east');
   nc_addvar         (OPT.ncfile,nc);
   nc_varput         (OPT.ncfile,nc.Name,D.longitude);clear nc

   nc.Name = 'latitude';
   nc.Datatype     = 'double';
   nc.Dimension    = {};
   nc.Attribute(1) = struct('Name', 'long_name'      ,'Value', 'latitude');
   nc.Attribute(2) = struct('Name', 'standard_name'  ,'Value', 'latitude');
   nc.Attribute(3) = struct('Name', 'units'          ,'Value', 'degrees_north');
   nc_addvar         (OPT.ncfile,nc);
   nc_varput         (OPT.ncfile,nc.Name,D.latitude);clear nc

   % TO DO: connect time to amp/phase

   nc.Name = 'time';
   nc.Datatype     = 'double';
   nc.Dimension    = {'time'};
   nc.Attribute(1) = struct('Name', 'long_name'      ,'Value', 'begin of interval of tidal analysis');
   nc.Attribute(2) = struct('Name', 'standard_name'  ,'Value', 'time');
   nc.Attribute(3) = struct('Name', 'units'          ,'Value', 'days since 1970-01-01 00:00:00 +01:00');
   nc.Attribute(4) = struct('Name', 'bounds'         ,'Value', 'period');
   nc_addvar         (OPT.ncfile,nc);
   nc_varput         (OPT.ncfile,nc.Name,D.time);clear nc

   nc.Name = 'period';
   nc.Datatype     = 'double';
   nc.Dimension    = {'time','bounds'};
   nc.Attribute(1) = struct('Name', 'long_name'      ,'Value', 'begin and end of interval of tidal analysis');
   nc.Attribute(2) = struct('Name', 'standard_name'  ,'Value', 'time');
   nc.Attribute(3) = struct('Name', 'units'          ,'Value', 'days since 1970-01-01 00:00:00 +01:00');
   nc_addvar         (OPT.ncfile,nc);
   nc_varput         (OPT.ncfile,nc.Name,D.period(:)');clear nc % 2D array so shape is relevant

   nc.Name = 'component_name';
   nc.Datatype     = 'char';
   nc.Dimension    = {'frequency','strlen1'};
   nc.Attribute(1) = struct('Name', 'long_name'      ,'Value', 'name of tidal constituent');
   nc_addvar         (OPT.ncfile,nc);
   nc_varput         (OPT.ncfile,nc.Name,D.component_name);clear nc
   
   nc.Name = 'frequency';
   nc.Datatype     = 'double';
   nc.Dimension    = {'frequency'};
   nc.Attribute(1) = struct('Name', 'long_name'      ,'Value', 'frequency');
   nc.Attribute(2) = struct('Name', 'units'          ,'Value', '1/hour');
   nc_addvar         (OPT.ncfile,nc);
   nc_varput         (OPT.ncfile,nc.Name,D.frequency);clear nc
   
   nc.Name = 'amplitude';
   nc.Datatype     = 'double';
   nc.Dimension    = {'frequency'};
   nc.Attribute(1) = struct('Name', 'long_name'      ,'Value', 'amplitude of tidal component');
   nc.Attribute(2) = struct('Name', 'units'          ,'Value', OPT.units);
   nc.Attribute(3) = struct('Name', 'cell_methods'   ,'Value', 'time: period area: point');
   nc_addvar         (OPT.ncfile,nc);
   nc_varput         (OPT.ncfile,nc.Name,D.amplitude);clear nc
   
   nc.Name = 'amplitude_error';
   nc.Datatype     = 'double';
   nc.Dimension    = {'frequency'};
   nc.Attribute(1) = struct('Name', 'long_name'      ,'Value', 'estimate of error of amplitude of tidal component');
   nc.Attribute(2) = struct('Name', 'units'          ,'Value', OPT.units);
   nc.Attribute(3) = struct('Name', 'cell_methods'   ,'Value', 'time: period area: point');
   nc_addvar         (OPT.ncfile,nc);
   nc_varput         (OPT.ncfile,nc.Name,D.phase);clear nc
   
   nc.Name = 'phase';
   nc.Datatype     = 'double';
   nc.Dimension    = {'frequency'};
   nc.Attribute(1) = struct('Name', 'long_name'      ,'Value', 'phase of tidal component');
   nc.Attribute(2) = struct('Name', 'units'          ,'Value', 'degree');
   nc.Attribute(3) = struct('Name', 'cell_methods'   ,'Value', 'time: period area: point');
   nc_addvar         (OPT.ncfile,nc);
   nc_varput         (OPT.ncfile,nc.Name,D.phase);clear nc
   
   nc.Name = 'phase_error';
   nc.Datatype     = 'double';
   nc.Dimension    = {'frequency'};
   nc.Attribute(1) = struct('Name', 'long_name'      ,'Value', 'estimate of error of phase of tidal component');
   nc.Attribute(2) = struct('Name', 'units'          ,'Value', 'degree');
   nc.Attribute(3) = struct('Name', 'cell_methods'   ,'Value', 'time: period area: point');
   nc_addvar         (OPT.ncfile,nc);
   nc_varput         (OPT.ncfile,nc.Name,D.phase);clear nc
   
   nc.Name = 'significance';
   nc.Datatype     = 'int';
   nc.Dimension    = {'frequency'};
   nc.Attribute(1) = struct('Name', 'long_name'      ,'Value',['whether component is significant (1) or not (0)']);
   nc.Attribute(2) = struct('Name', 'flag_values'    ,'Value',[0 1]);
   nc.Attribute(3) = struct('Name', 'flag_meanings'  ,'Value',['"insignificant" "significant(1, snr > ',num2str(OPT.synth),')"']);
   nc_addvar         (OPT.ncfile,nc);
   nc_varput         (OPT.ncfile,nc.Name,int8(D.significance));clear nc
   % TO DO flag_values
   % TO DO flag_meanings
   
   nc.Name = 'snr';
   nc.Datatype     = 'double';
   nc.Dimension    = {'frequency'};
   nc.Attribute(1) = struct('Name', 'long_name'      ,'Value', 'signal to noise ration');
   nc.Attribute(1) = struct('Name', 'comment'        ,'Value', '(amplitude/amplitude_error)^2');
   nc_addvar         (OPT.ncfile,nc);
   nc_varput         (OPT.ncfile,nc.Name,D.snr);clear nc

%% output

   if nargout==1
      varargout = {D};
   end   
