function AcceptPressed=edit(Obj),
AcceptPressed=0;

% define options
AxesTypes={'undefined','2D','3D'};
% Colormaps=xx_colormap;
% TUnits={'days','hours','minutes','seconds'};
% TUnitsNum=[1 24 24*60 24*60*60];

AllItems=handles(ob_ideas(Obj));
MainItem=AllItems(1);

UD=get(MainItem,'userdata');
Info=UD.Info;

XX=xx_constants;

% define uicontrol sizes and figure size
LabelWidth=50;
EditButton=90;
TextWidth=90;

MinMaxWidth=20;
MinMaxEWidth=(EditButton-2*XX.Margin+TextWidth-2*MinMaxWidth)/2;

SmallWidth=50;
SEditWidth=50;

Part1Width=LabelWidth+EditButton+TextWidth+2*XX.Margin;
Part2Width=SmallWidth+SEditWidth+XX.Margin;
Fig_Width=Part1Width+Part2Width+7*XX.Margin;
Fig_Height=6*XX.Margin+5*XX.But.Height+20;

ss = get(0,'ScreenSize');
swidth = ss(3);
sheight = ss(4);
left = (swidth-Fig_Width)/2;
bottom = (sheight-Fig_Height)/2;
rect = [left bottom Fig_Width Fig_Height];

fig=xx_ui_ini('position',rect);

rect = [XX.Margin XX.Margin (Fig_Width-4*XX.Margin)/3 XX.But.Height];
H.Cancel=uicontrol('style','pushbutton', ...
          'position',rect, ...
          'string','cancel', ...
          'parent',fig, ...
          'enable','on', ...
          'callback','stackudf(gcbf,''CommandStack'',0)');

rect(1) = rect(1)+rect(3)+XX.Margin;
H.Preview=uicontrol('style','togglebutton', ...
          'position',rect, ...
          'string','preview', ...
          'parent',fig, ...
          'enable','on', ...
          'callback','stackudf(gcbf,''CommandStack'',1)');

rect(1) = rect(1)+rect(3)+XX.Margin;
H.Accept=uicontrol('style','pushbutton', ...
          'position',rect, ...
          'string','accept', ...
          'parent',fig, ...
          'enable','on', ...
          'callback','stackudf(gcbf,''CommandStack'',2)');

H.Tab=tabs(fig,[XX.Margin, ...
         2*XX.Margin+XX.But.Height, ...
         5*XX.Margin+Part1Width+Part2Width, ...
         3*XX.But.Height+2*XX.Margin+20]);


rect(1) = 2*XX.Margin;
rect(2) = 5*XX.Margin+4*XX.But.Height+20;
rect(3) = LabelWidth;
rect(4) = XX.Txt.Height;
uicontrol('style','text', ...
          'position',rect, ...
          'string','name', ...
          'horizontalalignment','left', ...
          'parent',fig, ...
          'enable','on');

rect(1) = rect(1)+rect(3)+XX.Margin;
rect(3) = Fig_Width-XX.Margin-rect(1);
rect(4) = XX.But.Height;
H.Name=uicontrol('style','edit', ...
          'position',rect, ...
          'string',Info.Name, ...
          'horizontalalignment','left', ...
          'backgroundcolor',XX.Clr.White, ...
          'parent',fig, ...
          'enable','on', ...
          'callback','stackudf(gcbf,''CommandStack'',26)');

XOffset=2*XX.Margin;
YOffset=3*XX.Margin+XX.But.Height;
Offset=[XOffset YOffset 0 0];


% ---

rect=Offset+[0 2*XX.But.Height LabelWidth XX.Txt.Height];
H.AxTLbl=uicontrol('style','text', ...
          'position',rect, ...
          'string','type', ...
          'horizontalalignment','left', ...
          'parent',fig, ...
          'enable','on');

rect=Offset+[LabelWidth+XX.Margin 2*XX.But.Height Part1Width-XX.Margin-LabelWidth XX.But.Height];
H.AxType=uicontrol('style','popupmenu', ...
          'position',rect, ...
          'string',AxesTypes, ...
          'horizontalalignment','right', ...
          'backgroundcolor',XX.Clr.LightGray, ...
          'parent',fig, ...
          'enable','off', ...
          'callback','stackudf(gcbf,''CommandStack'',24)');

rect=Offset+[3*XX.Margin+Part1Width 2*XX.But.Height Part2Width XX.But.Height];
H.Vis=uicontrol('style','checkbox', ...
          'position',rect, ...
          'string','visible', ...
          'parent',fig, ...
          'value',0, ...
          'enable','off', ...
          'callback','stackudf(gcbf,''CommandStack'',25)');

H.Tab=add(H.Tab,'general',[H.AxTLbl H.AxType H.Vis]);

% ---

rect=Offset+[0 0 LabelWidth XX.Txt.Height];
H.X.LblTxt=uicontrol('style','text', ...
          'position',rect, ...
          'string','label', ...
          'horizontalalignment','left', ...
          'parent',fig, ...
          'enable','off');

rect=Offset+[LabelWidth+XX.Margin 0 Part1Width-XX.Margin-LabelWidth XX.But.Height];
H.X.Lbl=uicontrol('style','edit', ...
          'position',rect, ...
          'string','', ...
          'horizontalalignment','right', ...
          'backgroundcolor',XX.Clr.LightGray, ...
          'parent',fig, ...
          'enable','off', ...
          'callback','stackudf(gcbf,''CommandStack'',3)');

rect=Offset+[3*XX.Margin+Part1Width 0 Part2Width XX.But.Height];
uicontrol('style','checkbox', ...
          'position',rect, ...
          'string','', ...
          'parent',fig, ...
          'value',0, ...
          'enable','off', ...
          'visible','off', ...
          'callback','');

rect=Offset+[XX.Margin+LabelWidth XX.But.Height MinMaxWidth XX.Txt.Height];
H.X.Min=uicontrol('style','text', ...
          'position',rect, ...
          'string','min', ...
          'horizontalalignment','right', ...
          'parent',fig, ...
          'enable','off');

rect=Offset+[2*XX.Margin+LabelWidth+MinMaxWidth XX.But.Height MinMaxEWidth XX.But.Height];
H.X.MinV=uicontrol('style','edit', ...
          'position',rect, ...
          'string','', ...
          'horizontalalignment','left', ...
          'backgroundcolor',XX.Clr.LightGray, ...
          'parent',fig, ...
          'enable','off', ...
          'callback','stackudf(gcbf,''CommandStack'',5)');

rect=Offset+[3*XX.Margin+LabelWidth+MinMaxWidth+MinMaxEWidth XX.But.Height MinMaxWidth XX.Txt.Height];
H.X.Max=uicontrol('style','text', ...
          'position',rect, ...
          'string','max', ...
          'horizontalalignment','right', ...
          'parent',fig, ...
          'enable','off');

rect=Offset+[4*XX.Margin+LabelWidth+2*MinMaxWidth+MinMaxEWidth XX.But.Height MinMaxEWidth XX.But.Height];
H.X.MaxV=uicontrol('style','edit', ...
          'position',rect, ...
          'string','', ...
          'horizontalalignment','left', ...
          'backgroundcolor',XX.Clr.LightGray, ...
          'parent',fig, ...
          'enable','off', ...
          'callback','stackudf(gcbf,''CommandStack'',6)');

rect=Offset+[3*XX.Margin+Part1Width XX.But.Height Part2Width XX.But.Height];
uicontrol('style','checkbox', ...
          'position',rect, ...
          'string','', ...
          'parent',fig, ...
          'value',0, ...
          'enable','off', ...
          'visible','off', ...
          'callback','');

rect=Offset+[0 2*XX.But.Height LabelWidth XX.Txt.Height];
H.X.Name=uicontrol('style','text', ...
          'position',rect, ...
          'string','', ...
          'horizontalalignment','left', ...
          'parent',fig, ...
          'enable','off');

rect=Offset+[LabelWidth+XX.Margin 2*XX.But.Height EditButton+XX.Margin+TextWidth XX.But.Height];
H.X.Auto=uicontrol('style','checkbox', ...
          'position',rect, ...
          'string','automatic', ...
          'parent',fig, ...
          'value',0, ...
          'enable','off', ...
          'callback','stackudf(gcbf,''CommandStack'',8)');

rect=Offset+[3*XX.Margin+Part1Width 2*XX.But.Height Part2Width XX.But.Height];
H.X.Grid=uicontrol('style','checkbox', ...
          'position',rect, ...
          'string','grid', ...
          'parent',fig, ...
          'value',0, ...
          'enable','off', ...
          'callback','stackudf(gcbf,''CommandStack'',9)');

H.Tab=add(H.Tab,'x-axis',[H.X.LblTxt H.X.Lbl H.X.Min H.X.MinV H.X.Max H.X.MaxV H.X.Name H.X.Auto H.X.Grid]);

% ---

rect=Offset+[0 0 LabelWidth XX.Txt.Height];
H.Y.LblTxt=uicontrol('style','text', ...
          'position',rect, ...
          'string','label', ...
          'horizontalalignment','left', ...
          'parent',fig, ...
          'enable','off');

rect=Offset+[LabelWidth+XX.Margin 0 Part1Width-XX.Margin-LabelWidth XX.But.Height];
H.Y.Lbl=uicontrol('style','edit', ...
          'position',rect, ...
          'string','', ...
          'horizontalalignment','right', ...
          'backgroundcolor',XX.Clr.LightGray, ...
          'parent',fig, ...
          'enable','off', ...
          'callback','stackudf(gcbf,''CommandStack'',10)');

rect=Offset+[3*XX.Margin+Part1Width 0 Part2Width XX.But.Height];
uicontrol('style','checkbox', ...
          'position',rect, ...
          'string','', ...
          'parent',fig, ...
          'value',0, ...
          'enable','off', ...
          'visible','off', ...
          'callback','');

rect=Offset+[XX.Margin+LabelWidth XX.But.Height MinMaxWidth XX.Txt.Height];
H.Y.Min=uicontrol('style','text', ...
          'position',rect, ...
          'string','min', ...
          'horizontalalignment','right', ...
          'parent',fig, ...
          'enable','off');

rect=Offset+[2*XX.Margin+LabelWidth+MinMaxWidth XX.But.Height MinMaxEWidth XX.But.Height];
H.Y.MinV=uicontrol('style','edit', ...
          'position',rect, ...
          'string','', ...
          'horizontalalignment','left', ...
          'backgroundcolor',XX.Clr.LightGray, ...
          'parent',fig, ...
          'enable','off', ...
          'callback','stackudf(gcbf,''CommandStack'',12)');

rect=Offset+[3*XX.Margin+LabelWidth+MinMaxWidth+MinMaxEWidth XX.But.Height MinMaxWidth XX.Txt.Height];
H.Y.Max=uicontrol('style','text', ...
          'position',rect, ...
          'string','max', ...
          'horizontalalignment','right', ...
          'parent',fig, ...
          'enable','off');

rect=Offset+[4*XX.Margin+LabelWidth+2*MinMaxWidth+MinMaxEWidth XX.But.Height MinMaxEWidth XX.But.Height];
H.Y.MaxV=uicontrol('style','edit', ...
          'position',rect, ...
          'string','', ...
          'horizontalalignment','left', ...
          'backgroundcolor',XX.Clr.LightGray, ...
          'parent',fig, ...
          'enable','off', ...
          'callback','stackudf(gcbf,''CommandStack'',13)');

rect=Offset+[3*XX.Margin+Part1Width XX.But.Height Part2Width XX.But.Height];
uicontrol('style','checkbox', ...
          'position',rect, ...
          'string','', ...
          'parent',fig, ...
          'value',0, ...
          'enable','off', ...
          'visible','off', ...
          'callback','');

rect=Offset+[0 2*XX.But.Height LabelWidth XX.Txt.Height];
H.Y.Name=uicontrol('style','text', ...
          'position',rect, ...
          'string','', ...
          'horizontalalignment','left', ...
          'parent',fig, ...
          'enable','off');

rect=Offset+[LabelWidth+XX.Margin 2*XX.But.Height EditButton+XX.Margin+TextWidth XX.But.Height];
H.Y.Auto=uicontrol('style','checkbox', ...
          'position',rect, ...
          'string','automatic', ...
          'parent',fig, ...
          'value',0, ...
          'enable','off', ...
          'callback','stackudf(gcbf,''CommandStack'',15)');

rect=Offset+[3*XX.Margin+Part1Width 2*XX.But.Height Part2Width XX.But.Height];
H.Y.Grid=uicontrol('style','checkbox', ...
          'position',rect, ...
          'string','grid', ...
          'parent',fig, ...
          'value',0, ...
          'enable','off', ...
          'callback','stackudf(gcbf,''CommandStack'',16)');

H.Tab=add(H.Tab,'y-axis',[H.Y.LblTxt H.Y.Lbl H.Y.Min H.Y.MinV H.Y.Max H.Y.MaxV H.Y.Name H.Y.Auto H.Y.Grid]);

% ---

rect=Offset+[0 0 LabelWidth XX.Txt.Height];
H.Z.LblTxt=uicontrol('style','text', ...
          'position',rect, ...
          'string','label', ...
          'horizontalalignment','left', ...
          'parent',fig, ...
          'enable','off');

rect=Offset+[LabelWidth+XX.Margin 0 Part1Width-XX.Margin-LabelWidth XX.But.Height];
H.Z.Lbl=uicontrol('style','edit', ...
          'position',rect, ...
          'string','', ...
          'horizontalalignment','right', ...
          'backgroundcolor',XX.Clr.LightGray, ...
          'parent',fig, ...
          'enable','off', ...
          'callback','stackudf(gcbf,''CommandStack'',17)');

rect=Offset+[3*XX.Margin+Part1Width 0 Part2Width XX.But.Height];
uicontrol('style','checkbox', ...
          'position',rect, ...
          'string','', ...
          'parent',fig, ...
          'value',0, ...
          'enable','off', ...
          'visible','off', ...
          'callback','');

rect=Offset+[XX.Margin+LabelWidth XX.But.Height MinMaxWidth XX.Txt.Height];
H.Z.Min=uicontrol('style','text', ...
          'position',rect, ...
          'string','min', ...
          'horizontalalignment','right', ...
          'parent',fig, ...
          'enable','off');

rect=Offset+[2*XX.Margin+LabelWidth+MinMaxWidth XX.But.Height MinMaxEWidth XX.But.Height];
H.Z.MinV=uicontrol('style','edit', ...
          'position',rect, ...
          'string','', ...
          'horizontalalignment','left', ...
          'backgroundcolor',XX.Clr.LightGray, ...
          'parent',fig, ...
          'enable','off', ...
          'callback','stackudf(gcbf,''CommandStack'',19)');

rect=Offset+[3*XX.Margin+LabelWidth+MinMaxWidth+MinMaxEWidth XX.But.Height MinMaxWidth XX.Txt.Height];
H.Z.Max=uicontrol('style','text', ...
          'position',rect, ...
          'string','max', ...
          'horizontalalignment','right', ...
          'parent',fig, ...
          'enable','off');

rect=Offset+[4*XX.Margin+LabelWidth+2*MinMaxWidth+MinMaxEWidth XX.But.Height MinMaxEWidth XX.But.Height];
H.Z.MaxV=uicontrol('style','edit', ...
          'position',rect, ...
          'string','', ...
          'horizontalalignment','left', ...
          'backgroundcolor',XX.Clr.LightGray, ...
          'parent',fig, ...
          'enable','off', ...
          'callback','stackudf(gcbf,''CommandStack'',20)');

rect=Offset+[3*XX.Margin+Part1Width XX.But.Height Part2Width XX.But.Height];
uicontrol('style','checkbox', ...
          'position',rect, ...
          'string','', ...
          'parent',fig, ...
          'value',0, ...
          'enable','off', ...
          'visible','off', ...
          'callback','');

rect=Offset+[0 2*XX.But.Height LabelWidth XX.Txt.Height];
H.Z.Name=uicontrol('style','text', ...
          'position',rect, ...
          'string','', ...
          'horizontalalignment','left', ...
          'parent',fig, ...
          'enable','off');

rect=Offset+[LabelWidth+XX.Margin 2*XX.But.Height EditButton+XX.Margin+TextWidth XX.But.Height];
H.Z.Auto=uicontrol('style','checkbox', ...
          'position',rect, ...
          'string','automatic', ...
          'parent',fig, ...
          'value',0, ...
          'enable','off', ...
          'callback','stackudf(gcbf,''CommandStack'',22)');

rect=Offset+[3*XX.Margin+Part1Width 2*XX.But.Height Part2Width XX.But.Height];
H.Z.Grid=uicontrol('style','checkbox', ...
          'position',rect, ...
          'string','grid', ...
          'parent',fig, ...
          'value',0, ...
          'enable','off', ...
          'callback','stackudf(gcbf,''CommandStack'',23)');

H.Tab=add(H.Tab,'z-axis',[H.Z.LblTxt H.Z.Lbl H.Z.Min H.Z.MinV H.Z.Max H.Z.MaxV H.Z.Name H.Z.Auto H.Z.Grid]);

%--

% initialize edit figure

AType=strmatch(Info.Type,AxesTypes);
if ~isempty(AType),
  set(H.AxType,'value',AType,'backgroundcolor',XX.Clr.White,'enable','on');
end;
set(H.Vis,'value',Info.Visible,'enable','on');

switch Info.Type,
case 'undefined',
  axset(H.X,'off');
  axset(H.Y,'off');
  axset(H.Z,'off');
case '2D',
  axset(H.X,'x-axes',Info.X);
  axset(H.Y,'y-axes',Info.Y);
  axset(H.Z,'off');
case '3D',
  axset(H.X,'x-axes',Info.X);
  axset(H.Y,'y-axes',Info.Y);
  axset(H.Z,'z-axes',Info.Z);
end;

% process events

set(fig,'visible','on');
setudf(fig,'CommandStack',{});

gui_quit=0;
changed=0;
OrigInfo=Info;
while ~gui_quit,

  if ishandle(fig),
    if isempty(getudf(fig,'CommandStack')),
      waitforudf(fig,'CommandStack');
    end;
  end;
  if ishandle(fig),
    stack=getudf(fig,'CommandStack');
    setudf(fig,'CommandStack',{});
  else,
    uiwait(msgbox('Unexpected removal of Edit window!','modal'));
    gui_quit=1;
  end;

  while ~isempty(stack),
    Cmd=stack{1};
    stack=stack(2:size(stack,1),:);

    switch Cmd,
    case 0, % cancel
      if changed,
        UD.Info=OrigInfo;
        set(MainItem,'userdata',UD);
        set(fig,'pointer','watch');
        refresh(Obj);
        set(fig,'pointer','arrow');
      end;
      gui_quit=1;
    case 1, % preview
      changed=1;
      UD.Info=Info;
      set(MainItem,'userdata',UD);
      set(fig,'pointer','watch');
      refresh(Obj);
      set(fig,'pointer','arrow');
      set(H.Preview,'value',0);
    case 2, % accept
      AcceptPressed=1;
      UD.Info=Info;
      UD.Name=UD.Info.Name;
      set(MainItem,'userdata',UD);
      set(fig,'pointer','watch');
      refresh(Obj);
      set(fig,'pointer','arrow');
      gui_quit=1;
    case 3, % xlabel
      Info.X.Lbl=get(H.X.Lbl,'string');
    case 5, % xlim(1)
      M=eval(get(H.X.MinV,'string'),'NaN');
      Info.X.Lim(1)=M;
      set(H.X.MinV,'string',num2str(M));
    case 6, % xlim(2)
      M=eval(get(H.X.MaxV,'string'),'NaN');
      Info.X.Lim(2)=M;
      set(H.X.MaxV,'string',num2str(M));
    case 8, % xautomatic
      if get(H.X.Auto,'value'), % 1
        Info.X.Lim='auto';
      else, % 0
        Info.X.Lim=[0 1];
      end;
      axset(H.X,'x-axes',Info.X);
    case 9, % xgrid
      Info.X.Grid=get(H.X.Grid,'value');
    case 10, % ylabel
      Info.Y.Lbl=get(H.Y.Lbl,'string');
    case 12, % ylim(1)
      M=eval(get(H.Y.MinV,'string'),'NaN');
      Info.Y.Lim(1)=M;
      set(H.Y.MinV,'string',num2str(M));
    case 13, % ylim(2)
      M=eval(get(H.Y.MaxV,'string'),'NaN');
      Info.Y.Lim(2)=M;
      set(H.Y.MaxV,'string',num2str(M));
    case 15, % yautomatic
      if get(H.Y.Auto,'value'), % 1
        Info.Y.Lim='auto';
      else, % 0
        Info.Y.Lim=[0 1];
      end;
      axset(H.Z,'y-axes',Info.X);
    case 16, % ygrid
      Info.Y.Grid=get(H.Y.Grid,'value');
    case 17, % zlabel
      Info.Z.Lbl=get(H.Z.Lbl,'string');
    case 19, % zlim(1)
      M=eval(get(H.Z.MinV,'string'),'NaN');
      Info.Z.Lim(1)=M;
      set(H.Z.MinV,'string',num2str(M));
    case 20, % zlim(2)
      M=eval(get(H.Z.MaxV,'string'),'NaN');
      Info.Z.Lim(2)=M;
      set(H.Z.MaxV,'string',num2str(M));
    case 22, % zautomatic
      if get(H.Z.Auto,'value'), % 1
        Info.Z.Lim='auto';
      else, % 0
        Info.Z.Lim=[0 1];
      end;
      axset(H.Z,'z-axes',Info.X);
    case 23, % zgrid
      Info.X.Grid=get(H.X.Grid,'value');
    case 24, % type
      Info.Type=AxesTypes{get(H.AxType,'value')};
      switch Info.Type,
      case 'undefined',
        axset(H.X,'off');
        axset(H.Y,'off');
        axset(H.Z,'off');
      case '2D',
        axset(H.X,'x-axes',Info.X);
        axset(H.Y,'y-axes',Info.Y);
        axset(H.Z,'off');
      case '3D',
        axset(H.X,'x-axes',Info.X);
        axset(H.Y,'y-axes',Info.Y);
        axset(H.Z,'z-axes',Info.Z);
      end;
    case 25, % visible
      Info.Visible=get(H.Vis,'value');
    case 26, % name
      Info.Name=get(H.Name,'string');
    otherwise,
      uiwait(msgbox(num2str(Cmd),'modal'));
      keyboard
    end;
  
  end;
end;
delete(fig);

function axset(H,Str,Info);
XX=xx_constants;
if nargin==2, % axset(H,'off')
  set(H.Name,'string',Str,'enable','off');
  set(H.Auto,'enable','off');
  set(H.Grid,'enable','off');
  set(H.LblTxt,'enable','off');
  set(H.Lbl,'backgroundcolor',XX.Clr.LightGray,'enable','off','string','');
else,
  set(H.Name,'string',Str,'enable','on');
  if strcmp(Info.Lim,'auto'),
    set(H.Auto,'value',1,'enable','on');
  else,
    set(H.Auto,'value',0,'enable','on');
    set(H.Min,'enable','on');
    set(H.MinV,'string',num2str(Info.Lim(1)),'backgroundcolor',XX.Clr.White,'enable','on');
    set(H.Min,'enable','on');
    set(H.MaxV,'string',num2str(Info.Lim(2)),'backgroundcolor',XX.Clr.White,'enable','on');
  end;
  set(H.Grid,'value',Info.Grid,'enable','on');
  set(H.LblTxt,'enable','on');
  set(H.Lbl,'backgroundcolor',XX.Clr.White,'enable','on','string',Info.Lbl);
end;

function Str=StrFrames(N,Str1,Str2),
switch nargin,
case 1,
  Str1='frame';
  Str2='frames';
case 2,
  Str2=[Str1 's'];
end;
if N==1,
  Str=['1 ',Str1];
else,
  Str=[num2str(N) ' ' Str2];
end;