function [rgb,OKpressed] = md_color(rgb_def,ttl),
% MD_COLOR Color selection dialog box.
%    C = MD_COLOR(ARG, 'dialogTitle') displays a dialog box for the 
%    user to fill in, and applies the selected color to the input 
%    graphics object.
% 
%    The parameters are optional and may be specified in any order.
% 
%    ARG may be either a handle to a graphics object or an RGB triple.
%    If a handle is used, it must specify a graphics object that supports 
%    color.  If RGB is used, it must be a valid RGB triple (e.g., [1 0 0] 
%    for red).  In both cases, the color specified is used to initialize
%    the dialog box.  If no initial RGB is specified, the dialog box
%    initializes the color to white.
%
%    If parameter 'dialogTitle' is used, it is a string containing the 
%    title of the dialog box.
% 
%    The output value C is the selected RGB triple.  If the input parameter
%    is a handle, the graphics object's color is set to the RGB color 
%    selected.
% 
%    If the user presses Cancel from the dialog box, or if any error 
%    occurs, the output value is set to the input RGB triple
%    (white by default). To check whether the default color was selected
%    or cancel was pressed, use
%
%       [C,OKpressed] = ...
% 
%    Example:
%            hText = text(.5,.5,'Hello World');
%            C = md_color(hText, 'Set Text Color')

%    Same functionality as UISETCOLOR but it does not crash on SGI64 :)
%
%    Created by H.R.A.Jagers, Dec. 8th 1999
%               University of Twente, The Netherlands
%               WL | Delft Hydraulics, The Netherlands
            
handle=[];
ttl='Select color ...';
if nargin==0,
  rgb_def=[1 1 1];
elseif nargin==1,
  if ischar(rgb_def),
    ttl=rgb_def;
    rgb_def=[1 1 1];
  end;
elseif nargin==2,
  if ischar(rgb_def),
    handle=ttl;     %
    ttl=rgb_def;    % handle locally used as temporary variable
    rgb_def=handle; %
    handle=[];
  end;
end;
if isequal(size(rgb_def),[1 1]) & ishandle(rgb_def),
  Props=get(rgb_def);
  handle=rgb_def;
  if isfield(Props,'Color'),
    rgb_def=Props.Color;
    ctype='Color';
  elseif isfield(Props,'ForeGroundColor'),
    rgb_def=Props.ForeGroundColor;
    ctype='ForeGroundColor';
  else,
    error(sprintf(['Color selection is not supported for %s objects, but only for\n' ...
                   'objects with Color or ForeGroundColor properties.'],Props.Type));
  end;
elseif ~isnumeric(rgb_def) | ~isequal(size(rgb_def),[1 3]),
  error('RGB Color must be a 3 element numeric vector.');
elseif any(isnan(rgb_def) | (rgb_def>1) | (rgb_def<0)),
  error('RGB vector contains NaN, or element out of range 0.0 <= value <= 1.0.');
end;
rgb=rgb_def;
OKpressed=0;

Fig_Width=285;
Fig_Height=244;

ss = get(0,'ScreenSize');
swidth = ss(3);
sheight = ss(4);
left = (swidth-Fig_Width)/2;
bottom = (sheight-Fig_Height)/2;
rect = [left bottom Fig_Width Fig_Height];

fig = figure(...
	'Position',rect, ...
	'Renderer','zbuffer', ...
	'NumberTitle','off', ...
	'IntegerHandle','off', ...
	'Name',ttl, ...
	'MenuBar','none', ...
	'Resize','off', ...
	'Visible','off', ...
	'Handlevisibility','off', ...
	'Tag','Fig1');
	
ax = axes('Parent',fig, ...
	'CameraUpVector',[0 1 0], ...
	'Color',[1 1 1], ...
	'DataAspectRatio',[1 1 1], ...
	'Units','pixels', ...
	'Position',[15 90 145 145], ...
	'Tag','Axes1', ...
	'Visible','off');

N=32;
n=transpose(0:(N-1))/(N-1);
x=sin(n*2*pi);
y=cos(n*2*pi);
z=zeros(size(x));
w=ones(size(x));
Srf=surface([x z],[y z],[z z],ones([N 2 3]), ...
        'parent',ax, ...
        'facecolor','interp', ...
        'edgecolor','none', ...
        'buttondownfcn','stackudf(gcbf,''CommandStack'',6)');
CDot=line(0,0, ...
        'parent',ax, ...
        'marker','.', ...
        'color','k', ...
        'erasemode','xor', ...
        'buttondownfcn','stackudf(gcbf,''CommandStack'',6)');

% ----------------------------------------------- VERTICAL SLIDERS
	
uicontrol('Parent',fig, ...
	'Units','pixels', ...
	'Position',[180 218 20 17], ...
	'String','H', ...
	'Style','text');
H.Sl = uicontrol('Parent',fig, ...
	'Units','pixels', ...
	'Position',[180 115 20 100], ...
	'Min',0, ...
	'Max',255, ...
	'Value',0, ...
	'Style','slider');
H.Val = uicontrol('Parent',fig, ...
	'Units','pixels', ...
	'BackgroundColor',[1 1 1], ...
	'HorizontalAlignment','right', ...
	'Position',[175 90 30 20], ...
	'String','0', ...
	'Style','edit');

uicontrol('Parent',fig, ...
	'Units','pixels', ...
	'Position',[215 218 20 17], ...
	'String','S', ...
	'Style','text');
S.Sl = uicontrol('Parent',fig, ...
	'Units','pixels', ...
	'Position',[215 115 20 100], ...
	'Min',0, ...
	'Max',255, ...
	'Value',0, ...
	'Style','slider');
S.Val = uicontrol('Parent',fig, ...
	'Units','pixels', ...
	'BackgroundColor',[1 1 1], ...
	'HorizontalAlignment','right', ...
	'Position',[210 90 30 20], ...
	'String','0', ...
	'Style','edit');

uicontrol('Parent',fig, ...
	'Units','pixels', ...
	'Position',[250 218 20 17], ...
	'String','V', ...
	'Style','text');
V.Sl = uicontrol('Parent',fig, ...
	'Units','pixels', ...
	'Position',[250 115 20 100], ...
	'Min',0, ...
	'Max',255, ...
	'Value',0, ...
	'Style','slider');
V.Val = uicontrol('Parent',fig, ...
	'Units','pixels', ...
	'BackgroundColor',[1 1 1], ...
	'HorizontalAlignment','right', ...
	'Position',[245 90 30 20], ...
	'String','0', ...
	'Style','edit');

% ----------------------------------------------- HORIZONTAL SLIDERS
	
uicontrol('Parent',fig, ...
	'Units','pixels', ...
	'Position',[10 60 20 17], ...
	'String','R', ...
	'Style','text');
R.Sl = uicontrol('Parent',fig, ...
	'Units','pixels', ...
	'Position',[30 60 100 20], ...
	'Min',0, ...
	'Max',255, ...
	'Value',0, ...
	'Style','slider');
R.Val = uicontrol('Parent',fig, ...
	'Units','pixels', ...
	'BackgroundColor',[1 1 1], ...
	'HorizontalAlignment','right', ...
	'Position',[135 60 30 20], ...
	'String','0', ...
	'Style','edit');

uicontrol('Parent',fig, ...
	'Units','pixels', ...
	'Position',[10 35 20 17], ...
	'String','G', ...
	'Style','text');
G.Sl = uicontrol('Parent',fig, ...
	'Units','pixels', ...
	'Position',[30 35 100 20], ...
	'Min',0, ...
	'Max',255, ...
	'Value',0, ...
	'Style','slider');
G.Val = uicontrol('Parent',fig, ...
	'Units','pixels', ...
	'BackgroundColor',[1 1 1], ...
	'HorizontalAlignment','right', ...
	'Position',[135 35 30 20], ...
	'String','0', ...
	'Style','edit');

uicontrol('Parent',fig, ...
	'Units','pixels', ...
	'Position',[10 10 20 17], ...
	'String','B', ...
	'Style','text');
B.Sl = uicontrol('Parent',fig, ...
	'Units','pixels', ...
	'Position',[30 10 100 20], ...
	'Min',0, ...
	'Max',255, ...
	'Value',0, ...
	'Style','slider');
B.Val = uicontrol('Parent',fig, ...
	'Units','pixels', ...
	'BackgroundColor',[1 1 1], ...
	'HorizontalAlignment','right', ...
	'Position',[135 10 30 20], ...
	'String','0', ...
	'Style','edit');

% ----------------------------------------------- PUSHBUTTONS
	
CBox = uicontrol('Parent',fig, ...
        'Style','edit', ...
	'Units','pixels', ...
	'backgroundcolor',rgb, ...
	'String','', ...
	'enable','inactive', ...
	'Position',[175 60 100 20]);
uicontrol('Parent',fig, ...
	'Units','pixels', ...
	'String','Cancel', ...
	'Position',[175 35 100 20], ...
        'callback','stackudf(gcbf,''CommandStack'',0)');
uicontrol('Parent',fig, ...
	'Units','pixels', ...
	'String','OK', ...
	'Position',[175 10 100 20], ...
        'callback','stackudf(gcbf,''CommandStack'',1)');

set([R.Sl G.Sl B.Sl], ...
        'callback','stackudf(gcbf,''CommandStack'',2)');
set([H.Sl S.Sl V.Sl], ...
        'callback','stackudf(gcbf,''CommandStack'',3)');
set([R.Val G.Val B.Val], ...
        'callback','stackudf(gcbf,''CommandStack'',4)');
set([H.Val S.Val V.Val], ...
        'callback','stackudf(gcbf,''CommandStack'',5)');

set(fig,'visible','on');
setudf(fig,'CommandStack',{});

gui_quit=0;
stack={};
while ~gui_quit,
  RGB=round(rgb*255);
  set(R.Sl,'value',RGB(1)); set(R.Val,'string',sprintf('%i',RGB(1)));
  set(G.Sl,'value',RGB(2)); set(G.Val,'string',sprintf('%i',RGB(2)));
  set(B.Sl,'value',RGB(3)); set(B.Val,'string',sprintf('%i',RGB(3)));
  hsv=rgb2hsv(rgb);
  HSV=round(hsv*255);
  set(H.Sl,'value',HSV(1)); set(H.Val,'string',sprintf('%i',HSV(1)));
  set(S.Sl,'value',HSV(2)); set(S.Val,'string',sprintf('%i',HSV(2)));
  set(V.Sl,'value',HSV(3)); set(V.Val,'string',sprintf('%i',HSV(3)));
  set(Srf,'cdata',hsv2rgb(reshape([n z w z hsv(3)*w hsv(3)*w],[N 2 3])));
  set(CDot,'xdata',hsv(2)*sin(2*pi*hsv(1)),'ydata',hsv(2)*cos(2*pi*hsv(1)));
  set(CBox,'backgroundcolor',rgb);

  if ishandle(fig),
    if isempty(getudf(fig,'CommandStack')),
      waitforudf(fig,'CommandStack');
    end;
  end;
  if ishandle(fig),
    stack=getudf(fig,'CommandStack');
    setudf(fig,'CommandStack',{});
  else,
    rgb=rgb_def;
    gui_quit=1;
  end;

  while ~isempty(stack),
    Cmd=stack{1};
    stack=stack(2:size(stack,1),:);
    switch Cmd,
    case 0, % cancel
      gui_quit=1;
      rgb=rgb_def;
    case 1, % OK
      gui_quit=1;
      OKpressed=1;
    case 2, % RGB sliders
      RGB=[get(R.Sl,'value') get(G.Sl,'value') get(B.Sl,'value')];
      rgb=RGB/255;
    case 3, % HSV sliders
      HSV=[get(H.Sl,'value') get(S.Sl,'value') get(V.Sl,'value')];
      hsv=HSV/255; rgb=hsv2rgb(hsv);
    case 4, % RGB edit
      RR=sscanf(get(R.Val,'string'),'%i'); RR=max(0,min(RR,255));
      GG=sscanf(get(G.Val,'string'),'%i'); GG=max(0,min(GG,255));
      BB=sscanf(get(B.Val,'string'),'%i'); BB=max(0,min(BB,255));
      RGB=[RR GG BB];
      rgb=RGB/255;
    case 5, % HSV edit
      HH=sscanf(get(H.Val,'string'),'%i'); HH=max(0,min(HH,255));
      SS=sscanf(get(S.Val,'string'),'%i'); SS=max(0,min(SS,255));
      VV=sscanf(get(V.Val,'string'),'%i'); VV=max(0,min(VV,255));
      HSV=[HH SS VV];
      hsv=HSV/255; rgb=hsv2rgb(hsv);
    case 6, % surface plot
      Pnt=get(ax,'currentpoint');
      hsv(2)=sqrt(Pnt(1,1)^2+Pnt(1,2)^2);
      hsv(1)=atan2(Pnt(1,1),Pnt(1,2))/(2*pi);
      if hsv(1)<0, hsv(1)=hsv(1)+1; end;
      hsv=min(hsv,1);
      rgb=hsv2rgb(hsv);
    end;
  end;
end;
if ishandle(fig), delete(fig); end;
if ~isempty(handle),
  set(handle,ctype,rgb);
end;