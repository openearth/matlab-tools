function AcceptPressed=edit(Obj),
Colormaps=xx_colormap;
TUnits={'days','hours','minutes','seconds'};
TUnitsNum=[1 24 24*60 24*60*60];
% 'unlit dots' works incorrect in Matlab 5.2.1 with renderer set to zbuffer
LModes={'unlit dots','unlit mesh','dull lit mesh','shiny lit mesh','unlit surface','dull lit surf','shiny lit surf'};
AcceptPressed=0;

AllItems=handles(ob_ideas(Obj));
MainItem=AllItems(1);

UD=get(MainItem,'userdata');
Info=UD.Info;

XX=xx_constants;

LabelWidth=30;
RadioButton=18;
EditButton=90;
TextWidth=90;

MinMaxWidth=20;
MinMaxEWidth=(EditButton-2*XX.Margin+TextWidth-2*MinMaxWidth)/2;

SmallWidth=50;
SEditWidth=50;

Part1Width=LabelWidth+RadioButton+EditButton+TextWidth+2*XX.Margin;
Part2Width=SmallWidth+SEditWidth+XX.Margin;
Fig_Width=Part1Width+Part2Width+7*XX.Margin;
Fig_Height=15*XX.Margin+14*XX.But.Height;

ss = get(0,'ScreenSize');
swidth = ss(3);
sheight = ss(4);
left = (swidth-Fig_Width)/2;
bottom = (sheight-Fig_Height)/2;
rect = [left bottom Fig_Width Fig_Height];

fig=xx_ui_ini('position',rect);

Ax=axes( ...
   'units','pixels','position',[1 1 Fig_Width Fig_Height], ...
   'xlim',[0 Fig_Width-1],'ylim',[0 Fig_Height-1], ...
   'visible','off', ...
   'parent',fig);


rect = [XX.Margin XX.Margin (Fig_Width-4*XX.Margin)/3 XX.But.Height];
H.Cancel=uicontrol('style','pushbutton', ...
          'position',rect, ...
          'string','cancel', ...
          'parent',fig, ...
          'enable','on', ...
          'callback','stackudf(gcbf,''CommandStack'',0)');

rect(1) = rect(1)+rect(3)+XX.Margin;
H.Preview=uicontrol('style','togglebutton', ...
          'position',rect, ...
          'string','preview', ...
          'parent',fig, ...
          'enable','on', ...
          'callback','stackudf(gcbf,''CommandStack'',1)');

rect(1) = rect(1)+rect(3)+XX.Margin;
H.Accept=uicontrol('style','pushbutton', ...
          'position',rect, ...
          'string','accept', ...
          'parent',fig, ...
          'enable','on', ...
          'callback','stackudf(gcbf,''CommandStack'',2)');

% ---
xx_border3d(XX.Margin, ...
         2*XX.Margin+XX.But.Height, ...
         2*XX.Margin+Part1Width, ...
         3*XX.But.Height+2*XX.Margin, ...
         'parent',Ax);

xx_border3d(4*XX.Margin+Part1Width, ...
         2*XX.Margin+XX.But.Height, ...
         2*XX.Margin+Part2Width, ...
         3*XX.But.Height+2*XX.Margin, ...
         'parent',Ax);

rect(1) = 2*XX.Margin;
rect(2) = rect(2)+rect(4)+2*XX.Margin;
rect(3) = LabelWidth;
rect(4) = XX.Txt.Height;
H.TUnitTxt=uicontrol('style','text', ...
          'position',rect, ...
          'string','units', ...
          'horizontalalignment','left', ...
          'parent',fig, ...
          'enable','off');

rect(1) = rect(1)+rect(3)+XX.Margin+RadioButton;
rect(3) = EditButton;
rect(4) = XX.But.Height;
H.TUnits=uicontrol('style','popupmenu', ...
          'position',rect, ...
          'string',TUnits, ...
          'horizontalalignment','left', ...
          'backgroundcolor',XX.Clr.LightGray, ...
          'parent',fig, ...
          'enable','off', ...
          'callback','stackudf(gcbf,''CommandStack'',3)');

rect(1) = rect(1)+rect(3)+TextWidth+4*XX.Margin;;
rect(3) = SmallWidth;
H.TShown=uicontrol('style','radiobutton', ...
          'position',rect, ...
          'string','time', ...
          'parent',fig, ...
          'value',0, ...
          'enable','off', ...
          'callback','stackudf(gcbf,''CommandStack'',4)');

rect(1) = rect(1)+rect(3)+XX.Margin;
rect(3) = SEditWidth;
H.TShownE=uicontrol('style','edit', ...
          'position',rect, ...
          'string','', ...
          'backgroundcolor',XX.Clr.LightGray, ...
          'horizontalalignment','left', ...
          'parent',fig, ...
          'enable','off', ...
          'callback','stackudf(gcbf,''CommandStack'',5)');

rect(1) = 2*XX.Margin;
rect(2) = rect(2)+rect(4);
rect(3) = LabelWidth;
rect(4) = XX.Txt.Height;
H.TRange=uicontrol('style','text', ...
          'position',rect, ...
          'string','range', ...
          'horizontalalignment','left', ...
          'parent',fig, ...
          'enable','off');

rect(1) = rect(1)+rect(3)+RadioButton+XX.Margin;
rect(3) = MinMaxWidth;
rect(4) = XX.Txt.Height;
H.TMin=uicontrol('style','text', ...
          'position',rect, ...
          'string','min', ...
          'horizontalalignment','right', ...
          'parent',fig, ...
          'enable','off');

rect(1) = rect(1)+rect(3)+XX.Margin;
rect(3) = MinMaxEWidth;
rect(4) = XX.But.Height;
H.TMinV=uicontrol('style','edit', ...
          'position',rect, ...
          'string','', ...
          'horizontalalignment','left', ...
          'backgroundcolor',XX.Clr.LightGray, ...
          'parent',fig, ...
          'enable','off', ...
          'callback','stackudf(gcbf,''CommandStack'',6)');

rect(1) = rect(1)+rect(3)+XX.Margin;
rect(3) = MinMaxWidth;
rect(4) = XX.Txt.Height;
H.TMax=uicontrol('style','text', ...
          'position',rect, ...
          'string','max', ...
          'horizontalalignment','right', ...
          'parent',fig, ...
          'enable','off');

rect(1) = rect(1)+rect(3)+XX.Margin;
rect(3) = MinMaxEWidth;
rect(4) = XX.But.Height;
H.TMaxV=uicontrol('style','edit', ...
          'position',rect, ...
          'string','', ...
          'horizontalalignment','left', ...
          'backgroundcolor',XX.Clr.LightGray, ...
          'parent',fig, ...
          'enable','off', ...
          'callback','stackudf(gcbf,''CommandStack'',7)');

rect(1) = rect(1)+rect(3)+3*XX.Margin;
rect(3) = SmallWidth;
H.FShown=uicontrol('style','radiobutton', ...
          'position',rect, ...
          'string','frame', ...
          'parent',fig, ...
          'value',0, ...
          'enable','off', ...
          'callback','stackudf(gcbf,''CommandStack'',8)');

rect(1) = rect(1)+rect(3)+XX.Margin;
rect(3) = SEditWidth;
H.FShownE=uicontrol('style','edit', ...
          'position',rect, ...
          'string','', ...
          'horizontalalignment','left', ...
          'backgroundcolor',XX.Clr.LightGray, ...
          'parent',fig, ...
          'enable','off', ...
          'callback','stackudf(gcbf,''CommandStack'',9)');

rect(1) = 2*XX.Margin;
rect(2) = rect(2)+rect(4);
rect(3) = LabelWidth;
rect(4) = XX.Txt.Height;
uicontrol('style','text', ...
          'position',rect, ...
          'string','time', ...
          'horizontalalignment','left', ...
          'parent',fig, ...
          'enable','on');

rect(1) = rect(1)+rect(3)+RadioButton+XX.Margin;
rect(3) = EditButton;
rect(4) = XX.But.Height;
H.EdTime=uicontrol('style','pushbutton', ...
          'position',rect, ...
          'string','edit stream', ...
          'parent',fig, ...
          'enable','on', ...
          'callback','stackudf(gcbf,''CommandStack'',10)');

rect(1) = rect(1)+rect(3)+XX.Margin;
rect(3) = TextWidth;
rect(4) = XX.Txt.Height;
H.NTimes=uicontrol('style','text', ...
          'position',rect, ...
          'string',StrFrames(Info.TStream.NumberOfFields), ...
          'horizontalalignment','left', ...
          'parent',fig, ...
          'enable','on');

rect(1) = rect(1)+rect(3)+3*XX.Margin;
rect(3) = SmallWidth+XX.Margin+SEditWidth;
uicontrol('style','text', ...
          'position',rect, ...
          'string','show frame ...', ...
          'horizontalalignment','left', ...
          'parent',fig, ...
          'enable','on');
rect(4) = XX.But.Height;

% ---
xx_border3d(XX.Margin, ...
         5*XX.Margin+4*XX.But.Height, ...
         5*XX.Margin+Part1Width+Part2Width, ...
         6*XX.But.Height+5*XX.Margin, ...
         'parent',Ax);

xx_border3d(2*XX.Margin+LabelWidth, ...
         6*XX.Margin+4*XX.But.Height, ...
         XX.Margin+Part1Width-LabelWidth, ...
         4*XX.But.Height+2*XX.Margin, ...
         'parent',Ax);

xx_border3d(4*XX.Margin+Part1Width, ...
         6*XX.Margin+4*XX.But.Height, ...
         XX.Margin+Part2Width, ...
         4*XX.But.Height+2*XX.Margin, ...
         'parent',Ax);


rect(1) = LabelWidth+RadioButton+3*XX.Margin;
rect(2) = rect(2)+rect(4)+4*XX.Margin;
rect(3) = EditButton+TextWidth+XX.Margin;
H.CName=uicontrol('style','popupmenu', ...
          'position',rect, ...
          'string',Colormaps, ...
          'backgroundcolor',XX.Clr.LightGray, ...
          'parent',fig, ...
          'enable','off', ...
          'callback','stackudf(gcbf,''CommandStack'',11)');

rect(1) = LabelWidth+RadioButton+3*XX.Margin;
rect(2) = rect(2)+rect(4);
rect(3) = MinMaxWidth;
rect(4) = XX.Txt.Height;
H.CMin=uicontrol('style','text', ...
          'position',rect, ...
          'string','min', ...
          'horizontalalignment','right', ...
          'parent',fig, ...
          'enable','off');

rect(1) = rect(1)+rect(3)+XX.Margin;
rect(3) = MinMaxEWidth;
rect(4) = XX.But.Height;
H.CMinV=uicontrol('style','edit', ...
          'position',rect, ...
          'string','', ...
          'horizontalalignment','left', ...
          'backgroundcolor',XX.Clr.LightGray, ...
          'parent',fig, ...
          'enable','off', ...
          'callback','stackudf(gcbf,''CommandStack'',12)');

rect(1) = rect(1)+rect(3)+XX.Margin;
rect(3) = MinMaxWidth;
rect(4) = XX.Txt.Height;
H.CMax=uicontrol('style','text', ...
          'position',rect, ...
          'string','max', ...
          'horizontalalignment','right', ...
          'parent',fig, ...
          'enable','off');

rect(1) = rect(1)+rect(3)+XX.Margin;
rect(3) = MinMaxEWidth;
rect(4) = XX.But.Height;
H.CMaxV=uicontrol('style','edit', ...
          'position',rect, ...
          'string','', ...
          'horizontalalignment','left', ...
          'backgroundcolor',XX.Clr.LightGray, ...
          'parent',fig, ...
          'enable','off', ...
          'callback','stackudf(gcbf,''CommandStack'',13)');

rect(1) = rect(1)+rect(3)+3*XX.Margin+RadioButton;
rect(3) = SmallWidth+SEditWidth-RadioButton;
H.EdClass=uicontrol('style','pushbutton', ...
          'position',rect, ...
          'string','edit classes', ...
          'parent',fig, ...
          'enable','off', ...
          'callback','stackudf(gcbf,''CommandStack'',14)');

rect(1) = LabelWidth+RadioButton+3*XX.Margin;
rect(2) = rect(2)+rect(4);
rect(3) = EditButton+XX.Margin+TextWidth;
H.CAuto=uicontrol('style','checkbox', ...
          'position',rect, ...
          'string','automatic', ...
          'parent',fig, ...
          'value',0, ...
          'enable','off', ...
          'callback','stackudf(gcbf,''CommandStack'',15)');

rect(1) = rect(1)+rect(3)+3*XX.Margin+RadioButton;
rect(3) = SmallWidth+SEditWidth-RadioButton;
rect(4) = XX.Txt.Height;
NClasses=length(Info.CThresholds)+1;
if size(Info.CClassColors,1)>NClasses,
  Info.CClassColors((NClasses+1):end,:)=[];
elseif size(Info.CClassColors,1)<NClasses,
  Info.CClassColors((NClasses+1):end,1:3)=NaN;
end;
Str=StrFrames(NClasses,'class','classes');

H.NClass=uicontrol('style','text', ...
          'position',rect, ...
          'string',Str, ...
          'horizontalalignment','left', ...
          'parent',fig, ...
          'enable','off');
rect(4) = XX.But.Height;

rect(1) = LabelWidth+3*XX.Margin;
rect(2) = rect(2)+rect(4);
rect(3) = RadioButton+EditButton+XX.Margin+TextWidth;
H.CCont=uicontrol('style','radiobutton', ...
          'position',rect, ...
          'string','continuous', ...
          'parent',fig, ...
          'value',1, ...
          'enable','on', ...
          'callback','stackudf(gcbf,''CommandStack'',16)');

rect(1) = rect(1)+rect(3)+3*XX.Margin;
rect(3) = SmallWidth+SEditWidth;
H.CClass=uicontrol('style','radiobutton', ...
          'position',rect, ...
          'string','classified', ...
          'parent',fig, ...
          'value',0, ...
          'enable','on', ...
          'callback','stackudf(gcbf,''CommandStack'',17)');

% ---

rect(1) = LabelWidth+3*XX.Margin;
rect(2) = rect(2)+rect(4)+2*XX.Margin;
rect(3) = RadioButton;
H.CStr=uicontrol('style','radiobutton', ...
          'position',rect, ...
          'string','', ...
          'parent',fig, ...
          'value',0, ...
          'enable','on', ...
          'callback','stackudf(gcbf,''CommandStack'',18)');

rect(1) = rect(1)+rect(3);
rect(3) = EditButton;
H.EdCS=uicontrol('style','pushbutton', ...
          'position',rect, ...
          'string','edit stream', ...
          'parent',fig, ...
          'enable','off', ...
          'callback','stackudf(gcbf,''CommandStack'',19)');

rect(1) = rect(1)+rect(3)+XX.Margin;
rect(3) = TextWidth;
rect(4) = XX.Txt.Height;
if ~ischar(Info.CStream),
  Str=StrFrames(Info.CStream.NumberOfFields);
else,
  Str=StrFrames(0);
end;
H.NCS=uicontrol('style','text', ...
          'position',rect, ...
          'string',Str, ...
          'horizontalalignment','left', ...
          'parent',fig, ...
          'enable','off');
rect(4) = XX.But.Height;

rect(1) = rect(1)+rect(3)+3*XX.Margin;
rect(3) = SmallWidth+SEditWidth;
H.Light=uicontrol('style','popupmenu', ...
          'position',rect, ...
          'string',LModes, ...
          'value',strmatch(Info.LightMode,LModes,'exact'), ...
          'horizontalalignment','left', ...
          'backgroundcolor',XX.Clr.White, ...
          'parent',fig, ...
          'enable','on', ...
          'callback','stackudf(gcbf,''CommandStack'',22)');

rect(1) = 2*XX.Margin;
rect(2) = rect(2)+rect(4);
rect(3) = LabelWidth;
rect(4) = XX.Txt.Height;
uicontrol('style','text', ...
          'position',rect, ...
          'string','color', ...
          'horizontalalignment','left', ...
          'parent',fig, ...
          'enable','on');

rect(1) = rect(1)+rect(3)+XX.Margin;
rect(3) = RadioButton+EditButton+XX.Margin+TextWidth;
rect(4) = XX.But.Height;
H.CopyZS=uicontrol('style','radiobutton', ...
          'position',rect, ...
          'string','copy z values', ...
          'value',1, ...
          'parent',fig, ...
          'enable','on', ...
          'callback','stackudf(gcbf,''CommandStack'',20)');

rect(1) = rect(1)+rect(3)+3*XX.Margin;
rect(3) = SmallWidth+SEditWidth;
rect(4) = XX.Txt.Height;
uicontrol('style','text', ...
          'position',rect, ...
          'string','surface mode', ...
          'horizontalalignment','left', ...
          'parent',fig, ...
          'enable','on');
rect(4) = XX.But.Height;

% ---

xx_border3d(XX.Margin, ...
         11*XX.Margin+10*XX.But.Height, ...
         2*XX.Margin+Part1Width, ...
         3*XX.But.Height+2*XX.Margin, ...
         'parent',Ax);

xx_border3d(4*XX.Margin+Part1Width, ...
         11*XX.Margin+10*XX.But.Height, ...
         2*XX.Margin+Part2Width, ...
         3*XX.But.Height+2*XX.Margin, ...
         'parent',Ax);

rect(1) = 2*XX.Margin;
rect(2) = rect(2)+rect(4)+3*XX.Margin;
rect(3) = LabelWidth;
rect(4) = XX.Txt.Height;
uicontrol('style','text', ...
          'position',rect, ...
          'string','z data', ...
          'horizontalalignment','left', ...
          'parent',fig, ...
          'enable','on');

rect(1) = rect(1)+rect(3)+RadioButton+XX.Margin;
rect(3) = EditButton;
rect(4) = XX.But.Height;
H.EdZS=uicontrol('style','pushbutton', ...
          'position',rect, ...
          'string','edit stream', ...
          'parent',fig, ...
          'enable','on', ...
          'callback','stackudf(gcbf,''CommandStack'',21)');

rect(1) = rect(1)+rect(3)+XX.Margin;
rect(3) = TextWidth;
rect(4) = XX.Txt.Height;
H.NZS=uicontrol('style','text', ...
          'position',rect, ...
          'string',StrFrames(Info.ZStream.NumberOfFields), ...
          'horizontalalignment','left', ...
          'parent',fig, ...
          'enable','on');

rect(1) = rect(1)+rect(3)+3*XX.Margin;
rect(3) = SmallWidth+XX.Margin+SEditWidth;
rect(4) = XX.But.Height;
H.XXX=uicontrol('style','checkbox', ...
          'position',rect, ...
          'string','row', ...
          'parent',fig, ...
          'value',0, ...
          'visible','off', ...
          'enable','on', ...
          'callback','stackudf(gcbf,''CommandStack'',28)');

rect(1) = 2*XX.Margin;
rect(2) = rect(2)+rect(4);
rect(3) = LabelWidth;
rect(4) = XX.Txt.Height;
uicontrol('style','text', ...
          'position',rect, ...
          'string','y data', ...
          'horizontalalignment','left', ...
          'parent',fig, ...
          'enable','on');

rect(1) = rect(1)+rect(3)+RadioButton+XX.Margin;
rect(3) = EditButton;
rect(4) = XX.But.Height;
H.EdYS=uicontrol('style','pushbutton', ...
          'position',rect, ...
          'string','edit stream', ...
          'parent',fig, ...
          'enable','on', ...
          'callback','stackudf(gcbf,''CommandStack'',23)');

rect(1) = rect(1)+rect(3)+XX.Margin;
rect(3) = TextWidth;
rect(4) = XX.Txt.Height;
H.NYS=uicontrol('style','text', ...
          'position',rect, ...
          'string',StrFrames(Info.YStream.NumberOfFields), ...
          'horizontalalignment','left', ...
          'parent',fig, ...
          'enable','on');

rect(1) = rect(1)+rect(3)+3*XX.Margin;
rect(3) = SmallWidth+XX.Margin+SEditWidth;
rect(4) = XX.But.Height;
H.Clip=uicontrol('style','checkbox', ...
          'position',rect, ...
          'string','clipped', ...
          'parent',fig, ...
          'value',Info.Clipped, ...
          'enable','on', ...
          'callback','stackudf(gcbf,''CommandStack'',24)');

rect(1) = 2*XX.Margin;
rect(2) = rect(2)+rect(4);
rect(3) = LabelWidth;
rect(4) = XX.Txt.Height;
uicontrol('style','text', ...
          'position',rect, ...
          'string','x data', ...
          'horizontalalignment','left', ...
          'parent',fig, ...
          'enable','on');

rect(1) = rect(1)+rect(3)+RadioButton+XX.Margin;
rect(3) = EditButton;
rect(4) = XX.But.Height;
H.EdXS=uicontrol('style','pushbutton', ...
          'position',rect, ...
          'string','edit stream', ...
          'parent',fig, ...
          'enable','on', ...
          'callback','stackudf(gcbf,''CommandStack'',25)');

rect(1) = rect(1)+rect(3)+XX.Margin;
rect(3) = TextWidth;
rect(4) = XX.Txt.Height;
H.NXS=uicontrol('style','text', ...
          'position',rect, ...
          'string',StrFrames(Info.XStream.NumberOfFields), ...
          'horizontalalignment','left', ...
          'parent',fig, ...
          'enable','on');

rect(1) = rect(1)+rect(3)+3*XX.Margin;
rect(3) = SmallWidth+XX.Margin+SEditWidth;
rect(4) = XX.But.Height;
H.Vis=uicontrol('style','checkbox', ...
          'position',rect, ...
          'string','visible', ...
          'parent',fig, ...
          'value',Info.Visible, ...
          'enable','on', ...
          'callback','stackudf(gcbf,''CommandStack'',26)');

rect(1) = 2*XX.Margin;
rect(2) = rect(2)+rect(4)+2*XX.Margin;
rect(3) = LabelWidth;
rect(4) = XX.Txt.Height;
uicontrol('style','text', ...
          'position',rect, ...
          'string','name', ...
          'horizontalalignment','left', ...
          'parent',fig, ...
          'enable','on');

rect(1) = rect(1)+rect(3)+XX.Margin;
rect(3) = Fig_Width-XX.Margin-rect(1);
rect(4) = XX.But.Height;
H.Name=uicontrol('style','edit', ...
          'position',rect, ...
          'string',Info.Name, ...
          'horizontalalignment','left', ...
          'backgroundcolor',XX.Clr.White, ...
          'parent',fig, ...
          'enable','on', ...
          'callback','stackudf(gcbf,''CommandStack'',27)');

if ~ischar(Info.CStream),
  set(H.CopyZS,'value',0);
  set(H.CStr,'value',1);
  set([H.EdCS H.NCS],'enable','on');
  set(H.NCS,'string',StrFrames(Info.CStream.NumberOfFields));
end;
switch Info.CMode,
case 'continuous',
  set([H.CAuto H.CName],'enable','on');
  set(H.CName,'backgroundcolor',XX.Clr.White);
  if ~strcmp(Info.CCLim,'auto')
    set([H.CMin H.CMax H.CMinV H.CMaxV],'enable','on');
    set([H.CMinV H.CMaxV],'backgroundcolor',XX.Clr.White);
    set(H.CMinV,'string',Info.CCLim(1));
    set(H.CMaxV,'string',Info.CCLim(2));
    set(H.CAuto,'value',0);
  else,
    set(H.CAuto,'value',1);
  end;
  set(H.CName,'value',strmatch(Info.CCMap,Colormaps,'exact'));
  set(H.CClass,'value',0);
  set(H.CCont,'value',1);
case 'classified',
  set(H.CClass,'value',1);
  set(H.CCont,'value',0);
  set([H.NClass H.EdClass],'enable','on');
end;

if (Info.TStream.NumberOfFields>0),
  set([H.TRange H.TMin H.TMinV H.TMax H.TMaxV H.TUnits H.TUnitTxt],'enable','on');
  if isempty(Info.TValues),
    Info.TValues=cell(1,Info.TStream.NumberOfFields);
    Info.TValues{1}=Info.TStream(1);
    Info.TValues{end}=Info.TStream(Info.TStream.NumberOfFields);
  end;
  set(H.TMinV,'enable','inactive','string',num2str(Info.TValues{1}*Info.TUnitNum))
  set(H.TMaxV,'enable','inactive','string',num2str(Info.TValues{end}*Info.TUnitNum))
  set(H.TUnits,'backgroundcolor',XX.Clr.White,'value',strmatch(Info.TUnit,TUnits,'exact'));
end;

if (Info.XStream.NumberOfFields>0) & ...
   (Info.YStream.NumberOfFields>0) & ...
   (Info.ZStream.NumberOfFields>0) & ...
   (ischar(Info.CStream) | ...
    (Info.CStream.NumberOfFields>0)),
  set(H.FShown,'enable','on');
  if (Info.TStream.NumberOfFields>0),
    set(H.TShown,'enable','on');
    if ~isempty(Info.ShowTime),
      set(H.TShown,'value',1);
      Info.ShowTime=max(min(Info.ShowTime,Info.TValues{end}),Info.TValues{1});
      set(H.TShownE,'string',num2str(Info.ShowTime*Info.TUnitNum),'enable','on','backgroundcolor',XX.Clr.White);
      Info.ShowFrame=[];
    elseif ~isempty(Info.ShowFrame),
      set(H.FShown,'value',1);
      Info.ShowFrame=max(min(Info.ShowFrame,nframes(Info)),1);
      set(H.FShownE,'string',num2str(Info.ShowFrame),'enable','on','backgroundcolor',XX.Clr.White);
    else, % both empty
      Info.ShowFrame=1;
      set(H.FShown,'value',1);
      set(H.FShownE,'string',num2str(Info.ShowFrame),'enable','on','backgroundcolor',XX.Clr.White);
    end;
  else,
    Info.ShowTime=[];
    if ~isempty(Info.ShowFrame),
      set(H.FShown,'value',1);
      Info.ShowFrame=max(min(Info.ShowFrame,nframes(Info)),1);
      set(H.FShownE,'string',num2str(Info.ShowFrame),'enable','on','backgroundcolor',XX.Clr.White);
    else, % both empty
      Info.ShowFrame=1;
      set(H.FShown,'value',1);
      set(H.FShownE,'string',num2str(Info.ShowFrame),'enable','on','backgroundcolor',XX.Clr.White);
    end;
  end;
else,
  Info.ShowTime=[];
  Info.ShowFrame=[];
end;

set(fig,'visible','on');
setudf(fig,'CommandStack',{});

gui_quit=0;
changed=0;
OrigInfo=Info;
while ~gui_quit,

  if ishandle(fig),
    if isempty(getudf(fig,'CommandStack')),
      waitforudf(fig,'CommandStack');
    end;
  end;
  if ishandle(fig),
    stack=getudf(fig,'CommandStack');
    setudf(fig,'CommandStack',{});
  else,
    uiwait(msgbox('Unexpected removal of Edit window!','modal'));
    gui_quit=1;
  end;

  while ~isempty(stack),
    Cmd=stack{1};
    stack=stack(2:size(stack,1),:);

    switch Cmd,
    case 0, % cancel
      if changed,
        UD.Info=OrigInfo;
        set(MainItem,'userdata',UD);
        set(fig,'pointer','watch');
        refresh(Obj);
        set(fig,'pointer','arrow');
      end;
      gui_quit=1;
    case 1, % preview
      changed=1;
      UD.Info=Info;
      set(MainItem,'userdata',UD);
      set(fig,'pointer','watch');
      refresh(Obj);
      set(fig,'pointer','arrow');
      set(H.Preview,'value',0);
    case 2, % accept
      AcceptPressed=1;
      UD.Info=Info;
      UD.Name=UD.Info.Name;
      set(MainItem,'userdata',UD);
      set(fig,'pointer','watch');
      refresh(Obj);
      set(fig,'pointer','arrow');
      gui_quit=1;
    case 3, % time unit
      Info.TUnit=TUnits{get(H.TUnits,'value')};
      Info.TUnitNum=TUnitsNum(strmatch(Info.TUnit,TUnits,'exact'));
      set(H.TMinV,'string',num2str(Info.TValues{1}*Info.TUnitNum));
      set(H.TMaxV,'string',num2str(Info.TValues{end}*Info.TUnitNum));
      set(H.TShownE,'string',num2str(Info.ShowTime*Info.TUnitNum));
    case 4, % select show time step
      set(H.FShown,'value',0);
      set(H.TShown,'value',1);
      Info.ShowTime=Info.TValues{1}*Info.TUnitNum;
      Info.ShowFrame=[];
      set(H.FShownE,'backgroundcolor',XX.Clr.LightGray,'string','');
      set(H.TShownE,'backgroundcolor',XX.Clr.White,'string',num2str(Info.ShowTime));
    case 5, % edit show time step
      ShowT=eval(get(H.TShownE,'string'),'Info.ShowTime*Info.TUnitNum');
      if isnumeric(ShowT) & prod(size(ShowT))==1 & isfinite(ShowT),
        Info.ShowTime=max(min(ShowT/Info.TUnitNum,Info.TValues{end}),Info.TValues{1});
      end;
      set(H.TShownE,'string',num2str(Info.ShowTime*Info.TUnitNum));
    case 6, % min T datastream
    case 7, % max T datastream
    case 8, % select show frame
      set(H.FShown,'value',1);
      set(H.TShown,'value',0);
      Info.ShowFrame=1;
      Info.ShowTime=[];
      set(H.TShownE,'backgroundcolor',XX.Clr.LightGray,'string','');
      set(H.FShownE,'backgroundcolor',XX.Clr.White,'string',num2str(Info.ShowFrame));
    case 9, % edit show frame
      ShowF=eval(get(H.FShownE,'string'),'Info.ShowFrame');
      if isnumeric(ShowF) & prod(size(ShowF))==1 & isfinite(ShowF),
        Info.ShowFrame=max(min(ShowF,nframes(Info)),1);
      end;
      set(H.FShownE,'string',num2str(Info.ShowFrame));
    case 10, % edit t stream
      Info.TStream=edit(Info.TStream,'time stream');
      set(H.NTimes,'string',StrFrames(Info.TStream.NumberOfFields));
      Info.TValues=cell(Info.TStream.NumberOfFields,1);
      Info.TValues{1}=ds_eval(Info.TStream,1);
      Info.TValues{end}=ds_eval(Info.TStream,Info.TStream.NumberOfFields);
      set([H.TRange H.TMin H.TMinV H.TMax H.TMaxV H.TUnits H.TUnitTxt],'enable','on');
      set(H.TMinV,'enable','inactive','string',Info.TValues{1}*Info.TUnitNum )
      set(H.TMaxV,'enable','inactive','string',Info.TValues{end}*Info.TUnitNum)
      set(H.TUnits,'backgroundcolor',XX.Clr.White,'value',strmatch(Info.TUnit,TUnits,'exact'));
    case 11, % change colormap
      Info.CCMap=Colormaps{get(H.CName,'value')};
    case 12, % edit min crange
      NewMin=eval(get(H.CMinV,'string'),'Info.CCLim(1)');
      if isnumeric(NewMin) & prod(size(NewMin))==1 & isfinite(NewMin),
        if NewMin<Info.CCLim(2),
          Info.CCLim=[NewMin Info.CCLim(2)];
        elseif NewMin>Info.CCLim(2),
          Info.CCLim=[Info.CCLim(2) NewMin];
        else, % ==
          Info.CCLim=[NewMin NewMin+1];
        end;
      end;
      set(H.CMinV,'string',num2str(Info.CCLim(1)))
      set(H.CMaxV,'string',num2str(Info.CCLim(2)))
    case 13, % edit max crange
      NewMax=eval(get(H.CMaxV,'string'),'Info.CCLim(2)');
      if isnumeric(NewMax) & prod(size(NewMax))==1 & isfinite(NewMax),
        if NewMax<Info.CCLim(1),
          Info.CCLim=[NewMax Info.CCLim(1)];
        elseif NewMax>Info.CCLim(1),
          Info.CCLim=[Info.CCLim(1) NewMax];
        else, % ==
          Info.CCLim=[NewMax-1 NewMax];
        end;
      end;
      set(H.CMinV,'string',num2str(Info.CCLim(1)))
      set(H.CMaxV,'string',num2str(Info.CCLim(2)))
    case 14, % edit classes
      [Info.CThresholds,Info.CClassColors]=ui_classif(Info.CThresholds,Info.CClassColors);
      Str=StrFrames(size(Info.CClassColors,1),'classs','classes');
      set(H.NClass,'string',Str);
    case 15, % automatic scaling
      if get(H.CAuto,'value'), % 1
        Info.CCLim='auto';
        set([H.CMin H.CMax H.CMinV H.CMaxV],'enable','off');
        set([H.CMinV H.CMaxV],'backgroundcolor',XX.Clr.LightGray);
      else, % 0
        Info.CCLim=[0 1];
        set([H.CMin H.CMax H.CMinV H.CMaxV],'enable','on');
        set(H.CMinV,'string',num2str(Info.CCLim(1)),'backgroundcolor',XX.Clr.White);
        set(H.CMaxV,'string',num2str(Info.CCLim(2)),'backgroundcolor',XX.Clr.White);
      end;
    case 16, % continuous
      Info.CMode='continuous';
      set([H.NClass H.EdClass],'enable','off');
      set(H.CClass,'value',0);
      set(H.CCont,'value',1);
      set([H.CAuto H.CName],'enable','on');
      if ~strcmp(Info.CCLim,'auto')
        set([H.CMin H.CMax H.CMinV H.CMaxV],'enable','on');
        set([H.CMinV H.CMaxV],'backgroundcolor',XX.Clr.White);
        set(H.CMinV,'string',Info.CCLim(1));
        set(H.CMaxV,'string',Info.CCLim(2));
        set(H.CAuto,'value',0);
      else,
        set(H.CAuto,'value',1);
      end;
      set(H.CName,'value',strmatch(Info.CCMap,Colormaps,'exact'),'backgroundcolor',XX.Clr.White);
    case 17, % classified
      Info.CMode='classified';
      set(H.CClass,'value',1);
      set(H.CCont,'value',0);
      set([H.NClass H.EdClass],'enable','on');
      set([H.CAuto H.CMin H.CMax H.CMinV H.CMaxV H.CName],'enable','off');
      set([H.CName H.CMinV H.CMaxV],'backgroundcolor',XX.Clr.LightGray);
    case 18, % use seperate c stream
      set(H.CopyZS,'value',0);
      set(H.CStr,'value',1);
      set([H.EdCS H.NCS],'enable','on');
      Info.CStream=edit(Info.ZStream,'color stream');
      set(H.NCS,'string',StrFrames(Info.CStream.NumberOfFields));
    case 19, % edit c stream
      Info.CStream=edit(Info.CStream,'color stream');
      set(H.NCS,'string',StrFrames(Info.CStream.NumberOfFields));
    case 20, % use z stream also as c stream
      Info.CStream='copyz';
      set(H.CopyZS,'value',1);
      set(H.CStr,'value',0);
      set([H.EdCS H.NCS],'enable','off');
    case 21, % edit z stream
      Info.ZStream=edit(Info.ZStream,'z stream');
      set(H.NZS,'string',StrFrames(Info.ZStream.NumberOfFields));
    case 22, % surface mode
      Info.LightMode=LModes{get(H.Light,'value')};
    case 23, % edit y stream
      Info.YStream=edit(Info.YStream,'y stream');
      set(H.NYS,'string',StrFrames(Info.YStream.NumberOfFields));
    case 24, % clipped
      Info.Clipped=get(H.Clip,'value');
    case 25, % edit x stream
      Info.XStream=edit(Info.XStream,'x stream');
      set(H.NXS,'string',StrFrames(Info.XStream.NumberOfFields));
    case 26, % visible
      Info.Visible=get(H.Vis,'value');
    case 27, % name
      Info.Name=get(H.Name,'string');
    otherwise,
      uiwait(msgbox(num2str(Cmd),'modal'));
    end;
  
    if (Info.XStream.NumberOfFields>0) & ...
       (Info.YStream.NumberOfFields>0) & ...
       (Info.ZStream.NumberOfFields>0) & ...
       (ischar(Info.CStream) | ...
        (Info.CStream.NumberOfFields>0)),
      set(H.FShown,'enable','on');
      if (Info.TStream.NumberOfFields>0),
        set(H.TShown,'enable','on');
        if ~isempty(Info.ShowTime),
          set(H.TShown,'value',1);
          set(H.TShownE,'enable','on','backgroundcolor',XX.Clr.White);
          Info.ShowFrame=[];
        elseif ~isempty(Info.ShowFrame),
          set(H.FShown,'value',1);
          set(H.FShownE,'enable','on','backgroundcolor',XX.Clr.White);
        else, % both empty
          Info.ShowFrame=1;
          set(H.FShown,'value',1);
          set(H.FShownE,'string',num2str(Info.ShowFrame),'enable','on','backgroundcolor',XX.Clr.White);
        end;
      else,
        Info.ShowTime=[];
        if ~isempty(Info.ShowFrame),
          set(H.FShown,'value',1);
          set(H.FShownE,'enable','on','backgroundcolor',XX.Clr.White);
        else, % both empty
          Info.ShowFrame=1;
          set(H.FShown,'value',1);
          set(H.FShownE,'string',num2str(Info.ShowFrame),'enable','on','backgroundcolor',XX.Clr.White);
        end;
      end;
    else,
      Info.ShowTime=[];
      Info.ShowFrame=[];
    end;
  end;
end;
delete(fig);


function Str=StrFrames(N,Str1,Str2),
switch nargin,
case 1,
  Str1='frame';
  Str2='frames';
case 2,
  Str2=[Str1 's'];
end;
if N==1,
  Str=['1 ',Str1];
else,
  Str=[num2str(N) ' ' Str2];
end;