function AllItems=refresh(Obj);

AllItems=handles(ob_ideas(Obj));
MainItem=AllItems(1);

UD=get(MainItem,'userdata');
Info=UD.Info;

ErrorMsg='';
X=[]; Y=[]; Z=[]; C=[];

if isempty(Info.ShowTime),
  if isempty(Info.ShowFrame),
    Frame=[];
    ErrorMsg='No frame specified.';
  else,
    Frame=Info.ShowFrame;
  end;
else,
  % Frame=GetFrame(Info.ShowTime) from Info.TValues;
  if Info.ShowTime<=Info.TValues{1},
    Frame=1;
  elseif Info.ShowTime>=Info.TValues{end},
    Frame=length(Info.TValues);
  else,
    i=2;
    while (i<length(Info.TValues)),
      if isempty(Info.TValues{i}),
        [t,ErrorMsg]=ds_eval(Info.TStream,i);
        if ~isempty(ErrorMsg),
          break;
        else,
          Info.TValues{i}=t;
        end;
      end;
      if Info.ShowTime<=Info.TValues{i},
        break;
      else,
        i=i+1;
      end;
    end;
    if isempty(ErrorMsg),
      % Info.ShowTime between Info.TValues{i-1} and Info.TValues{i}
      Frame=i+(Info.ShowTime-Info.TValues{i-1})/(Info.TValues{i}-Info.TValues{i-1});
    end;
  end;
end;

if strcmp(Info.CMode,'continuous'),
  switch Info.LightMode,
  case 'unlit dots'
    LOpt={'facecolor','none', ...
          'edgecolor','interp', ...
          'edgelighting','none', ...
          'linestyle','none', ...
          'marker','.', ...
          'markersize',6, ...
          'markeredgecolor','auto'};
  case 'unlit mesh'
    LOpt={'facecolor','none', ...
          'edgecolor','interp', ...
          'edgelighting','none', ...
          'linestyle','-', ...
          'marker','none'};
  case 'dull lit mesh',
    LOpt={'facecolor','none', ...
          'edgecolor','interp', ...
          'edgelighting','phong', ...
          'BackFaceLighting','lit', ...
          'AmbientStrength',0.6, ...
          'DiffuseStrength',0.9, ...
          'SpecularStrength',0, ...
          'linestyle','-', ...
          'marker','none'};
  case 'shiny lit mesh',
    LOpt={'facecolor','none', ...
          'edgecolor','interp', ...
          'edgelighting','phong', ...
          'BackFaceLighting','lit', ...
          'AmbientStrength',0.3, ...
          'DiffuseStrength',0.6, ...
          'SpecularStrength',0.9, ...
          'SpecularExponent',10, ...
          'SpecularColorReflectance',1, ...
          'linestyle','-', ...
          'marker','none'};
  case 'unlit surface',
    LOpt={'edgecolor','none', ...
          'facecolor','interp', ...
          'facelighting','none', ...
          'linestyle','-', ...
          'marker','none'};
  case 'dull lit surf',
    LOpt={'edgecolor','none', ...
          'facecolor','interp', ...
          'facelighting','phong', ...
          'BackFaceLighting','lit', ...
          'AmbientStrength',0.6, ...
          'DiffuseStrength',0.9, ...
          'SpecularStrength',0, ...
          'linestyle','-', ...
          'marker','none'};
  case 'shiny lit surf',
    LOpt={'edgecolor','none', ...
          'facecolor','interp', ...
          'facelighting','phong', ...
          'BackFaceLighting','lit', ...
          'AmbientStrength',0.3, ...
          'DiffuseStrength',0.6, ...
          'SpecularStrength',0.9, ...
          'SpecularExponent',10, ...
          'SpecularColorReflectance',1, ...
          'linestyle','-', ...
          'marker','none'};
  otherwise,
    LOpt={};
  end;
else, % classified
  switch Info.LightMode,
  case 'unlit dots'
    LOpt={'facecolor','none', ...
          'edgecolor','flat', ...
          'edgelighting','none', ...
          'linestyle','none', ...
          'marker','.', ...
          'markersize',6, ...
          'markeredgecolor','auto'};
  case 'unlit mesh'
    LOpt={'facecolor','none', ...
          'edgecolor','flat', ...
          'edgelighting','none', ...
          'linestyle','-', ...
          'marker','none'};
  case 'dull lit mesh',
    LOpt={'facecolor','none', ...
          'edgecolor','flat', ...
          'edgelighting','flat', ...
          'BackFaceLighting','lit', ...
          'AmbientStrength',0.6, ...
          'DiffuseStrength',0.9, ...
          'SpecularStrength',0, ...
          'linestyle','-', ...
          'marker','none'};
  case 'shiny lit mesh',
    LOpt={'facecolor','none', ...
          'edgecolor','flat', ...
          'edgelighting','flat', ...
          'BackFaceLighting','lit', ...
          'AmbientStrength',0.3, ...
          'DiffuseStrength',0.6, ...
          'SpecularStrength',0.9, ...
          'SpecularExponent',10, ...
          'SpecularColorReflectance',1, ...
          'linestyle','-', ...
          'marker','none'};
  case 'unlit surface',
    LOpt={'edgecolor','none', ...
          'facecolor','flat', ...
          'facelighting','none', ...
          'linestyle','-', ...
          'marker','none'};
  case 'dull lit surf',
    LOpt={'edgecolor','none', ...
          'facecolor','flat', ...
          'facelighting','flat', ...
          'BackFaceLighting','lit', ...
          'AmbientStrength',0.6, ...
          'DiffuseStrength',0.9, ...
          'SpecularStrength',0, ...
          'linestyle','-', ...
          'marker','none'};
  case 'shiny lit surf',
    LOpt={'edgecolor','none', ...
          'facecolor','flat', ...
          'facelighting','flat', ...
          'BackFaceLighting','lit', ...
          'AmbientStrength',0.3, ...
          'DiffuseStrength',0.6, ...
          'SpecularStrength',0.9, ...
          'SpecularExponent',10, ...
          'SpecularColorReflectance',1, ...
          'linestyle','-', ...
          'marker','none'};
  otherwise,
    LOpt={};
  end;
end;
if isempty(ErrorMsg), [X,ErrorMsg]=ds_eval(Info.XStream,Frame); end;
if isempty(ErrorMsg), [Y,ErrorMsg]=ds_eval(Info.YStream,Frame); end;
if isempty(ErrorMsg), [Z,ErrorMsg]=ds_eval(Info.ZStream,Frame); end;
if isempty(ErrorMsg),
  if isa(Info.CStream,'datastream'),
    [C,ErrorMsg]=ds_eval(Info.CStream,Frame);
  else,
    C=Z;
  end;
end;

if isempty(ErrorMsg) & isequal(size(X),size(Y),size(Z),size(C)),
  % process color information
  if strcmp(Info.CMode,'continuous'),
    CRange=md_clrmngr(Obj.Tag,xx_colormap(Info.CCMap)); % reserve and get range
    if strcmp(Info.CCLim,'auto'),
      CLim=[min(C(:)) max(C(:))];
    else,
      CLim=Info.CCLim;
    end;
    UD.CLim=CLim;
    CLimDiff=CLim(2)-CLim(1);
    if CLimDiff==0,
      CLimDiff=1;
    end;
    C=CRange(1)+(CRange(2)-CRange(1))* ...
        min(max((C-CLim(1))/CLimDiff,0),1);
    if strcmp(get(MainItem,'type'),'surface'),
      set(MainItem, ...
          'xdata',X, ...
          'ydata',Y, ...
          'zdata',Z, ...
          'cdata',C, ...
          LOpt{:}, ...
          'clipping',OnOff(Info.Clipped), ...
          'visible',OnOff(Info.Visible));
    else,
      Prnt=get(MainItem,'parent');
      Tag=get(MainItem,'tag');
      delete(AllItems);
      MainItem=surface('parent',Prnt, ...
          'visible','off', ...
          'tag',Tag, ...
          'xdata',X, ...
          'ydata',Y, ...
          'zdata',Z, ...
          'cdata',C, ...
          LOpt{:}, ...
          'cdatamapping','direct', ...
          'clipping',OnOff(Info.Clipped), ...
          'visible',OnOff(Info.Visible));
      AllItems=MainItem;
    end;
  else, % classified,
    ClassColors=Info.CClassColors;
    NaNs=find(isnan(ClassColors(:,1)));
    ClassColors(NaNs,:)=1;
    Indices=1:(length(Info.CThresholds)+1);
    Indices(NaNs)=NaN;
    CRange=md_clrmngr(Obj.Tag,ClassColors); % reserve and get range
    UD.CLim=[1 length(Info.CThresholds)+1];

    tri=grid2tri(X,Y,Y);
    Data=tricontourf(tri,X,Y,Z,Info.CThresholds,'return','data');

    Prnt=get(MainItem,'parent');
    Tag=get(MainItem,'tag');
    delete(AllItems);
    LData=length(Data);
    for i=1:LData,
      if ~isempty(Data{i}{1}),
        AllItems(i)=patch('parent',Prnt, ...
         'tag',Tag, ...
         'Vertices',Data{i}{1}, ...
         'Faces',Data{i}{2}, ...
         'facevertexcdata',ones(size(Data{i}{1},1),1)*(CRange(1)-1+Indices(Data{i}{3})), ...
         'edgecolor','none', ...
         'facecolor','flat', ...
         'backfacelighting','reverselit', ...
         LOpt{:}, ...
         'cdatamapping','direct', ...
         'clipping',OnOff(Info.Clipped), ...
         'visible',OnOff(Info.Visible));
      else,
        AllItems(i)=0;
      end;
    end;

    Data=tricontour(tri,X,Y,Z,Info.CThresholds,'getdata');
    for i=1:length(Data),
      ZLevel=Info.CThresholds(Data{i}{3})*ones(size(Data{i}{1}));

      AllItems(LData+i)=line('parent',Prnt, ...
       'XData',Data{i}{1}, ...
       'YData',Data{i}{2}, ...
       'ZData',ZLevel, ...
       'tag',Tag, ...
       'color','k', ...
       'clipping',OnOff(Info.Clipped), ...
       'visible',OnOff(Info.Visible));
    end;
    AllItems(AllItems==0)=[];

    if isempty(AllItems),
      AllItems=surface('parent',Prnt, ...
       'tag',Tag, ...
       'xdata',[], ...
       'ydata',[], ...
       'zdata',[], ...
       'cdata',[], ...
       'userdata',UD, ...
       'cdatamapping','direct', ...
       'facecolor','interp', ...
       'facelighting','none', ...
       'edgecolor','none', ...
       LOpt{:}, ...
       'clipping',OnOff(Info.Clipped), ...
       'visible',OnOff(Info.Visible));
    end;
    MainItem=AllItems(1);
  end;
  % <---------------- Animation options
  UD.Animation.Type='Datastream';
  UD.Animation.Nsteps=nframes(Info);
else,
  Prnt=get(MainItem,'parent');
  Tag=get(MainItem,'tag');
  delete(AllItems);
  AllItems=surface('parent',Prnt, ...
       'tag',Tag, ...
       'xdata',[], ...
       'ydata',[], ...
       'zdata',[], ...
       'cdata',[], ...
       'userdata',UD, ...
       'cdatamapping','direct', ...
       'facecolor','interp', ...
       'facelighting','none', ...
       'edgecolor','none', ...
       LOpt{:}, ...
       'clipping',OnOff(Info.Clipped), ...
       'visible',OnOff(Info.Visible));
  MainItem=AllItems;
  % <---------------- No animation options
  UD.Animation=[];
end;

if isempty(ErrorMsg),
  if isa(Info.CStream,'datastream'),
    [T,ErrorMsg]=ds_eval(Info.TStream,Frame);
  else,
    T=0;
  end;
end;

if isempty(ErrorMsg),
  UD.CurrentTime=T;
else,
  UD.CurrentTime=NaN;
  ErrorMsg={sprintf('Error detected in %s at Line 343:',mfilename),ErrorMsg};
  ui_message('error',ErrorMsg);
end;

UD.Name=UD.Info.Name;
set(MainItem,'userdata',UD); % set option only to it(1) and keep the other ones empty
%if strcmp(axtype,'undefined'), Local_SetAx_2DH(ax); end;
for i=1:length(UD.Info.LinkedObjects),
  refresh(UD.Info.LinkedObjects(i));
end;

function Str=OnOff(L),
if L,
  Str='on';
else,
  Str='off';
end;
