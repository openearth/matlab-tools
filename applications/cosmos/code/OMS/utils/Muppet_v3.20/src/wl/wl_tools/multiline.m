function [Sout,Ssep]=multiline(Sin,varargin)
% MULTILINE converts a string containing LineFeeds to a char matrix
%
%     StrMat=MULTILINE(StrWithLF)
%     converts the input string with linefeeds (as generated by e.g.
%     the FPRINTF command when using \n in the format string) into
%     char matrix.
%     
%     StrMat=MULTILINE(StrWithLF,cArray)
%     splits the input string at the characters listed in cArray.
%     Enter \n for char(10):linefeed and \t for char(9):tab.
%
%     ClStr=MULTILINE(...,'cell')
%     converts the input string into a cell string instead of a char
%     matrix.
%
%     For example
%
%        Str=multiline(sprintf('%i\n',1:10:31))
%
%     gives the 4 x 2 char matrix
%
%        Str = 1 
%              11
%              21
%              31
%
%     See also: CELLSTR, STR2MAT

% Author: H.R.A.Jagers, bert.jagers@wldelft.nl

cArray=char(10);
cellOutput=0;
if nargin>1,
  Inp=varargin;
  if isequal('cell',lower(Inp{end}))
    cellOutput=1;
    Inp(end)=[];
  end
  if length(Inp)>1,
    error('Too many input arguments.');
  elseif length(Inp)==1
    cArray=Inp{1};
    cArray=strrep(cArray,'\t',char(9));
    cArray=strrep(cArray,'\n',char(10));
  end
end
if nargin<1 | ~ischar(Sin) | ndims(Sin)~=2 | min(size(Sin))~=1
  error('Invalid input argument.')
else
  LineFeed=find(ismember(Sin,cArray));
  if nargout>1
     Ssep=Sin(LineFeed);
  end
  Start=[1 LineFeed+1];
  End=[LineFeed-1 length(Sin)];
  if cellOutput
    Sout=cell(length(Start),1);
    for k=1:length(Start)
      Sout{k}=deblank(Sin(Start(k):End(k)));
    end
  else
    maxStrL=max(End-Start)+1;
    Sout=repmat(' ',length(Start),maxStrL);
    for k=1:length(Start)
      Sout(k,1:(End(k)-Start(k)+1))=Sin(Start(k):End(k));
    end
  end
end