function Animation=md_cameramotion(ViewPointProps);
if ischar(ViewPointProps)
  set(gcbf,'userdata',[get(gcbf,'userdata');str2num(ViewPointProps)]);
  return
end

ss=get(0,'screensize');

UIFig = figure('Color',[0.8 0.8 0.8], ...
	'MenuBar','none', ...
	'Position',[ss(3)-600 ss(4)-340 600 290], ...
	'Resize','off', ...
        'userdata',[], ...
        'integerhandle','off', ...
        'name','Camera Motion Sequencer', ...
        'numbertitle','off', ...
	'Tag','Fig1');
TimeBar = axes('Parent',UIFig, ...
	'Units','pixels', ...
	'Box','on', ...
	'CameraUpVector',[0 1 0], ...
	'Color','none', ...
	'Position',[10 10 580 200], ...
        'Layer','Top', ...
	'Tag','Axes1', ...
        'XLim',[0 1], ...
	'XColor',[0 0 0], ...
        'XTick',0:.1:1, ...
	'XTickLabelMode','manual', ...
        'YLim',[0 1], ...
	'YColor',[0 0 0], ...
	'YTickLabelMode','manual', ...
        'YTick',[], ...
	'ZColor',[0 0 0]);
c = text('Parent',TimeBar, ...
	'Color',[0 0 0], ...
	'HandleVisibility','callback', ...
	'HorizontalAlignment','center', ...
	'Position',[0.499136 -0.0653266 0], ...
	'Tag','Axes1Text4', ...
	'VerticalAlignment','cap');
set(get(c,'Parent'),'XLabel',c);
c = text('Parent',TimeBar, ...
	'Color',[0 0 0], ...
	'HandleVisibility','callback', ...
	'HorizontalAlignment','center', ...
	'Position',[-0.0138169 0.492462 0], ...
	'Rotation',90, ...
	'Tag','Axes1Text3', ...
	'VerticalAlignment','baseline');
set(get(c,'Parent'),'YLabel',c);
c = text('Parent',TimeBar, ...
	'Color',[0 0 0], ...
	'HandleVisibility','callback', ...
	'HorizontalAlignment','right', ...
	'Position',[-0.0172712 1.40201 0], ...
	'Tag','Axes1Text2', ...
	'Visible','off');
set(get(c,'Parent'),'ZLabel',c);
c = text('Parent',TimeBar, ...
	'Color',[0 0 0], ...
	'HandleVisibility','callback', ...
	'HorizontalAlignment','center', ...
	'Position',[0.499136 1.0402 0], ...
	'Tag','Axes1Text1', ...
	'VerticalAlignment','bottom');
set(get(c,'Parent'),'Title',c);
b = uicontrol('Parent',UIFig, ...
	'FontUnits','pixels', ...
	'BackgroundColor',[0.8 0.8 0.8], ...
	'FontName','Helvetica', ...
	'FontSize',12, ...
	'HorizontalAlignment','left', ...
	'Position',[10 264 270 20], ...
	'String','defined viewpoints', ...
	'Style','text', ...
	'Tag','StaticText1');
b = uicontrol('Parent',UIFig, ...
	'FontUnits','pixels', ...
	'FontName','Helvetica', ...
	'FontSize',12, ...
	'Position',[290 264 50 20], ...
	'String','done', ...
        'callback','md_cameramotion 1', ...
	'Tag','Pushbutton4');
b = uicontrol('Parent',UIFig, ...
	'FontUnits','pixels', ...
	'FontName','Helvetica', ...
	'FontSize',12, ...
	'Position',[340 264 50 20], ...
	'String','cancel', ...
        'callback','md_cameramotion 0', ...
	'Tag','Pushbutton4');
VPList = uicontrol('Parent',UIFig, ...
	'FontUnits','pixels', ...
	'BackgroundColor',[0.8 0.8 0.8], ...
	'FontName','Helvetica', ...
	'FontSize',12, ...
	'Position',[10 244 270 20], ...
	'String',' ', ...
	'Style','popupmenu', ...
	'Tag','PopupMenu1', ...
	'Value',1);
b = uicontrol('Parent',UIFig, ...
	'FontUnits','pixels', ...
	'FontName','Helvetica', ...
	'FontSize',12, ...
	'Position',[10 220 70 20], ...
	'String','place', ...
        'callback','md_cameramotion 2', ...
	'Tag','Pushbutton1');
b = uicontrol('Parent',UIFig, ...
	'FontUnits','pixels', ...
	'FontName','Helvetica', ...
	'FontSize',12, ...
	'Position',[220 220 60 20], ...
	'String','freeze', ...
        'callback','md_cameramotion 8', ...
	'Tag','PushbuttonX');
% 'remove' cannot be used as a string, so I have to use 'remove '
b = uicontrol('Parent',UIFig, ...
	'FontUnits','pixels', ...
	'FontName','Helvetica', ...
	'FontSize',12, ...
	'Position',[150 220 70 20], ...
	'String','remove ', ...
        'callback','md_cameramotion 3', ...
	'Tag','Pushbutton2');
b = uicontrol('Parent',UIFig, ...
	'FontUnits','pixels', ...
	'FontName','Helvetica', ...
	'FontSize',12, ...
	'Position',[80 220 70 20], ...
	'String','move', ...
        'callback','md_cameramotion 6', ...
	'Tag','Pushbutton1');
b = uicontrol('Parent',UIFig, ...
	'FontUnits','pixels', ...
	'BackgroundColor',[0.8 0.8 0.8], ...
	'FontName','Helvetica', ...
	'FontSize',12, ...
	'HorizontalAlignment','right', ...
	'Position',[400 260 100 20], ...
	'String','# time steps', ...
	'Style','text', ...
	'Tag','StaticText3');
NFrames=11;
NTimeSteps = uicontrol('Parent',UIFig, ...
	'FontUnits','pixels', ...
	'BackgroundColor',[1 1 1], ...
	'FontName','Helvetica', ...
	'FontSize',12, ...
	'HorizontalAlignment','right', ...
	'Position',[505 260 85 20], ...
	'Style','edit', ...
        'String',num2str(NFrames), ...
        'callback','md_cameramotion 4', ...
	'Tag','EditText2');
b = uicontrol('Parent',UIFig, ...
	'FontUnits','pixels', ...
	'BackgroundColor',[0.8 0.8 0.8], ...
	'FontName','Helvetica', ...
	'FontSize',12, ...
	'HorizontalAlignment','right', ...
	'Position',[400 240 100 20], ...
	'String','motion period', ...
	'Style','text', ...
	'Tag','StaticText2');
b = uicontrol('Parent',UIFig, ...
	'FontUnits','pixels', ...
	'BackgroundColor',[0.8 0.8 0.8], ...
	'FontName','Helvetica', ...
	'FontSize',12, ...
	'HorizontalAlignment','right', ...
	'Position',[505 240 85 20], ...
        'enable','inactive', ...
	'String','normalized', ...
	'Style','edit', ...
	'Tag','EditText1');
b = uicontrol('Parent',UIFig, ...
	'FontUnits','pixels', ...
	'BackgroundColor',[0.8 0.8 0.8], ...
	'FontName','Helvetica', ...
	'FontSize',12, ...
	'HorizontalAlignment','right', ...
	'Position',[400 220 100 20], ...
	'String','interpolation', ...
	'Style','text', ...
	'Tag','StaticText4');
Interpolation = uicontrol('Parent',UIFig, ...
	'FontUnits','pixels', ...
	'BackgroundColor',[1 1 1], ...
	'FontName','Helvetica', ...
	'FontSize',12, ...
	'HorizontalAlignment','right', ...
	'Position',[505 220 85 20], ...
	'Style','popupmenu', ...
        'String',{'nearest','linear','cubic','spline'}, ...
        'Value',2, ...
        'callback','md_cameramotion 7', ...
	'Tag','PopupMenu2');
b = uicontrol('Parent',UIFig, ...
	'FontUnits','pixels', ...
	'FontName','Helvetica', ...
	'FontSize',12, ...
	'Position',[290 220 100 20], ...
	'String','play', ...
        'callback','md_cameramotion 5', ...
	'Tag','Pushbutton3');

VPNames={ViewPointProps.Name};
set(VPList,'string',VPNames);

VP.Time  =0;
VP.Index ='Init';
VP.Handle=[];
VP=VP([]);

FrameProps=[];
LineHandle=[];
PlayAxes=ViewPointProps(1).Axes;
InterpolMethod=get(Interpolation,'string');
InterpolMethod=deblank(InterpolMethod{get(Interpolation,'value')});

set(UIFig,'windowstyle','modal');
gui_quit=0;
while ~gui_quit,
  if ishandle(UIFig),
    if isempty(get(UIFig,'userdata')),
      waitfor(UIFig,'userdata');
    end;
  end;
  if ishandle(UIFig),
    stack=get(UIFig,'userdata');
    set(UIFig,'userdata',[]);
%    set(UIFig,'pointer','watch'); % don't show watch for every motion update
  else,
    uiwait(msgbox('Unexpected removal of window!','modal'));
    gui_quit=1;
  end;
  while ~isempty(stack),
    cmd=stack(1,:);
    stack=stack(2:size(stack,1),:);
    % process cmd
    switch cmd,
    case 0, % cancel
      Animation=[];
      gui_quit=1;
    case 1, % done
      if (length(VP)>=3) | ((length(VP)>=2) & ~strcmp(InterpolMethod,'cubic')),
        Animation=FrameProps;
      else,
        Animation=[];
      end;
      gui_quit=1;
    case 2, % place viewpoint
      SelectedTime=LocalLineMovement(UIFig,TimeBar);
      if ~isempty(SelectedTime),
        SelectedVP=get(VPList,'value');
        N=length(VP);
        VP(N+1).Handle=text(SelectedTime,0.05, ...
          ['\leftarrow ''',ViewPointProps(SelectedVP).Name,''''], ...
          'rotation',90, ...
          'FontUnits','pixels', ...
          'FontName','Helvetica', ...
          'FontSize',12);
        VP(N+1).Time  =SelectedTime;
        VP(N+1).Index =SelectedVP;

        [LineHandle,FrameProps]=UpdateFrameProps(VP,ViewPointProps,NFrames,InterpolMethod,TimeBar,LineHandle);
      end;
    case 3, % remove viewpoint
      SelectedIndex=LocalLineSelect(UIFig,TimeBar,[VP.Time]);
      if ~isempty(SelectedIndex),
        delete(VP(SelectedIndex).Handle);
        VP(SelectedIndex)=[];

        [LineHandle,FrameProps]=UpdateFrameProps(VP,ViewPointProps,NFrames,InterpolMethod,TimeBar,LineHandle);
      end;
    case 4, % change of # time steps
      lasterr('');
      NFrames=str2num(get(NTimeSteps,'string'));
      if isequal(size(NFrames),[1 1]) & (NFrames>=2) & (NFrames<=1000),
        % keep user specified NFrame value
      elseif (NFrames<2),
        NFrames=2;
      elseif (NFrames>=1000),
        NFrames=1000;
      else,
        NFrames=length(get(TimeBar,'XTick'));
      end;
      set(NTimeSteps,'string',num2str(NFrames));
      set(TimeBar,'XTick',((1:NFrames)-1)/(NFrames-1));

      [LineHandle,FrameProps]=UpdateFrameProps(VP,ViewPointProps,NFrames,InterpolMethod,TimeBar,LineHandle);
    case 5, % play
      % create data
      if (length(VP)<2) | ((length(VP)<3) & strcmp(InterpolMethod,'cubic')),
        uiwait(msgbox('Not sufficient reference viewpoints specified.','modal'));
      else,
        % play
        CopyBitmaps=0;
        props={'projection','dataaspectratio', ...
               'cameraposition','cameratarget','cameraviewangle','cameraupvector'};
        if ishandle(PlayAxes),
          CurrentView=get(PlayAxes,props);
          figure(get(PlayAxes,'parent'));
          set(UIFig,'visible','off');
%          if ~isunix,
%            CopyBitmaps=isequal(questdlg('Copy images to clipboard?', ...
%                         'Question', ...
%                         'Yes','No','No'),'Yes');
%          end;
          for f=1:NFrames,
            FrameData={FrameProps(2:4,f) FrameProps(5:7,f) FrameProps(8:10,f) FrameProps(11,f) FrameProps(12:14,f)};
            set(PlayAxes,{'dataaspectratio', ...
             'cameraposition','cameratarget','cameraviewangle','cameraupvector'},FrameData);
            fig=get(PlayAxes,'parent');
            refresh(fig);
            drawnow;
%            if CopyBitmaps,
%              ih=get(fig,'inverthardcopy');
%              shh=get(0,'showhiddenhandles');
%              set(fig,'inverthardcopy','off');
%              set(0,'showhiddenhandles','on');
%              figure(fig);
%              print('-dbitmap');
%              set(0,'showhiddenhandles',shh);
%              set(fig,'inverthardcopy',ih);
%            end;
          end;
          set(UIFig,'visible','on');
          set(PlayAxes,props,CurrentView);
        end;
        drawnow;
      end;
    case 6, % move viewpoint
      SelectedIndex=LocalLineSelect(UIFig,TimeBar,[VP.Time]);
      if ~isempty(SelectedIndex),
        set(VP(SelectedIndex).Handle,'color',[0.4 0.4 0.4]);
        SelectedTime=LocalLineMovement(UIFig,TimeBar);
        if ~isempty(SelectedTime),
          Pos=get(VP(SelectedIndex).Handle,'position');
          Pos(1)=SelectedTime;
          set(VP(SelectedIndex).Handle,'position',Pos,'color',[0 0 0]);
          VP(SelectedIndex).Time=SelectedTime;

          [LineHandle,FrameProps]=UpdateFrameProps(VP,ViewPointProps,NFrames,InterpolMethod,TimeBar,LineHandle);
        else,
          set(VP(SelectedIndex).Handle,'color',[0 0 0]);
        end;
      end;
    case 7, % interpolation method
      InterpolMethod=get(Interpolation,'string');
      InterpolMethod=deblank(InterpolMethod{get(Interpolation,'value')});
      [LineHandle,FrameProps]=UpdateFrameProps(VP,ViewPointProps,NFrames,InterpolMethod,TimeBar,LineHandle);
    case 8, % freeze viewpoint
      if (length(VP)<2) | ((length(VP)<3) & strcmp(InterpolMethod,'cubic')),
      else
        SelectedTime=LocalLineMovement(UIFig,TimeBar);
        if ~isempty(SelectedTime),
          FramePropI=GenerateFrameProps(VP,ViewPointProps,1,InterpolMethod,SelectedTime)';
          NVP=length(ViewPointProps)+1;
          ViewPointProps(NVP).Name=sprintf('freeze %5.2f',SelectedTime);
          ViewPointProps(NVP).Axes=ViewPointProps(1).Axes;
          State=ViewPointProps(1).Props;
          State{2}=FramePropI(2:4);
          State{3}=FramePropI(5:7);
          State{4}=FramePropI(8:10);
          State{5}=FramePropI(11);
          State{6}=FramePropI(12:14);
          ViewPointProps(NVP).Props=State;
          set(VPList,'string',{ViewPointProps.Name},'value',NVP);
          N=length(VP);
          VP(N+1).Handle=text(SelectedTime,0.05, ...
            ['\leftarrow ''',ViewPointProps(NVP).Name,''''], ...
            'rotation',90, ...
            'FontUnits','pixels', ...
            'FontName','Helvetica', ...
            'FontSize',12);
          VP(N+1).Time  =SelectedTime;
          VP(N+1).Index =NVP;

          [LineHandle,FrameProps]=UpdateFrameProps(VP,ViewPointProps,NFrames,InterpolMethod,TimeBar,LineHandle);
        end;
      end;
    end;
  end;
  if ishandle(UIFig),
    set(UIFig,'pointer','arrow');
  end;
end;

if ishandle(UIFig),
  delete(UIFig);
end;

function [LineHandle,FrameProps]=UpdateFrameProps(VP,ViewPointProps,NFrames,InterpolMethod,TimeBar,OldLineHandle)
delete(OldLineHandle);
if (length(VP)<2) | ((length(VP)<3) & strcmp(InterpolMethod,'cubic')),
  FrameProps=[];
  LineHandle=[];
else,
  FrameProps=GenerateFrameProps(VP,ViewPointProps,NFrames,InterpolMethod);
  PlotFrameProps=transpose(FrameProps);
  PlotFrameProps=(PlotFrameProps-ones(size(PlotFrameProps,1),1)*min(PlotFrameProps))./(ones(size(PlotFrameProps,1),1)*(max(max(PlotFrameProps)-min(PlotFrameProps),eps)));
  LineHandle(13)=0;
  for p=1:13,
    switch p,
    case {1,2,3}, % dataaspectratio
      Color=[.7 .4 .7]; % magenta
    case {4,5,6}, % cameraposition
      Color=[.4 .4 .7]; % blue
    case {7,8,9}, % cameratarget
      Color=[.4 .7 .4]; % green
    case {10}, % cameraviewangle
      Color=[.9 .4 .4]; % red
    case {11,12,13}, % cameraupvector
      Color=[.4 .7 .7]; % cyan
    end;
    LineHandle(p)=line(PlotFrameProps(:,1),PlotFrameProps(:,p+1),'parent',TimeBar,'color',Color);
  end;
end;

function FrameProps=GenerateFrameProps(VP,ViewPointProps,NFrames,InterpolationMethod,time);
% extract struct data into cell matrix (except for projection method).
Props=reshape([ViewPointProps([VP.Index]).Props],[6 length(VP)]);
% extract cell data into numeric matrix with time added as first row.
Props=[[VP.Time]; reshape([Props{[2:6],:}],[13 length(VP)])]; % numerical matrix with
Props=transpose(sortrows(transpose(Props))); % make sure that time is monotonic for interpolation
if Props(1,1)>0,
  Props=[Props(:,1) Props];
  Props(1,1)=0;
end;
if Props(1,end)<1,
  Props=[Props Props(:,end)];
  Props(1,end)=1;
end;
if nargin==4
  FrameProps=zeros(14,NFrames);
  FrameProps(1,:)=((1:NFrames)-1)/(NFrames-1);
else
  NFrames=length(time);
  FrameProps=zeros(14,NFrames);
  FrameProps(1,:)=time(:)';
end
for j=2:14,
  FrameProps(j,:)=interp1(Props(1,:),Props(j,:),FrameProps(1,:),InterpolationMethod);
end;
% 'dataaspectratio','cameraposition','cameratarget','cameraviewangle','cameraupvector'
%  2  3   4           5   6   7       8   9  10            11           12   13   14
FrameProps(2:4,:)=max(FrameProps(2:4,:),eps); % dataaspectratiovalues must > 0
FrameProps(11,:)=min(max(FrameProps(11,:),eps),180); % 0 < cameraviewangle <= 180 (well, > 180 is allowed, but seems never useful)


function SelectedTime=LocalLineMovement(UIFig,TimeBar);
wbmf=get(UIFig,'windowbuttonmotionfcn');
set(UIFig,'windowbuttonmotionfcn','md_cameramotion -1');

Point=get(TimeBar,'currentpoint');
XLim=get(TimeBar,'xlim');
YLim=get(TimeBar,'ylim');
Line=line(Point(1,1)*[1 1],YLim, ...
  'color','k', ...
  'parent',TimeBar, ...
  'tag','TMP line', ...
  'erasemode','xor', ...
  'clipping','on', ...
  'buttondownfcn','md_cameramotion 0');
if ishandle(UIFig),
  TmpStack=get(UIFig,'userdata');
  set(UIFig,'userdata',[]);
end;
clicked=0;
while ~clicked,
  if ishandle(UIFig),
    if isempty(get(UIFig,'userdata')),
      waitfor(UIFig,'userdata');
    end;
  end;
  if ishandle(UIFig),
    LocalStack=get(UIFig,'userdata');
    set(UIFig,'userdata',[]);
    if any(LocalStack==0), % clicked
      Point=get(TimeBar,'currentpoint');
      switch get(UIFig,'selectiontype'),
      case 'normal',
        SelectedTime=Point(1,1);
      otherwise,
        SelectedTime=[];
      end;
      clicked=1;
    elseif any(LocalStack==-1), % motion
      Point=get(TimeBar,'currentpoint');
      set(Line,'xdata',Point(1,1)*[1 1]);
    end;
  end;
end;
delete(Line);
if ishandle(UIFig),
  LocalStack=get(UIFig,'userdata');
  set(UIFig,'userdata',TmpStack,'windowbuttonmotionfcn',wbmf);
end;

function SelectedIndex=LocalLineSelect(UIFig,TimeBar,XList);
if isempty(XList),
  SelectedIndex=[];
  return;
end;

wbmf=get(UIFig,'windowbuttonmotionfcn');
set(UIFig,'windowbuttonmotionfcn','md_cameramotion -1');
axbdf=get(TimeBar,'buttondownfcn');
set(TimeBar,'buttondownfcn','md_cameramotion 0');

Point=get(TimeBar,'currentpoint');
XLim=get(TimeBar,'xlim');
YLim=get(TimeBar,'ylim');
[M,XIndex]=min((XList-Point(1,1)).^2);
Line=line(XList(XIndex)*[1 1],YLim, ...
  'color','r', ...
  'parent',TimeBar, ...
  'tag','TMP line', ...
  'erasemode','xor', ...
  'clipping','on', ...
  'buttondownfcn','md_cameramotion 0');
if ishandle(UIFig),
  TmpStack=get(UIFig,'userdata');
  set(UIFig,'userdata',[]);
end;
clicked=0;
while ~clicked,
  if ishandle(UIFig),
    if isempty(get(UIFig,'userdata')),
      waitfor(UIFig,'userdata');
    end;
  end;
  if ishandle(UIFig),
    LocalStack=get(UIFig,'userdata');
    set(UIFig,'userdata',[]);
    if any(LocalStack==0), % clicked
      Point=get(TimeBar,'currentpoint');
      switch get(UIFig,'selectiontype'),
      case 'normal',
        [M,XIndex]=min((XList-Point(1,1)).^2);
        SelectedIndex=XIndex;
      otherwise,
        SelectedIndex=[];
      end;
      clicked=1;
    elseif any(LocalStack==-1), % motion
      Point=get(TimeBar,'currentpoint');
      [M,XIndex]=min((XList-Point(1,1)).^2);
      set(Line,'xdata',XList(XIndex)*[1 1]);
    end;
  end;
end;
delete(Line);
if ishandle(UIFig),
  set(UIFig,'userdata',TmpStack,'windowbuttonmotionfcn',wbmf);
  if ishandle(TimeBar),
    set(TimeBar,'buttondownfcn',axbdf);
  end;
end;